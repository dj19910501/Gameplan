function SetTooltip() { $(".grid_Search").tooltip({ container: "body", placement: "bottom" }), $(".grid_add").tooltip({ container: "body", placement: "bottom" }), $(".honeycombbox-icon-gantt").tooltip({ container: "body", placement: "bottom" }) } function GridHideColumn() { StartDateColIndex = HomeGrid.getColIndexById(StartDateId), EndDateColIndex = HomeGrid.getColIndexById(EndDateId), TaskNameColIndex = HomeGrid.getColIndexById(TaskNameId), PlannedCostColIndex = HomeGrid.getColIndexById(PlannedCostId), AssetTypeColIndex = HomeGrid.getColIndexById(AssetTypeId), TypeColIndex = HomeGrid.getColIndexById(TacticTypeId), OwnerColIndex = HomeGrid.getColIndexById(OwnerId), TargetStageGoalColIndex = HomeGrid.getColIndexById(TargetStageGoalId), MQLColIndex = HomeGrid.getColIndexById(MQLId), RevenueColIndex = HomeGrid.getColIndexById(RevenueId), GridHiddenId = HomeGrid.getColIndexById("id"), ActivitypeHidden = HomeGrid.getColIndexById(ActivityTypeId), MachineNameHidden = HomeGrid.getColIndexById(MachineNameId), HomeGrid.setColumnHidden(GridHiddenId, !0), HomeGrid.setColumnHidden(ActivitypeHidden, !0), HomeGrid.setColumnHidden(MachineNameHidden, !0) } function MoveColumn() { HomeGrid.attachEvent("onAfterCMove", function (e, t) { for (var a = HomeGrid.getColumnCount(), d = [], o = "Common", i = 0; a > i; i++) { o = "Common"; var r = HomeGrid.getColWidth(i), l = HomeGrid.getColumnId(i).toString(); 0 != r && d.push({ AttributeId: l, AttributeType: o, ColumnOrder: parseInt(i) }) } null != d && d.length > 0 && void 0 != d && (d = JSON.stringify(d), $.ajax({ url: urlContent + "ColumnView/SaveColumnView", type: "post", dataType: "json", contentType: "application/json", data: "{'AttributeDetail':" + d + "}", success: function (e) { } })) }) } function LoadAfterParsing() { 0 != eventidonedit && HomeGrid.detachEvent(eventidonedit), eventidonedit = HomeGrid.attachEvent("onEditCell", doOnEditCell), 0 != eventiddrag && HomeGrid.detachEvent(eventiddrag), eventiddrag = HomeGrid.attachEvent("onDrag", doOnDrag), 0 != eventidonscroll && HomeGrid.detachEvent(eventidonscroll), eventidonscroll = HomeGrid.attachEvent("onScroll", function (e, t) { $(".dhx_combo_select").css("display", "none"), $(".dhtmlxcalendar_dhx_skyblue").css("display", "none"), $("#popupType").css("display", "none"), $(".dhx_clist").css("display", "none") }), 0 != eventidonbeforedrag && HomeGrid.detachEvent(eventidonbeforedrag), eventidonbeforedrag = HomeGrid.attachEvent("onBeforeDrag", function (e) { if ("" != e && void 0 != e) { var t = HomeGrid.cells(e, GridHiddenId).getValue(), a = HomeGrid.cells(e, ActivitypeHidden).getValue(); if (t.length > 0) { if (a.toLowerCase() != secTactic) return !1; var d = HomeGrid.cells(e, TaskNameColIndex).getAttribute("locked"); return null != d && "" != d && "1" == d ? !1 : !0 } } }), SetselectedRow(), 0 != editidonOpenEnd && HomeGrid.detachEvent(editidonOpenEnd), editidonOpenEnd = HomeGrid.attachEvent("onOpenEnd", function (e) { SetTooltip(); var t = HomeGrid.getAllSubItems(e); void 0 != t && null != t && "" != t && (t = t.split(","), $.each(t, function (e) { var a = $(HomeGrid.getRowById(t[e])).find("div[id=TacticAdd]"), d = a.attr("altid"), o = ExportSelectedIds.TaskID.indexOf(d); 0 > o ? a.removeClass("honeycombbox-icon-gantt-Active") : a.addClass("honeycombbox-icon-gantt-Active") })) }) } function sort_Owner(e, t, a, d, o) { return e = HomeGrid.cells(d, OwnerColIndex).getText(), t = HomeGrid.cells(o, OwnerColIndex).getText(), "asc" == a ? e > t ? 1 : -1 : e > t ? -1 : 1 } function sort_TacticType(e, t, a, d, o) { var i = HomeGrid.cells(d, ActivitypeHidden).getValue(), r = HomeGrid.cells(o, ActivitypeHidden).getValue(); return i.toLowerCase() == secTactic.toLowerCase() && r.toLowerCase() == secTactic.toLowerCase() ? (e = HomeGrid.cells(d, TypeColIndex).getText(), t = HomeGrid.cells(o, TypeColIndex).getText(), "asc" == a ? e > t ? 1 : -1 : e > t ? -1 : 1) : 0 } function convertNumber(e) { var t = 0, a = parseFloat(e.replace(CurrencySybmol, "")); return t = e.toLowerCase().match(/k/) ? Math.round(1e3 * a) : e.toLowerCase().match(/m/) ? Math.round(1e6 * a) : e.toLowerCase().match(/b/) ? Math.round(1e9 * a) : numb.replace(CurrencySybmol, "") } function ResizeGrid(e) { $("#gridbox").attr("width", e), HomeGrid.setSizes(), LoadAfterParsing() } function doOnDrag(e, t) { var d = "", o = "", i = ""; if ("" != e && "" != t && void 0 != e && void 0 != t) { var r = HomeGrid.cells(e, GridHiddenId).getValue(), l = HomeGrid.cells(t, GridHiddenId).getValue(), n = HomeGrid.getParentId(e), s = HomeGrid.cells(n, GridHiddenId).getValue(); if (s.length > 0 && r.length > 0 && l.length > 0) { if (d = HomeGrid.cells(n, ActivitypeHidden).getValue(), o = HomeGrid.cells(e, ActivitypeHidden).getValue(), i = HomeGrid.cells(t, ActivitypeHidden).getValue(), o.toLowerCase() == secTactic) { if (d == i) { var c = HomeGrid.getParentId(HomeGrid.getParentId(HomeGrid.getParentId(e))), m = HomeGrid.getParentId(HomeGrid.getParentId(t)), p = HomeGrid.getParentId(e); if (m == c) if (p != t) { var u = new Array; u = HomeGrid.getAllSubItems(t).split(","); var C = HomeGrid.cells(e, HomeGrid.getColIndexById("id")).getValue(), I = HomeGrid.cells(t, HomeGrid.getColIndexById("id")).getValue(), g = HomeGrid.cells(e, TaskNameColIndex).getValue(), G = ""; for (a in u) if ("" != u[a].toString() && null != u[a].toString() && (G = HomeGrid.cells(u[a].toString(), TaskNameColIndex).getValue(), G == g)) return alert("Tactic with same title already exist in Targeted Program."), !1; ProgarmName = HomeGrid.cells(t, TaskNameColIndex).getValue(), $("#lipname").html(ProgarmName), $("#hdnsourceid").val(C), $("#hdndestid").val(I), $("#divMovetacticPopup").modal("show"), RemoveAllHoneyCombData() } else ProgarmName = HomeGrid.cells(t, TaskNameColIndex).getValue(), alert("Tactic is already in " + ProgarmName + "."); else alert("Tactic can move only to same plan program."); return !1 } return alert(o + " can not move to " + i), !1 } return alert("Only tactic can Move."), !1 } } } function SaveMoveTactic() { var e = $("#hdnsourceid").val(), t = $("#hdndestid").val(); $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: "tactic", UpdateColumn: "ParentID", UpdateVal: t, Id: parseInt(e) }, dataType: "json", success: function (e) { HomeGrid.saveOpenStates("plangridState"), LoadPlanGrid() } }) } function formatDate(e) { function t(e) { return 10 > e ? "0" + e : "" + e } return e = new Date(e), t(e.getMonth() + 1) + "/" + t(e.getDate()) + "/" + e.getFullYear() } function SetColumUpdatedValue(e, t) { progActVal = HomeGrid.cells(progid, e).getValue(), CampActVal = HomeGrid.cells(campid, e).getValue(), PlanActVal = HomeGrid.cells(planid, e).getValue(), newProgVal = parseInt(ReplaceCC(progActVal.toString())) + parseInt(t), newCampVal = parseInt(ReplaceCC(CampActVal.toString())) + parseInt(t), newPlanVal = parseInt(ReplaceCC(PlanActVal.toString())) + parseInt(t) } function doOnEditCell(e, t, a, d, o) { updatetype = HomeGrid.cells(t, ActivitypeHidden).getValue(); var i, r, l, n = this.cell.cellIndex, s = HomeGrid.getColType(a); if ($(".popover").removeClass("in").addClass("out"), 0 == e) { var c = HomeGrid.cells(t, a).getValue(); c.indexOf("</div>") > -1 && (c.split("</div>").length > 2 ? (value = c.split("</div>")[0] + "</div>" + c.split("</div>")[1], TacticName = c.split("</div>")[2]) : (value = c.split("</div>")[0], TacticName = c.split("</div>")[1])) } else void 0 != d && (TacticName = d); AssignParentIds(t), r = HomeGrid.getColumnId(n, 0); var s = HomeGrid.getColType(a), m = HomeGrid.cells(planid, GridHiddenId).getValue(); if (0 == e) { var p = HomeGrid.cells(t, a).getAttribute("lo"); if (null != p && "" != p && "1" == p) return !1; if ("newRow_0" == t) return !1; if (n == TypeColIndex) if (updatetype.toLowerCase() == secLineItem) { var u = HomeGrid.getCombo(a); u.clear(), lineItemTypefieldOptionList.length > 0 && $.each(lineItemTypefieldOptionList, function (e, t) { u.put(t.id, t.value) }) } else { var u = HomeGrid.getCombo(a); u.clear(), tacticTypefieldOptionList.length > 0 && $.each(tacticTypefieldOptionList, function (e, t) { t.PlanId == m && u.put(t.id, t.value) }) } opencombobox() } if (1 == e) { if ("clist" == s && 1 == $(".dhx_clist input").length) return $(".dhx_clist").css("display", "none"), !1; if (IsDependentTextBox) return !1; if (updatetype.toLowerCase() == secLineItem.toLowerCase() || updatetype.toLowerCase() == secTactic.toLowerCase()) { var C = HomeGrid.cells(t, a).getValue(), I = HomeGrid.cells(t, a).getAttribute("actval"); if (isNaN(parseInt(C))) { var g; g = updatetype.toLowerCase() == secLineItem ? lineItemTypefieldOptionList : tacticTypefieldOptionList; var G = g.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == C.trim().toLowerCase().toString() ? e.id : void 0 }); G.length > 0 && (I = G[0].id) } else I = C; if (1 != a) if ("" == C) $('.dhx_combo_select option[value="' + C + '"]').remove(); else { var H = parseInt(C); isNaN(H) ? ($('.dhx_combo_select option[value="' + C + '"]').remove(), $(".dhx_combo_select").val(I)) : $(".dhx_combo_select").val(I) } } if ($(".dhx_combo_edit").off("keydown"), (r == PlannedCostId || r == TargetStageGoalId) && ($(".dhx_combo_edit").on("keydown", function (e) { GridPriceFormatKeydown(e) }), HomeGrid.editor.obj.onkeypress = function (e) { if (e = e || window.event, e.keyCode >= 47 || 0 == e.keyCode) { var t = this.value; if (t.length > 10) return !1 } }), r == TargetStageGoalId) { var f = HomeGrid.cells(t, TargetStageGoalColIndex).getValue().split(" "); this.editor.obj.value = ReplaceCC(f[0]) } if (r == PlannedCostId) { var v = HomeGrid.cells(t, PlannedCostColIndex).getValue().replace(CurrencySybmol, ""); this.editor.obj.value = ReplaceCC(v.toString()) } } if (2 == e && null != d.trim() && "" != d.trim()) { var y = "", x = htmlDecode(d), T = HomeGrid.cells(t, GridHiddenId).getValue(); if (void 0 != AssetTypeColIndex && (y = HomeGrid.cells(t, AssetTypeColIndex).getValue()), ("" == r || null == r) && (r = HomeGrid.getColumnId(n, 0)), r == TaskNameId && 0 == CheckHtmlTag(d)) return alert(TitleContainHTMLString), !1; if (1 == a && $("div[taskId='" + T + "']").attr("taskname", x), ExportSelectedIds.TaskID.length > 0) { var D = ExportSelectedIds.Title.indexOf(o); D >= 0 && (ExportSelectedIds.Title[D] = x) } if (i = HomeGrid.cells(t, GridHiddenId).getValue(), r == StartDateId) { var h = new Date(HomeGrid.cells(planid, StartDateColIndex).getValue()).getFullYear(), S = HomeGrid.cells(t, EndDateColIndex).getValue(); if (!CheckDateYear(d, h, StartDateCurrentYear)) return !1; if (!validateDateCompare(d, S, DateComapreValidation)) return !1; if (updatetype.toLowerCase() == secProgram.toLowerCase()) { var P = HomeGrid.getUserData(t, "tsdate"); if (!validateDateCompare(d, P, TacticStartDateCompareWithParentStartDate)) return !1 } if (updatetype.toLowerCase() == secCampaign.toLowerCase()) { var V = HomeGrid.getUserData(t, "psdate"), P = HomeGrid.getUserData(t, "tsdate"); if (!validateDateCompare(d, V, ProgramStartDateCompareWithParentStartDate)) return !1; if (!validateDateCompare(d, P, TacticStartDateCompareWithParentStartDate)) return !1 } d = formatDate(d), o = formatDate(o) } if (r == PlannedCostId && (d = d.replace(CurrencySybmol, ""), o = o.replace(CurrencySybmol, "")), r == EndDateId) { var w = new Date(HomeGrid.cells(planid, StartDateColIndex).getValue()).getFullYear(), b = HomeGrid.cells(t, StartDateColIndex).getValue(); if (!CheckDateYear(d, w, EndDateCurrentYear)) return !1; if (!validateDateCompare(b, d, DateComapreValidation)) return !1; if (updatetype.toLowerCase() == secProgram.toLowerCase()) { var L = HomeGrid.getUserData(t, "tedate"); if (!validateDateCompare(L, d, TacticEndDateCompareWithParentEndDate)) return !1 } if (updatetype.toLowerCase() == secCampaign.toLowerCase()) { var k = HomeGrid.getUserData(t, "pedate"), L = HomeGrid.getUserData(t, "tedate"); if (!validateDateCompare(k, d, ProgramEndDateCompareWithParentEndDate)) return !1; if (!validateDateCompare(L, d, TacticEndDateCompareWithParentEndDate)) return !1 } d = formatDate(d), o = formatDate(o) } if (r.toString().trim() == TargetStageGoalId) { var O = o.split(" "); if (d != ReplaceCC(O[0])) { var A = (HomeGrid.getColIndexById("tactictype"), HomeGrid.getUserData(t, "tactictype")); return GetConversionRate(i, A, r, d, t, d, null), !0 } return !1 } if (r == TacticTypeId && updatetype.toLowerCase() == secTactic.toLowerCase()) { var G = tacticTypefieldOptionList.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == o.trim().toLowerCase().toString() ? e.id : void 0 }); G.length > 0 && (o = G[0].id); var A = d, N = $(HomeGrid.getRowById(t)).find("div[id=TacticAdd]"), M = tacticTypefieldOptionList, E = M.filter(function (e) { return e.TacticTypeId == A }); if (null != E && E.length > 0 && (E = E[0].AssetType), void 0 != N && null != N) { var U = N.attr("anchortacticid"); if (null != U && "0" != U && null != y && "" != y && y != E && y.toLowerCase() == AssetTypeAsset.ToLower()) { var R = confirm("Package associated to this tactic will be deleted. Do you wish to continue?"); if (!R) return !1 } } if ("true" == IsMediaCodePermission && null != E && "" != E && y != E && E.toLowerCase() == AssetTypeAsset.ToLower()) { var R = confirm("Media code associated to this tactic will be deleted. Do you wish to continue?"); if (!R) return !1 } if (d != o) return $.ajax({ type: "POST", url: urlContent + "Plan/LoadTacticTypeValue", data: { tacticTypeId: A }, success: function (e) { var a = HomeGrid.cells(t, GridHiddenId).getValue(); if (ExportSelectedIds.TaskID.length > 0) { var o = $("div[taskId='" + a + "']").attr("TacticType"), l = ExportSelectedIds.TacticType.indexOf(o); l >= 0 && "" != e.TacticTypeName && (ExportSelectedIds.TacticType[l] = e.TacticTypeName) } "" != e.TacticTypeName && null != e.TacticTypeName && $("div[taskId='" + a + "']").attr("tactictype", e.TacticTypeName), pcost = e.revenue; var n = e.stageTitle, s = e.projectedStageValue; parseFloat(s) > 0 ? HomeGrid.cells(t, TargetStageGoalColIndex).setValue(FormatCommas(s.toString(), !1) + " " + n) : HomeGrid.cells(t, TargetStageGoalColIndex).setValue(s + " " + n), HomeGrid.setUserData(t, "stage", n), HomeGrid.setUserData(t, "tactictype", A), GetConversionRate(i, A, r, s, t, d, e.stageId) } }), !0 } if (updatetype.toLowerCase() == secLineItem.toLowerCase()) { if (r == TacticTypeId) { var B = lineItemTypefieldOptionList.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == o.trim().toLowerCase().toString() ? e.id : void 0 }); B.length > 0 && (o = B[0].id) } var I = HomeGrid.cells(t, a).getAttribute("actval"); if ((null == I || "" == I) && (I = o), d != o && d != I) { l = d; var _ = HomeGrid.getAllSubItems(tactid); $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: updatetype, UpdateColumn: r.trim(), UpdateVal: l, Id: parseInt(i) }, dataType: "json", success: function (e) { if (HomeGrid.saveOpenStates("plangridState"), null != e.errormsg && "" != e.errormsg.trim()) return alert(e.errormsg.trim()), HomeGrid.cells(t, a).setValue(o), !1; if (r == PlannedCostId) { if (diff = parseInt(e.lineItemCost) - parseInt(ReplaceCC(o)), "" != _ && void 0 != _) for (var i = 0; i < _.split(",").length; i++) "False" != HomeGrid.getUserData(_.split(",")[i], "IsOther") && HomeGrid.cells(_.split(",")[i], PlannedCostColIndex).setValue(CurrencySybmol + (e.tacticCost - e.lineItemCost)); RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(tactid), state0 = ItemIndex, HomeGrid.cells(t, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(d)) } (r == PlannedCostId || r == TaskNameId) && e.linkTacticId > 0 && LoadPlanGrid() } }) } return !0 } if (htmlDecode(d) != o) { if (r != TacticTypeId && r.toString().trim() != TargetStageGoalId) { progid = HomeGrid.getParentId(t), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid); var _ = HomeGrid.getAllSubItems(t); l = d, $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: updatetype, UpdateColumn: r.trim(), UpdateVal: l, Id: parseInt(i) }, dataType: "json", success: function (e) { HomeGrid.saveOpenStates("plangridState"); var l = HomeGrid.cells(t, GridHiddenId).getValue(), n = $("div[taskId='" + l + "']").attr("OwnerName"); if (ExportSelectedIds.TaskID.length > 0) { var s = ExportSelectedIds.OwnerName.indexOf(n); s >= 0 && "" != e.OwnerName && (ExportSelectedIds.OwnerName[s] = e.OwnerName) } if ("" != e.OwnerName && null != e.OwnerName && $("div[taskId='" + l + "']").attr("ownername", e.OwnerName), null != e.errormsg && "" != e.errormsg.trim()) return alert(e.errormsg.trim()), HomeGrid.cells(t, a).setValue(o), !1; if (r == StartDateId) { if (e.IsExtended) return alert("Since the Tactic is link to another Plan, it cannot be extended"), HomeGrid.cells(t, a).setValue(o), !1; var c = HomeGrid.cells(t, EndDateColIndex).getValue(), m = new Date(c).getFullYear(), p = new Date(d).getFullYear(), u = m - p, C = new Date(o).getFullYear(), I = C - p; if (u > 0) { var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), G = g.indexOf("unlink-icon"); if (-1 >= G) { var H = "<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>"; HomeGrid.cells(t, TaskNameColIndex).setValue(H + g), $("div[tacticaddId='" + l + "']").attr("linktacticper", "True") } } else { if (0 == I) return !1; var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), G = g.indexOf("</div>"); G > -1 && (HomeGrid.cells(t, TaskNameColIndex).setValue(g.split("</div>")[1]), $("div[tacticaddId='" + l + "']").attr("linktacticper", "False")) } ComapreDate(updatetype, t, StartDateColIndex, d, r) } if (r == EndDateId) { if (e.IsExtended) return alert("Since the Tactic is link to another Plan, it cannot be extended"), HomeGrid.cells(t, a).setValue(o), !1; var f = HomeGrid.cells(t, StartDateColIndex).getValue(), p = new Date(f).getFullYear(), m = new Date(d).getFullYear(), u = m - p, C = new Date(o).getFullYear(), I = C - p; if (u > 0) { var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), G = g.indexOf("unlink-icon"); if (-1 >= G) { var H = "<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>"; HomeGrid.cells(t, TaskNameColIndex).setValue(H + g), $("div[tacticaddId='" + l + "']").attr("linktacticper", "True") } } else { if (0 == I) return !1; var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), G = g.indexOf("</div>"); G > -1 && (HomeGrid.cells(t, TaskNameColIndex).setValue(g.split("</div>")[1]), $("div[tacticaddId='" + l + "']").attr("linktacticper", "False")) } ComapreDate(updatetype, t, EndDateColIndex, d, r) } if (r == PlannedCostId) { var v = parseInt(ReplaceCC(d).replace(CurrencySybmol, "")), y = parseInt(ReplaceCC(o).replace(CurrencySybmol, "")); if (diff = v - y, SetColumUpdatedValue(PlannedCostColIndex, diff), HomeGrid.cells(progid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newProgVal)), HomeGrid.cells(campid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newCampVal)), HomeGrid.cells(planid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newPlanVal)), HomeGrid.cells(t, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(v)), "" != _ && void 0 != _) for (var x = 0; x < _.split(",").length; x++) "False" != HomeGrid.getUserData(_.split(",")[x], "IsOther") && HomeGrid.cells(_.split(",")[x], PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(v - e.lineItemCost)) } (r == PlannedCostId || r == TaskNameId) && (e.linkTacticId > 0 && LoadPlanGrid(), RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(t), state0 = ItemIndex), r == OwnerId && (n.toString() != e.OwnerName.toString() && "" != e.OwnerName && null != e.OwnerName && 0 != planid && null != planid && void 0 != planid && (GetTacticTypelist(filters.PlanIDs), GetOwnerListForFilter(filters.PlanIDs), SaveLastSetofViews()), CheckPermissionByOwner(t, d, updatetype, parseInt(i))), r == TaskNameId && ($("#txtGlobalSearch").val(""), $("#ExpClose").css("display", "none"), $("#ExpSearch").css("display", "block"), GlobalSearch()) } }) } return a == TaskNameColIndex && (void 0 != value && "undefined" != value && null != value ? HomeGrid.cells(t, a).setValue(value + "</div>" + TacticName) : HomeGrid.cells(t, a).setValue(TacticName)), value = "", $("div[id^='LinkIcon']").each(function () { bootstrapetitle($(this), "This tactic is linked to <U>" + htmlDecode($(this).attr("linkedplanname") + "</U>"), "tipsy-innerWhite") }), !0 } return a == TaskNameColIndex && (void 0 != value && "undefined" != value && null != value ? HomeGrid.cells(t, a).setValue(value + "</div>" + TacticName) : HomeGrid.cells(t, a).setValue(TacticName)), value = "", $("div[id^='LinkIcon']").each(function () { bootstrapetitle($(this), "This tactic is linked to <U>" + htmlDecode($(this).attr("linkedplanname") + "</U>"), "tipsy-innerWhite") }), !0 } } function AssignParentIds(e) { updatetype.toLowerCase() == secTactic ? (tactid = e, progid = HomeGrid.getParentId(e), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secLineItem ? (tactid = HomeGrid.getParentId(e), progid = HomeGrid.getParentId(tactid), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secProgram ? (campid = HomeGrid.getParentId(e), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secCampaign ? planid = HomeGrid.getParentId(e) : updatetype.toLowerCase() == secPlan && (planid = e) } function CheckPermissionByOwner(e, t, a, d) { $.ajax({ type: "POST", url: urlContent + "Plan/CheckPermissionByOwner", data: { NewOwnerID: t, UpdateType: a, updatedid: parseInt(d) }, dataType: "json", success: function (t) { "1" == t.IsLocked && (HomeGrid.cells(e, TaskNameColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, StartDateColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, EndDateColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, PlannedCostColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, AssetTypeColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, TypeColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, OwnerColIndex).setAttribute("locked", t.IsLocked), HomeGrid.cells(e, TargetStageGoalColIndex).setAttribute("locked", t.IsLocked), HomeGrid.setCellTextStyle(e, TaskNameColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, StartDateColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, EndDateColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, PlannedCostColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, AssetTypeColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, TypeColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, OwnerColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, TargetStageGoalColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, MQLColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, RevenueColIndex, t.cellTextColor)) }, error: function (e) { } }) } function GetConversionRate(e, t, a, d, o, i, r) { var l = !0, n = 0, s = 0; progid = HomeGrid.getParentId(o), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid), n = d, $.ajax({ type: "POST", url: urlContent + "Plan/CalculateMQL", data: { tactictid: parseInt(e), TacticTypeId: parseInt(t), projectedStageValue: n, RedirectType: l, isTacticTypeChange: !0, StageID: r }, success: function (t) { if (void 0 != MQLColIndex && null != MQLColIndex) { var d = HomeGrid.cells(o, MQLColIndex).getValue(), r = 0; if (null != t.revenue && (s = t.revenue), "N/A" == t.mql) HomeGrid.setCellExcellType(o, MQLColIndex, "ro"), HomeGrid.cells(o, MQLColIndex).setValue(t.mql), diff = parseInt(-d), SetColumUpdatedValue(MQLColIndex, diff); else { null != t.mql && (r = t.mql); var l = r.toString(); HomeGrid.cells(o, MQLColIndex).setValue(numberWithCommas(l)), diff = parseInt(r) - parseInt(ReplaceCC(d.toString())), SetColumUpdatedValue(MQLColIndex, diff) } HomeGrid.cells(progid, MQLColIndex).setValue(numberWithCommas(newProgVal), !1), HomeGrid.cells(campid, MQLColIndex).setValue(numberWithCommas(newCampVal), !1), HomeGrid.cells(planid, MQLColIndex).setValue(numberWithCommas(newPlanVal), !1); var n = HomeGrid.cells(o, RevenueColIndex).getValue(); HomeGrid.cells(o, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(parseInt(s).toString())), diff = parseInt(s) - parseInt(ReplaceCC(n.toString()).replace(CurrencySybmol, "")), SetColumUpdatedValue(RevenueColIndex, diff), HomeGrid.cells(progid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newProgVal)), HomeGrid.cells(campid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newCampVal)), HomeGrid.cells(planid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newPlanVal)) } $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: "Tactic", UpdateColumn: a.trim(), UpdateVal: i, Id: parseInt(e) }, dataType: "json", success: function (e) { if (HomeGrid.saveOpenStates("plangridState"), a == TargetStageGoalId) { var t = HomeGrid.getUserData(o, "stage"); HomeGrid.cells(o, TargetStageGoalColIndex).setValue(FormatCommas(i.toString()) + " " + t), RefershPlanHeaderCalc() } if (a == TacticTypeId) { HomeGrid.cells(planid, GridHiddenId).getValue(); $("#ulTacticType li input[type=checkbox]").each(function () { var e = $(this).attr("id"); "checked" != $(this).attr("checked") && filters.tempTacticTypeIds.push(e.replace("CbTT", "")) }), GetTacticTypelist(filters.PlanIDs, !1), SaveLastSetofViews(); var d = HomeGrid.getAllSubItems(o), r = 0; null != e.TacticCost && "undefined" != e.TacticCost && (r = e.TacticCost), PlannedCostColIndex = HomeGrid.getColIndexById(PlannedCostId); var l = HomeGrid.cells(o, PlannedCostColIndex).getValue(); diff = parseInt(r) - parseInt(ReplaceCC(l.toString())), SetColumUpdatedValue(PlannedCostColIndex, diff), HomeGrid.cells(progid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newProgVal)), HomeGrid.cells(campid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newCampVal)), HomeGrid.cells(planid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newPlanVal)), HomeGrid.cells(o, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(r)); for (var n = 0; n < d.split(",").length; n++) "False" != HomeGrid.getUserData(d.split(",")[n], "IsOther") && HomeGrid.cells(d.split(",")[n], PlannedCostColIndex).setValue(CurrencySybmol + (r - e.lineItemCost)); e.linkTacticId > 0 && LoadPlanGrid(), RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(o), state0 = ItemIndex } } }) } }) } function ComapreDate(e, t, a, d, o) { var i = new Date(formatDate(d)); if (e.toLowerCase() == secTactic) { progid = HomeGrid.getParentId(t), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid); var r = HomeGrid.cells(progid, GridHiddenId).getValue(), l = HomeGrid.cells(campid, GridHiddenId).getValue(), n = new Date(formatDate(HomeGrid.cells(progid, a).getValue())), s = new Date(formatDate(HomeGrid.cells(campid, a).getValue())), c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); if (o == StartDateId) { n > i && HomeGrid.cells(progid, a).setValue(formatDate(d)), s > i && HomeGrid.cells(campid, a).setValue(formatDate(d)), c > i && HomeGrid.cells(planid, a).setValue(formatDate(d)); var m = HomeGrid.getUserData(progid, "tsdate"), p = HomeGrid.getUserData(campid, "psdate"); $.ajax({ type: "POST", url: urlContent + "GetMinMaxDate", data: { Parentid: parseInt(l), UpdateType: "Tactic", updatedid: parseInt(r) }, dataType: "json", success: function (e) { formatDate(e.TactMinDate) != formatDate(m) && HomeGrid.setUserData(progid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.TactMinDate) != formatDate(m) && HomeGrid.setUserData(campid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.ProgMinDate) != formatDate(p) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMinDate)) }, error: function (e) { } }) } else if (o == EndDateId) { i > n && HomeGrid.cells(progid, a).setValue(formatDate(d)), i > s && HomeGrid.cells(campid, a).setValue(formatDate(d)), i > c && HomeGrid.cells(planid, a).setValue(formatDate(d)); var u = HomeGrid.getUserData(progid, "tedate"), C = HomeGrid.getUserData(campid, "pedate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(l), UpdateType: "Tactic", updatedid: parseInt(r) }, dataType: "json", success: function (e) { formatDate(e.TactMaxDate) != formatDate(u) && HomeGrid.setUserData(progid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.TactMaxDate) != formatDate(u) && HomeGrid.setUserData(campid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.ProgMaxDate) != formatDate(C) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMaxDate)) } }) } } else if (e.ToLower() == secProgram) { campid = HomeGrid.getParentId(t), planid = HomeGrid.getParentId(campid); var r = HomeGrid.cells(t, 3).getValue(), l = HomeGrid.cells(campid, 3).getValue(), s = new Date(formatDate(HomeGrid.cells(campid, a).getValue())), c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); if (o == StartDateId) { s > i && HomeGrid.cells(campid, a).setValue(formatDate(d)), c > i && HomeGrid.cells(planid, a).setValue(formatDate(d)); var p = HomeGrid.getUserData(campid, "psdate"), I = HomeGrid.getUserData(campid, "tsdate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(l), UpdateType: "Program", updatedid: parseInt(r) }, dataType: "json", success: function (e) { formatDate(e.TactMinDate) != formatDate(I) && HomeGrid.setUserData(campid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.ProgMinDate) != formatDate(p) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMinDate)) }, error: function (e) { } }) } else if (o == EndDateId) { i > s && HomeGrid.cells(campid, a).setValue(formatDate(d)), i > c && HomeGrid.cells(planid, a).setValue(formatDate(d)); var C = HomeGrid.getUserData(campid, "pedate"), g = HomeGrid.getUserData(campid, "tedate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(l), UpdateType: "Program", updatedid: parseInt(r) }, dataType: "json", success: function (e) { formatDate(e.TactMaxDate) != formatDate(g) && HomeGrid.setUserData(campid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.ProgMaxDate) != formatDate(C) && HomeGrid.setUserData(campid, "pedate", formatDate(e.ProgMaxDate)) }, error: function (e) { } }) } } else if (e.toLowerCase() == secCampaign) { planid = HomeGrid.getParentId(t); var c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); o == StartDateId ? c > i && HomeGrid.cells(planid, a).setValue(formatDate(d)) : o == EndDateId && i > c && HomeGrid.cells(planid, a).setValue(formatDate(d)) } } function ExportToExcel(e) { var t = [], a = [], d = HomeGrid.getColIndexById("Add"), o = HomeGrid.getColIndexById("ColourCode"), r = (HomeGrid.getColIndexById("MachineName"), HomeGrid.getColIndexById("Type")), l = HomeGrid.getColIndexById("ActivityId"); "budget" == gridname.toLowerCase() && (d = HomeGrid.getColIndexById("Buttons"), o = HomeGrid.getColIndexById("colourcode")), e && HomeGrid.forEachRow(function (e) { var o = HomeGrid.cells(e, d).getValue(); o.indexOf("honeycombbox-icon-gantt-Active") <= -1 ? (HomeGrid.setRowHidden(e, !0), t.push(e)) : a.push(e) }), HomeGrid.saveOpenStates("plangridState"), HomeGrid.expandAll(); HomeGrid.getColIndexById("ActivityId"); if ("home" == gridname.toLowerCase()) HomeGrid.setColumnHidden(d, !0), HomeGrid.setColumnHidden(o, !0); else { HomeGrid.setColumnHidden(l, !1), HomeGrid.setColumnHidden(r, !1); var n = ColumnIds.split(","), s = ""; for (i = 0; i < n.length; ++i) s += 0 == i ? "MachineName" == n[i] || "LineItemTypeId" == n[i] || "Buttons" == n[i] || "colourcode" == n[i] ? "false" : "true" : "MachineName" == n[i] || "LineItemTypeId" == n[i] || "Buttons" == n[i] || "colourcode" == n[i] ? ",false" : ",true"; HomeGrid.setSerializableColumns(s) } HomeGrid.toExcel("https://dhtmlxgrid.appspot.com/export/excel"), HomeGrid.collapseAll(), HomeGrid.loadOpenStates("plangridState"), "home" == gridname.toLowerCase() ? (HomeGrid.setColumnHidden(d, !1), HomeGrid.setColumnHidden(o, !1)) : (HomeGrid.setColumnHidden(l, !0), HomeGrid.setColumnHidden(r, !0)), void 0 != t && $.each(t, function (e) { HomeGrid.setRowHidden(t[e], !1) }), void 0 != a && $.each(a, function (e) { var t = HomeGrid.cells(a[e], d).getValue(); t.indexOf("honeycombbox-icon-gantt-Active") <= -1 && HomeGrid.cells(a[e], d).setValue(t.replace("honeycombbox-icon-gantt", "honeycombbox-icon-gantt honeycombbox-icon-gantt-Active")) }) } function opencombobox() { var e = $(".rowselected td").offset().top, t = $(".objbox").height(), a = e - t; a > 200 ? $("body").addClass("reverse") : $("body").removeClass("reverse") } var eventiddrag = 0, eventidonedit = 0, eventidonbeforedrag = 0, eventidonscroll = 0, editidonOpenEnd = 0, updatetype = 0, progid = 0, campid = 0, planid = 0, tactid = 0, progActVal = 0, CampActVal = 0, PlanActVal = 0, TactActVal = 0, diff = 0, newProgVal = 0, newCampVal = 0, newPlanVal = 0, newTactVal = 0, value, TacticName, ExportToCsv = !1, IsDependentTextBox = !1, NodatawithfilterGrid = '<div id="NodatawithfilterGrid" style="display:none;"><span class="pull-left margin_t30 bold " style="margin-left: 20px;">No data exists. Please check the filters or grouping applied.</span><br/></div>', $doc = $(document); $doc.click(function () { $("#popupType").css("display", "none"), $("#dhx_combo_select").css("display", "none"), $(".dhx_clist").css("display", "none") }), $(document).mouseup(function (e) { $("#popupType").css("display", "none"), $("#dhx_combo_select").css("display", "none") }), $(".grid_ver_scroll").scroll(function () { $("#popupType").css("display", "none"), $(".dhx_clist").css("display", "none") });