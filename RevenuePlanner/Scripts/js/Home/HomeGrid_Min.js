function SetTooltip() { SetTooltipFirstTime && (SetTooltipFirstTime = !1, $(document.body).tooltip({ container: "body", placement: "bottom", selector: ".grid_Search,.grid_add,.honeycombbox-icon-gantt" })) } function GridHideColumn() { StartDateColIndex = HomeGrid.getColIndexById(StartDateId), EndDateColIndex = HomeGrid.getColIndexById(EndDateId), TaskNameColIndex = HomeGrid.getColIndexById(TaskNameId), PlannedCostColIndex = HomeGrid.getColIndexById(PlannedCostId), AssetTypeColIndex = HomeGrid.getColIndexById(AssetTypeId), TypeColIndex = HomeGrid.getColIndexById(TacticTypeId), OwnerColIndex = HomeGrid.getColIndexById(OwnerId), TargetStageGoalColIndex = HomeGrid.getColIndexById(TargetStageGoalId), MQLColIndex = HomeGrid.getColIndexById(MQLId), RevenueColIndex = HomeGrid.getColIndexById(RevenueId), GridHiddenId = HomeGrid.getColIndexById("id"), ActivitypeHidden = HomeGrid.getColIndexById(ActivityTypeId), MachineNameHidden = HomeGrid.getColIndexById(MachineNameId), HomeGrid.setColumnHidden(GridHiddenId, !0), HomeGrid.setColumnHidden(ActivitypeHidden, !0), HomeGrid.setColumnHidden(MachineNameHidden, !0) } function MoveColumn() { HomeGrid.attachEvent("onAfterCMove", function (e, t) { for (var a = HomeGrid.getColumnCount(), o = [], i = "Common", r = 0; a > r; r++) { i = "Common"; var l = HomeGrid.getColWidth(r), d = HomeGrid.getColumnId(r).toString(); 0 != l && o.push({ AttributeId: d, AttributeType: i, ColumnOrder: parseInt(r) }) } null != o && o.length > 0 && void 0 != o && (o = JSON.stringify(o), $.ajax({ url: urlContent + "ColumnView/SaveColumnView", type: "post", dataType: "json", contentType: "application/json", data: "{'AttributeDetail':" + o + "}", success: function (e) { } })) }) } function LoadAfterParsing() { 0 != eventidonedit && HomeGrid.detachEvent(eventidonedit), eventidonedit = HomeGrid.attachEvent("onEditCell", doOnEditCell), 0 != eventiddrag && HomeGrid.detachEvent(eventiddrag), eventiddrag = HomeGrid.attachEvent("onDrag", doOnDrag), 0 != eventidonscroll && HomeGrid.detachEvent(eventidonscroll), eventidonscroll = HomeGrid.attachEvent("onScroll", function (e, t) { $(".dhx_combo_select").css("display", "none"), $(".dhtmlxcalendar_dhx_skyblue").css("display", "none"), $("#popupType").css("display", "none"), $(".dhx_clist").css("display", "none") }), 0 != eventidonbeforedrag && HomeGrid.detachEvent(eventidonbeforedrag), eventidonbeforedrag = HomeGrid.attachEvent("onBeforeDrag", function (e) { if ("" != e && void 0 != e) { var t = HomeGrid.cells(e, GridHiddenId).getValue(), a = HomeGrid.cells(e, ActivitypeHidden).getValue(); if (t.length > 0) { if (a.toLowerCase() != secTactic) return !1; var o = HomeGrid.cells(e, TaskNameColIndex).getAttribute("lo"); return null != o && "" != o && "1" == o ? !1 : !0 } } }), SetselectedRow() } function sort_Owner(e, t, a, o, i) { return e = HomeGrid.cells(o, OwnerColIndex).getText(), t = HomeGrid.cells(i, OwnerColIndex).getText(), "asc" == a ? e > t ? 1 : -1 : e > t ? -1 : 1 } function sort_TacticType(e, t, a, o, i) { var r = HomeGrid.cells(o, ActivitypeHidden).getValue(), l = HomeGrid.cells(i, ActivitypeHidden).getValue(); return r.toLowerCase() == secTactic.toLowerCase() && l.toLowerCase() == secTactic.toLowerCase() ? (e = HomeGrid.cells(o, TypeColIndex).getText(), t = HomeGrid.cells(i, TypeColIndex).getText(), "asc" == a ? e > t ? 1 : -1 : e > t ? -1 : 1) : 0 } function convertNumber(e) { var t = 0, a = parseFloat(e.replace(CurrencySybmol, "")); return t = e.toLowerCase().match(/k/) ? Math.round(1e3 * a) : e.toLowerCase().match(/m/) ? Math.round(1e6 * a) : e.toLowerCase().match(/b/) ? Math.round(1e9 * a) : numb.replace(CurrencySybmol, "") } function ResizeGrid(e) { $("#gridbox").attr("width", e), HomeGrid.setSizes(), LoadAfterParsing() } function doOnDrag(e, t) { var o = "", i = "", r = ""; if ("" != e && "" != t && void 0 != e && void 0 != t) { var l = HomeGrid.cells(e, GridHiddenId).getValue(), d = HomeGrid.cells(t, GridHiddenId).getValue(), n = HomeGrid.getParentId(e), s = HomeGrid.cells(n, GridHiddenId).getValue(); if (s.length > 0 && l.length > 0 && d.length > 0) { if (o = HomeGrid.cells(n, ActivitypeHidden).getValue(), i = HomeGrid.cells(e, ActivitypeHidden).getValue(), r = HomeGrid.cells(t, ActivitypeHidden).getValue(), i.toLowerCase() == secTactic) { if (o == r) { var c = HomeGrid.getParentId(HomeGrid.getParentId(HomeGrid.getParentId(e))), m = HomeGrid.getParentId(HomeGrid.getParentId(t)), u = HomeGrid.getParentId(e); if (m == c) if (u != t) { var p = new Array; p = HomeGrid.getAllSubItems(t).split(","); var C = HomeGrid.cells(e, HomeGrid.getColIndexById("id")).getValue(), I = HomeGrid.cells(t, HomeGrid.getColIndexById("id")).getValue(), g = HomeGrid.cells(e, TaskNameColIndex).getValue(), f = ""; for (a in p) if ("" != p[a].toString() && null != p[a].toString() && (f = HomeGrid.cells(p[a].toString(), TaskNameColIndex).getValue(), f == g)) return alert("Tactic with same title already exist in Targeted Program."), !1; ProgarmName = HomeGrid.cells(t, TaskNameColIndex).getValue(), $("#lipname").html(ProgarmName), $("#hdnsourceid").val(C), $("#hdndestid").val(I), $("#divMovetacticPopup").modal("show"), RemoveAllHoneyCombData() } else ProgarmName = HomeGrid.cells(t, TaskNameColIndex).getValue(), alert("Tactic is already in " + ProgarmName + "."); else alert("Tactic can move only to same plan program."); return !1 } return alert(i + " can not move to " + r), !1 } return alert("Only tactic can Move."), !1 } } } function SaveMoveTactic() { var e = $("#hdnsourceid").val(), t = $("#hdndestid").val(); $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: "tactic", UpdateColumn: "ParentID", UpdateVal: t, Id: parseInt(e) }, dataType: "json", success: function (e) { HomeGrid.saveOpenStates("plangridState"), LoadPlanGrid() } }) } function formatDate(e) { function t(e) { return 10 > e ? "0" + e : "" + e } return e = new Date(e), t(e.getMonth() + 1) + "/" + t(e.getDate()) + "/" + e.getFullYear() } function SetColumUpdatedValue(e, t) { progActVal = HomeGrid.cells(progid, e).getValue(), CampActVal = HomeGrid.cells(campid, e).getValue(), PlanActVal = HomeGrid.cells(planid, e).getValue(), newProgVal = parseFloat(ReplaceCC(progActVal.toString())) + parseFloat(t), newCampVal = parseFloat(ReplaceCC(CampActVal.toString())) + parseFloat(t), newPlanVal = parseFloat(ReplaceCC(PlanActVal.toString())) + parseFloat(t) } function doOnEditCell(e, t, a, o, i) { updatetype = HomeGrid.cells(t, ActivitypeHidden).getValue(); var r, l, d, n = this.cell.cellIndex, s = HomeGrid.getColType(a); if ($(".popover").removeClass("in").addClass("out"), "-" == o && (o = i, HomeGrid.cells(t, a).setValue(o)), 0 == e) { var c = HomeGrid.cells(t, a).getValue(); c.indexOf("</div>") > -1 && (c.split("</div>").length > 2 ? (value = c.split("</div>")[0] + "</div>" + c.split("</div>")[1], TacticName = c.split("</div>")[2]) : (value = c.split("</div>")[0], TacticName = c.split("</div>")[1])) } else void 0 != o && (TacticName = o); AssignParentIds(t), l = HomeGrid.getColumnId(n, 0); var s = HomeGrid.getColType(a), m = HomeGrid.cells(planid, GridHiddenId).getValue(); if (0 == e) { var u = HomeGrid.cells(t, a).getAttribute("lo"); if (null != u && "" != u && "1" == u) return !1; if ("newRow_0" == t) return !1; if (n == TypeColIndex) if (updatetype.toLowerCase() == secLineItem) { var p = HomeGrid.getCombo(a); p.clear(), lineItemTypefieldOptionList.length > 0 && $.each(lineItemTypefieldOptionList, function (e, t) { t.PlanId == m && p.put(t.id, t.value) }) } else { var p = HomeGrid.getCombo(a); p.clear(), tacticTypefieldOptionList.length > 0 && $.each(tacticTypefieldOptionList, function (e, t) { t.PlanId == m && p.put(t.id, t.value) }) } var C = HomeGrid.getColumnId(a); if (C.indexOf("custom_") >= 0) { var I = C.replace("custom_", ""), g = I.split(":")[0], f = HomeGrid.cells(t, GridHiddenId).getValue(); if (GetCustomfieldOptionlist(g, f, a, s), IsDependentTextBox) return !1 } opencombobox() } if (1 == e) { if ("clist" == s && 1 == $(".dhx_clist input").length) return $(".dhx_clist").css("display", "none"), !1; if (IsDependentTextBox) return !1; if (updatetype.toLowerCase() == secLineItem.toLowerCase() || updatetype.toLowerCase() == secTactic.toLowerCase()) { var G = HomeGrid.cells(t, a).getValue(), H = HomeGrid.cells(t, a).getAttribute("actval"); if (isNaN(parseInt(G))) { var v; v = updatetype.toLowerCase() == secLineItem ? lineItemTypefieldOptionList : tacticTypefieldOptionList; var x = v.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == G.trim().toLowerCase().toString() ? e.id : void 0 }); x.length > 0 && (H = x[0].id) } else H = G; if (1 != a) if ("" == G) $('.dhx_combo_select option[value="' + G + '"]').remove(); else { var y = parseInt(G); isNaN(y) ? ($('.dhx_combo_select option[value="' + G + '"]').remove(), $(".dhx_combo_select").val(H)) : $(".dhx_combo_select").val(H) } } if ($(".dhx_combo_edit").off("keydown"), l == TargetStageGoalId) { $(".dhx_combo_edit").on("keydown", function (e) { GridPriceFormatKeydown(e, this) }), HomeGrid.editor.obj.onkeypress = function (e) { if (e = e || window.event, e.keyCode >= 47 || 0 == e.keyCode) { var t = this.value; if (t.length > 10) return !1 } }; var T = HomeGrid.cells(t, TargetStageGoalColIndex).getValue().split(" "); this.editor.obj.value = ReplaceCC(T[0].toString()) } if (l == PlannedCostId) { $(".dhx_combo_edit").on("keydown", function (e) { GridPriceFormatKeydown(e, this, !0) }), HomeGrid.editor.obj.onkeypress = function (e) { if (e = e || window.event, e.keyCode >= 47 || 0 == e.keyCode) { var t = this.value; if (t.length > 10) return !1 } }; var D = HomeGrid.cells(t, PlannedCostColIndex).getValue().replace(CurrencySybmol, ""); this.editor.obj.value = ReplaceCC(D.toString()) } } if (2 == e && (null != o.trim() && "" != o.trim() || l.toString().trim().indexOf("custom_") >= 0)) { var h = "", S = htmlDecode(o), P = HomeGrid.cells(t, GridHiddenId).getValue(); if (void 0 != AssetTypeColIndex && (h = HomeGrid.cells(t, AssetTypeColIndex).getValue()), ("" == l || null == l) && (l = HomeGrid.getColumnId(n, 0)), l == TaskNameId && 0 == CheckHtmlTag(o)) return alert(TitleContainHTMLString), !1; if (1 == a && $("div[taskId='" + P + "']").attr("taskname", S), ExportSelectedIds.TaskID.length > 0) { var V = ExportSelectedIds.Title.indexOf(i); V >= 0 && (ExportSelectedIds.Title[V] = S) } if (r = HomeGrid.cells(t, GridHiddenId).getValue(), l == StartDateId) { var w = new Date(HomeGrid.cells(planid, StartDateColIndex).getValue()).getFullYear(), b = HomeGrid.cells(t, EndDateColIndex).getValue(); if (!CheckDateYear(o, w, StartDateCurrentYear)) return !1; if (!validateDateCompare(o, b, DateComapreValidation)) return !1; if (updatetype.toLowerCase() == secProgram.toLowerCase()) { var L = HomeGrid.getUserData(t, "tsdate"); if (!validateDateCompare(o, L, TacticStartDateCompareWithParentStartDate)) return !1 } if (updatetype.toLowerCase() == secCampaign.toLowerCase()) { var O = HomeGrid.getUserData(t, "psdate"), L = HomeGrid.getUserData(t, "tsdate"); if (!validateDateCompare(o, O, ProgramStartDateCompareWithParentStartDate)) return !1; if (!validateDateCompare(o, L, TacticStartDateCompareWithParentStartDate)) return !1 } o = formatDate(o), i = formatDate(i) } if (l == PlannedCostId && (o = o.replace(CurrencySybmol, ""), i = i.replace(CurrencySybmol, ""), o = parseFloat(o)), l == EndDateId) { var k = new Date(HomeGrid.cells(planid, StartDateColIndex).getValue()).getFullYear(), N = HomeGrid.cells(t, StartDateColIndex).getValue(); if (!CheckDateYear(o, k, EndDateCurrentYear)) return !1; if (!validateDateCompare(N, o, DateComapreValidation)) return !1; if (updatetype.toLowerCase() == secProgram.toLowerCase()) { var A = HomeGrid.getUserData(t, "tedate"); if (!validateDateCompare(A, o, TacticEndDateCompareWithParentEndDate)) return !1 } if (updatetype.toLowerCase() == secCampaign.toLowerCase()) { var E = HomeGrid.getUserData(t, "pedate"), A = HomeGrid.getUserData(t, "tedate"); if (!validateDateCompare(E, o, ProgramEndDateCompareWithParentEndDate)) return !1; if (!validateDateCompare(A, o, TacticEndDateCompareWithParentEndDate)) return !1 } o = formatDate(o), i = formatDate(i) } if (l.toString().trim() == TargetStageGoalId) { var _ = i.split(" "); if (o != ReplaceCC(_[0].toString())) { var M = (HomeGrid.getColIndexById("tactictype"), HomeGrid.getUserData(t, "tactictype")); return GetConversionRate(r, M, l, o, t, o, null), !0 } return !1 } if (l.toString().trim().indexOf("custom_") >= 0) { var C = l, I = C.replace("custom_", ""), g = I.split(":")[0]; if (null == o || void 0 == o || o == i) return !1; var F = o.split(","); if (_customFieldValues = [], F.length > 0) { var U = F.length, R = parseInt(100 / U), B = parseInt(100 % U), j = U - B, W = 0; $.each(F, function (e) { W += 1, j >= W && j != _customFieldValues.length - 1 ? weight = R : weight = R + 1, _customFieldValues.push({ customFieldId: g, Value: htmlEncode(F[e]), Weight: weight, CostWeight: weight }) }) } _customFieldValues = JSON.stringify(_customFieldValues) } if (l == TacticTypeId && updatetype.toLowerCase() == secTactic.toLowerCase()) { var x = tacticTypefieldOptionList.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == i.trim().toLowerCase().toString() ? e.id : void 0 }); x.length > 0 && (i = x[0].id); var M = o, Q = $(HomeGrid.getRowById(t)).find("div.honeycombbox-icon-gantt"), Y = tacticTypefieldOptionList, q = Y.filter(function (e) { return e.id == M }); if (null != q && q.length > 0 && (q = q[0].Type), void 0 != Q && null != Q) { var z = Q.attr("anchortacticid"); if (null != z && "0" != z && null != h && "" != h && h != q && h.toLowerCase() == AssetTypeAsset.toLowerCase()) { var J = confirm("Package associated to this tactic will be deleted. Do you wish to continue?"); if (!J) return !1 } } if ("true" == IsMediaCodePermission && null != q && "" != q && h != q && q.toLowerCase() == AssetTypeAsset.toLowerCase()) { var J = confirm("Media code associated to this tactic will be deleted. Do you wish to continue?"); if (!J) return !1 } if (o != i) return $.ajax({ type: "POST", url: urlContent + "Plan/LoadTacticTypeValue", data: { tacticTypeId: M }, success: function (e) { var a = HomeGrid.cells(t, GridHiddenId).getValue(); if (ExportSelectedIds.TaskID.length > 0) { var i = $("div[taskId='" + a + "']").attr("TacticType"), d = ExportSelectedIds.TacticType.indexOf(i); d >= 0 && "" != e.TacticTypeName && (ExportSelectedIds.TacticType[d] = e.TacticTypeName) } "" != e.TacticTypeName && null != e.TacticTypeName && ($("div[taskId='" + a + "']").attr("tactictype", e.TacticTypeName), $("div[taskId='" + a + "']").attr("roitactictype", q)), pcost = e.revenue; var n = e.stageTitle, s = e.projectedStageValue; parseFloat(s) > 0 ? HomeGrid.cells(t, TargetStageGoalColIndex).setValue(FormatCommas(s.toString(), !1) + " " + n) : HomeGrid.cells(t, TargetStageGoalColIndex).setValue(s + " " + n), HomeGrid.setUserData(t, "stage", n), HomeGrid.setUserData(t, "tactictype", M), GetConversionRate(r, M, l, s, t, o, e.stageId) } }), !0 } if (updatetype.toLowerCase() == secLineItem.toLowerCase()) { if (l == TacticTypeId) { var K = lineItemTypefieldOptionList.filter(function (e) { return e.PlanId == m && e.value.trim().toLowerCase().toString() == i.trim().toLowerCase().toString() ? e.id : void 0 }); K.length > 0 && (i = K[0].id) } var H = HomeGrid.cells(t, a).getAttribute("actval"); if ((null == H || "" == H) && (H = i), o != i && o != H) { d = o; var X = HomeGrid.getAllSubItems(tactid); $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: updatetype, UpdateColumn: l.trim(), UpdateVal: d, Id: parseInt(r), CustomFieldInput: _customFieldValues, ColumnType: s.toString(), oValue: i.toString() }, dataType: "json", success: function (e) { if (HomeGrid.saveOpenStates("plangridState"), null != e.errormsg && "" != e.errormsg.trim()) return alert(e.errormsg.trim()), HomeGrid.cells(t, a).setValue(i), !1; if (l == PlannedCostId) { diff = parseInt(e.lineItemCost) - parseInt(ReplaceCC(i.toString())); for (var r = 0; r < X.split(",").length; r++) "False" != HomeGrid.getUserData(X.split(",")[r], "IsOther") && HomeGrid.cells(X.split(",")[r], PlannedCostColIndex).setValue(CurrencySybmol + number_format(e.tacticCost - e.lineItemCost, 2, ".", ",")); RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(tactid), state0 = ItemIndex, HomeGrid.cells(t, PlannedCostColIndex).setValue(CurrencySybmol + number_format(o, 2, ".", ",")) } if ((l == PlannedCostId || l == TaskNameId) && e.linkTacticId > 0 && LoadPlanGrid(), l.toString().trim().indexOf("custom_") >= 0) { var d = e.DependentCustomfield; if (null != d && void 0 != d) for (var r = 0; r < d.length; r++) { var n = HomeGrid.getColIndexById(d[r].CustomFieldId); void 0 != n && "" != n && HomeGrid.cells(t, n).setValue(d[r].OptionValue) } } } }) } else l == PlannedCostId && HomeGrid.cells(t, PlannedCostColIndex).setValue(CurrencySybmol + number_format(o, 2, ".", ",")); return !0 } if (htmlDecode(o) != i) { if (l != TacticTypeId && l.toString().trim() != TargetStageGoalId) { progid = HomeGrid.getParentId(t), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid); var X = HomeGrid.getAllSubItems(t); d = o, $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: updatetype, UpdateColumn: l.trim(), UpdateVal: d, Id: parseInt(r), CustomFieldInput: _customFieldValues, ColumnType: s.toString(), oValue: i.toString() }, dataType: "json", success: function (e) { HomeGrid.saveOpenStates("plangridState"); var r = HomeGrid.cells(t, GridHiddenId).getValue(), d = $("div[taskId='" + r + "']").attr("OwnerName"); if (ExportSelectedIds.TaskID.length > 0) { var n = ExportSelectedIds.OwnerName.indexOf(d); n >= 0 && "" != e.OwnerName && (ExportSelectedIds.OwnerName[n] = e.OwnerName) } if ("" != e.OwnerName && null != e.OwnerName && $("div[taskId='" + r + "']").attr("ownername", e.OwnerName), null != e.errormsg && "" != e.errormsg.trim()) return alert(e.errormsg.trim()), HomeGrid.cells(t, a).setValue(i), !1; if (l == StartDateId) { if (e.IsExtended) return alert("Since the Tactic is linked to another Plan, it cannot be extended"), HomeGrid.cells(t, a).setValue(i), !1; var s = HomeGrid.cells(t, EndDateColIndex).getValue(), c = new Date(s).getFullYear(), u = new Date(o).getFullYear(), p = c - u, C = new Date(i).getFullYear(), I = C - u; if (p > 0) { var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), f = g.indexOf("unlink-icon"); if (-1 >= f) { var G = "<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>"; HomeGrid.cells(t, TaskNameColIndex).setValue(G + g), $("div[tacticaddId='" + r + "']").attr("linktacticper", "True") } } else { if (0 == I) return !1; var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), f = g.indexOf("</div>"); f > -1 && (HomeGrid.cells(t, TaskNameColIndex).setValue(g.split("</div>")[1]), $("div[tacticaddId='" + r + "']").attr("linktacticper", "False")) } ComapreDate(updatetype, t, StartDateColIndex, o, l) } if (l == EndDateId) { var H = HomeGrid.cells(t, StartDateColIndex).getValue(), u = new Date(H).getFullYear(), c = new Date(o).getFullYear(), p = c - u, C = new Date(i).getFullYear(), I = C - u; if (p > 0) { var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), f = g.indexOf("</div>"); f > -1 && (g = g.split("</div>")[1]); var G = "<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>"; HomeGrid.cells(t, TaskNameColIndex).setValue(G + g), $("div[tacticaddId='" + r + "']").attr("linktacticper", "True") } else { if (0 == I) return !1; var g = HomeGrid.cells(t, TaskNameColIndex).getValue(), f = g.indexOf("</div>"); f > -1 && (HomeGrid.cells(t, TaskNameColIndex).setValue(g.split("</div>")[1]), $("div[tacticaddId='" + r + "']").attr("linktacticper", "False")) } ComapreDate(updatetype, t, EndDateColIndex, o, l) } if (l == PlannedCostId) { var v = parseFloat(ReplaceCC(o.toString()).replace(CurrencySybmol, "")), x = parseFloat(ReplaceCC(i.toString()).replace(CurrencySybmol, "")); if (diff = v - x, SetColumUpdatedValue(PlannedCostColIndex, diff), HomeGrid.cells(progid, PlannedCostColIndex).setValue(CurrencySybmol + number_format(newProgVal, 2, ".", ",")), HomeGrid.cells(campid, PlannedCostColIndex).setValue(CurrencySybmol + number_format(newCampVal, 2, ".", ",")), HomeGrid.cells(planid, PlannedCostColIndex).setValue(CurrencySybmol + number_format(newPlanVal, 2, ".", ",")), HomeGrid.cells(t, PlannedCostColIndex).setValue(CurrencySybmol + number_format(v, 2, ".", ",")), null != X && "" != X && X.length > 0) for (var y = 0; y < X.split(",").length; y++) "False" != HomeGrid.getUserData(X.split(",")[y], "IsOther") && HomeGrid.cells(X.split(",")[y], PlannedCostColIndex).setValue(CurrencySybmol + number_format(v - e.lineItemCost, 2, ".", ",")) } if ((l == PlannedCostId || l == TaskNameId) && (e.linkTacticId > 0 && LoadPlanGrid(), RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(t), state0 = ItemIndex), l == OwnerId && d.toString() != e.OwnerName.toString() && "" != e.OwnerName && null != e.OwnerName && 0 != m && null != m && void 0 != m && (GetTacticTypelist(filters.PlanIDs), GetOwnerListForFilter(filters.PlanIDs), SaveLastSetofViews(), LoadPlanGrid()), l == TaskNameId && ($("#txtGlobalSearch").val(""), $("#ExpClose").css("display", "none"), $("#ExpSearch").css("display", "block"), GlobalSearch()), l.toString().trim().indexOf("custom_") >= 0) { var T = e.DependentCustomfield; if (null != T && void 0 != T) for (var y = 0; y < T.length; y++) { var D = HomeGrid.getColIndexById(T[y].CustomFieldId); void 0 != D && "" != D && HomeGrid.cells(t, D).setValue(T[y].OptionValue) } } } }) } return a == TaskNameColIndex && (void 0 != value && "undefined" != value && null != value ? HomeGrid.cells(t, a).setValue(value + "</div>" + TacticName) : HomeGrid.cells(t, a).setValue(TacticName)), value = "", $("div[id^='LinkIcon']").each(function () { bootstrapetitle($(this), "This tactic is linked to <U>" + htmlDecode($(this).attr("linkedplanname") + "</U>"), "tipsy-innerWhite") }), !0 } return l == PlannedCostId && HomeGrid.cells(t, a).setValue(CurrencySybmol + number_format(o, 2, ".", ",")), a == TaskNameColIndex && (void 0 != value && "undefined" != value && null != value ? HomeGrid.cells(t, a).setValue(value + "</div>" + TacticName) : HomeGrid.cells(t, a).setValue(TacticName)), value = "", $("div[id^='LinkIcon']").each(function () { bootstrapetitle($(this), "This tactic is linked to <U>" + htmlDecode($(this).attr("linkedplanname") + "</U>"), "tipsy-innerWhite") }), !0 } } function AssignParentIds(e) { updatetype.toLowerCase() == secTactic ? (tactid = e, progid = HomeGrid.getParentId(e), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secLineItem ? (tactid = HomeGrid.getParentId(e), progid = HomeGrid.getParentId(tactid), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secProgram ? (campid = HomeGrid.getParentId(e), planid = HomeGrid.getParentId(campid)) : updatetype.toLowerCase() == secCampaign ? planid = HomeGrid.getParentId(e) : updatetype.toLowerCase() == secPlan && (planid = e) } function CheckPermissionByOwner(e, t, a, o) { $.ajax({ type: "POST", url: urlContent + "Plan/CheckPermissionByOwner", data: { NewOwnerID: t, UpdateType: a, updatedid: parseInt(o) }, dataType: "json", success: function (t) { "1" == t.IsLocked && (HomeGrid.cells(e, TaskNameColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, StartDateColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, EndDateColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, PlannedCostColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, AssetTypeColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, TypeColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, OwnerColIndex).setAttribute("lo", t.IsLocked), HomeGrid.cells(e, TargetStageGoalColIndex).setAttribute("lo", t.IsLocked), HomeGrid.setCellTextStyle(e, TaskNameColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, StartDateColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, EndDateColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, PlannedCostColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, AssetTypeColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, TypeColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, OwnerColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, TargetStageGoalColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, MQLColIndex, t.cellTextColor), HomeGrid.setCellTextStyle(e, RevenueColIndex, t.cellTextColor)) }, error: function (e) { } }) } function GetConversionRate(e, t, a, o, i, r, l) { var d = !0, n = 0, s = 0; progid = HomeGrid.getParentId(i), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid), n = o, $.ajax({ type: "POST", url: urlContent + "Plan/CalculateMQL", data: { tactictid: parseInt(e), TacticTypeId: parseInt(t), projectedStageValue: n, RedirectType: d, isTacticTypeChange: !0, StageID: l }, success: function (t) { if (void 0 != MQLColIndex && null != MQLColIndex) { var o = HomeGrid.cells(i, MQLColIndex).getValue(), l = 0; if (null != t.revenue && (s = t.revenue), "N/A" == t.mql) HomeGrid.setCellExcellType(i, MQLColIndex, "ro"), HomeGrid.cells(i, MQLColIndex).setValue(t.mql), diff = parseInt(-o), SetColumUpdatedValue(MQLColIndex, diff); else { null != t.mql && (l = t.mql); var d = l.toString(); HomeGrid.cells(i, MQLColIndex).setValue(numberWithCommas(d)), diff = parseInt(l) - parseInt(ReplaceCC(o.toString())), SetColumUpdatedValue(MQLColIndex, diff) } HomeGrid.cells(progid, MQLColIndex).setValue(numberWithCommas(newProgVal), !1), HomeGrid.cells(campid, MQLColIndex).setValue(numberWithCommas(newCampVal), !1), HomeGrid.cells(planid, MQLColIndex).setValue(numberWithCommas(newPlanVal), !1); var n = HomeGrid.cells(i, RevenueColIndex).getValue(); HomeGrid.cells(i, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(parseInt(s).toString())), diff = parseInt(s) - parseInt(ReplaceCC(n.toString()).replace(CurrencySybmol, "")), SetColumUpdatedValue(RevenueColIndex, diff), HomeGrid.cells(progid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newProgVal)), HomeGrid.cells(campid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newCampVal)), HomeGrid.cells(planid, RevenueColIndex).setValue(CurrencySybmol + numberWithCommas(newPlanVal)) } $.ajax({ type: "POST", url: urlContent + "Plan/SaveGridDetail", data: { UpdateType: "Tactic", UpdateColumn: a.trim(), UpdateVal: r, Id: parseInt(e) }, dataType: "json", success: function (e) { if (HomeGrid.saveOpenStates("plangridState"), a == TargetStageGoalId) { var t = HomeGrid.getUserData(i, "stage"); HomeGrid.cells(i, TargetStageGoalColIndex).setValue(FormatCommas(r.toString()) + " " + t), RefershPlanHeaderCalc() } if (a == TacticTypeId) { HomeGrid.cells(planid, GridHiddenId).getValue(); $("#ulTacticType li input[type=checkbox]").each(function () { var e = $(this).attr("id"); "checked" != $(this).attr("checked") && filters.tempTacticTypeIds.push(e.replace("CbTT", "")) }), GetTacticTypelist(filters.PlanIDs, !1), SaveLastSetofViews(); var o = HomeGrid.getAllSubItems(i), l = 0; null != e.TacticCost && "undefined" != e.TacticCost && (l = e.TacticCost), PlannedCostColIndex = HomeGrid.getColIndexById(PlannedCostId); var d = HomeGrid.cells(i, PlannedCostColIndex).getValue(); if (diff = parseInt(l) - parseInt(ReplaceCC(d.toString())), SetColumUpdatedValue(PlannedCostColIndex, diff), HomeGrid.cells(progid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newProgVal)), HomeGrid.cells(campid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newCampVal)), HomeGrid.cells(planid, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(newPlanVal)), HomeGrid.cells(i, PlannedCostColIndex).setValue(CurrencySybmol + numberWithCommas(l)), null != o && "" != o && o.length > 0) for (var n = 0; n < o.split(",").length; n++) "False" != HomeGrid.getUserData(o.split(",")[n], "IsOther") && HomeGrid.cells(o.split(",")[n], PlannedCostColIndex).setValue(CurrencySybmol + (l - e.lineItemCost)); e.linkTacticId > 0 && LoadPlanGrid(), RefershPlanHeaderCalc(), ItemIndex = HomeGrid.getRowIndex(i), state0 = ItemIndex } } }) } }) } function ComapreDate(e, t, a, o, i) { var r = new Date(formatDate(o)); if (e.toLowerCase() == secTactic) { progid = HomeGrid.getParentId(t), campid = HomeGrid.getParentId(progid), planid = HomeGrid.getParentId(campid); var l = HomeGrid.cells(progid, GridHiddenId).getValue(), d = HomeGrid.cells(campid, GridHiddenId).getValue(), n = new Date(formatDate(HomeGrid.cells(progid, a).getValue())), s = new Date(formatDate(HomeGrid.cells(campid, a).getValue())), c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); if (i == StartDateId) { n > r && HomeGrid.cells(progid, a).setValue(formatDate(o)), s > r && HomeGrid.cells(campid, a).setValue(formatDate(o)), c > r && HomeGrid.cells(planid, a).setValue(formatDate(o)); var m = HomeGrid.getUserData(progid, "tsdate"), u = HomeGrid.getUserData(campid, "psdate"); $.ajax({ type: "POST", url: urlContent + "GetMinMaxDate", data: { Parentid: parseInt(d), UpdateType: "Tactic", updatedid: parseInt(l) }, dataType: "json", success: function (e) { formatDate(e.TactMinDate) != formatDate(m) && HomeGrid.setUserData(progid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.TactMinDate) != formatDate(m) && HomeGrid.setUserData(campid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.ProgMinDate) != formatDate(u) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMinDate)) }, error: function (e) { } }) } else if (i == EndDateId) { r > n && HomeGrid.cells(progid, a).setValue(formatDate(o)), r > s && HomeGrid.cells(campid, a).setValue(formatDate(o)), r > c && HomeGrid.cells(planid, a).setValue(formatDate(o)); var p = HomeGrid.getUserData(progid, "tedate"), C = HomeGrid.getUserData(campid, "pedate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(d), UpdateType: "Tactic", updatedid: parseInt(l) }, dataType: "json", success: function (e) { formatDate(e.TactMaxDate) != formatDate(p) && HomeGrid.setUserData(progid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.TactMaxDate) != formatDate(p) && HomeGrid.setUserData(campid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.ProgMaxDate) != formatDate(C) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMaxDate)) } }) } } else if (e.ToLower() == secProgram) { campid = HomeGrid.getParentId(t), planid = HomeGrid.getParentId(campid); var l = HomeGrid.cells(t, 3).getValue(), d = HomeGrid.cells(campid, 3).getValue(), s = new Date(formatDate(HomeGrid.cells(campid, a).getValue())), c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); if (i == StartDateId) { s > r && HomeGrid.cells(campid, a).setValue(formatDate(o)), c > r && HomeGrid.cells(planid, a).setValue(formatDate(o)); var u = HomeGrid.getUserData(campid, "psdate"), I = HomeGrid.getUserData(campid, "tsdate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(d), UpdateType: "Program", updatedid: parseInt(l) }, dataType: "json", success: function (e) { formatDate(e.TactMinDate) != formatDate(I) && HomeGrid.setUserData(campid, "tsdate", formatDate(e.TactMinDate)), formatDate(e.ProgMinDate) != formatDate(u) && HomeGrid.setUserData(campid, "psdate", formatDate(e.ProgMinDate)) }, error: function (e) { } }) } else if (i == EndDateId) { r > s && HomeGrid.cells(campid, a).setValue(formatDate(o)), r > c && HomeGrid.cells(planid, a).setValue(formatDate(o)); var C = HomeGrid.getUserData(campid, "pedate"), g = HomeGrid.getUserData(campid, "tedate"); $.ajax({ type: "POST", url: urlContent + "Plan/GetMinMaxDate", data: { Parentid: parseInt(d), UpdateType: "Program", updatedid: parseInt(l) }, dataType: "json", success: function (e) { formatDate(e.TactMaxDate) != formatDate(g) && HomeGrid.setUserData(campid, "tedate", formatDate(e.TactMaxDate)), formatDate(e.ProgMaxDate) != formatDate(C) && HomeGrid.setUserData(campid, "pedate", formatDate(e.ProgMaxDate)) }, error: function (e) { } }) } } else if (e.toLowerCase() == secCampaign) { planid = HomeGrid.getParentId(t); var c = new Date(formatDate(HomeGrid.cells(planid, a).getValue())); i == StartDateId ? c > r && HomeGrid.cells(planid, a).setValue(formatDate(o)) : i == EndDateId && r > c && HomeGrid.cells(planid, a).setValue(formatDate(o)) } } function ExportToCsvSp() { if (void 0 != $("#txtGlobalSearch").val().trim() && "" != $("#txtGlobalSearch").val().trim()) { var e = new Array; $(HomeGrid.rowsBuffer).find("td div.honeycombbox-icon-gantt").each(function () { e.push($(this).attr("csvid")) }); var t = e.toString(); $.ajax({ type: "POST", url: urlContent + "Plan/ExportToCsv/", data: { HoneycombIds: t, PlanId: filters.PlanIDs.toString() }, success: function (e) { window.location = urlContent + "Plan/ExportCsvDataTable/" } }) } else { var a = 0, o = 0, i = null, r = 0; $("#divCustomFieldsFilter").find("div.accordion").each(function () { if (null != $(this).find("input[type=checkbox]") || "" != $(this).find("input[type=checkbox]")) if (o = $(this).find("input[type=checkbox]").length, a = $(this).find("input[type=checkbox]:checked").length, r = o - a, o == r) { var e = $(this).attr("id"); if (e.indexOf("-") >= 0) { e = e.split("-")[1]; var t = e + "_null"; filters.customFieldIds.push(t) } } else if (o == a) { i = this.id, null != i && "" != i && i.indexOf("-") > -1 && (i = this.id.split("-")[1]); var l, d = 0; for (d = 0; d < filters.customFieldIds.length; d++) filters.customFieldIds[d].indexOf("_") > -1 && (l = filters.customFieldIds[d].split("_")[0], i == l && (filters.customFieldIds.splice(d, 1), d--)) } }); var l = filters.OwnerIds.toString(), d = filters.TacticTypeids.toString(), n = filters.StatusIds.toString(), s = filters.customFieldIds.toString(); $.ajax({ type: "POST", url: urlContent + "Plan/ExportToCsv/", data: { ownerIds: l, TacticTypeid: d, StatusIds: n, customFieldIds: s, PlanId: filters.PlanIDs.toString() }, success: function (e) { window.location = urlContent + "Plan/ExportCsvDataTable/" } }) } } function ExportCSVHoneyCombSp() { var e = ExportSelectedIds.CsvId.toString(); $.ajax({ type: "POST", url: urlContent + "Plan/ExportToCsv/", data: { HoneycombIds: e, PlanId: filters.PlanIDs.toString() }, success: function (e) { window.location = urlContent + "Plan/ExportCsvDataTable/" } }) } function ExportToExcel(e) {
    if ("home" == gridname.toLowerCase()) if (e) { for (var t = [], a = 0; a < ExportSelectedIds.TaskID.length; a++) t.push(ExportSelectedIds.TaskID[a].split(/_(.+)?/)[0]); var o = t.filter(function (e, t, a) { return t == a.indexOf(e) }); o.length > 1 ? alert("You can export only one plan at a time. Please select the correct plan and try to export again") : ExportCSVHoneyCombSp() } else filters.PlanIDs.length > 1 ? alert("You can export only one plan at a time. Please select the correct plan and try to export again") : ExportToCsvSp(); else {
        var i = [], r = [], l = (HomeGrid.getColIndexById("MachineName"), HomeGrid.getColIndexById("Type")), d = HomeGrid.getColIndexById("ActivityId"); "budget" == gridname.toLowerCase() && (iconColumnIndex = HomeGrid.getColIndexById("Buttons"), colourCodeIndex = HomeGrid.getColIndexById("colourcode")), e && HomeGrid.forEachRow(function (e) { var t = HomeGrid.cells(e, iconColumnIndex).getValue(); t.indexOf("honeycombbox-icon-gantt-Active") <= -1 ? (HomeGrid.setRowHidden(e, !0), i.push(e)) : r.push(e) }), HomeGrid.saveOpenStates("plangridState"), HomeGrid.expandAll(); HomeGrid.getColIndexById("ActivityId");
        HomeGrid.setColumnHidden(d, !1), HomeGrid.setColumnHidden(l, !1); var n = ColumnIds.split(","), s = ""; for (a = 0; a < n.length; ++a) s += 0 == a ? "MachineName" == n[a] || "LineItemTypeId" == n[a] || "Buttons" == n[a] || "colourcode" == n[a] ? "false" : "true" : "MachineName" == n[a] || "LineItemTypeId" == n[a] || "Buttons" == n[a] || "colourcode" == n[a] ? ",false" : ",true"; HomeGrid.setSerializableColumns(s), HomeGrid.toExcel("https://dhtmlxgrid.appspot.com/export/excel"), HomeGrid.collapseAll(), HomeGrid.loadOpenStates("plangridState"), HomeGrid.setColumnHidden(d, !0), HomeGrid.setColumnHidden(l, !0), void 0 != i && $.each(i, function (e) { HomeGrid.setRowHidden(i[e], !1) }), void 0 != r && $.each(r, function (e) { var t = HomeGrid.cells(r[e], iconColumnIndex).getValue(); t.indexOf("honeycombbox-icon-gantt-Active") <= -1 && HomeGrid.cells(r[e], iconColumnIndex).setValue(t.replace("honeycombbox-icon-gantt", "honeycombbox-icon-gantt honeycombbox-icon-gantt-Active")) })
    }
} function GetCustomfieldOptionlist(e, t, a, o) { function i(t) { return t.customFieldId == e && null != t.ParentOptionId && t.ParentOptionId.length > 0 ? !0 : !1 } function r(t) { return t.customFieldId == e ? !0 : !1 } var l, n = customfieldOptionList, s = []; if (d = n.filter(i), IsDependentTextBox = !1, null != d && d.length > 0) { var c = []; $.each(d, function (e, t) { c.indexOf(t.ParentOptionId[0]) < 0 && c.push(t.ParentOptionId[0]) }), $.ajax({ url: urlContent + "Plan/GetdependantOptionlist/", traditional: !0, async: !1, data: { customfieldId: e, entityid: t, parentoptionId: c, Customfieldtype: o }, success: function (e) { return "ed" == o && "true" == e.IstextBoxDependent.toString().toLowerCase() ? (IsDependentTextBox = !0, !1) : (null != e && null != e.optionlist && e.optionlist.length > 0 && (l = e.optionlist), void (null != l && l.length > 0 && void 0 != l ? ($.each(l, function (e, t) { -1 == s.indexOf(t.value) && s.push(t.value) }), HomeGrid.registerCList(a, s)) : HomeGrid.registerCList(a, s))) } }) } else l = n.filter(r), $.each(l, function (e, t) { s.push(t.value) }), HomeGrid.registerCList(a, s) } function opencombobox() { var e = $(".rowselected td").offset().top, t = $(".objbox").height(), a = e - t; a > 200 ? $("body").addClass("reverse") : $("body").removeClass("reverse") } var eventiddrag = 0, eventidonedit = 0, eventidonbeforedrag = 0, eventidonscroll = 0, updatetype = 0, progid = 0, campid = 0, planid = 0, tactid = 0, progActVal = 0, CampActVal = 0, PlanActVal = 0, TactActVal = 0, diff = 0, newProgVal = 0, newCampVal = 0, newPlanVal = 0, newTactVal = 0, value, TacticName, ExportToCsv = !1, _customFieldValues = [], IsDependentTextBox = !1, NodatawithfilterGrid = '<div id="NodatawithfilterGrid" style="display:none;"><span class="pull-left margin_t30 bold " style="margin-left: 20px;">No data exists. Please check the filters or grouping applied.</span><br/></div>', SetTooltipFirstTime = !0; SetTooltip(); var $doc = $(document); $doc.click(function () { $("#popupType").css("display", "none"), $("#dhx_combo_select").css("display", "none"), $(".dhx_clist").css("display", "none") }), $(document).mouseup(function (e) { $("#popupType").css("display", "none"), $("#dhx_combo_select").css("display", "none") }), $(".grid_ver_scroll").scroll(function () { $("#popupType").css("display", "none"), $(".dhx_clist").css("display", "none") }); var IsExportToCsv = !1;