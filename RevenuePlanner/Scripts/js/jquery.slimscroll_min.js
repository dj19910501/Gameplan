/* Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version: 1.3.1
 *
 */
(function (a) { jQuery.fn.extend({ slimScroll: function (d) { var c = { width: "auto", size: "7px", color: "#000", position: "right", distance: "1px", start: "top", opacity: 0.4, alwaysVisible: false, disableFadeOut: false, railVisible: false, railColor: "#333", railOpacity: 0.2, railDraggable: true, railClass: "slimScrollRail", barClass: "slimScrollBar", wrapperClass: "slimScrollDiv", wrapperPosition: "relative", allowPageScroll: false, wheelStep: 20, touchScrollStep: 200, borderRadius: "7px", railBorderRadius: "7px", scrollBarHeigth: null }; var b = a.extend(c, d); this.each(function () { var q, p, u, x, f, e, y, C, s = "<div></div>", j = 30, n = false; var A = a(this); if (A.parent().hasClass(b.wrapperClass)) { var k = A.scrollTop(); l = A.parent().find("." + b.barClass); B = A.parent().find("." + b.railClass); w(); if (a.isPlainObject(d)) { if ("height" in d && d.height == "auto") { A.parent().css("height", "auto"); A.css("height", "auto"); var r = A.parent().parent().height(); A.parent().css("height", r); A.css("height", r) } if ("scrollTo" in d) { k = parseInt(b.scrollTo) } else { if ("scrollBy" in d) { k += parseInt(b.scrollBy) } else { if ("destroy" in d) { l.remove(); B.remove(); A.unwrap(); return } } } o(k, false, true) } return } b.height = (b.height == "auto") ? A.parent().height() : b.height; var g = a(s).addClass(b.wrapperClass).css({ position: b.wrapperPosition, overflow: "hidden", width: b.width, "max-height": b.height }); A.css({ overflow: "hidden", width: b.width, "max-height": b.height }); var B = a(s).addClass(b.railClass).css({ width: b.size, height: "100%", position: "absolute", top: 0, display: (b.alwaysVisible && b.railVisible) ? "block" : "none", "border-radius": b.railBorderRadius, background: b.railColor, opacity: b.railOpacity, zIndex: 90 }); var l = a(s).addClass(b.barClass).css({ background: b.color, width: b.size, position: "absolute", top: 0, opacity: b.opacity, display: b.alwaysVisible ? "block" : "none", "border-radius": b.borderRadius, BorderRadius: b.borderRadius, MozBorderRadius: b.borderRadius, WebkitBorderRadius: b.borderRadius, zIndex: 99 }); var h = (b.position == "right") ? { right: b.distance } : { left: b.distance }; B.css(h); l.css(h); A.wrap(g); A.parent().append(l); A.parent().append(B); if (b.railDraggable) { l.bind("mousedown", function (D) { var E = a(document); u = true; t = parseFloat(l.css("top")); pageY = D.pageY; E.bind("mousemove.slimscroll", function (F) { currTop = t + F.pageY - pageY; l.css("top", currTop); o(0, l.position().top, false) }); E.bind("mouseup.slimscroll", function (F) { u = false; m(); E.unbind(".slimscroll") }); return false }).bind("selectstart.slimscroll", function (D) { D.stopPropagation(); D.preventDefault(); return false }) } B.hover(function () { i() }, function () { m() }); l.hover(function () { p = true }, function () { p = false }); A.hover(function () { q = true; i(); m() }, function () { q = false; m() }); A.bind("touchstart", function (D, E) { if (D.originalEvent.touches.length) { f = D.originalEvent.touches[0].pageY } }); A.bind("touchmove", function (D) { if (!n) { D.originalEvent.preventDefault() } if (D.originalEvent.touches.length) { var E = (f - D.originalEvent.touches[0].pageY) / b.touchScrollStep; o(E, true); f = D.originalEvent.touches[0].pageY } }); w(); if (b.start === "bottom") { l.css({ top: A.outerHeight() - l.outerHeight() }); o(0, true) } else { if (b.start !== "top") { o(a(b.start).position().top, null, true); if (!b.alwaysVisible) { l.hide() } } } z(); function v(D) { if (!q) { return } var D = D || window.event; var F = 0; if (D.wheelDelta) { F = -D.wheelDelta / 120 } if (D.detail) { F = D.detail / 3 } var E = D.target || D.srcTarget || D.srcElement; if (a(E).closest("." + b.wrapperClass).is(A.parent())) { o(F, true) } if (D.preventDefault && !n) { D.preventDefault() } if (!n) { D.returnValue = false } } function o(H, E, F) { n = false; var D = H; var G = A.outerHeight() - l.outerHeight(); if (E) { D = parseInt(l.css("top")) + H * parseInt(b.wheelStep) / 100 * l.outerHeight(); D = Math.min(Math.max(D, 0), G); D = (H > 0) ? Math.ceil(D) : Math.floor(D); l.css({ top: D + "px" }) } y = parseInt(l.css("top")) / (A.outerHeight() - l.outerHeight()); D = y * (A[0].scrollHeight - A.outerHeight()); if (F) { D = H; var I = D / A[0].scrollHeight * A.outerHeight(); I = Math.min(Math.max(I, 0), G); l.css({ top: I + "px" }) } A.scrollTop(D); A.trigger("slimscrolling", ~~D); i(); m() } function z() { if (window.addEventListener) { this.addEventListener("DOMMouseScroll", v, false); this.addEventListener("mousewheel", v, false); this.addEventListener("MozMousePixelScroll", v, false) } else { document.attachEvent("onmousewheel", v) } } function w() { e = b.scrollBarHeigth ? b.scrollBarHeigth : Math.max((A.outerHeight() / A[0].scrollHeight) * A.outerHeight(), j); l.css({ height: e + "px" }); var D = e == A.outerHeight() ? "none" : "block"; l.css({ display: D }) } function i() { w(); clearTimeout(x); if (y == ~~y) { n = b.allowPageScroll; if (C != y) { var D = (~~y == 0) ? "top" : "bottom"; A.trigger("slimscroll", D) } } else { n = false } C = y; if (e >= A.outerHeight()) { n = true; return } l.stop(true, true).fadeIn("fast"); if (b.railVisible) { B.stop(true, true).fadeIn("fast") } } function m() { if (!b.alwaysVisible) { x = setTimeout(function () { if (!(b.disableFadeOut && q) && !p && !u) { l.fadeOut("slow"); B.fadeOut("slow") } }, 1000) } } }); return this } }); jQuery.fn.extend({ slimscroll: jQuery.fn.slimScroll }) })(jQuery);