@model RevenuePlanner.Models.PlanModel
@using RevenuePlanner.Helpers

@{
    string AllocatedBy = Model.AllocatedBy;
    bool IsBudgetAllocated = false;
    if (AllocatedBy.ToLower() != Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.defaults.ToString()].ToString().ToLower())
    {
        IsBudgetAllocated = true;
    }
    string CalledFromBudget = ViewBag.CalledFromBudget;
}

<div class="head">
    <span class="close-form source-sans-proregular">» CLOSE MENU</span>
    <div class="cf">
        <h2 class="source-sans-prolight">Plan Detail</h2>
    </div>
</div>
<div id="errorMessage" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong> <span id="spanMessage"></span>
</div>
<div id="divErrLessBudget" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong> <span>@Common.objCached.ErrMsgLessPlanBudget</span>
</div>
<div id="frm_planDetail" name="frm_planDetail">
    @using (Html.BeginForm(new { @id = "frmSavePlanDetails" }))
    {
        <div class="content">
            @Html.HiddenFor(model => model.PlanId, new { id = "hdnPlanId" })
            @Html.Hidden("hdnIsBudgetAllocated",IsBudgetAllocated)
            @Html.HiddenFor(model => model.GoalType)
            @Html.HiddenFor(model => model.GoalValue)
            @Html.HiddenFor(model => model.Year)
            @Html.HiddenFor(model => model.AllocatedBy)
            @Html.HiddenFor(model => model.TotalAllocatedCampaignBudget)

            <div class="content-row">
                <label class="t_title">Plan Title</label>
                @Html.TextBoxFor(model => model.Title, new { placeholder = "Required", require = "true", maxlength = "255", id="txtTitle", @class = "margin-top3px" })
            </div>
            <div class="content-row float-right">
                <label>Model</label>
                <span class="verticalIdSelectBox" style="  margin-left: -2px;">
                    @Html.DropDownListFor(model => model.ModelId, new SelectList((System.Collections.IEnumerable)TempData["selectList"], "ModelId", "ModelTitle"), "Please Select", new { datadefault = @Model.ModelId, @class = "ddlStyle myValue", placeholder = @Model.ModelId, require = "true" })
                </span>
            </div>
            <div class="content-row width99per">
                <label>Description</label>
                @Html.TextAreaFor(model => model.Description, new { placeholder = "Optional", rows = "3", maxlength = "4000" })
            </div>
            <div class="content-row">
                <label class="padding-left4" title="Cost">Plan Budget</label>
                @Html.TextBoxFor(model => model.Budget, new { @class = "currency_dollar margin-top3px", placeholder = "Required", require = "true", id = "txtPlanBudget", maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })
            </div>
        </div>
        if (AllocatedBy.ToLower() != Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.defaults.ToString()].ToString().ToLower())
        {
		    <div class="budget-section">
                <div class="budget-head clearfix">
                    <p>Budget Allocation</p>
                    <a href="javascript:void(0)">- Collapse</a>
                </div>
                <div class="budget-collapse">
                    <div class="white-bg">
                        @HtmlHelpers.GenerateBudgetAllocationControl(AllocatedBy)
                        <div class="budget-month">
                            <span class="month">@Common.UnallocatedBudgetLabelText</span>
                            <span class="unallocated-span"><input id="lblUnallocatedBudget" class="unallocated-text" readonly="true" /></span>
                        </div>
                    </div>
                    <div class="budget-result source-sans-prolight">
                        <p>
                            Allocated Campaign Budget (this @(AllocatedBy.ToLower() == Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.months.ToString()].ToString().ToLower() ? "Month" : "Quarter")): 
                                    	<span id="lblAllocatedCampaignsBudget" class="source-sans-proregular"></span>
                        </p>
                        <p>
                            Total Allocated:
                                    	<span id="lblTotalAllocated" class="source-sans-proregular"></span>
                        </p>
                        <p>
                            Total Budgeted:
                                    	<span id="lblTotalBudget" class="source-sans-proregular">@Model.Budget</span>
                        </p>
                    </div>
                </div>
                <!--End content-->
            </div>
        }
        <div class="content dark inline-ellipsis">
            @if (!(bool)ViewBag.IsCreated)
            {
                <div class="cf width100">
                    <div class="width22per margin-right20 pull-left">
                        <label title="@Html.LabelForINQ("INQ")">@Html.LabelForINQ("INQ")</label>
                        @Html.TextBox("txtINQ", "", new { placeholder = "0", id = "txtINQ", @class = "priceValue", @readonly = "true", maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })
                    </div>
                    <div class="width22per margin-right20 pull-left">
                        <label title="@Html.LabelForMQL("MQL")">@Html.LabelForMQL("MQL")</label>
                        @Html.TextBox("txtMQL", "", new { placeholder = "0", id = "txtMQL", @class = "priceValue", @readonly = "true", maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })
                    </div>
                    <div class="width22per pull-left">
                        <label title="Revenue">Revenue</label>
                        @Html.TextBox("txtRevenue", "", new { placeholder = "$0", id = "txtRevenue", @class = "currency_dollar", @readonly = "true", maxlength = @RevenuePlanner.Helpers.Common.maxLengthDollar })
                    </div>
                </div>
            }
        </div>
        if ((bool)ViewBag.IsOwner)
        {
            <div class="wraper-btns cf">
            <div id="divBudgetError" class="alert alert-error hide error-msg">
                <a class="close">×</a>
                <p id="BudgetErrorMessage" class="source-sans-probold">You cannot allocate more than budgeted for Jan and May .</p>
            </div>
            <div class="span2 btn-save">
                    <button id="save_plan" class="btn btn-blue text-shadow-blue source-sans-proregular" type="button">Save</button>
                </div>
            <div class="span2">
                    <button class="close-form btn-link source-sans-proregular" type="button">Cancel</button>
                </div>
            </div>
        }
    }
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $('#slidepanel-container').slimScroll({ scrollTo: '0px' });
        $(".verticalIdSelectBox select").selectbox();

        $(".budget-head a").click(function () {
            $('.budget-collapse').slideToggle();
            $('.budget-head a').html($('.budget-head a').text() == '- Collapse' ? '+ Expand' : '- Collapse');
        });

        var SavePlanFlag = true;

        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        
        if ($("#hdnIsBudgetAllocated").val() == "True" && $("#lblTotalBudget").html() != '') {
            $("#lblTotalBudget").html(FormatCommasBudget($("#lblTotalBudget").html(), false, true));
        }

        $("#txtTitle").keypress(function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                return false;
            }
        });

        $(".alert").find(".close").on("click", function (e) {
            e.stopPropagation();
            e.preventDefault();
            SavePlanFlag = true;
            $(this).closest(".alert").slideUp(400);
        });

        $('form').find('input[type=text], select, textarea').each(function () {
            $(this).change(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val().toString().trim() == '') {
                        $(this).addClass("error");
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
        });

        $('form').find(".sbSelector").each(function () {
            $(this).next().find('li').click(function () {
                if ($(this).parent().parent().prev().attr('require') == 'true') {
                    if ($(this).parent().prev().text() == 'Please Select') {
                        $(this).parent().prev().addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).parent().prev().removeClass("error");
                    }
                }
            });
        });

        function ShowError(value) {
            $("#errorMessage").slideDown(400);
            $("#spanMessage").empty();
            $("#spanMessage").text(value);
            $("#divErrLessBudget").css("display", "none");
        }

        if ($("#hdnIsBudgetAllocated").val() == "True") {
            fillBudgetAllocationData();
        }

        var isOwner = "@ViewBag.IsOwner";
        if (isOwner == 'False') {
            $('form').find(".sbSelector").each(function () {
                $(this).unbind("click");
                $(this).removeAttr("href");
                $(this).prev().unbind("click");
                $(this).prev().removeAttr("href");
            });
            $('form').find("input[type=text], textarea").each(function () {
                $(this).prop('readonly', true);
            });
            $('form').find(".add-on").each(function () {
                $(this).unbind("click");
            });
        }

        var hdnPlanId = $("#hdnPlanId").val();
        if (hdnPlanId != 0) {
            var modelId = 0;
            var goalType = $("#GoalType").val();
            var goalValue = $("#GoalValue").val();

            if ($('#ModelId').val() != '')
                modelId = $('#ModelId').val();

            if (goalType != '' && modelId != 0)
                calculateBudget(modelId, goalType, goalValue);
        }
        
        $("#save_plan").click(function () {
            var iserror = false;
            $('form').find('input[type=text], select').each(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val().toString().trim() == '' || (this.id.toString() == 'txtPlanBudget' && $(this).val() == '$0')) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });

            //sbSelector
            $('form').find('.sbSelector').each(function () {
                if ($(this).parent().prev().attr('require') == 'true') {
                    if ($(this).text() == 'Please Select') {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });

            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
            }
            else {
                $("#errorMessage").css("display", "none");

                var TotalAllocatedCampaignBudget = $('#TotalAllocatedCampaignBudget').val();
                var totalBudget = parseInt(ReplaceCC($("#txtPlanBudget").val()));
                if (TotalAllocatedCampaignBudget > totalBudget) {
                    $('#divErrLessBudget').css("display", "block");
                    iserror = true;
                }
                else {
                    $("#divErrLessBudget").css("display", "none");
                }
            }

            if (!iserror) {
                if ($("#hdnIsBudgetAllocated").val() == "True") {
                    var lstAllocInputs = $(".budget-section input.error-text").not('.unallocated-text');
                    if (lstAllocInputs.length > 0) {
                        var errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotAllocateMorehanBudgeted for ";
                        var inputLength = lstAllocInputs.length;
                        var removeLength = 0;
                        for (var i = 0; i < lstAllocInputs.length; i++) {
                            if (inputLength == 1) {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html());
                            }
                            else if (inputLength == 2) {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                removeLength = 4;
                            }
                            else if (inputLength > 2) {
                                if (i == inputLength - 2) {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                    removeLength = 4;
                                }
                                else {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ', ');
                                    removeLength = 2;
                                }
                            }
                        }

                        errorMsg = errorMsg.substring(0, errorMsg.length - removeLength);
                        errorMsg += '.';

                        ShowBudgetError(errorMsg);
                        return false;
                    }

                    if ($("#lblTotalAllocated").hasClass('error-text')) {
                        errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotAllocateMorehanBudgeted";
                        ShowBudgetError(errorMsg);
                        return false;
                    }

                    if (parseInt(ReplaceCC($("#lblUnallocatedBudget").val())) < 0) {
                        errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotSetBudgetLessthanAllocated";
                        ShowBudgetError(errorMsg);
                        return false;
                    }
                    
                    if (SavePlanFlag) {
                        var lstAllocInputs = $(".budget-section input.low-budgeted").not('.unallocated-text');
                        if (lstAllocInputs.length > 0) {
                            var errorMsg = "@RevenuePlanner.Helpers.Common.objCached.ErrMsgLessCampaignBudget ";
                            var removeLength = 0;
                            var inputLength = lstAllocInputs.length;
                            for (var i = 0; i < lstAllocInputs.length; i++) {
                                if (inputLength == 1) {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html());
                                }
                                else if (inputLength == 2) {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                    removeLength = 4;
                                }
                                else if (inputLength > 2) {
                                    if (i == inputLength - 2) {
                                        errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                        removeLength = 4;
                                    }
                                    else {
                                        errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ', ');
                                        removeLength = 2;
                                    }
                                }
                            }
                            errorMsg = errorMsg.substring(0, errorMsg.length - removeLength);
                            errorMsg += '. <br />If you want to continue, hit Save below.';
                            ShowBudgetError(errorMsg);
                            SavePlanFlag = false;
                            return false;
                        }
                    }
                }

                var allocationValue = [];
                var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
                for (var i = 0; i < lstAllocInputs.length; i++) {
                    allocationValue.push(ReplaceCC($(lstAllocInputs[i]).val()));
                }

                document.getElementById("txtTitle").value = htmlEncode($('#txtTitle').val());
                document.getElementById("Description").value = htmlEncode($('#Description').val());
                $("#txtPlanBudget").val(ReplaceCC($("#txtPlanBudget").val()));
                $("#txtPlanBudget").attr('title', $("#txtPlanBudget").val());
                var formData = $("form").serialize();
                var RedirectType = "Budgeting";
                var uId = $(window).attr('name');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/SavePlan")',
                    data: formData + '&BudgetInputValues=' + allocationValue.toString() + '&RedirectType=' + RedirectType + '&UserId=' + uId,
                    success: function (data) {
                        if (data.returnURL != 'undefined' && data.returnURL == '#') {
                            window.location = '@Url.Content("~/Login/Index")';
                        }
                        else {
                            if (data.redirect) {
                                if ('@CalledFromBudget' != '') {
                                    var strURL = '@Url.Content("~/Plan/Budgeting")';
                                    window.location.href = strURL + '?type=' + '@CalledFromBudget';
                                }
                                else {
                                    window.location.href = data.redirect;
                                }
                                return;
                            }
                            if (data.errormsg) {
                                document.getElementById("txtTitle").value = htmlDecode($('#txtTitle').val());
                                document.getElementById("Description").value = htmlDecode($('#Description').val());
                                ShowError(data.errormsg);
                                $("#divBudgetError").slideUp(30);
                                return false;
                            }
                        }
                    }
                });
            }
        });

        $("#txtCampaignBudget").keyup(function () {
            $("#txtCampaignBudget").attr('title', $("#txtCampaignBudget").val());
            var CampaignBudgetValue = ReplaceCC($("#txtCampaignBudget").val());
            var OldCampaignBudgetValue = ReplaceCC($("#hdnOldCampaignBudget").val());
            var differenceVal = parseInt(OldCampaignBudgetValue) - parseInt(CampaignBudgetValue);
            var newRemainingBudget = parseInt(ReplaceCC($("#txtRemainingBudget").val())) + differenceVal;
            $("#txtRemainingBudget").val(FormatCommasBudget(newRemainingBudget.toString(), false, true));
            $("#txtRemainingBudget").attr('title', $("#txtRemainingBudget").val());
            $("#hdnOldCampaignBudget").val(CampaignBudgetValue);
            if (parseInt(ReplaceCC($("#txtRemainingBudget").val())) < 0) {
                $("#lblTotalBudget").addClass('error-text');
                $("#txtRemainingBudget").addClass('error-text');
            }
            else {
                $("#lblTotalBudget").removeClass('error-text');
                $("#txtRemainingBudget").removeClass('error-text');
            }

            $("#lblTotalBudget").html(FormatCommasBudget(CampaignBudgetValue, false, true));
            if ($("#hdnIsBudgetAllocated").val() == "True") {
                calculateUnallocatedBudget();
            }

        });

        $('.budget-section').find('input').not('.unallocated-text').each(function () {
            $(this).keyup(function () {
                if ($(this).val().trim() != '') {
                    var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                    if (currentValue.match('^(0|[1-9][0-9]*)$')) {
                        var OldBudgetValue = parseInt($(this).attr("ov"));
                        var differenceVal = OldBudgetValue - parseInt(currentValue);
                        $(this).attr("ov", currentValue);

                        var CampaignBudgetValue = parseInt($(this).attr("cmb"));
                        if (parseInt(currentValue) < CampaignBudgetValue) {
                            $(this).addClass('low-budgeted');
                            $("#lblAllocatedCampaignsBudget").addClass('error-text');
                        }
                        else {
                            $(this).removeClass('low-budgeted');
                            $("#lblAllocatedCampaignsBudget").removeClass('error-text');
                        }

                        var TotalallocationValue = 0;
                        var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
                        for (var i = 0; i < lstAllocInputs.length; i++) {
                            TotalallocationValue += parseInt($(lstAllocInputs[i]).val() == '' ? 0 : ReplaceCC($(lstAllocInputs[i]).val()));
                        }
                        $("#lblTotalAllocated").html(FormatCommasBudget(TotalallocationValue.toString(), false, true));
                        calculateUnallocatedBudget();
                    }
                }
            });
        });

        $('.budget-section').find('input').not('.unallocated-text').each(function () {
            $(this).focus(function () {

                $('.budget-section').find('input').not('.unallocated-text').parent().removeClass('border000000');
                $(this).parent().addClass('border000000');
                
                var AllocatedCampaignsBudget = parseInt($(this).attr("cmb"));
                var currentValue = parseInt($(this).attr("ov"));
                
                if (currentValue < AllocatedCampaignsBudget) {
                    $(this).addClass('low-budgeted');
                    $("#lblAllocatedCampaignsBudget").addClass('error-text');
                }
                else {
                    $(this).removeClass('low-budgeted');
                    $("#lblAllocatedCampaignsBudget").removeClass('error-text');
                }

                $("#lblAllocatedCampaignsBudget").html(FormatCommasBudget(AllocatedCampaignsBudget.toString(), false, true));

            });
        });

    });

    $('.close-form', this.$panel).click(function (e) {
        $('.datepicker.dropdown-menu').css("display", "none");
        $("#slidepanel").css("display", "none");
        $("#slidepanel-container").empty();
    });

    function ShowBudgetError(value) {
        $("#divBudgetError").slideDown(400);
        $("#BudgetErrorMessage").empty();
        $("#BudgetErrorMessage").html(value);
    }

    function fillBudgetAllocationData() {
        var hdnPlanId = $("#hdnPlanId").val();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Plan/GetBudgetAllocationPlanData/")',
            data: {
                id: hdnPlanId
            },
            success: function (data) {
                var r = data.budgetData;
                if (typeof r != 'undefined') {
                    if (r.length) {
                        for (i in r) {
                            var budgetValue = r[i].budgetValue == '' ? '0' : r[i].budgetValue;
                            var campaignMonthlyBudget = r[i].campaignMonthlyBudget == '' ? '0' : r[i].campaignMonthlyBudget;
                            $("#" + r[i].periodTitle).val(r[i].budgetValue);
                            $("#" + r[i].periodTitle).attr('ov', r[i].budgetValue == '' ? '0' : r[i].budgetValue);
                            $("#" + r[i].periodTitle).attr('cmb', r[i].campaignMonthlyBudget);
                            if (parseInt(campaignMonthlyBudget) > budgetValue) {
                                $(this).addClass('low-budgeted');
                                $("#lblAllocatedCampaignsBudget").addClass('error-text');
                            }
                            else {
                                $(this).removeClass('low-budgeted');
                                $("#lblAllocatedCampaignsBudget").removeClass('error-text');
                            }
                        }
                    }
                }
                                
                var TotalallocationValue = 0;
                var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
                for (var i = 0; i < lstAllocInputs.length; i++) {
                    TotalallocationValue += parseInt($(lstAllocInputs[i]).val() == '' ? 0 : ReplaceCC($(lstAllocInputs[i]).val()));
                }
                if (TotalallocationValue.toString() != '') {
                    $("#lblTotalAllocated").html(FormatCommasBudget(TotalallocationValue.toString(), false, true));
                }
                calculateUnallocatedBudget();
                $("#Y1").focus();
            },
            error: function () {
                ShowError('');
                return false;
            }
        });
    }

    function calculateUnallocatedBudget() {
        var CampaignBudgetValue = $("#txtPlanBudget").val().trim().replace(/,/g, '').replace('$', '');
        var CampaignAllocatedBudgetValue = $("#lblTotalAllocated").html().trim().replace(/,/g, '').replace('$', '');
        var unallocatedBudget = parseInt(CampaignBudgetValue) - parseInt(CampaignAllocatedBudgetValue);
        $("#lblUnallocatedBudget").val(FormatCommasBudget(unallocatedBudget.toString(), false, true));
        if (unallocatedBudget < 0) {
            $("#lblUnallocatedBudget").addClass('error-text');
            $("#lblTotalAllocated").addClass('error-text');

        }
        else {
            $("#lblUnallocatedBudget").removeClass('error-text');
            $("#lblTotalAllocated").removeClass('error-text');
        }
    }

    function calculateBudget(_modelId, _goalType, _goalValue) {
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Plan/CalculateBudget/")',
            dataType: "json",
            data: { modelId: _modelId, goalType: _goalType, goalValue: _goalValue },
            success: function (data) {
                if (_goalType.toLowerCase() == '@Enums.PlanGoalType.INQ.ToString().ToLower()')
                {
                    $('#txtINQ').val(number_format(_goalValue.toString(), 0, '.', ','));
                    $('#txtMQL').val(number_format(data.input1.toString(), 0, '.', ','));
                    $('#txtRevenue').val('$' + number_format(data.input2.toString(), 0, '.', ','));
                }
                else if (_goalType.toLowerCase() == '@Enums.PlanGoalType.MQL.ToString().ToLower()')
                {
                    $('#txtMQL').val(number_format(_goalValue.toString(), 0, '.', ','));
                    $('#txtINQ').val(number_format(data.input1.toString(), 0, '.', ','));
                    $('#txtRevenue').val('$' + number_format(data.input2.toString(), 0, '.', ','));
                }
                else if (_goalType.toLowerCase() == '@Enums.PlanGoalType.Revenue.ToString().ToLower()')
                {
                    $('#txtRevenue').val('$' + number_format(_goalValue.toString(), 0, '.', ','));
                    $('#txtINQ').val(number_format(data.input1.toString(), 0, '.', ','));
                    $('#txtMQL').val(number_format(data.input2.toString(), 0, '.', ','));
                }
            }
        });
    }

    $('#ModelId').change(function () {
        var hdnPlanId = $("#hdnPlanId").val();
        if (hdnPlanId != 0) {
            var modelId = 0;
            var goalType = $("#GoalType").val();
            var goalValue = $("#GoalValue").val();

            if ($('#ModelId').val() != '')
                modelId = $('#ModelId').val();

            if (goalType != '' && modelId != 0)
                calculateBudget(modelId, goalType, goalValue);
        }
    });
</script>