@model RevenuePlanner.Models.Plangrid
@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@*<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid2_min.css")" rel="stylesheet" type="text/css" />*@
@*<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxtreegrid_min.js")"></script>*@
@*// Add By Nishant Sheth
    // Desc :: #1818 To display message with no data exists*@
@{
    var countrows = Model.PlanDHTMLXGrid.rows.Count;
    List<TacticTypeModel> lstTacticType = new List<TacticTypeModel>(ViewBag.TacticTypelist);
}
<style>
    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
        padding-left: 0px !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }
    /*Added by viral for PL #2112*/
    .goals-wrapper .valuenumber
    {
        padding-left:0px;
    }
    /*Added by Rahul Shah on 29/09/2015 for PL #1618*/
    /*div.gridbox {
        height: 100% !important;
    }*/
</style>
<div class="goals-wrapper" id="goalwrapper">
    <span class="goal-text">Goals</span>
    <span>Revenue : </span>
    <span id="spnrevenue" class="valuenumber"></span>
    <span>@Model.INQLable : </span>
    <span id="spninq" class="valuenumber"></span>
    <span>@Model.MQLLable : </span>
    <span id="spnmql" class="valuenumber"></span>
    <span>@Model.CWLable : </span>
    <span id="spncw" class="valuenumber"></span>
    @*<a class="btn btn-blue-grid text-shadow-blue source-sans-proregular" id="exportcsv" onclick="return ExportToCSV();">
            <img src="~/Content/images/grid-export.png" /> Export .csv
        </a> Changed by bhumika #2015 *@
    @*<a class="source-sans-proregular export-link" id="exportcsv" onclick="return ExportToCsvSp();">
        <i class="fa fa-external-link"></i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Export.csv</span>
    </a>*@ @*Export link hide and moved at _plandropdown.cshtml for #2312 - Bhumika*@
</div>
<div id="gridbox" style="background-color:white;width:100%;" class="gridViewGrid"></div>
<div id="divTacticReqMsg" class="clue-tip-message-orange-grid" style="display:none;">This tactic needs to have all required fields filled out before submission for approval.</div>
@*Added by Komal Rawal for #1432*@
<div id="ImprovementGrid" class="improvement-grid-wrapper">
    @*  @Html.Partial("_GridImprovement", Model.ImprovementObj)*@
</div>
<div class="row-fluid calc-height">
    <div class="span12">
        <div id="divMovetacticPopup" class="form-inspect-share hide fade height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div>
                <form>
                    <h2 class="primary-title source-sans-prosemibold resubmission_header">Moving a Tactic</h2>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">You are about to move a tactic to </label>
                    <label id="lipname" style="text-align: center; width: 100%; font-weight:800;" class="resubmission_content"></label>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">Do you want to proceed?</label>
                    <input type="hidden" id="hdnsourceid" />
                    <input type="hidden" id="hdndestid" />
                    <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button_Movetactic">Proceed</button>
                    <button id="cancel-button_Movetactic" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>
<input type="button" id="useless" value="Click" name="useless" style="display:none;" />
<p style="display:none;">Scrolled <span id="spanscroll">0</span> times.</p>
<script type="text/javascript">
    var HomeGrid;

    //var revenue = "Revenue : $" + number_format('@Model.Revenue', 0, '.', ',');
    $("#spnrevenue").html('@Model.Revenue');
    // added by Viral for PL ticket #2112
    SetBudget("#spnrevenue");
    //var mql = number_format('@Model.MQLValue', 0, '.', ',');
    $("#spnmql").html('@Model.MQLValue');
    SetPriceValue("#spnmql");
    //var inq = number_format('@Model.INQValue', 0, '.', ',');
    $("#spninq").html('@Model.INQValue');
    SetPriceValue("#spninq");
    //var cw = number_format('@Model.CWValue', 0, '.', ',');
    $("#spncw").html('@Model.CWValue');
    SetPriceValue("#spncw");

    // Variable added by bhavesh - 11-Nov-2015
    // Apply distributed Parsing - variable for event id
    var eventiddrag = 0;
    var eventidonedit = 0;
    var eventidonbeforedrag = 0;
    var eventidonscroll = 0;
    var editidonOpenEnd = 0;
    var plannedCostColId='plannedcost';

    // Added by Arpita Soni on 07/29/2016 to resolve data issues in grid
    // variables to set index of the column dynamically
    var TaskNameColIndex = 0;
    var PlannedCostColIndex = 0;
    var AssetTypeColIndex = 0;
    var TypeColIndex = 0;
    var OwnerColIndex = 0;
    var TargetStageGoalColIndex = 0;
    var MQLColIndex = 0;
    var RevenueColIndex = 0;


    $(document).ready(function () {
        //$("#divupcomingact").hide();
        //Modified by Komal Rawal for 2013 Home/Plan Layout changes
        //  $("#RequestTab").hide();
        $("#BudgetIcon").show();
        $("#BtnTabIcons").addClass("bdrRadius");
        //End
        $('.nav').addClass('no-bottom-border');
        BindHomeGrid();
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;
        $('.task-tbl div.gridbox').css('height', $(window).height() - 450); //PL #1758 H9_QA - Grid View Scrolling - Added by Dashrath Prajapati

        // added by Ashish for #1780
        BindEntityState();
        if ($('.honeycombbox-icon-gantt-Active').length == 0) {
            $(".honeycombbox").hide();
        }
        else {
            $("#totalEntity").text(ExportSelectedIds.TaskID.length);
            $(".honeycombbox").show();
        }
        //#1780
    });


    //added by Ashish for #1780
    function BindEntityState() {
        if (ExportSelectedIds != null && ExportSelectedIds != [] && ExportSelectedIds != "") {
            if (ExportSelectedIds.TaskID.length > 0) {
                for (var i = 0; i < ExportSelectedIds.TaskID.length; i++) {
                    if (ExportSelectedIds.PlanFlag[i] == 'Grid') {
                        $("div[altid='" + ExportSelectedIds.TaskID[i] + "']").addClass("honeycombbox-icon-gantt-Active");
                        //$("div").find("[altid='" + ExportSelectedIds.TaskID[i] + "']").addClass("honeycombbox-icon-gantt-Active");
                    }
                }
            }
        }
        //Added By Komal Rawal to close the popover if we click anywhere on the grid
        $('#gridbox').find('table').find('tbody').on('click', function (e) {
            var targetname = e.target.nodeName;
            if (targetname != "circle") {
                $(".popover").removeClass('in').addClass('out');
            }
        });
        //End
    }
    //#1780

    var $doc = $(document);
    $doc.click(function () {
        $('#popupType').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupType').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupType').css('display', 'none');
    });
    //Added by Rahul shah on 23/10/2015 for PL #1693 : set grid size after performing any operation
    $(document).ajaxComplete(function () {
        HomeGrid.setSizes();
    });
    function ExportToCsvSp(){    
        //If condition added by rahul shah for export to csv after performing global search
        if($('#txtGlobalSearch').val().trim() != undefined && $('#txtGlobalSearch').val().trim() != ""){
            var ExportdataId = new Array();
            $(HomeGrid.rowsBuffer).find('td div.honeycombbox-icon-gantt').each(function() {
                
                ExportdataId.push($(this).attr('csvid'));            
            });

            var Honeycombids=ExportdataId.toString();
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Plan/ExportToCsv/")',
                data: { HoneycombIds:Honeycombids,PlanId:SelectedPlanIds.toString()},
                success: function (data) {                    
                    window.location='@Url.Content("~/Plan/ExportCsvDataTable/")';
                }

            });
        }
        else{
                var CheckedCounter = 0, AllCounter = 0, id = null, UncheckedCounter = 0;
                $("#divCustomFieldsFilter").find("div.accordion").each(function () {
                    if ($(this).find("input[type=checkbox]") != null || $(this).find("input[type=checkbox]") != "") {
                        AllCounter = $(this).find("input[type=checkbox]").length;
                        CheckedCounter = $(this).find("input[type=checkbox]:checked").length;
                        UncheckedCounter = AllCounter - CheckedCounter;
                        if (AllCounter == UncheckedCounter) {
                            var Id = $(this).attr("id");
                            if (Id.indexOf("-") >= 0) {
                                Id = Id.split('-')[1];
                                var CustomId = Id + "_null";
                                filters.customFieldIds.push(CustomId);

                            }
                        }
                        else if (AllCounter == CheckedCounter) {
                            id = this.id;
                            if (id != null && id != "" && id.indexOf("-") > -1) {
                                id = this.id.split("-")[1];
                            }
                            var i = 0, customfieldid;
                            for (i = 0; i < filters.customFieldIds.length; i++) {
                                if (filters.customFieldIds[i].indexOf("_") > -1) {
                                    customfieldid = filters.customFieldIds[i].split("_")[0];
                                    if (id == customfieldid) {
                                        filters.customFieldIds.splice(i, 1);
                                        i--;
                                    }
                                }
                            }
                        }
                    }
                });
                var OwnerIds= filters.OwnerIds.toString();
                var TacticTypeids=filters.TacticTypeids.toString();
                var StatusIds=filters.StatusIds.toString();
                var CustomFieldId=filters.customFieldIds.toString();
                //window.location='@Url.Content("~/Plan/ExportToCsv/")'+"?ownerIds="+OwnerIds+"&TacticTypeid="+TacticTypeids+"&StatusIds="+StatusIds+"&customFieldIds="+CustomFieldId+"&PlanId="+SelectedPlanIds.toString();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/ExportToCsv/")',
                    data: { ownerIds: OwnerIds, TacticTypeid: TacticTypeids, StatusIds: StatusIds, customFieldIds:CustomFieldId ,PlanId:SelectedPlanIds.toString()},
                    success: function (data) {
                        @*window.location='@Url.Content("~/Plan/ExportCsvDataTable/")?FileName='+FileName;*@
                        window.location='@Url.Content("~/Plan/ExportCsvDataTable/")';
                    }

                });          
        }
    }

    var IsExportToCsv = false;
    // Add By Nishant Sheth
    // Desc :: #2102 CSV file with Customfield attributes
    function ExportCSVHoneyCombSp()
    {        
        var Honeycombids=ExportSelectedIds.CsvId.toString();
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/ExportToCsv/")',
            data: { HoneycombIds:Honeycombids,PlanId:SelectedPlanIds.toString()},
            success: function (data) {
                @*window.location='@Url.Content("~/Plan/ExportCsvDataTable/")?FileName='+FileName;*@
                window.location='@Url.Content("~/Plan/ExportCsvDataTable/")';
            }

        });
    }
    // End By Nishant Sheth
    //Added by Ashish mistry for PL #1782 :- export to csv for Honeycomb
    var ListOfSelectedIds = { Id: [] };
    function ExportCSVHoneyComb() {
        var MQlTitle ='@ViewBag.MQLTitle';
        ExportToCsv = true;
        IsExportToCsv = true;
        HomeGrid.expandAll();
        var count = HomeGrid.getRowsNum();
        var parentid = 0;
        var parentname = "";

        if (count > 0) {

            for (var i = 2 ; i <= 13 ; i++) {

                HomeGrid.insertColumn(i);
                HomeGrid.setColumnHidden(i, true);
            }
            // Modified by Arpita Soni on 07/29/2016 to resolve some data related issues in grid
            // Passed column indexes dynamically
            ListOfSelectedIds.Id = [];
            for (var i = 0; i < count; i++) {
                if ($(HomeGrid.cells2(i, 14).cell).find("div").last().attr("class") == "honeycombbox-icon-gantt honeycombbox-icon-gantt-Active") {
                    ListOfSelectedIds.Id.push(HomeGrid.getRowId(i));
                    
                    var Taskname = HomeGrid.cellByIndex(i, TaskNameColIndex).getValue();
                    var ActivityTypeName = HomeGrid.cellByIndex(i, 0).getValue();
                    if (ActivityTypeName == "Plan") {
                        HomeGrid.cellByIndex(i, 2).setValue(Taskname);
                    }
                    if (ActivityTypeName == "Campaign") {

                        //1782
                        parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 2).setValue(parentname);
                        //1782
                        HomeGrid.cellByIndex(i, 3).setValue(Taskname);
                    }
                    if (ActivityTypeName == "Program") {

                        // 1782
                        parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                        parentid = HomeGrid.getParentId(parentid);
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 2).setValue(parentname);
                        // 1782

                        parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 3).setValue(parentname);
                        HomeGrid.cellByIndex(i, 4).setValue(Taskname);
                    }
                    if (ActivityTypeName == "Tactic") {

                        // 1782
                        parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                        parentid = HomeGrid.getParentId(parentid);
                        parentid = HomeGrid.getParentId(parentid);
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 2).setValue(parentname);
                        // 1782

                        parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 4).setValue(parentname);
                        parentid = HomeGrid.getParentId(parentid);
                        parentname = HomeGrid.cells(parentid, TaskNameColIndex).getValue();
                        HomeGrid.cellByIndex(i, 3).setValue(parentname);

                        HomeGrid.cellByIndex(i, 5).setValue(Taskname);
                    }
                    HomeGrid.cellByIndex(i, PlannedCostColIndex).setValue(HomeGrid.cellByIndex(i, 16).getValue());
                    HomeGrid.cellByIndex(i, AssetTypeColIndex).setValue(HomeGrid.cellByIndex(i, 17).getValue());
                    HomeGrid.cellByIndex(i, TypeColIndex).setValue(HomeGrid.cellByIndex(i, 18).getValue());
                    HomeGrid.cellByIndex(i, OwnerColIndex).setValue(HomeGrid.cellByIndex(i, 19).getValue());
                    HomeGrid.cellByIndex(i, TargetStageGoalColIndex).setValue(HomeGrid.cellByIndex(i, 20).getValue());
                    HomeGrid.cellByIndex(i, MQLColIndex).setValue(HomeGrid.cellByIndex(i, 21).getValue());
                    HomeGrid.cellByIndex(i, 12).setValue(HomeGrid.cellByIndex(i, 22).getValue());
                    HomeGrid.cellByIndex(i, 13).setValue(HomeGrid.cellByIndex(i, 23).getValue());
                }
            }
            var data;
            var Entity = [];
            var csvHeader = String(",Plan,Campaign,Program,Tactic,Start Date,End Date,Planned Cost,Asset Type,Type,Owner,Target Stage Goal,"+ MQlTitle +",Revenue".split(',')).toString();
            Entity.push(csvHeader + '\n');
            if (ListOfSelectedIds.Id.length > 0) {
                $.each(ListOfSelectedIds.Id, function () {
                    data = [];
                    for (var i = 0; i < 14; i++) {
                        if (i == 8) {
                            data[i] = "\"" + '$' + HomeGrid.cells(this, i).getValue().toString() + "\"";
                        }
                        else if (i == 9) {
                            // data[i] = "\"" + $("#ulTacticType").find('li').attr('id', '#liTT' + HomeGrid.cells(this, i).getValue().toString()).text() + "\"";
                            var TT = HomeGrid.cells(this, 14).getValue();
                            data[i] = "\"" + $(TT).last().attr("TacticType") + "\"";
                        }
                        else if (i == 10) {
                            //  data[i] = "\"" + $("#ulSelectedOwner").find('li').attr('id', '#liOwner' + HomeGrid.cells(this, i).getValue().toString()).text() + "\"";
                            var OwnerName = HomeGrid.cells(this, 14).getValue();
                            data[i] = "\"" + $(OwnerName).last().attr("ownername") + "\"";


                        }
                        else if (i == 11) {
                            data[i] = "\"" + HomeGrid.cells(this, i).getValue() + "\"";
                        }
                        else {
                            //  data[i] = "\"" + HomeGrid.cells(this, i).getValue() + "\"";
                            data[i] = $('<span/>').html("\"" + HomeGrid.cells(this, i).getValue() + "\"").text();
                        }
                    }

                    if (data != null) {
                        Entity.push('' + String(data.slice(2, data.length) + '\n') + '');
                    }
                });
            }
          
            // Add By Nishant Sheth To resolve the issue for IE : #1782

            var dt = '@DateTime.Now.ToString("MM_dd_yyyy_hh_mm_ss")';
            var Filename = HomeGrid.cellByIndex(0, TaskNameColIndex).getValue().toString().substring(0, 20) + dt + '_GridData.csv';

            if (navigator.userAgent.search("Trident") >= 0) {
                if (!window.Blob) {
                    // if IE 9 then becuase ie 9 and lower version not support blob
                    //http://code.ciphertrick.com/2014/12/07/download-json-data-in-csv-format-cross-browser-support/
                    var IEwindow = window.open();
                    IEwindow.document.write('sep=,\r\n' + Entity.join(","));
                    IEwindow.document.close();
                    IEwindow.document.execCommand('SaveAs', true, Filename);
                    IEwindow.close();
                }
                else {
                    var fileData = ["sep=,\r\n" + Entity.join(",")];
                    blobObject = new Blob(fileData);
                    window.navigator.msSaveOrOpenBlob(blobObject, Filename); // Now the user will have the option of clicking the Save button and the Open button.
                }
            }
            else {
                //alert(2);
                $("#ExportCSVHoneyComb").attr('download', Filename)
                $("#ExportCSVHoneyComb").attr("href", 'data:Application/octet-stream,' + (escape(Entity.join(","))));
            }

            for (var i = 2 ; i <= 13 ; i++) {
                HomeGrid.deleteColumn(2);
            }
            //UpdateHomeGridData();
            //countid = 0;
            //HomeGrid.parse(GridDataHomeGrid, "json");

            //LoadAfterParsing();
            BindHomeGrid();

        }
    }

    // Add By Nishant Sheth
    var countid = 0;
    function UpdateHomeGridData(id) {
        var ColumnCount = HomeGrid.getColumnCount();
        var dataid;
        if (id == null) {
            dataid = ListOfSelectedIds.Id[countid];
        } else {
            dataid = id;
        }
        var datahome=JSON.parse(GridDataHomeGrid);
        $.each(datahome.rows, function () {

            // Update data for planrecords
            var planid = this.id;
            var plandata = this;
            if (planid == dataid) {
                for (var i = 0; i < ColumnCount; i++)
                {
                    plandata.data[i].value = HomeGrid.cells(planid, i).getValue();
                }
                countid++;
                return UpdateHomeGridData(countid);
            } else {

                // Update data for campaign records
                if(plandata.rows != null && plandata.rows != "")
                {
                    $.each(plandata.rows, function () {

                        var campid = this.id;
                        var campdata = this;
                        if (campid == dataid) {
                            for ( var i = 0; i < ColumnCount; i++) {
                                campdata.data[i].value = HomeGrid.cells(campid, i).getValue();
                            }
                            countid++;
                            return UpdateHomeGridData(countid);
                        }
                        else {
                            if(campdata.rows != null && campdata.rows != "")
                            {
                                // Update data for program records
                                $.each(campdata.rows, function () {

                                    var progid = this.id;
                                    var progdata = this;
                                    if (progid == dataid) {
                                        for ( var i = 0; i < ColumnCount; i++) {
                                            progdata.data[i].value = HomeGrid.cells(progid, i).getValue();
                                        }
                                        countid++;
                                        return UpdateHomeGridData(countid);
                                    } else {
                                        // Update data for tactic records
                                        if(progdata.rows != null && progdata.rows != "")
                                        {
                                            $.each(progdata.rows, function () {
                                                var tacid = this.id;
                                                var tacdata = this;
                                                if (tacid == dataid) {
                                                    for ( var i = 0; i < ColumnCount; i++) {
                                                        tacdata.data[i].value = HomeGrid.cells(tacid, i).getValue();
                                                    }
                                                    countid++;
                                                    return UpdateHomeGridData(countid);
                                                } else {
                                                    countid++;
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
            }
        })

        GridDataHomeGrid =JSON.stringify(datahome);
    }

    // End By Nishant Sheth

    function callsearch() {
        $("#divgridview").find(".grid_Search").each(function () {
            $(this).click(function (e) {
                inspectCloseFocus = $(this).position().top;
                var id = $(this).parent().next().html();
                var type = $(this).attr('id');
                gridSearchFlag = 1;
                DisplayEditablePopup(id, type);
            });
            return false;
        });
        //Commented BY Komal Rawal for 2056 to remove unresponsive error
        //$("#divgridview").find(".grid_add").each(function () {
        //    $(this).click(function (e) {
        //        $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
        //        gridSearchFlag = 1;
        //        var type = $(this).attr('id');
        //        var name = $(this).attr('alt');
        //        var title = $(this).parent().prev().attr('title');
        //        var permission = $(this).attr('per');
        //        var linetype = $(this).attr('lt');
        //        var LinkTacticPermission = $(this).attr('linktacticper');
        //        var LinkedTacticId = $(this).attr('linkedtacticid');
        //        DisplayPopUpMenu(type, name, title, permission,linetype,LinkTacticPermission,LinkedTacticId, e);
        //    });
        //});
        $('#gridbox').find('tbody tr').each(function () {
            var spnerror = $(this).find("#tacticIsRequired");
            if (typeof spnerror != 'undefined' && spnerror != null) {
                var div = $(spnerror).parent().parent();

                if (typeof div != 'undefined') {
                    $(spnerror).remove();
                    $('<span class="orange-corner-grid" id="spnError"></span>').insertAfter(div);
                }
            }
        });
        $("#divgridview").find(".orange-corner-grid").each(function () {
            $(this).hover(function () {
                $("#divTacticReqMsg").css('display', 'block');
                var position = $(this).offset();
                var targetOffset = $(this).offset().top;
                var targetHeight = $(this).height();
                var contentHeight = $('#divTacticReqMsg').outerHeight();
                var targetBottomOffset = targetOffset + targetHeight - contentHeight;

                $('#divTacticReqMsg').css({
                    'top': targetBottomOffset,
                    'left': position.left,
                });
                $('#popupType').css('display', 'none');
                $('#dhx_combo_select').css('display', 'none');
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            }, function () {
                $("#divTacticReqMsg").css('display', 'none');
            });
        });
    }
    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });
    //var GridDataCsv;
    var GridDataHomeGrid;
    function BindHomeGrid() {

        @*var JsonModel = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PlanDHTMLXGrid))';*@
        var JsonModel = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.PlanDHTMLXGrid)';

        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        HomeGrid.enableDragAndDrop(true);
        HomeGrid.enableAutoHeight(false);
        HomeGrid.enableAutoWidth(false);

        HomeGrid.setNumberFormat("$0,000", 6, ".", ","); // PlannedCost column index is 6
        
        HomeGrid.setImageSize(1, 1);
        HomeGrid.setCustomSorting(sort_Owner, OwnerColIndex);

        HomeGrid.setCustomSorting(sort_TacticType, TypeColIndex);
        HomeGrid.csvParser = HomeGrid.csvExtParser;
       
        HomeGrid.init();
       
        // added by bhavesh - 11-Nov-2015
        // Apply Distributed Parsing
        HomeGrid.attachEvent("onDistributedEnd", function () {
          
            HomeGrid.loadOpenStates();
            LoadAfterParsing();
          
            if(HomeGrid.getRowId(state0) != undefined || HomeGrid.getRowId(state0) == '')
            {
                HomeGrid.showRow(HomeGrid.getRowId(state0));
                HomeGrid.openItem(HomeGrid.getRowId(state0));//Added by Rahul Shah for PL #1744
            }
            //Added by Rahul Shah on 25/03/2016 for PL #2075
            if(!IslineItemDelete){  //Added By Maitri for #2040 Observation
                if ($("#hdnPlanLineItemID").val() != '0' && $("#hdnPlanLineItemID").val() != undefined) {
                    HomeGrid.showRow(HomeGrid.findCell($("#hdnPlanLineItemID").val(),3)[0][0]);
                    HomeGrid.setSelectedRow(HomeGrid.findCell($("#hdnPlanLineItemID").val(),3)[0][0]);
                }
            }

            //  }
            if ($("#gridbox").find(".rowselected").length >= 1) {
                var scrolltop = $(".rowselected").offset().top;
                $(window).scrollTop(scrolltop - 100);
            }
        });
        HomeGrid.enableDistributedParsing(true, 10, 0.1);

        var mainGridData = JsonModel;
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        GridDataHomeGrid = (mainGridData.toString().replace(/&amp;/g, '&'));

        //Added by Ashish mistry on 11/12/2015 for PL #1782 :- export to csv from honeycomb
        HomeGrid.parse(GridDataHomeGrid, "json");

        // Added by Arpita Soni on 07/29/2016 - To set index of the columns dynamically
        TaskNameColIndex = HomeGrid.getColIndexById("taskname");
        PlannedCostColIndex = HomeGrid.getColIndexById(plannedCostColId);
        AssetTypeColIndex = HomeGrid.getColIndexById("roitactictype");
        TypeColIndex = HomeGrid.getColIndexById("tactictype");
        OwnerColIndex = HomeGrid.getColIndexById("owner");
        TargetStageGoalColIndex = HomeGrid.getColIndexById("inq");
        MQLColIndex = HomeGrid.getColIndexById("mql");
        RevenueColIndex = HomeGrid.getColIndexById("revenue");

        //Added by Maitri Gandhi for #2040 on 31/3/2016
        HomeGrid.collapseAll();
        var cookie = document.cookie;
        if(cookie.indexOf("gridOpengridbox") > -1){
            var cookies = cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                if (cookies[i] == "gridOpengridbox") {
                    if (cookies[i].indexOf("|") > -1) {
                        cookies[i] = "gridOpengridbox=plan.1";
                        document.cookie = "gridOpengridbox=plan.1";   //  document.cookie = cookies.join(';');
                    }
                }
            }
        }
        else{
            document.cookie = "gridOpengridbox=plan.1";
        }
        setTimeout(function () {
            HomeGrid.loadOpenStates();},1000);

        LoadAfterParsing();
        
        // Add By Nishant Sheth
        // #1818 :: To display message

        if(parseInt('@countrows')>0)
        {
            $('#lblMarkringActivitiestitle').hide();
            $("#gridbox").show();
            $("#goalwrapper").show();
            $(".pull-right.toggle-status.source-sans-proregular").show();
            // $("#improvements").show(); //Modify by dashrath prajapati for ticket #1955
            $("#NodatawithfilterGrid").hide();

        }else{
            $('#lblMarkringActivitiestitle').hide();
            $("#gridbox").hide();
            $("#goalwrapper").hide();
            $(".pull-right.toggle-status.source-sans-proregular").hide();
            $("#improvements").hide();
            $("#NodatawithfilterGrid").show();
        }
        if($('#txtGlobalSearch').val() != undefined && $('#txtGlobalSearch').val() != "" && $('#txtGlobalSearch').val() != null) 
        {
            GlobalSearchonGrid($('#txtGlobalSearch').val(), $('#searchCriteria').val().replace(" ",""));
        }
        
    }

    // 1780

    //Added by Rahul shah for Honeycomb selection in grid
    function AddRemoveEntity(item) {
        //Changes  to improve performance issue
        if ($('#IsGridView').val().toLowerCase() != "true") {
            return false;
        }
        if ($(item).attr('id') == 'PlanAdd') {
            //var planid = $(item).attr('altId').split('_')[0];
            //if (planid != undefined) {
            //    var selectedRow = HomeGrid.findCell(planid, 3, true);
            //    HomeGrid.openItem(selectedRow[0][0]);
            //}
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));

                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                    ExportSelectedIds.CsvId.splice(index, 1);
                    ExportSelectedIds.ROITacticType.splice(index, 1);
                    ExportSelectedIds.DhtmlxRowId.splice(index, 1);
                    ExportSelectedIds.AnchorTacticId.splice(index, 1);
                }

                $(item).removeClass("honeycombbox-icon-gantt-Active");
                $(item).addClass("honeycombbox-icon-gantt");

            }
            else {

                $(item).addClass("honeycombbox-icon-gantt-Active");

                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname').replace('&amp','&'));
                ExportSelectedIds.OwnerName.push( $(item).attr('ownername'));
                ExportSelectedIds.TacticType.push($(item).attr('tactictype'));
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                ExportSelectedIds.CsvId.push($(item).attr('csvid'));
                ExportSelectedIds.ROITacticType.push($(item).attr('roitactictype'));
                ExportSelectedIds.DhtmlxRowId.push($(item).attr('dhtmlxrowid'));
                ExportSelectedIds.AnchorTacticId.push($(item).attr('anchortacticid'));
            }
        }


        if ($(item).attr('id') == 'CampaignAdd') {
         
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                    ExportSelectedIds.CsvId.splice(index, 1);
                    ExportSelectedIds.ROITacticType.splice(index, 1);
                    ExportSelectedIds.DhtmlxRowId.splice(index, 1);
                    ExportSelectedIds.AnchorTacticId.splice(index, 1);
                }
                $(item).removeClass("honeycombbox-icon-gantt-Active");
                $(item).addClass("honeycombbox-icon-gantt");

            }
            else {
                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push(($(item).attr('taskname')).replace('&amp','&'));
                ExportSelectedIds.OwnerName.push( $(item).attr('ownername'));
                ExportSelectedIds.TacticType.push($(item).attr('tactictype'));
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                ExportSelectedIds.CsvId.push($(item).attr('csvid'));
                ExportSelectedIds.ROITacticType.push($(item).attr('roitactictype'));
                ExportSelectedIds.DhtmlxRowId.push($(item).attr('dhtmlxrowid'));
                ExportSelectedIds.AnchorTacticId.push($(item).attr('anchortacticid'));
               
            }
        }


        if ($(item).attr('id') == 'ProgramAdd') {
           
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                $(item).removeClass("honeycombbox-icon-gantt-Active");
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                    ExportSelectedIds.CsvId.splice(index, 1);
                    ExportSelectedIds.ROITacticType.splice(index, 1);
                    ExportSelectedIds.DhtmlxRowId.splice(index, 1);
                    ExportSelectedIds.AnchorTacticId.splice(index, 1);
                }
                $(item).addClass("honeycombbox-icon-gantt");

            }
            else {

                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname').replace('&amp','&'));
                ExportSelectedIds.OwnerName.push( $(item).attr('ownername'));
                ExportSelectedIds.TacticType.push($(item).attr('tactictype'));
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                ExportSelectedIds.CsvId.push($(item).attr('csvid'));
                ExportSelectedIds.ROITacticType.push($(item).attr('roitactictype'));
                ExportSelectedIds.DhtmlxRowId.push($(item).attr('dhtmlxrowid'));
                ExportSelectedIds.AnchorTacticId.push($(item).attr('anchortacticid'));

            }
        }

        if ($(item).attr('id') == 'TacticAdd') {
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {

                // When package is selected then de-select asset then warning message and asset remain selected
                var IsAssetTactic = $(item).attr('roitactictype');
                var AssetTacId = $(item).attr('anchortacticid');
                var EntityId = $(item).attr('taskid');

                if (IsPackageView && PackageAnchorId == EntityId && IsAssetTactic == '@Enums.AssetType.Asset' && AssetTacId == EntityId) {
                    ShowMessage(true, "@RevenuePlanner.Helpers.Common.objCached.DeselectAssetFromPackage", 3000);
                    $('html,body').scrollTop(0);
                    return false;
                }

                $(item).removeClass("honeycombbox-icon-gantt-Active");
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                    ExportSelectedIds.CsvId.splice(index, 1);
                    ExportSelectedIds.ROITacticType.splice(index, 1);
                    ExportSelectedIds.DhtmlxRowId.splice(index, 1);
                    ExportSelectedIds.AnchorTacticId.splice(index, 1);
                }
                $(item).addClass("honeycombbox-icon-gantt");
            }
            else {
                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname').replace('&amp','&'));
                ExportSelectedIds.OwnerName.push( $(item).attr('ownername'));
                ExportSelectedIds.TacticType.push($(item).attr('tactictype'));
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                ExportSelectedIds.CsvId.push($(item).attr('csvid'));
                ExportSelectedIds.ROITacticType.push($(item).attr('roitactictype'));
                ExportSelectedIds.DhtmlxRowId.push($(item).attr('dhtmlxrowid'));
                ExportSelectedIds.AnchorTacticId.push($(item).attr('anchortacticid'));
            }
        }

        if ($('.honeycombbox-icon-gantt-Active').length == 0) {
            $(".honeycombbox").hide();
        }
        else {
            //$("#totalEntity").text($('.honeycombbox-icon-gantt-Active').length);
            $("#totalEntity").text(ExportSelectedIds.TaskID.length);
            $(".honeycombbox").show();

            $('.dropdown-menu').find('a#ExportCSVHoneyComb').css("display", "block");
            $('.dropdown-menu').find('a#ExportPDFVHoneyComb').css("display", "none");
        }
    }

    // Create funtion to load grid view event - Apply Distributed Parsing
    // Added By Bhavesh - Date: 11-Nov-2015
    function LoadAfterParsing() {
        // flag=true;
        if (eventidonedit != 0) {
            HomeGrid.detachEvent(eventidonedit);
        }
        eventidonedit = HomeGrid.attachEvent("onEditCell", doOnEditCell);
        if (eventiddrag != 0) {
            HomeGrid.detachEvent(eventiddrag);
        }
        eventiddrag = HomeGrid.attachEvent("onDrag", doOnDrag);
        if (eventidonscroll != 0) {
            HomeGrid.detachEvent(eventidonscroll);
        }
        eventidonscroll = HomeGrid.attachEvent("onScroll", function (sLeft, sTop) {
            $(".dhx_combo_select").css("display", "none");
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            $("#popupType").css("display", "none");
        });
        if (eventidonbeforedrag != 0) {
            HomeGrid.detachEvent(eventidonbeforedrag);
        }
        eventidonbeforedrag = HomeGrid.attachEvent("onBeforeDrag", function (id) {
            if (id.split(".")[0].toString() != "tact") return false;//denies dragging if user data exists
            var locked = HomeGrid.cells(id, TaskNameColIndex).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
            return true;                                          //allows dragging in any other case
        });

        $(".grid_Search").off("click");
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).parent().next().html();
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });
       
        if (isCopyTacticHomeGrid != 0) {
            // Modified by Rahul Shah for PL #2307 on 23/06/2016 to display data without search when user add/copy tactic,program,campaign for gridview.
            $('#txtGlobalSearch').val("");
            $('#ExpClose').css('display', 'none');                
            $('#ExpSearch').css('display', 'block');
            var selectedcell = HomeGrid.findCell(isCopyTacticHomeGrid, 3, true);
            var id = selectedcell[0];
            var rowid;
            if(id != undefined && id != 'undefined')
            {
                rowid = id[0];

                var SourcePtype = (rowid).split(".")[0];
                HomeGrid.openItem(rowid);
               
                ItemIndex=HomeGrid.getRowIndex(rowid);
                state0=ItemIndex;
                HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);
            }
            isCopyTacticHomeGrid = 0;
            isCopyTactic = 0;
        }
        else if (isEditTacticHomeGrid != 0) {
            var selectedcell = HomeGrid.findCell(isEditTacticHomeGrid, 3, true);

            var id = selectedcell[0];
            var rowid;
            if(id != undefined && id != 'undefined')
            {
                rowid = id[0];
                HomeGrid.openItem(HomeGrid.getParentId(rowid));
                HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);

                ItemIndex=HomeGrid.getRowIndex(rowid);
                state0=ItemIndex;
            }
            isEditTacticHomeGrid = 0;
            isEditTactic = 0;
        }

        if (editidonOpenEnd != 0) {
            HomeGrid.detachEvent(editidonOpenEnd);
        }
        editidonOpenEnd = HomeGrid.attachEvent("onOpenEnd", function (rowid) {

            setTimeout(function () {
                HomeGrid.saveOpenStates();
            } , 1000);  //Added by Maitri Gandhi for #2040 on 31/3/2016
            //Modified by komal Rawal for #1553
            $(".grid_Search").off("click");
            $(".grid_Search").click(function (e) {
                inspectCloseFocus = $(this).position().top;
                var id = $(this).parent().next().html();
                var type = $(this).attr('id');
                gridSearchFlag = 1;
                DisplayEditablePopup(id, type);

            });
            // Start - Added by Arpita Soni for Ticket #2354 on 07/20/2016
            // Get child tactics of campaign or program
            var childItems = HomeGrid.getAllSubItems(rowid);
            if (childItems != undefined && childItems != null && childItems != "")
            {
                childItems = childItems.split(',').filter(function(tac) {
                    return tac.indexOf('tact') > -1;
                });

                // Deselect honeycomb when honey comb is closed then expand campaign or program
                $.each(childItems,function(item) {
                    var objHoneyComb = $(HomeGrid.getRowById(childItems[item])).find('div[id=TacticAdd]');
                    var altIdForTac = objHoneyComb.attr('altid');
                    var index = ExportSelectedIds.TaskID.indexOf(altIdForTac);
                    if(index < 0){
                        objHoneyComb.removeClass('honeycombbox-icon-gantt-Active');
                    }
                    else{
                        objHoneyComb.addClass('honeycombbox-icon-gantt-Active');
                    }
                });
            }
            // End - Added by Arpita Soni for Ticket #2354 on 07/20/2016
        });

        if(IsExportToCsv)
        {
            BindEntityState();
        }
    }
    function sort_Owner(a, b, ord, a_id, b_id) {

        a = HomeGrid.cells(a_id, OwnerColIndex).getText();
        b = HomeGrid.cells(b_id, OwnerColIndex).getText();
        return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
    };
    function sort_TacticType(a, b, ord, a_id, b_id) {

        var atype = a_id.split(".")[0].toString();
        var btype = b_id.split(".")[0].toString();
        if (atype == "tact" && btype == "tact") {
            a = HomeGrid.cells(a_id, TypeColIndex).getText();
            b = HomeGrid.cells(b_id, TypeColIndex).getText();
            return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
        } else return 0;
    };
    function convertNumber(num) {

        var finlval = 0;
        var base = parseFloat(num.replace('$', ''));
        if (num.toLowerCase().match(/k/)) {
            return finlval = Math.round(base * 1000);
        }
        else if (num.toLowerCase().match(/m/)) {
            return finlval = Math.round(base * 1000000);
        }
        else if (num.toLowerCase().match(/b/)) {
            return finlval = Math.round(base * 1000000000);
        }
        else
            return finlval = numb.replace('$', '');
    }
    function ResizeGrid(wid) {
        $("#gridbox").attr("width", wid);
        HomeGrid.setSizes();
        LoadAfterParsing();
    }
    function doOnDrag(sid, tid) {

        var dragSourcePtype = HomeGrid.getParentId(sid).split(".")[0];
        var dragSourcetype = sid.split(".")[0].toString()
        var dragTargettype = tid.split(".")[0];
        if (dragSourcetype == "tact") {
            if (dragSourcePtype == dragTargettype) {
                var splanid = HomeGrid.cells("plan." + sid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                var dplanid = HomeGrid.cells("plan." + tid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();

                var parentid = HomeGrid.getParentId(sid);
                if (dplanid == splanid) {
                    if (parentid != tid) {
                        var DestinationMember = new Array();
                        DestinationMember = HomeGrid.getAllSubItems(tid).split(',');

                        var sourseid = HomeGrid.cells(sid, HomeGrid.getColIndexById('id')).getValue();
                        var destinatinId = HomeGrid.cells(tid, HomeGrid.getColIndexById('id')).getValue();
                        var tacticname = HomeGrid.cells(sid, TaskNameColIndex).getValue();
                        var dtactictitle = "";

                        for (a in DestinationMember) {
                            if (DestinationMember[a].toString() != "" && DestinationMember[a].toString() != null) {
                                dtactictitle = HomeGrid.cells(DestinationMember[a].toString(), TaskNameColIndex).getValue();
                                if (dtactictitle == tacticname) {
                                    alert("Tactic with same title already exist in Targeted Program.");
                                    return false;
                                }
                            }
                        }

                        ProgarmName = HomeGrid.cells(tid, TaskNameColIndex).getValue();
                        $("#lipname").html(ProgarmName);
                        $("#hdnsourceid").val(sourseid);
                        $("#hdndestid").val(destinatinId);
                        $("#divMovetacticPopup").modal('show');
                        // Unselect all items from the grid
                        RemoveAllHoneyCombData();
                    }
                    else {
                        ProgarmName = HomeGrid.cells(tid, TaskNameColIndex).getValue();
                        alert("Tactic is already in " + ProgarmName + ".");
                    }
                }
                else
                    alert("Tactic can move only to same plan program."); return false;
            }
            else {
                var stype = GetItemType(sid.split(".")[0].toString());
                var dtype = GetItemType(dragTargettype.toString());

                alert(stype + " can not move to " + dtype); return false;
            }
        }
        else {
            alert("Only tactic can Move.");
            return false;
        }

    }
    function GetItemType(val) {
        var itemType = "";
        if (val.toString() == "tact")
            itemType = "Tactic";
        else if (val.toString() == "prog")
            itemType = "Program";
        else if (val.toString() == "camp")
            itemType = "Campaign";
        else if (val.toString() == "plan")
            itemType = "Plan";
        else if (val.toString() == "line")
            itemType = "LineItem";
        return itemType;
    }
    function SaveMoveTactic() {
        var sourseid = $("#hdnsourceid").val();
        var destinatinId = $("#hdndestid").val();
        $.ajax({

            type: 'POST',

            url: '@Url.Action("SaveGridDetail")', // we are calling json method
            data: { UpdateType: "tactic", UpdateColumn: "ParentID", UpdateVal: destinatinId, Id: parseInt(sourseid) },
            dataType: 'json',

            success: function (states) {
                LoadPlanGrid();
            }
        });
    }
    function formatDate(d) {
        d = new Date(d);
        function addZero(n) {
            return n < 10 ? '0' + n : '' + n;
        }
        return addZero(d.getMonth() + 1) + "/" + addZero(d.getDate()) + "/" + d.getFullYear();
    }
    var progid = 0;
    var campid = 0;
    var planid = 0;
    var tactid = 0;
    var progActVal = 0;
    var CampActVal = 0;
    var PlanActVal = 0;
    var TactActVal = 0;
    var diff = 0;
    var newProgVal = 0;
    var newCampVal = 0;
    var newPlanVal = 0;
    var newTactVal = 0;
    var value;

    var TacticName;

    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var updatetype = rowId.split(".")[0];
        var Id;
        var UpdateColumn;
        var UpdateVal;
        var Colind = this.cell.cellIndex;
        var lineItemFlag = 0;

        //Added by Rahul Shah on 30/11/2015 for PL #1764.
        var hdnYear;
        hdnYear= @ViewBag.Year;

        if(stage == 0)
        {
            var  newvalue = HomeGrid.cells(rowId, cellInd).getValue();
            if(newvalue.indexOf("</div>") > -1)
            {
                if (newvalue.split("</div>").length > 2) {
                    value = newvalue.split("</div>")[0] + '</div>' + newvalue.split("</div>")[1] ;
                    TacticName = newvalue.split("</div>")[2];
                }
                else {
                    value = newvalue.split("</div>")[0];
                    TacticName = newvalue.split("</div>")[1];
                }
            }
        }
        else
        {
            if(nValue != undefined)
            {
                TacticName = nValue;
            }
        }

        UpdateColumn = HomeGrid.getColLabel(Colind, 0);
        if (stage == 0) {

            // Only check for type column
            if (Colind == TypeColIndex) {
                if (updatetype == "line") {
                    var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                    if (actval == "") {
                        return false;
                    }
                    var combo = HomeGrid.getCombo(cellInd);
                    var lineitemtype = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.lineitemtype))');
                    //  d = optionlist.filter(filterbyname);
                    combo.clear();
                    $.each(lineitemtype, function (i, item) {
                        combo.put(item.LineItemTypeId, item.Title);
                    });
                }
                else {
                    var combo = HomeGrid.getCombo(cellInd);
                    var tacticTypelist = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.TacticTypelist))');
                    combo.clear();
                    $.each(tacticTypelist, function (i, item) {
                        combo.put(item.TacticTypeId, item.Title);
                    });
                }
            }
            var locked = HomeGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
        }
        if (stage == 1) {

            if (updatetype == "line") {
                var oldval = HomeGrid.cells(rowId, cellInd).getValue();
                var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                if (cellInd != 1) {
                    if (oldval == "")
                        $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                    else {
                        var v1 = parseInt(oldval);
                        if (isNaN(v1)) {
                            $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                            $('.dhx_combo_select').val(actval);
                        }
                        else
                            $('.dhx_combo_select').val(actval);
                    }
                }
            }
            $(".dhx_combo_edit").off("keydown");
            if (UpdateColumn == "Planned Cost" || UpdateColumn == "Target Stage Goal") {

                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                HomeGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }

            if (UpdateColumn == "Target Stage Goal") {
                var psv = HomeGrid.cells(rowId, TargetStageGoalColIndex).getValue().split(" ");
                this.editor.obj.value = (psv[0].replace(/,/g, ""));
            }
        }
        if (stage == 2) // start edit Shipping column
        {
            if (nValue != null && nValue != "") {

                //Added By Komal Rawal to Change the value in array if grid updated
                var NewValue = htmlDecode(nValue);
                //Modified by Rahul Shah on 18/12/2015 fot PL #1813.
                var TaskID = HomeGrid.cells(rowId, 3).getValue();
                var oldAssetType = HomeGrid.cells(rowId, AssetTypeColIndex).getValue();
                //Modified by Rahul Shah on 09/03/2016 for PL #1939
                if (UpdateColumn == "" || UpdateColumn == null)
                    UpdateColumn = HomeGrid.getColLabel(Colind, 0);
                if(UpdateColumn == "Task Name"){
                    if (CheckHtmlTag(nValue) == false) {
                        alert("@RevenuePlanner.Helpers.Common.objCached.TitleContainHTMLString");
                        return false;
                    }
                    
                    updatePlanNameDrp(TaskID,NewValue);
                }
                if(cellInd == 1)
                {
                    $("div[taskId='" + TaskID + "']").attr('taskname',NewValue);
                }
                if(ExportSelectedIds.TaskID.length > 0)
                {
                    var TasknameIndex = ExportSelectedIds.Title.indexOf(oValue);
                    if(TasknameIndex >= 0 )
                    {
                        ExportSelectedIds.Title[TasknameIndex] = NewValue;

                    }

                }
                //End
                var sdateindex = HomeGrid.getColIndexById('startdate');
                var edateindex = HomeGrid.getColIndexById('enddate');
                var idindex = HomeGrid.getColIndexById('id');
                var costindex = HomeGrid.getColIndexById('plannedcost');
                var stageindex = HomeGrid.getColIndexById('inq');

                Id = HomeGrid.cells(rowId, idindex).getValue();

                if (UpdateColumn == "Start Date") {

                    var startyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], sdateindex).getValue()).getFullYear();
                    var edate = HomeGrid.cells(rowId, edateindex).getValue();
                    if (!CheckDateYear(nValue, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false; //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                    if (!validateDateCompare(nValue, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                    if (updatetype == "prog") {
                        var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                        if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) return false;
                    }
                    if (updatetype == "camp") {
                        var psdate = HomeGrid.getUserData(rowId, "psdate");
                        var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                        if (!validateDateCompare(nValue, psdate, "@RevenuePlanner.Helpers.Common.objCached.ProgramStartDateCompareWithParentStartDate")) {
                            return false;
                        }
                        if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) {
                            return false;
                        }
                    }
                    nValue = formatDate(nValue);
                    oValue = formatDate(oValue);
                }
                if (UpdateColumn == "End Date") {
                    var endyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], edateindex).getValue()).getFullYear();
                    var sdate = HomeGrid.cells(rowId, sdateindex).getValue();

                    if (!CheckDateYear(nValue, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;  //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                    if (!validateDateCompare(sdate, nValue, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                    if (updatetype == "prog") {
                        var tedate = HomeGrid.getUserData(rowId, "tedate");
                        if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) return false;
                    }
                    if (updatetype == "camp") {
                        var pedate = HomeGrid.getUserData(rowId, "pedate");
                        var tedate = HomeGrid.getUserData(rowId, "tedate");
                        if (!validateDateCompare(pedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.ProgramEndDateCompareWithParentEndDate")) {
                            return false;
                        }
                        if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) {
                            return false;
                        }
                    }
                    nValue = formatDate(nValue);
                    oValue = formatDate(oValue);
                }
                if (UpdateColumn.toString().trim() == "Target Stage Goal") {
                    var splitoval = oValue.split(" ");
                    if (nValue != splitoval[0].replace(/,/g, "")) {
                        var tactictypeindex = HomeGrid.getColIndexById('tactictype');
                        var tacticTypeId = HomeGrid.getUserData(rowId, "tactictype");
                        GetConversionRate(Id, tacticTypeId, UpdateColumn, nValue, rowId, nValue, null);
                        return true;
                    }
                    else
                        return false;
                }
                if (UpdateColumn == "Type" && updatetype == "tact") {
                    var tacticTypeId = nValue;
		            var objHoneyComb = $(HomeGrid.getRowById(rowId)).find('div[id=TacticAdd]');
		            // Added by Arpita Soni for Ticket #2354 
                    // If user changes asset to promo then confirm to delete entire package.
                    var arrTacTypes = JSON.parse('@Html.Raw(Json.Encode(lstTacticType))');
                    var newAssetType = arrTacTypes.filter(function(v) {
                        return v.TacticTypeId == tacticTypeId; // Filter to get asset type for selected tactic type
                    });
                    if(newAssetType != null && newAssetType.length > 0) {
                        newAssetType  = newAssetType[0].AssetType; 
                    }
                    if (objHoneyComb != undefined && objHoneyComb != null ) {
                        var anchorTacId = objHoneyComb.attr('anchortacticid');
                        if(anchorTacId != null && anchorTacId != "0") 
                        {
	                        if (oldAssetType != null && oldAssetType != "" && oldAssetType != newAssetType && oldAssetType.toLowerCase() == '@Convert.ToString(Enums.AssetType.Asset).ToLower()')
	                        {
	                            var retValue = confirm('Package associated to this tactic will be deleted. Do you wish to continue?');
	                            if(!retValue){
	                                return false;
	                            }
	                        }
		                }
		            }
                    // If user changes promo to asset then confirm to delete all mediacode.
                    if ( '@Sessions.IsMediaCodePermission.ToString().ToLower()'=='true' && newAssetType != null && newAssetType != "" && oldAssetType != newAssetType && newAssetType.toLowerCase() == '@Convert.ToString(Enums.AssetType.Asset).ToLower()') {
                        var retValue = confirm('Media code associated to this tactic will be deleted. Do you wish to continue?');
                        if (!retValue) {
                            return false;
                        }
                    }
                    //end
                    if (nValue != oValue) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                            data: { tacticTypeId: tacticTypeId },
                            success: function (data) {
                                //Modified by Rahul Shah on 18/12/2015 fot PL #1813.
                                var TaskID = HomeGrid.cells(rowId,3).getValue();
                                if(ExportSelectedIds.TaskID.length > 0)
                                {
                                    var OldValue = $("div[taskId='" + TaskID + "']").attr('TacticType')
                                    var TacticTypeIndex = ExportSelectedIds.TacticType.indexOf(OldValue);
                                    if(TacticTypeIndex >= 0 && data.TacticTypeName != ""  )
                                    {
                                        ExportSelectedIds.TacticType[TacticTypeIndex] = data.TacticTypeName;

                                    }
                                }
                                if(data.TacticTypeName != "" && data.TacticTypeName != null)
                                {
                                    $("div[taskId='" + TaskID + "']").attr('tactictype',data.TacticTypeName);
                                }
                                pcost = data.revenue;
                                var stagetitle = data.stageTitle;
                                var projectedStageValue = data.projectedStageValue;
                                if (parseFloat(projectedStageValue) > 0)
                                    HomeGrid.cells(rowId, TargetStageGoalColIndex).setValue(FormatCommas(projectedStageValue.toString(), false) + " " + stagetitle);
                                else
                                    HomeGrid.cells(rowId, TargetStageGoalColIndex).setValue(projectedStageValue + " " + stagetitle);
                                
                                HomeGrid.setUserData(rowId, "stage", stagetitle);
                                
                                HomeGrid.setUserData(rowId, "tactictype", tacticTypeId);
                                GetConversionRate(Id, tacticTypeId, UpdateColumn, projectedStageValue, rowId, nValue, data.stageId);
                            }
                        });
                        return true;
                    }
                }
                if (updatetype == "line") {
                    var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                    if (actval == null || actval == "")
                        actval = oValue;
                    if (nValue != oValue && nValue != actval) {

                        UpdateVal = nValue;
                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                        tactid = HomeGrid.getParentId(rowId);
                        progid = HomeGrid.getParentId(tactid);
                        campid = HomeGrid.getParentId(progid);
                        planid = HomeGrid.getParentId(campid);
                        var TotalRowIds = HomeGrid.getAllSubItems(tactid);
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("SaveGridDetail")', // we are calling json method
                            data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                            dataType: 'json',
                            success: function (states) {
                                if (states.errormsg != null && states.errormsg.trim() != "") {
                                    alert(states.errormsg.trim());
                                    HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                    return false;
                                }
                                else if (UpdateColumn == "Planned Cost") {
                                    //Added By Rahul Shah on 16/10/2015 for PL 1559
                                    diff = parseInt(nValue) - parseInt(oValue);
                                    diffLineAndTactic = states.lineItemCost - states.tacticCost
                                    if (states.lineItemCost > states.tacticCost) {

                                        SetColumUpdatedValue(PlannedCostColIndex, diffLineAndTactic);
                                        HomeGrid.cells(progid, PlannedCostColIndex).setValue((newProgVal));
                                        HomeGrid.cells(campid, PlannedCostColIndex).setValue((newCampVal));
                                        HomeGrid.cells(planid, PlannedCostColIndex).setValue((newPlanVal));
                                        HomeGrid.cells(tactid, PlannedCostColIndex).setValue((newTactVal));
                                        for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                            
                                            if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") { //Modiied by Rahul Shah

                                                HomeGrid.cells(TotalRowIds.split(',')[i], PlannedCostColIndex).setValue((states.otherLineItemCost));
                                                HomeGrid.deleteRow(TotalRowIds.split(',')[i]);
                                            }
                                        }
                                    }
                                        //Added by Rahul Shah for PL #1744
                                    else if(states.lineItemCost == states.tacticCost){
                                        for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                            
                                            if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {

                                                HomeGrid.deleteRow(TotalRowIds.split(',')[i]);
                                            }
                                        }
                                    }
                                    else {

                                        for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                            
                                            if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {

                                                HomeGrid.cells(TotalRowIds.split(',')[i], PlannedCostColIndex).setValue((states.otherLineItemCost));

                                            }
                                        }
                                        //Added by Rahul Shah for PL #1744. here gridrefresh and also set focus
                                        //$('#liGrid').click();
                                        //ItemIndex=HomeGrid.getRowIndex(tactid);
                                        //state0=ItemIndex;

                                    }
                                    //$('#liGrid').click();
                                    ChangeTabView('liGrid'); //Modified by Komal Rawal for 2013 Home/Plan Layout changes
                                    ItemIndex=HomeGrid.getRowIndex(tactid);
                                    state0=ItemIndex;
                                    HomeGrid.cells(rowId, PlannedCostColIndex).setValue((nValue));
                                    
                                }
                                else if(UpdateColumn == "Type")
                                    HomeGrid.cells(rowId, cellInd).setAttribute("actval",nValue);
                            }
                        });
                    }
                    return true;
                }
                if (htmlDecode(nValue) != oValue) {//Modified by Rahul Shah on 30/11/2015 for PL #1778. here in special character nValue data carry with Extra character.

                    if (UpdateColumn != "Type" && UpdateColumn.toString().trim() != "Target Stage Goal") {
                        progid = HomeGrid.getParentId(rowId);
                        campid = HomeGrid.getParentId(progid);
                        planid = HomeGrid.getParentId(campid);
                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                        var TotalRowIds = HomeGrid.getAllSubItems(rowId);
                        //
                        UpdateVal = nValue;
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("SaveGridDetail")', // we are calling json method
                            data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                            dataType: 'json',
                            success: function (states) {
                                //Modified by Rahul Shah on 18/12/2015 fot PL #1813.
                                var TaskID = HomeGrid.cells(rowId,3).getValue();
                                var OldValue = $("div[taskId='" + TaskID + "']").attr('OwnerName');

                                if(ExportSelectedIds.TaskID.length > 0)
                                {

                                    var OwnerNameIndex = ExportSelectedIds.OwnerName.indexOf(OldValue);

                                    if(OwnerNameIndex >= 0 && states.OwnerName != "" )
                                    {
                                        ExportSelectedIds.OwnerName[OwnerNameIndex] = states.OwnerName;

                                    }
                                }
                                if(states.OwnerName != "" && states.OwnerName !=  null)
                                {
                                    $("div[taskId='" + TaskID + "']").attr('ownername',states.OwnerName);
                                }

                                //Added By Komal Rawal for 2058
                                if((OldValue.toString() != states.OwnerName.toString()) && states.OwnerName != "" &&  states.OwnerName != null)
                                {
                                    if (planid != 0 && planid != null && planid != undefined) {
                                        var PlanID = HomeGrid.cells(planid,3).getValue();
                                    }
                                    else if(campid != 0 && campid != null && campid != undefined) {
                                        var PlanID = HomeGrid.cells(campid,3).getValue();
                                    }
                                    else{
                                        var PlanID = HomeGrid.cells(progid,3).getValue();
                                    }
                                    //var PreviousOwnerListlength = $("#ulSelectedOwner li").length;
                                    $("#ulSelectedOwner li input[type=checkbox]").each(function () {
                                        if ($(this).attr('checked') != 'checked') {
                                            filters.tempOwnerIds.push($(this).attr("id"));
                                        }
                                    });
                                    GetTacticTypelist(PlanID, false); //Called to manage Data in cache
                                    GetOwnerListForFilter(PlanID, false);
                                    //var OwnerListLength = $("#ulSelectedOwner li").length;
                                    //if (( PreviousOwnerListlength != OwnerListLength && PreviousOwnerListlength != 0)) {
                                    SaveLastSetofViews();
                                    //}

                                }
                                //End
                                if (states.errormsg != null && states.errormsg.trim() != "") {
                                    alert(states.errormsg.trim());
                                    HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                    return false;
                                }
                                if (UpdateColumn == "Start Date") {

                                    if(states.IsExtended){
                                        alert("Since the Tactic is link to another Plan, it cannot be extended");
                                        HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                        return false;
                                    }

                                    //Modified By Komal Rawal for #1848 Link To tactic feature
                                    var EndDate = HomeGrid.cells(rowId, 5).getValue();
                                    var EndYear = EndDate.split('/')[2];
                                    var StartYear = nValue.split('/')[2];
                                    var YearDiff = EndYear - StartYear;

                                    var oldvalueofEndYear = oValue.split('/')[2];
                                    var _yrDiff=oldvalueofEndYear-StartYear;

                                    if(YearDiff > 0)
                                    {

                                        var getvalue = HomeGrid.cells(rowId, 1).getValue();
                                        var Index = getvalue.indexOf("unlink-icon");
                                        if(Index <= -1)
                                        {
                                            var UnLinkIconDiv ="<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>";
                                            HomeGrid.cells(rowId, TaskNameColIndex).setValue(UnLinkIconDiv + getvalue);

                                            $("div[tacticaddId='" + TaskID + "']").attr("linktacticper", "True");
                                        }

                                    }
                                    else
                                    {

                                        if(_yrDiff == 0)
                                        {
                                            return false;
                                        }

                                        var getvalue = HomeGrid.cells(rowId, TaskNameColIndex).getValue();
                                        var Index = getvalue.indexOf("</div>");
                                        if(Index > -1)
                                        {
                                            HomeGrid.cells(rowId, TaskNameColIndex).setValue(getvalue.split("</div>")[1]);
                                            $("div[tacticaddId='" + TaskID + "']").attr("linktacticper", "False")
                                        }
                                    }
                                    //End
                                    ComapreDate(updatetype, rowId, sdateindex, nValue, UpdateColumn);
                                }

                                if (UpdateColumn == "End Date") {

                                    if(states.IsExtended){
                                        alert("Since the Tactic is link to another Plan, it cannot be extended");
                                        HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                        return false;
                                    }
                                    //Modified By Komal Rawal for #1848 Link To tactic feature
                                    var StartDate = HomeGrid.cells(rowId,4).getValue();
                                    var StartYear = StartDate.split('/')[2];
                                    var EndYear = nValue.split('/')[2];
                                    var YearDiff = EndYear - StartYear;
                                    //
                                    var oldvalueofEndYear = oValue.split('/')[2];
                                    var _yrDiff=oldvalueofEndYear-StartYear;
                                    //

                                    if(YearDiff > 0)
                                    {

                                        var getvalue = HomeGrid.cells(rowId, TaskNameColIndex).getValue();
                                        var Index = getvalue.indexOf("unlink-icon");
                                        if(Index <= -1)
                                        {
                                            var UnLinkIconDiv ="<div class='unlink-icon unlink-icon-grid'><i class='fa fa-chain-broken'></i></div>";
                                            HomeGrid.cells(rowId, TaskNameColIndex).setValue(UnLinkIconDiv + getvalue);
                                            $("div[tacticaddId='" + TaskID + "']").attr("linktacticper", "True")
                                        }
                                    }
                                    else
                                    {

                                        // return false;
                                        if(_yrDiff == 0)
                                        {
                                            return false;
                                        }

                                        var getvalue = HomeGrid.cells(rowId, TaskNameColIndex).getValue();
                                        var Index = getvalue.indexOf("</div>");
                                        if(Index > -1)
                                        {
                                            HomeGrid.cells(rowId, TaskNameColIndex).setValue(getvalue.split("</div>")[1]);
                                            $("div[tacticaddId='" + TaskID + "']").attr("linktacticper", "False")
                                        }
                                    }
                                    //End
                                    ComapreDate(updatetype, rowId, edateindex, nValue, UpdateColumn);
                                }
                                if (UpdateColumn == "Planned Cost") {
                                    //Added By Rahul Shah on 16/10/2015 for PL 1559
                                    if (nValue < states.lineItemCost) {
                                        HomeGrid.cells(rowId, PlannedCostColIndex).setValue((oValue));
                                    }
                                    //Added by Rahul Shah for PL #1744.
                                    else if (nValue == states.lineItemCost) {
                                        if (TotalRowIds != "") {
                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {

                                                if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                    HomeGrid.deleteRow(TotalRowIds.split(',')[i]);
                                                }
                                            }
                                        }
                                    }
                                    else {

                                        diff = parseInt(nValue) - parseInt(oValue);
                                        SetColumUpdatedValue(PlannedCostColIndex, diff);
                                        HomeGrid.cells(progid, PlannedCostColIndex).setValue((newProgVal));
                                        HomeGrid.cells(campid, PlannedCostColIndex).setValue((newCampVal));
                                        HomeGrid.cells(planid, PlannedCostColIndex).setValue((newPlanVal));
                                        HomeGrid.cells(rowId, PlannedCostColIndex).setValue((nValue));
                                        if (TotalRowIds != "") {
                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {

                                                if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                    HomeGrid.cells(TotalRowIds.split(',')[i], PlannedCostColIndex).setValue((states.OtherLineItemCost));
                                                }
                                            }
                                        }
                                        //Added by Rahul Shah for PL #1744. here gridrefresh and also set focus
                                        //$('#liGrid').click();
                                        //ItemIndex=HomeGrid.getRowIndex(rowId);
                                        //state0=ItemIndex;

                                    }
                                    //$('#liGrid').click();
                                    ChangeTabView('liGrid'); //Modified by Komal Rawal for 2013 Home/Plan Layout changes
                                    ItemIndex=HomeGrid.getRowIndex(rowId);
                                    state0=ItemIndex;
                                }
                                if (UpdateColumn == "Owner") {
                                    CheckPermissionByOwner(rowId, nValue, updatetype, parseInt(Id))

                                }
                                if (UpdateColumn == "Task Name") {
                                    $('#txtGlobalSearch').val("");
                                    $('#ExpClose').css('display', 'none');                
                                    $('#ExpSearch').css('display', 'block');
                                    GlobalSearch();
                                }

                            }
                        });
                    }

                    //Modified By Komal Rawal for #1848 Link To tactic feature
                    if(cellInd == 1)
                    {
                        if(value != undefined && value != "undefined" && value != null && value.trim() != '')
                        {
                            HomeGrid.cells(rowId, cellInd).setValue(value+"</div>" + TacticName);
                        }
                        else
                        {
                            HomeGrid.cells(rowId, cellInd).setValue(TacticName);
                        }
                    }
                    value = "";


                    $("div[id^='LinkIcon']").each(function () {

                        bootstrapetitle($(this), 'This tactic is linked to ' + "<U>"+ htmlDecode($(this).attr('linkedplanname') + "</U>"), "tipsy-innerWhite");
                    });
                    //End
                    return true;
                }


                // Modified By Komal Rawal for #1848 Link To tactic feature
                if(cellInd == 1)
                {
                    if(value != undefined && value != "undefined" && value != null)
                    {
                        HomeGrid.cells(rowId, cellInd).setValue(value+"</div>" + TacticName);
                    }
                    else
                    {
                        HomeGrid.cells(rowId, cellInd).setValue(TacticName);
                    }
                }
                value = "";


                $("div[id^='LinkIcon']").each(function () {

                    bootstrapetitle($(this), 'This tactic is linked to ' + "<U>"+ htmlDecode($(this).attr('linkedplanname') + "</U>"), "tipsy-innerWhite");
                });
                //End
                return true;
            }


        }


    }


    function updatePlanNameDrp(_planid,newpplanname) {
        $('#nl-form2 > div[class="nl-field nl-dd"]').find('li').each(function (e) {
            var planid = $(this).val().toString();
            if (planid == _planid) {
                var updatedPlantext = newpplanname;
                $(this).attr('originalvalue', updatedPlantext);
                $(this).text('');
                $(this).text(updatedPlantext);
                $(this).parent().parent().find('a').text(updatedPlantext)
            }
        });
    }

    function CheckPermissionByOwner(rowId, NewOwner, updatetype, updateid) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckPermissionByOwner")', // we are calling json method
            data: { NewOwnerID: NewOwner, UpdateType: GetItemType(updatetype), updatedid: parseInt(updateid) },
            dataType: 'json',
            success: function (data) {
                if (data.IsLocked == "1") {
                    HomeGrid.cells(rowId, TaskNameColIndex).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 4).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 5).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, PlannedCostColIndex).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, AssetTypeColIndex).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, TypeColIndex).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, OwnerColIndex).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, TargetStageGoalColIndex).setAttribute("locked", data.IsLocked);

                    HomeGrid.setCellTextStyle(rowId, TaskNameColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 2, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 4, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 5, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, PlannedCostColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, AssetTypeColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, TypeColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, OwnerColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, TargetStageGoalColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, MQLColIndex, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, RevenueColIndex, data.cellTextColor);               
                }
            },
            error: function (ts) { }
        });
    }
    function ComapreDate(updatetype, rowId, dateindex, nValue, Updatecolumn) {

        var newDate = new Date(formatDate(nValue)); //Modified by Rahul Shah on 30/11/2015 for PL #1764.
        if (updatetype == "tact") {

            progid = HomeGrid.getParentId(rowId);
            campid = HomeGrid.getParentId(progid);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(progid, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            var ProgstartDate = new Date(formatDate(HomeGrid.cells(progid, dateindex).getValue()));
            var Campstartdate = new Date(formatDate(HomeGrid.cells(campid, dateindex).getValue()));
            var Planstartdate = new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));

            if (Updatecolumn == "Start Date") {
                //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                if (ProgstartDate > newDate)
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (Campstartdate > newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMinDate = HomeGrid.getUserData(progid, "tsdate");
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(progid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) { }
                });

            }
            else if (Updatecolumn == "End Date") {

                //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                if (ProgstartDate < newDate)
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (Campstartdate< newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMaxDate = HomeGrid.getUserData(progid, "tedate");
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(progid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMaxDate));
                    }
                });

            }

        }
        else if (updatetype == "prog") {

            campid = HomeGrid.getParentId(rowId);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(rowId, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            var Campstartdate = new Date(formatDate(HomeGrid.cells(campid, dateindex).getValue()));
            var Planstartdate = new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));
            if (Updatecolumn == "Start Date") {
                if (Campstartdate > newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                var tactMinDate = HomeGrid.getUserData(campid, "tsdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")',
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) { }
                });
            }
            else if (Updatecolumn == "End Date") {
                if (Campstartdate < newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                var tactMaxDate = HomeGrid.getUserData(campid, "tedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "pedate", formatDate(data.ProgMaxDate));
                    },
                    error: function (ts) { }
                });
            }
        }
        else if (updatetype == "camp") {
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            planid = HomeGrid.getParentId(rowId);
            var Planstartdate =  new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));
            if (Updatecolumn == "Start Date") {
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
            else if (Updatecolumn == "End Date") {
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
        }
    }
    function GetConversionRate(TacticID, TacticTypeID, UpdateColumn, projectedStageValue, rowid, UpdateVal, stageid) {
        var pmql = 0;
        var pcost = 0;
        var isAssortment = true;
        var StageValue = 0;
        var revenue = 0;
        progid = HomeGrid.getParentId(rowid);
        campid = HomeGrid.getParentId(progid);
        planid = HomeGrid.getParentId(campid);
        StageValue = projectedStageValue;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/CalculateMQL")',
            data: {
                tactictid: parseInt(TacticID), TacticTypeId: parseInt(TacticTypeID), projectedStageValue: StageValue, RedirectType: isAssortment, isTacticTypeChange: true, StageID: stageid
            },
            success: function (data) {
                var tactActMqlVal = HomeGrid.cells(rowid, MQLColIndex).getAttribute("actval");
                var mqlConversion = 0;
                if (data.revenue != null)
                    revenue = data.revenue;
                if (data.mql == 'N/A') {
                    HomeGrid.setCellExcellType(rowid, MQLColIndex, "ro");
                    HomeGrid.cells(rowid, MQLColIndex).setValue(data.mql);
                    diff = parseInt(-tactActMqlVal);
                    SetColumUpdatedValue(MQLColIndex, diff);
                }
                else {
                   
                    if (data.mql != null) {
                        mqlConversion = data.mql;
                    }
                    var mqlValue = GetAbberiviatedValue(mqlConversion.toString(), false);
                    HomeGrid.cells(rowid, MQLColIndex).setValue(mqlValue);

                    diff = parseInt(mqlConversion) - parseInt(tactActMqlVal);
                    HomeGrid.cells(rowid, MQLColIndex).setAttribute("actval", mqlConversion);
                    SetColumUpdatedValue(MQLColIndex, diff);
                }
                HomeGrid.cells(progid, MQLColIndex).setValue(GetAbberiviatedValue(newProgVal), false);
                HomeGrid.cells(campid, MQLColIndex).setValue(GetAbberiviatedValue(newCampVal), false);
                HomeGrid.cells(planid, MQLColIndex).setValue(GetAbberiviatedValue(newPlanVal), false);


                HomeGrid.cells(rowid, RevenueColIndex).setValue(FormatNumber(revenue));
                var tactActRevenuVal = HomeGrid.cells(rowid, RevenueColIndex).getAttribute("actval");
                diff = parseInt(revenue) - parseInt(tactActRevenuVal);

                SetColumUpdatedValue(RevenueColIndex, diff);
                HomeGrid.cells(progid, RevenueColIndex).setValue((FormatNumber(newProgVal)));
                HomeGrid.cells(campid, RevenueColIndex).setValue((FormatNumber(newCampVal)));
                HomeGrid.cells(planid, RevenueColIndex).setValue((FormatNumber(newPlanVal)));
                HomeGrid.cells(rowid, RevenueColIndex).setAttribute("actval", revenue);
                $.ajax({

                    type: 'POST',

                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: GetItemType("tact"), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(TacticID) },
                    dataType: 'json',

                    success: function (states) {
                        //    LoadPlanGrid();
                        if (UpdateColumn == "Target Stage Goal") {
                            
                            var psv = HomeGrid.getUserData(rowid, "stage");
                            
                            HomeGrid.cells(rowid, TargetStageGoalColIndex).setValue(FormatCommas(UpdateVal.toString()) + " " + psv);
                        }
                        //added by Rahul Shah for PL #2058 on 15/03/2016.
                        if (UpdateColumn == "Type") {

                            var PlanIds = HomeGrid.cells(planid,3).getValue()
                            $("#ulTacticType li input[type=checkbox]").each(function () {
                                var chkid = $(this).attr("id");
                                if ($(this).attr('checked') != 'checked') {
                                    filters.tempTacticTypeIds.push(chkid.replace("CbTT", ""));
                                }

                            });

                            GetTacticTypelist(PlanIds, false);
                            SaveLastSetofViews();


                            var tacCost = 0;
                            if(states.TacticCost != null && states.TacticCost != 'undefined'){
                                tacCost =states.TacticCost;
                            }

                            //Start - Added by Viral, To Resolve internal point: Change PlannedCost value based on TacticType.
                            PlannedCostColIndex = HomeGrid.getColIndexById(plannedCostColId);
                            var oldPlanCost = HomeGrid.cells(rowid, PlannedCostColIndex).getValue();
                            HomeGrid.cells(rowid, PlannedCostColIndex).setValue(tacCost);
                            //End - Added by Viral, To Resolve internal point: Change PlannedCost value based on TacticType.

                            // Start - Added by Viral related to PL ticket #2112.
                            var TotalchildRowIds = HomeGrid.getAllSubItems(rowid);
                            PlannedCostColIndex = HomeGrid.getColIndexById(plannedCostColId);
                            if (tacCost < states.lineItemCost) {

                                HomeGrid.cells(rowid, PlannedCostColIndex).setValue((oldPlanCost));
                            }
                                //Added by Rahul Shah for PL #1744.
                            else if (tacCost == states.lineItemCost) {
                                if (TotalchildRowIds != "") {
                                    for (var i = 0; i < TotalchildRowIds.split(',').length; i++) {

                                        if (HomeGrid.getUserData(TotalchildRowIds.split(',')[i], "IsOther") == "True") {
                                            HomeGrid.deleteRow(TotalchildRowIds.split(',')[i]);
                                        }
                                    }
                                }
                                diff = parseInt(tacCost) - parseInt(oldPlanCost);
                                SetColumUpdatedValue(PlannedCostColIndex, diff);
                                HomeGrid.cells(progid, PlannedCostColIndex).setValue((newProgVal));
                                HomeGrid.cells(campid, PlannedCostColIndex).setValue((newCampVal));
                                HomeGrid.cells(planid, PlannedCostColIndex).setValue((newPlanVal));
                                HomeGrid.cells(rowid, PlannedCostColIndex).setValue((tacCost));
                            }
                            else {

                                diff = parseInt(tacCost) - parseInt(oldPlanCost);
                                SetColumUpdatedValue(PlannedCostColIndex, diff);
                                HomeGrid.cells(progid, PlannedCostColIndex).setValue((newProgVal));
                                HomeGrid.cells(campid, PlannedCostColIndex).setValue((newCampVal));
                                HomeGrid.cells(planid, PlannedCostColIndex).setValue((newPlanVal));
                                HomeGrid.cells(rowid, PlannedCostColIndex).setValue((tacCost));
                                if (TotalchildRowIds != "") {
                                    for (var i = 0; i < TotalchildRowIds.split(',').length; i++) {

                                        if (HomeGrid.getUserData(TotalchildRowIds.split(',')[i], "IsOther") == "True") {
                                            HomeGrid.cells(TotalchildRowIds.split(',')[i], PlannedCostColIndex).setValue((states.OtherLineItemCost));
                                        }
                                    }
                                }
                            }

                            ChangeTabView('liGrid');
                            ItemIndex=HomeGrid.getRowIndex(rowid);
                            state0=ItemIndex;
                            // End - Added by Viral related to PL ticket #2112.
                        }
                    }
                });
            }
        });
    }
    function SetColumUpdatedValue(CellInd, diff) {
        progActVal = HomeGrid.cells(progid, CellInd).getAttribute("actval");
        CampActVal = HomeGrid.cells(campid, CellInd).getAttribute("actval");
        PlanActVal = HomeGrid.cells(planid, CellInd).getAttribute("actval");

        newProgVal = parseInt(progActVal) + parseInt(diff);
        newCampVal = parseInt(CampActVal) + parseInt(diff);
        newPlanVal = parseInt(PlanActVal) + parseInt(diff);

        HomeGrid.cells(progid, CellInd).setAttribute("actval", newProgVal);
        HomeGrid.cells(campid, CellInd).setAttribute("actval", newCampVal);
        HomeGrid.cells(planid, CellInd).setAttribute("actval", newPlanVal);
        //Added By Rahul Shah on 16/10/2015 for PL 1559
        if (tactid != 0) {
            TactActVal = HomeGrid.cells(tactid, CellInd).getAttribute("actval");
            newTactVal = parseInt(TactActVal) + parseInt(diff);
            HomeGrid.cells(tactid, CellInd).setAttribute("actval", newTactVal);
        }
    }
    $(document).ready(function () {

        $('#cancel-button_Movetactic').on("click", function () {
            $('#divMovetacticPopup').modal("hide");

        });

        //// Proceed to save data.
        $('#proceed-button_Movetactic').on("click", function () {

            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
        //Commented BY Komal Rawal for 2056 to remove unresponsive error
        //$(".grid_add").click(function (e) {
        //    $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
        //    gridSearchFlag = 1;
        //    var type = $(this).attr('id');
        //    var name = $(this).attr('alt');
        //    var title = $(this).parent().prev().attr('title');
        //    /*Modified by Mitesh for PL ticket 1570
        //    combination of title and permission conflict when title has "\" separator*/
        //    var permission = $(this).attr('per');
        //    //title = chk_permission[0];
        //    //var permission = chk_permission[1];
        //    var linetype = $(this).attr('lt');
        //    var LinkTacticPermission = $(this).attr('linktacticper');
        //    var LinkedTacticId = $(this).attr('linkedtacticid');
        //    DisplayPopUpMenu(type, name, title, permission,linetype,LinkTacticPermission,LinkedTacticId, e);

        //});
    });
    x = 0;
    $('#useless').click(function () {
        HomeGrid.sortRows(1, 'str', 'asc');
        $("#spanscroll").text(x += 1);
        return true;
    });

    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");

        $("#useless").click();
    });


    $(document).scroll(function () {
        if (pageIsScroll == false) {

            pageIsScroll = true;
            // $("#useless").click();
        }
    });
    //Added by Rahul Shah for PL #2271. for Global Search
    function GlobalSearchonGrid(node , columnName){      
        var colindex = 0;
        var text = node;
        HomeGrid.setFiltrationLevel(-2);

        if (columnName.toLowerCase().toString() == '@RevenuePlanner.Helpers.Enums.GlobalSearch.ActivityName.ToString().ToLower()'){            
            colindex = HomeGrid.getColIndexById('taskname');           
        }
        else if(columnName.toLowerCase().toString() == '@RevenuePlanner.Helpers.Enums.GlobalSearch.ExternalName.ToString().ToLower()'){
            colindex = HomeGrid.getColIndexById('machinename');
           
        }
        HomeGrid.filterTreeBy(colindex,function(data){
            // true - show the related row, false - hide the related row
            return  htmlDecode(data).toLowerCase().toString().indexOf(text.toLowerCase())!=-1;
        });        
        if(HomeGrid.rowsBuffer.length <= 0){            
            $('#txtGlobalSearch').val("");
            BindHomeGrid();
            $('#txtGlobalSearch').val(node.trim());
            $("#errorMsg").css("display", "block");
            $("#spanMsgError").empty();
            $("#spanMsgError").text("No data found! Please check the filter and make correct Plan and Attributes selections");
            $(window).scrollTop(0);
        }
        else{
            if($('#txtGlobalSearch').val().trim() != undefined && $('#txtGlobalSearch').val().trim() != "" && $('#txtGlobalSearch').val().trim() != null){
                HomeGrid.expandAll();
            }
            $("#errorMsg").css("display", "none");
            $("#spanMsgError").empty();
        }
    }
</script>