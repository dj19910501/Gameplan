@model RevenuePlanner.Models.Plangrid
<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid.css")" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxTreeGrid.js")">
</script>
@*<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxgrid_split.js")">
    </script>*@
<style>
    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
    }
</style>

<div class="goals-wrapper" id="goalwrapper">
    <span class="goal-text">Goals</span>
    <span id="spnrevenue"></span>
    <span id="spninq"></span>
    <span id="spnmql"></span>
    <span id="spncw"></span>
</div>

<div id="gridbox" style="background-color:white;"></div>

<textarea id="mytextarea1" style="width:0px;height:0px;display:none;">@Model.xmlstring</textarea>
@*Added by Komal Rawal for #1432*@
<div id="ImprovementGrid"  class="improvement-grid-wrapper">
    @Html.Partial("_GridImprovement", Model.ImprovementObj)
</div>
<div class="row-fluid calc-height">
    <div class="span12">
        <div id="divMovetacticPopup" class="form-inspect-share hide fade height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div>
                <form>

                    <h2 class="primary-title source-sans-prosemibold resubmission_header">Moving a Tactic</h2>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">You are about to move a tactic to a diffrent program called </label>


                    <label id="lipname" style="text-align: center; width: 100%; font-weight:800;" class="resubmission_content"></label>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">Do you want to proceed?</label>
                    <input type="hidden" id="hdnsourceid" />
                    <input type="hidden" id="hdndestid" />
                    <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button">Proceed</button>
                    <button id="cancel-button" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var HomeGrid;

    var revenue = "Revenue : $" + number_format('@Model.Revenue', 0, '.', ',');
    $("#spnrevenue").html(revenue);
    var mql = '@Model.MQLLable' + " : " + number_format('@Model.MQLValue', 0, '.', ',');
    $("#spnmql").html(mql);
    var inq = '@Model.INQLable' + " : " + number_format('@Model.INQValue', 0, '.', ',');
    $("#spninq").html(inq);

    var cw = '@Model.CWLable' + " : " + number_format('@Model.CWValue', 0, '.', ',');
    $("#spncw").html(cw);
    $(document).ready(
        BindHomeGrid()
       );
    var $doc = $(document);
    $doc.click(function () {
        $('#popupType').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupType').css("display", "none");
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupType').css('display', 'none');
    });
    function Action(type, id) {
        //alert("type=" + type + "<br/>id=" + id);
    }


    function BindHomeGrid() {
        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        //  HomeGrid.enableTreeGridLines();
        HomeGrid.enableDragAndDrop(true);
        //HomeGrid.setDragBehavior("sibling-next");
        HomeGrid.enableAutoHeight(true);
        HomeGrid.enableAutoWidth(false);
        HomeGrid.setNumberFormat("$0,000.00", 5, ".", ",");
        HomeGrid.setNumberFormat("0,000.00", 9, ".", ",");
        HomeGrid.setNumberFormat("$0,000.00", 10, ".", ",");
        HomeGrid.init();
        HomeGrid.attachEvent("onEditCell", doOnEditCell);
        HomeGrid.attachEvent("onDrag", doOnDrag);
        HomeGrid.attachEvent("onMouseOver", function () { return false });
        //   HomeGrid.splitAt(1);
        HomeGrid.loadXMLString(document.getElementById("mytextarea1").value);
        HomeGrid.setColumnHidden(2, true);

    }
    function custom_1(a, b, ord, a_id, b_id) {
        alert(ord);
        a = mygrid2.cells(a_id, 6).getText();
        b = mygrid2.cells(b_id, 6).getText();
        return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
    };
    function ResizeGrid(wid) {
        $("#gridbox").attr("width", wid);
        HomeGrid.setSizes();
    }
    function doOnDrag(sid, tid) {

        var dragSourcePtype = HomeGrid.getParentId(sid).split(".")[0];
        var dragSourcetype = sid.split(".")[0].toString()
        var dragTargettype = tid.split(".")[0];
        if (dragSourcetype == "tact") {
            if (dragSourcePtype == dragTargettype) {
                var splanid = HomeGrid.cells("plan." + sid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                var dplanid = HomeGrid.cells("plan." + tid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                if (dplanid == splanid) {
                    var sourseid = HomeGrid.cells(sid, HomeGrid.getColIndexById('id')).getValue();
                    var destinatinId = HomeGrid.cells(tid, HomeGrid.getColIndexById('id')).getValue();
                    var tacticname = HomeGrid.cells(sid, 0).getValue();
                    ProgarmName = HomeGrid.cells(tid, 0).getValue();
                    $("#lipname").html(ProgarmName);
                    $("#hdnsourceid").val(sourseid);
                    $("#hdndestid").val(destinatinId);
                    $("#divMovetacticPopup").modal('show');

                }
                else
                    alert("Tactic can move only to same plan program."); return false;
            }
            else
                alert(sid.split(".")[0].toString() + " can not move to " + dragTargettype.toString()); return false;
        }
        else {
            alert("only tactic can move");
            return false;
        }

    }
    function SaveMoveTactic() {
        var sourseid = $("#hdnsourceid").val();
        var destinatinId = $("#hdndestid").val();
        $.ajax({

            type: 'POST',

            url: '@Url.Action("SaveGridDetail")', // we are calling json method
            data: { UpdateType: "tact", UpdateColumn: "ParentID", UpdateVal: destinatinId, Id: parseInt(sourseid) },
            dataType: 'json',

            success: function (states) {
                LoadPlanGrid();
            }
        });
    }
    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var updatetype = rowId.split(".")[0];
        var Id;
        var UpdateColumn;
        var UpdateVal;



        if (stage == 2) // start edit Shipping column
        {
            // var combo = HomeGrid.getCombo(4);
            // for getting column value using name
            var sdateindex = HomeGrid.getColIndexById('startdate');
            var edateindex = HomeGrid.getColIndexById('enddate');
            var idindex = HomeGrid.getColIndexById('id');
            var costindex = HomeGrid.getColIndexById('plannedcost');
            var stageindex = HomeGrid.getColIndexById('inq');
            // var value = HomeGrid.cells(rowId, index).getValue();
            // end
            var Colind = this.cell.cellIndex;
            UpdateColumn = HomeGrid.getColLabel(Colind, 1);
            if (UpdateColumn == "" || UpdateColumn == null)
                UpdateColumn = HomeGrid.getColLabel(Colind, 0);
            Id = HomeGrid.cells(rowId, idindex).getValue();

            if (UpdateColumn == "Start Date") {

                var startyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], sdateindex).getValue()).getFullYear();
                var edate = HomeGrid.cells(rowId, edateindex).getValue();
                if (!CheckDateYear(nValue, startyear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
                if (!validateDateCompare(nValue, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) return false;
                }
                if (updatetype == "camp") {
                    var psdate = HomeGrid.getUserData(rowId, "psdate");
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, psdate, "@RevenuePlanner.Helpers.Common.objCached.ProgramStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                }

            }
            if (UpdateColumn == "End Date") {
                var endyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], edateindex).getValue()).getFullYear();
                var sdate = HomeGrid.cells(rowId, sdateindex).getValue();

                if (!CheckDateYear(nValue, endyear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;
                if (!validateDateCompare(sdate, nValue, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) return false;
                }
                if (updatetype == "camp") {
                    var pedate = HomeGrid.getUserData(rowId, "pedate");
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(pedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.ProgramEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                }
            }
            if (UpdateColumn.toString().trim() == "Projected Stage Value") {
                if (nValue != oValue) {
                var tactictypeindex = HomeGrid.getColIndexById('tactictype');
                var tacticTypeId = HomeGrid.cells(rowId, cellInd).getAttribute("tactictype");
                GetConversionRate(Id, tacticTypeId, UpdateColumn, nValue, rowId, nValue);
                return true;
            }
                else
                    return false;
            }
            if (UpdateColumn == "Tactic Type") {

                var tacticTypeId = nValue;


                if (tacticTypeId != '') {
                    if (nValue != oValue) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                            data: { tacticTypeId: tacticTypeId },
                            success: function (data) {
                                pcost = data.revenue;
                                var projectedStageValue = data.projectedStageValue;

                        GetConversionRate(Id, tacticTypeId, UpdateColumn, projectedStageValue, rowId, nValue);
                            }
                        });

                    }
                    else return false;
                }
            }

            if (nValue != oValue) {
                UpdateVal = nValue;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: updatetype, UpdateColumn: UpdateColumn, UpdateVal: UpdateVal, Id: parseInt(Id) },
                    dataType: 'json',
                    success: function (states) {
                        //  LoadPlanGrid();
                    }
                });
            }
            return true;
        }
    }
    function GetConversionRate(TacticID, TacticTypeID, UpdateColumn, projectedStageValue, rowid, UpdateVal) {
        var pmql = 0;
        var pcost = 0;
        var isAssortment = true;
        var StageValue = 0;
        StageValue = projectedStageValue;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/CalculateMQL")',
            data: {
                tactictid: parseInt(TacticID), TacticTypeId: parseInt(TacticTypeID), projectedStageValue: StageValue, RedirectType: isAssortment, isTacticTypeChange: true
            },
            success: function (data) {
                if (data.mql == 'N/A') {
                    HomeGrid.cells(rowid, 9).setValue(data.mql);
                }
                else {
                    var mqlConversion = 0;
                    if (data.mql != null)
                        mqlConversion = data.mql;
                    var mqlValue = FormatCommas(mqlConversion.toString(), false);
                    HomeGrid.cells(rowid, 9).setValue(mqlValue);
                }
                HomeGrid.cells(rowid, 10).setValue(data.revenue);


                $.ajax({

                    type: 'POST',

                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: "tact", UpdateColumn: UpdateColumn, UpdateVal: UpdateVal, Id: parseInt(TacticID) },
                    dataType: 'json',

                    success: function (states) {
                        // LoadPlanGrid();
                    }
                });

            }

        });

    }


    $(document).ready(function () {
        $('#cancel-button').on("click", function () {
            $('#divMovetacticPopup').modal("hide");


        });

        //// Proceed to save data.
        $('#proceed-button').on("click", function () {

            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
        $(".grid_add").click(function (e) {

            var type = $(this).attr('id');
            var name = $(this).attr('alt');
            var title = $(this).attr('title');
            var chk_permission = title.split("/");
            title = chk_permission[0];
            var permission = chk_permission[1];
            DisplayPopUpMenu(type, name, title, permission, e);

    });
       // LoadImprovementGrid(CurrentPlanId);
    });
    //Added By Komal Rawal for #1432
    function LoadImprovementGrid(PlanID) {
      
        @*var url = "@Url.Content("~/Plan/LoadImprovementGrid")";
        // $("#ImprovementGrid").empty();
        $("#ImprovementGrid").load(url + '?id=' + PlanID);*@
    }
    //End
</script>