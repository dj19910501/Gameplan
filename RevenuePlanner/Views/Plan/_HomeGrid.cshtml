@model RevenuePlanner.Models.Plangrid

@{
    var isTacticExist = Model.ImprovementObj.IsTacticExists;
}
<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid1.css")" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxTreeGrid.js")">
</script>


<style>
    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }
</style>

<div class="goals-wrapper" id="goalwrapper">
    <span class="goal-text">Goals</span>
    <span id="spnrevenue"></span>
    <span id="spninq"></span>
    <span id="spnmql"></span>
    <span id="spncw"></span>
</div>

<div id="gridbox" style="background-color:white;width:100%;"></div>

<textarea id="mytextarea1" style="width:0px;height:0px;display:none;">@Model.xmlstring</textarea>
@*Added by Komal Rawal for #1432*@
<div id="ImprovementGrid"  class="improvement-grid-wrapper">
    @Html.Partial("_GridImprovement", Model.ImprovementObj)
</div>
<div class="row-fluid calc-height">
    <div class="span12">
        <div id="divMovetacticPopup" class="form-inspect-share hide fade height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div>
                <form>

                    <h2 class="primary-title source-sans-prosemibold resubmission_header">Moving a Tactic</h2>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">You are about to move a tactic to </label>


                    <label id="lipname" style="text-align: center; width: 100%; font-weight:800;" class="resubmission_content"></label>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">Do you want to proceed?</label>
                    <input type="hidden" id="hdnsourceid" />
                    <input type="hidden" id="hdndestid" />
                    <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button_Movetactic">Proceed</button>
                    <button id="cancel-button_Movetactic" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>
<input type="button" id="useless" value="Click" name="useless" style="display:none;" />
<p style="display:none;">Scrolled <span id="spanscroll">0</span> times.</p>
<script type="text/javascript">
    var HomeGrid;
      var isTacticExist = '@isTacticExist';
    var revenue = "Revenue : $" + number_format('@Model.Revenue', 0, '.', ',');
    $("#spnrevenue").html(revenue);
    var mql = '@Model.MQLLable' + " : " + number_format('@Model.MQLValue', 0, '.', ',');
    $("#spnmql").html(mql);
    var inq = '@Model.INQLable' + " : " + number_format('@Model.INQValue', 0, '.', ',');
    $("#spninq").html(inq);

    var cw = '@Model.CWLable' + " : " + number_format('@Model.CWValue', 0, '.', ',');
    $("#spncw").html(cw);


    $(document).ready(function () {
        $("#divupcomingact").hide();
        $("#liplanrequest").hide();
        $('.nav').addClass('no-bottom-border');
        BindHomeGrid();
        $("input[name='useless']").click(doIt);
        function doIt() {
            //alert('did it');
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;

    });

    var $doc = $(document);
    $doc.click(function () {
        $('#popupType').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupType').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupType').css('display', 'none');
    });
    function Action(type, id) {
        //alert("type=" + type + "<br/>id=" + id);
    }


    function BindHomeGrid() {
        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        //  HomeGrid.enableTreeGridLines();
        HomeGrid.enableDragAndDrop(true);
        //HomeGrid.setDragBehavior("sibling-next");
        HomeGrid.enableAutoHeight(true);
        HomeGrid.enableAutoWidth(false);
     
        HomeGrid.setNumberFormat("$0,000", 5, ".", ",");
        //HomeGrid.setNumberFormat("0,000", 9, ".", ",");
        //HomeGrid.setNumberFormat("$0,000", 10, ".", ",");
        HomeGrid.setImageSize(1, 1);
        HomeGrid.init();
        HomeGrid.attachEvent("onEditCell", doOnEditCell);
        HomeGrid.attachEvent("onDrag", doOnDrag);
        HomeGrid.attachEvent("onScroll", function (sLeft, sTop) {
            $(".dhx_combo_select").css("display", "none");
        });

     //   HomeGrid.attachEvent("onMouseOver", function () { return false });
        HomeGrid.attachEvent("onBeforeDrag", function (id) {
            if (id.split(".")[0].toString() != "tact") return false;//denies dragging if user data exists
            var locked = HomeGrid.cells(id, 0).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
            return true;                                          //allows dragging in any other case
        });
       // HomeGrid.setDragText("rows");
        //   HomeGrid.splitAt(1);
        HomeGrid.loadXMLString(document.getElementById("mytextarea1").value);
        //HomeGrid.setColumnHidden(2, true);
        HomeGrid.sortRows(0, 'str', 'asc');
        HomeGrid.forEachRow(function (rowid) {
        //    var cost = HomeGrid.cells(id, 5).getValue();

        //    HomeGrid.cells(id, 5).setValue(FormatNumber(cost, false));
            var MQL = HomeGrid.cells(rowid, 9).getValue();

            HomeGrid.cells(rowid, 9).setValue(GetAbberiviatedValue(MQL));
            var Revenue = HomeGrid.cells(rowid, 10).getValue();

            HomeGrid.cells(rowid, 10).setValue(FormatNumber(Revenue, false));

            var psv = HomeGrid.cells(rowid, 8).getValue().split("-");
            if (psv.length > 1) {
                var psvnum = FormatCommas(psv[0], false);
                HomeGrid.cells(rowid, 8).setValue(psvnum + " " + psv[1]);
            }
       
        });
    }
    function convertNumber(num) {
        var finlval = 0;
        var base = parseFloat(num.replace('$', ''));
        if (num.toLowerCase().match(/k/)) {
            return finlval = Math.round(base * 1000);
        }
        else if (num.toLowerCase().match(/m/)) {
            return finlval = Math.round(base * 1000000);
        }
        else if (num.toLowerCase().match(/b/)) {
            return finlval = Math.round(base * 1000000000);
        }
        else
            return finlval = numb.replace('$', '');
    }
    function ResizeGrid(wid) {
        $("#gridbox").attr("width", wid);
        HomeGrid.setSizes();
    }
    function doOnDrag(sid, tid) {

        var dragSourcePtype = HomeGrid.getParentId(sid).split(".")[0];
        var dragSourcetype = sid.split(".")[0].toString()
        var dragTargettype = tid.split(".")[0];
        if (dragSourcetype == "tact") {
            if (dragSourcePtype == dragTargettype) {
                var splanid = HomeGrid.cells("plan." + sid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                var dplanid = HomeGrid.cells("plan." + tid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();

                var parentid = HomeGrid.getParentId(sid);
                if (dplanid == splanid) {
                    if (parentid != tid) {
                        var DestinationMember = new Array();
                        DestinationMember = HomeGrid.getAllSubItems(tid).split(',');

                    var sourseid = HomeGrid.cells(sid, HomeGrid.getColIndexById('id')).getValue();
                    var destinatinId = HomeGrid.cells(tid, HomeGrid.getColIndexById('id')).getValue();
                    var tacticname = HomeGrid.cells(sid, 0).getValue();
                        var dtactictitle = "";

                        for (a in DestinationMember) {
                            if (DestinationMember[a].toString() != "" && DestinationMember[a].toString() != null) {
                            dtactictitle = HomeGrid.cells(DestinationMember[a].toString(), 0).getValue();
                            if (dtactictitle == tacticname) {
                                alert("Tactic with same title already exist in Targeted Program.");
                                return false;
                            }
                            }

                        }

                    ProgarmName = HomeGrid.cells(tid, 0).getValue();
                    $("#lipname").html(ProgarmName);
                    $("#hdnsourceid").val(sourseid);
                    $("#hdndestid").val(destinatinId);
                    $("#divMovetacticPopup").modal('show');
                    }
                    else {
                        ProgarmName = HomeGrid.cells(tid, 0).getValue();
                        alert("Tactic is already in " + ProgarmName+".");
                    }
                }
                else
                    alert("Tactic can move only to same plan program."); return false;
            }
        else {
                var stype = GetItemType(sid.split(".")[0].toString());
                var dtype = GetItemType(dragTargettype.toString());
                //if (sid.split(".")[0].toString() == "tact")
                //    stype = "Tactic";
                //else if (sid.split(".")[0].toString() == "prog")
                //    stype = "Program";
                //else if (sid.split(".")[0].toString() == "camp")
                //    stype = "Campaign";
                //else if (sid.split(".")[0].toString() == "plan")
                //    stype = "Plan";
                //if (dragTargettype.toString() == "tact")
                //    dtype = "Tactic";
                //else if (dragTargettype.toString() == "prog")
                //    dtype = "Program";
                //else if (dragTargettype.toString() == "camp")
                //    dtype = "Campaign";
                //else if (dragTargettype.toString() == "plan")
                //    dtype = "Plan";
                alert(stype + " can not move to " + dtype); return false;
            }
        }
        else {
            alert("Only tactic can Move.");
            return false;
        }

    }
    function GetItemType(val) {
        var itemType = "";
        if (val.toString() == "tact")
            itemType = "Tactic";
        else if (val.toString() == "prog")
            itemType = "Program";
        else if (val.toString() == "camp")
            itemType = "Campaign";
        else if (val.toString() == "plan")
            itemType = "Plan";
        return itemType;
    }
    function SaveMoveTactic() {
        var sourseid = $("#hdnsourceid").val();
        var destinatinId = $("#hdndestid").val();
        $.ajax({

            type: 'POST',

            url: '@Url.Action("SaveGridDetail")', // we are calling json method
            data: { UpdateType: "tact", UpdateColumn: "ParentID", UpdateVal: destinatinId, Id: parseInt(sourseid) },
            dataType: 'json',

            success: function (states) {
                LoadPlanGrid();
            }
        });
    }
    function formatDate(d) {
        d = new Date(d);
        function addZero(n) {
            return n < 10 ? '0' + n : '' + n;
        }
        return addZero(d.getMonth() + 1) + "/" + addZero(d.getDate()) + "/" + d.getFullYear();
    }

    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var updatetype = rowId.split(".")[0];
        var Id;
        var UpdateColumn;
        var UpdateVal;
          var Colind = this.cell.cellIndex;
            UpdateColumn = HomeGrid.getColLabel(Colind, 1);
        if (stage == 0) {
            var locked = HomeGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
        }
        if (stage == 1) {

            //if (UpdateColumn == "Tactic Planned Cost") {
            //    var numb = HomeGrid.cells(rowId, costindex).getValue();
            //   // this.editor.obj.style.textAlign = "center";
            //    this.editor.obj.value = convertNumber(numb);
            //}
            $(".dhx_combo_edit").off("keydown");
            if (UpdateColumn == "Tactic Planned Cost" || UpdateColumn == "Target Stage Goal") {

                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                HomeGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }
           
            if (UpdateColumn == "Target Stage Goal") {
               // this.editor.obj.class = "priceValue";
                var psv = HomeGrid.cells(rowId, 8).getValue().split(" ");
                this.editor.obj.value = psv[0];
            }
        }
        if (stage == 2) // start edit Shipping column
        {
            // var combo = HomeGrid.getCombo(4);
            // for getting column value using name
            var sdateindex = HomeGrid.getColIndexById('startdate');
            var edateindex = HomeGrid.getColIndexById('enddate');
            var idindex = HomeGrid.getColIndexById('id');
            var costindex = HomeGrid.getColIndexById('plannedcost');
            var stageindex = HomeGrid.getColIndexById('inq');
            // var value = HomeGrid.cells(rowId, index).getValue();
            // end
          
            if (UpdateColumn == "" || UpdateColumn == null)
                UpdateColumn = HomeGrid.getColLabel(Colind, 0);
            Id = HomeGrid.cells(rowId, idindex).getValue();

            if (UpdateColumn == "Start Date") {

                var startyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], sdateindex).getValue()).getFullYear();
                var edate = HomeGrid.cells(rowId, edateindex).getValue();
                if (!CheckDateYear(nValue, startyear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
                if (!validateDateCompare(nValue, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) return false;
                }
                if (updatetype == "camp") {
                    var psdate = HomeGrid.getUserData(rowId, "psdate");
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, psdate, "@RevenuePlanner.Helpers.Common.objCached.ProgramStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                }
                nValue = formatDate(nValue);
                oValue = formatDate(oValue);
            }
            if (UpdateColumn == "End Date") {
                var endyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], edateindex).getValue()).getFullYear();
                var sdate = HomeGrid.cells(rowId, sdateindex).getValue();

                if (!CheckDateYear(nValue, endyear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;
                if (!validateDateCompare(sdate, nValue, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) return false;
                }
                if (updatetype == "camp") {
                    var pedate = HomeGrid.getUserData(rowId, "pedate");
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(pedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.ProgramEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                }
                nValue = formatDate(nValue);
                oValue = formatDate(oValue);
            }
            if (UpdateColumn.toString().trim() == "Target Stage Goal") {
                var splitoval = oValue.split(" ");
                if (nValue != splitoval[0]) {
                var tactictypeindex = HomeGrid.getColIndexById('tactictype');
                var tacticTypeId = HomeGrid.cells(rowId, cellInd).getAttribute("tactictype");
                GetConversionRate(Id, tacticTypeId, UpdateColumn, nValue, rowId, nValue);
                return true;
            }
                else
                    return false;
            }
            if (UpdateColumn == "Tactic Type") {

                var tacticTypeId = nValue;


                if (tacticTypeId != '') {
                    if (nValue != oValue) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                            data: { tacticTypeId: tacticTypeId },
                            success: function (data) {
                                pcost = data.revenue;
                                var stagetitle = data.stageTitle;
                                var projectedStageValue = data.projectedStageValue;

                        GetConversionRate(Id, tacticTypeId, UpdateColumn, projectedStageValue, rowId, nValue);
                                return false;
                            }
                        });

                    }
                    else return false;
                }
            }

            if (nValue != oValue) {
                if (UpdateColumn != "Tactic Type" && UpdateColumn.toString().trim() != "Target Stage Goal") {
                UpdateVal = nValue;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                        data: { UpdateType: updatetype, UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                    dataType: 'json',
                    success: function (states) {
                        if (states.errormsg != null && states.errormsg.trim() != "") {
                            alert(states.errormsg.trim());
                            HomeGrid.cells(rowId, cellInd).setValue(oValue);
                            return false;
                        }
                        if (UpdateColumn == "Start Date" || UpdateColumn == "End Date")
                          LoadPlanGrid();
                        //if (UpdateColumn == "Tactic Planned Cost") {
                        //    HomeGrid.cells(rowId, 5).setValue(FormatNumber(nValue, false));
                        //}
                    }
                });
            return true;
                }
              
            }
        }
    }
    function GetConversionRate(TacticID, TacticTypeID, UpdateColumn, projectedStageValue, rowid, UpdateVal) {
        var pmql = 0;
        var pcost = 0;
        var isAssortment = true;
        var StageValue = 0;
        StageValue = projectedStageValue;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/CalculateMQL")',
            data: {
                tactictid: parseInt(TacticID), TacticTypeId: parseInt(TacticTypeID), projectedStageValue: StageValue, RedirectType: isAssortment, isTacticTypeChange: true
            },
            success: function (data) {
                if (data.mql == 'N/A') {
                    HomeGrid.setCellExcellType(rowid, 9, "ro");
                    HomeGrid.cells(rowid, 9).setValue(data.mql);
                }
                else {
                    HomeGrid.setCellExcellType(rowid, 9, "ron");
                    var mqlConversion = 0;
                    if (data.mql != null)
                        mqlConversion = data.mql;
                    var mqlValue = FormatCommas(mqlConversion.toString(), false);
                    HomeGrid.cells(rowid, 9).setValue(mqlValue);
                }
                HomeGrid.cells(rowid, 10).setValue(data.revenue);


                $.ajax({

                    type: 'POST',

                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: "tact", UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(TacticID) },
                    dataType: 'json',

                    success: function (states) {
                         LoadPlanGrid();
                        //if (UpdateColumn == "Target Stage Goal") {
                        //    var psv = HomeGrid.cells(rowid, 8).getAttribute("stage");
                        //    HomeGrid.cells(rowid, 8).setValue(psv + " " + UpdateVal);
                        //}

                       
                    }
                });

            }

        });
        return true;
    }


    $(document).ready(function () {
        $('#cancel-button_Movetactic').on("click", function () {
            $('#divMovetacticPopup').modal("hide");

        });

        //// Proceed to save data.
        $('#proceed-button_Movetactic').on("click", function () {

            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
        $(".grid_add").click(function (e) {
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            gridSearchFlag = 1;
            var type = $(this).attr('id');
            var name = $(this).attr('alt');
            var title = $(this).attr('data-title');
            var chk_permission = title.split("/");
            title = chk_permission[0];
            var permission = chk_permission[1];
            DisplayPopUpMenu(type, name, title, permission, e);

    });
       // LoadImprovementGrid(CurrentPlanId);
    });
    x = 0;
    $('#useless').click(function () {
        HomeGrid.sortRows(0, 'str', 'asc');
        //HomeGrid.enableAutoHeight(true);
        $("#spanscroll").text(x += 1);
        return true;
    });
    function sortGrid() {
        //alert('');
        //HomeGrid.sortRows(0, 'str', 'asc');
        return true;
    }
    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");

        $("#useless").click();
    });
    $(window).focus(function () {

        //$("#useless").click();
    });

    $(document).scroll(function () {
        if (pageIsScroll == false) {

            pageIsScroll = true;
            $("#useless").click();
        }
    });
</script>