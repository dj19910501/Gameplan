@model RevenuePlanner.Models.Plangrid
@*<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid2_min.css")" rel="stylesheet" type="text/css" />*@
@*<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxtreegrid_min.js")"></script>*@

<style>
    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
        padding-left: 0px !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }
    /*Added by Rahul Shah on 29/09/2015 for PL #1618*/
    /*div.gridbox {
        height: 100% !important;
    }*/
</style>
<div class="goals-wrapper" id="goalwrapper">
    <span class="goal-text">Goals</span>
    <span id="spnrevenue"></span>
    <span id="spninq"></span>
    <span id="spnmql"></span>
    <span id="spncw"></span>
    <a class="btn btn-blue-grid text-shadow-blue source-sans-proregular" id="exportcsv" onclick="return ExportToCSV();">
        <img src="~/Content/images/grid-export.png" /> Export .csv
    </a>
</div>
<div id="gridbox" style="background-color:white;width:100%;"></div>

<div id="divTacticReqMsg" class="clue-tip-message-orange-grid" style="display:none;">This tactic needs to have all required fields filled out before submission for approval.</div>
@*Added by Komal Rawal for #1432*@
<div id="ImprovementGrid" class="improvement-grid-wrapper">
    @*  @Html.Partial("_GridImprovement", Model.ImprovementObj)*@
</div>
<div class="row-fluid calc-height">
    <div class="span12">
        <div id="divMovetacticPopup" class="form-inspect-share hide fade height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div>
                <form>
                    <h2 class="primary-title source-sans-prosemibold resubmission_header">Moving a Tactic</h2>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">You are about to move a tactic to </label>

                    <label id="lipname" style="text-align: center; width: 100%; font-weight:800;" class="resubmission_content"></label>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">Do you want to proceed?</label>
                    <input type="hidden" id="hdnsourceid" />
                    <input type="hidden" id="hdndestid" />
                    <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button_Movetactic">Proceed</button>
                    <button id="cancel-button_Movetactic" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>
<input type="button" id="useless" value="Click" name="useless" style="display:none;" />
<p style="display:none;">Scrolled <span id="spanscroll">0</span> times.</p>
<script type="text/javascript">
    var HomeGrid;

    var revenue = "Revenue : $" + number_format('@Model.Revenue', 0, '.', ',');
    $("#spnrevenue").html(revenue);
    var mql = '@Model.MQLLable' + " : " + number_format('@Model.MQLValue', 0, '.', ',');
    $("#spnmql").html(mql);
    var inq = '@Model.INQLable' + " : " + number_format('@Model.INQValue', 0, '.', ',');
    $("#spninq").html(inq);

    var cw = '@Model.CWLable' + " : " + number_format('@Model.CWValue', 0, '.', ',');
    $("#spncw").html(cw);
    // Variable added by bhavesh - 11-Nov-2015
    // Apply distributed Parsing - variable for event id
    var eventiddrag = 0;
    var eventidonedit = 0;
    var eventidonbeforedrag = 0;
    var eventidonscroll = 0;
    var editidonOpenEnd = 0;


    $(document).ready(function () {
        $("#divupcomingact").hide();
        $("#liplanrequest").hide();
        $('.nav').addClass('no-bottom-border');
        BindHomeGrid();
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;
        $('.task-tbl div.gridbox').css('height', $(window).height() - 200); //PL #1758 H9_QA - Grid View Scrolling - Added by Dashrath Prajapati
        //Commented by Rahul Shah for #1683
        //$(".grid_Search").click(function (e) {
        //    inspectCloseFocus = $(this).position().top;
        //    var id = $(this).attr('alt');
        //    var type = $(this).attr('id');
        //    gridSearchFlag = 1;
        //    DisplayEditablePopup(id, type);
        //});

        //End

        // Commented by bhavesh - 11-Nov-2015
        // Comment not showing Flag on grid for required field
        //$(".orange-corner-grid").hover(function () {
        //    $("#divTacticReqMsg").css('display', 'block');
        //    var position = $(this).offset();
        //    var targetOffset = $(this).offset().top;
        //    var targetHeight = $(this).height();
        //    var contentHeight = $('#divTacticReqMsg').outerHeight();
        //    var targetBottomOffset = targetOffset + targetHeight - contentHeight;

        //    $('#divTacticReqMsg').css({
        //        'top': targetBottomOffset,
        //        'left': position.left,
        //    });
        //    $('#popupType').css('display', 'none');
        //    $('#dhx_combo_select').css('display', 'none');
        //    $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
        //}, function () {
        //    $("#divTacticReqMsg").css('display', 'none');
        //});


        // added by Ashish for #1780
        BindEntityState();
        if ($('.honeycombbox-icon-gantt-Active').length == 0) {
            $(".honeycombbox").hide();
        }
        else {
            $("#totalEntity").text($('.honeycombbox-icon-gantt-Active').length);
            $(".honeycombbox").show();
        }
        //#1780
    });


    //added by Ashish for #1780
    function BindEntityState() {
        if (ExportSelectedIds != null && ExportSelectedIds != [] && ExportSelectedIds != "") {
            if (ExportSelectedIds.TaskID.length > 0) {
                for (var i = 0; i < ExportSelectedIds.TaskID.length; i++) {
                    if (ExportSelectedIds.PlanFlag[i] == 'Grid') {
                        $("div[altid='" + ExportSelectedIds.TaskID[i] + "']").addClass("honeycombbox-icon-gantt-Active");
                        //$("div").find("[altid='" + ExportSelectedIds.TaskID[i] + "']").addClass("honeycombbox-icon-gantt-Active");
                    }
                }
            }
        }
    }
    //#1780

    var $doc = $(document);
    $doc.click(function () {
        $('#popupType').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupType').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupType').css('display', 'none');
    });
    //Added by Rahul shah on 23/10/2015 for PL #1693 : set grid size after performing any operation
    $(document).ajaxComplete(function () {
        HomeGrid.setSizes();
    });

    function ExportToCSV() {
        HomeGrid.expandAll();
        var count = HomeGrid.getRowsNum();
        var parentid = 0;
        var parentname = "";
        if (count > 0) {
            //Modified BY Komal rawal for #1471
            HomeGrid.insertColumn(2);
            HomeGrid.setColumnHidden(2, true);
            HomeGrid.insertColumn(3);
            HomeGrid.setColumnHidden(3, true);
            HomeGrid.insertColumn(4);
            HomeGrid.setColumnHidden(4, true);
            HomeGrid.insertColumn(5);
            HomeGrid.setColumnHidden(5, true);
            HomeGrid.insertColumn(6);
            HomeGrid.setColumnHidden(6, true);
            for (var i = 0; i < count; i++) {
                var Taskname = HomeGrid.cellByIndex(i, 1).getValue();
                var ActivityTypeName = HomeGrid.cellByIndex(i, 0).getValue();
                if (ActivityTypeName == "Plan") {

                    HomeGrid.cellByIndex(i, 2).setValue(Taskname);
                }
                if (ActivityTypeName == "Campaign") {

                    HomeGrid.cellByIndex(i, 3).setValue(Taskname);
                }
                if (ActivityTypeName == "Program") {
                    parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 3).setValue(parentname);
                    HomeGrid.cellByIndex(i, 4).setValue(Taskname);
                }
                if (ActivityTypeName == "Tactic") {
                    parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 4).setValue(parentname);
                    parentid = HomeGrid.getParentId(parentid);
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 3).setValue(parentname);
                    HomeGrid.cellByIndex(i, 5).setValue(Taskname);
                }
                if (ActivityTypeName == "LineItem") {
                    parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 5).setValue(parentname);
                    ParentProgramid = HomeGrid.getParentId(parentid);
                    ParentProgramname = HomeGrid.cells(ParentProgramid, 1).getValue();
                    HomeGrid.cellByIndex(i, 4).setValue(ParentProgramname);
                    ParentCampaignid = HomeGrid.getParentId(ParentProgramid);
                    ParentCampaignname = HomeGrid.cells(ParentCampaignid, 1).getValue();
                    HomeGrid.cellByIndex(i, 3).setValue(ParentCampaignname);
                    HomeGrid.cellByIndex(i, 6).setValue(Taskname);
                }
            }

            HomeGrid.enableCSVAutoID(true);
            HomeGrid.enableCSVHeader(true);
            HomeGrid.setSerializableColumns("false,false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true");
            var myCSVString = HomeGrid.serializeToCSV(true);
            var lines = myCSVString.split(",");
            //lines.splice(0, 12);
            lines.splice(0, 1, "Plan");
            lines.splice(1, 1, "Campaign");
            lines.splice(2, 1, "Program");
            lines.splice(3, 1, "Tactic");
            lines.splice(4, 1, "Line Item");
            var Filename = HomeGrid.cellByIndex(0, 1).getValue().toString().substring(0, 20);
            $("#exportcsv").attr('download', Filename + ' @DateTime.Now' + '_GridData.csv')
            $("#exportcsv").attr("href", 'data:Application/octet-stream,' + (escape(lines)));

            BindHomeGrid();
            $(".orange-corner-grid").hover(function () {
                $("#divTacticReqMsg").css('display', 'block');
                var position = $(this).offset();
                var targetOffset = $(this).offset().top;
                var targetHeight = $(this).height();
                var contentHeight = $('#divTacticReqMsg').outerHeight();
                var targetBottomOffset = targetOffset + targetHeight - contentHeight;

                $('#divTacticReqMsg').css({
                    'top': targetBottomOffset,
                    'left': position.left,
                });
                $('#popupType').css('display', 'none');
                $('#dhx_combo_select').css('display', 'none');
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            }, function () {
                $("#divTacticReqMsg").css('display', 'none');
            });
            // Commented By Nishant Sheth
            // Desc :: To resolve show popup isssue after export to csv feature. #1789

            //$(".grid_Search").click(function (e) {
            //    
            //    inspectCloseFocus = $(this).position().top;
            //    var id = $(this).parent().next().html();
            //    var type = $(this).attr('id');
            //    gridSearchFlag = 1;
            //    DisplayEditablePopup(id, type);
            //});
            $(".grid_add").click(function (e) {
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
                gridSearchFlag = 1;
                var type = $(this).attr('id');
                var name = $(this).attr('alt');
                var title = $(this).parent().prev().attr('title');
                /*Modified by Mitesh for PL ticket 1570
                combination of title and permission conflict when title has "\" separator*/
                var permission = $(this).attr('per');
                //title = chk_permission[0];
                //var permission = chk_permission[1];
                var linetype = $(this).attr('lt');
                DisplayPopUpMenu(type, name, title, permission,linetype, e);

            });

        }
        else {
            $('#cErrorInspectPopup').html('No Records found for Export Grid data.');
            $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");
            $('#errorMessageInspectPopup').css("display", "block");
        }
    }
    function callsearch() {
        $("#divgridview").find(".grid_Search").each(function () {
            $(this).click(function (e) {
                inspectCloseFocus = $(this).position().top;
                var id = $(this).parent().next().html();
                var type = $(this).attr('id');
                gridSearchFlag = 1;
                DisplayEditablePopup(id, type);
            });
            return false;
        });
        $("#divgridview").find(".grid_add").each(function () {
            $(this).click(function (e) {
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
                gridSearchFlag = 1;
                var type = $(this).attr('id');
                var name = $(this).attr('alt');
                var title = $(this).parent().prev().attr('title');
                var permission = $(this).attr('per');
                var linetype = $(this).attr('lt');
                DisplayPopUpMenu(type, name, title, permission,linetype, e);
            });
        });
        $('#gridbox').find('tbody tr').each(function () {
            var spnerror = $(this).find("#tacticIsRequired");
            if (typeof spnerror != 'undefined' && spnerror != null) {
                var div = $(spnerror).parent().parent();

                if (typeof div != 'undefined') {
                    $(spnerror).remove();
                    $('<span class="orange-corner-grid" id="spnError"></span>').insertAfter(div);
                }
            }
        });
        $("#divgridview").find(".orange-corner-grid").each(function () {
            $(this).hover(function () {
                $("#divTacticReqMsg").css('display', 'block');
                var position = $(this).offset();
                var targetOffset = $(this).offset().top;
                var targetHeight = $(this).height();
                var contentHeight = $('#divTacticReqMsg').outerHeight();
                var targetBottomOffset = targetOffset + targetHeight - contentHeight;

                $('#divTacticReqMsg').css({
                    'top': targetBottomOffset,
                    'left': position.left,
                });
                $('#popupType').css('display', 'none');
                $('#dhx_combo_select').css('display', 'none');
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            }, function () {
                $("#divTacticReqMsg").css('display', 'none');
            });
        });
    }
    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });
    var GridDataCsv;
    function BindHomeGrid() {
        @*var JsonModel = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PlanDHTMLXGrid))';*@
        var JsonModel = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.PlanDHTMLXGrid)';

        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        HomeGrid.enableDragAndDrop(true);
        HomeGrid.enableAutoHeight(false);
        HomeGrid.enableAutoWidth(false);

        HomeGrid.setNumberFormat("$0,000", 6, ".", ",");

        HomeGrid.setImageSize(1, 1);
      
        HomeGrid.setCustomSorting(sort_Owner, 8);

        HomeGrid.setCustomSorting(sort_TacticType, 7);
        HomeGrid.csvParser = HomeGrid.csvExtParser;
        HomeGrid.init();
        // added by bhavesh - 11-Nov-2015
        // Apply Distributed Parsing
        HomeGrid.attachEvent("onDistributedEnd", function () {
            // your code here
            LoadAfterParsing();
            if ($("#gridbox").find(".rowselected").length >= 1) {
                var scrolltop = $(".rowselected").offset().top;
                $(window).scrollTop(scrolltop - 100);
            }
        });
        HomeGrid.enableDistributedParsing(true, 10, 0.1);
        //        HomeGrid.loadXMLString(document.getElementById("mytextarea1").value);



        var mainGridData = JsonModel;
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        var GridData = (mainGridData.toString().replace(/&amp;/g, '&'));

        //Added by Ashish mistry on 11/12/2015 for PL #1782 :- export to csv from honeycomb
        GridDataCsv={rows:[],head:[]};
        GridDataCsv.head=JSON.parse(GridData).head;
        GridDataCsv.rows=JSON.parse(GridData).rows;
        HomeGrid.parse(GridData, "json");

        // HomeGrid.sortRows(1, 'str', 'asc');
        LoadAfterParsing();
        //Added by Rahul shah for PL #1683


        //End


        // Comment by bhavesh - 11-Nov-2015
        // Comment not showing Flag on grid for required field
        //$('#gridbox').find('tbody tr').each(function () {
        //    var spnerror = $(this).find("#tacticIsRequired");
        //    if (typeof spnerror != 'undefined' && spnerror != null) {
        //        var div = $(spnerror).parent().parent();
        //        //if ($(this).hasClass('ev_dhx_skyblue') || $(this).hasClass('odd_dhx_skyblue')) {
        //        //    var div = $(this).find('.treegrid_cell');
        //        if (typeof div != 'undefined') {
        //            $(spnerror).remove();
        //            $('<span class="orange-corner-grid" id="spnError"></span>').insertAfter(div);
        //        }
        //    }
        //});

    }

    // 1780
    //Added by Rahul shah for Honeycomb selection in grid
    function AddRemoveEntity(item) {
        //Changes  to improve performance issue
        var Ownername = $("#ulSelectedOwner").find('#liOwner' + $(item).attr('ownername')).attr("title");
        var TacticType = $("#ulTacticType").find('#liTT' + $(item).attr('tactictype')).attr("title");
        if (TacticType == undefined || TacticType == 'undefined')
        {
            TacticType = $(item).attr('tactictype');
        }
        else
        {
            TacticType = TacticType.split("(")[0];
        }
        if ($(item).attr('id') == 'PlanAdd') {
            //var planid = $(item).attr('altId').split('_')[0];
            //if (planid != undefined) {
            //    var selectedRow = HomeGrid.findCell(planid, 3, true);
            //    HomeGrid.openItem(selectedRow[0][0]);
            //}
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
             
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                }

                $(item).removeClass("honeycombbox-icon-gantt-Active");
                $(item).addClass("honeycombbox-icon-gantt");

                //$($("div[altId^='" + $(item).attr('altId').split('_')[0] + "']")).each(function (index) {
                //    //var campid = $(this).attr('altId').split('_')[1];
                //    //if (campid != undefined) {
                //    //    var campRow = HomeGrid.findCell(campid, 3, true);
                //    //    HomeGrid.openItem(campRow[0][0]);
                //    //}

                //    $($("div[altId^='_" + $(this).attr('altId').split('_')[1] + "']")).each(function (index) {
                //        var progid = $(this).attr('altId').split('_')[2];
                //        if (progid != undefined) {
                //            var progRow = HomeGrid.findCell(progid, 3, true);
                //            HomeGrid.openItem(progRow[0][0]);
                //        }

                //    });
                //    // Loop for selecting Tactic on selecting Plan/Campaign/Program
                //});
                // Loop for selecting Program on selecting Plan
            }
            else {

                $(item).addClass("honeycombbox-icon-gantt-Active");
             
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname'));
                ExportSelectedIds.OwnerName.push(Ownername);
                ExportSelectedIds.TacticType.push(TacticType);
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                // Loop for selecting Program on selecting Plan
                //$($("div[altId^='" + $(item).attr('altId').split('_')[0] + "']")).each(function (index) {
                //    var campid = $(this).attr('altId').split('_')[1];
                //    if (campid != undefined) {
                //        var campRow = HomeGrid.findCell(campid, 3, true);
                //        HomeGrid.openItem(campRow[0][0]);
                //    }


                //    $($("div[altId^='_" + $(this).attr('altId').split('_')[1] + "']")).each(function (index) {

                //        var progid = $(this).attr('altId').split('_')[2];
                //        if (progid != undefined) {
                //            var progRow = HomeGrid.findCell(progid, 3, true);
                //            HomeGrid.openItem(progRow[0][0]);
                //        }


                //    });


                //    // Loop for selecting Tactic on selecting Plan/Campaign/Program
                //});
                // Loop for selecting Program on selecting Plan
            }
        }


        if ($(item).attr('id') == 'CampaignAdd') {
            //var campid = $(item).attr('altId').split('_')[1];
            //if (campid != undefined) {
            //    var campRow = HomeGrid.findCell(campid, 3, true);
            //    HomeGrid.openItem(campRow[0][0]);
            //}

            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                }
                $(item).removeClass("honeycombbox-icon-gantt-Active");
                $(item).addClass("honeycombbox-icon-gantt");

                // Loop for Clear tactic on selecting Campaign
                //$($("div[altId^='_" + $(item).attr('altId').split('_')[1] + "']")).each(function (index) {
                //    var progid = $(this).attr('altId').split('_')[2];
                //    if (progid != undefined) {
                //        var progRow = HomeGrid.findCell(progid, 3, true);
                //        HomeGrid.openItem(progRow[0][0]);
                //    }

                //});
                // Loop for Clear tactic on selecting Campaign
            }
            else {
                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname'));
                ExportSelectedIds.OwnerName.push(Ownername);
                ExportSelectedIds.TacticType.push(TacticType);
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                
                // Loop for selecting tactin on selecting Campaign
                //$($("div[altId^='_" + $(item).attr('altId').split('_')[1] + "']")).each(function (index) {
                //    var progid = $(this).attr('altId').split('_')[2];
                //    if (progid != undefined) {
                //        var progRow = HomeGrid.findCell(progid, 3, true);
                //        HomeGrid.openItem(progRow[0][0]);
                //    }

                //});
                // Loop for selecting tactin on selecting Campaign
            }
        }


        if ($(item).attr('id') == 'ProgramAdd') {
            //var progid = $(item).attr('altId').split('_')[2];
            //if (progid != undefined) {
            //    var selectedRow = HomeGrid.findCell(progid, 3, true);

            //    HomeGrid.openItem(selectedRow[0][0]);
            //}
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                $(item).removeClass("honeycombbox-icon-gantt-Active");
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                }
                $(item).addClass("honeycombbox-icon-gantt");

            }
            else {

                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname'));
                ExportSelectedIds.OwnerName.push(Ownername);
                ExportSelectedIds.TacticType.push(TacticType);
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
                
            }
        }

        if ($(item).attr('id') == 'TacticAdd') {
            if ($(item).hasClass("honeycombbox-icon-gantt-Active")) {
                $(item).removeClass("honeycombbox-icon-gantt-Active");
                var index = ExportSelectedIds.TaskID.indexOf($(item).attr('altId'));
                if (index >= 0) {
                    ExportSelectedIds.TaskID.splice(index, 1);
                    ExportSelectedIds.Title.splice(index, 1);
                    ExportSelectedIds.OwnerName.splice(index, 1);
                    ExportSelectedIds.TacticType.splice(index, 1);
                    ExportSelectedIds.ColorCode.splice(index, 1);
                    ExportSelectedIds.PlanFlag.splice(index, 1);
                }
                $(item).addClass("honeycombbox-icon-gantt");
            }
            else {
                $(item).addClass("honeycombbox-icon-gantt-Active");
                ExportSelectedIds.TaskID.push($(item).attr('altId'));
                ExportSelectedIds.Title.push($(item).attr('taskname'));
                ExportSelectedIds.OwnerName.push(Ownername);
                ExportSelectedIds.TacticType.push(TacticType);
                ExportSelectedIds.ColorCode.push($(item).attr('colorcode'));
                ExportSelectedIds.PlanFlag.push('Grid');
            }
        }
        if ($('.honeycombbox-icon-gantt-Active').length == 0) {
            $(".honeycombbox").hide();
        }
        else {
            $("#totalEntity").text($('.honeycombbox-icon-gantt-Active').length);
            $(".honeycombbox").show();

            $('.dropdown-menu').find('a#ExportCSVHoneyComb').css("display", "block");
            $('.dropdown-menu').find('a#ExportPDFVHoneyComb').css("display", "none");
        }
    }
   


    // Create funtion to load grid view event - Apply Distributed Parsing
    // Added By Bhavesh - Date: 11-Nov-2015
    function LoadAfterParsing() {
        if (eventidonedit != 0) {
            HomeGrid.detachEvent(eventidonedit);
        }
        eventidonedit = HomeGrid.attachEvent("onEditCell", doOnEditCell);
        if (eventiddrag != 0) {
            HomeGrid.detachEvent(eventiddrag);
        }
        eventiddrag = HomeGrid.attachEvent("onDrag", doOnDrag);
        if (eventidonscroll != 0) {
            HomeGrid.detachEvent(eventidonscroll);
        }
        eventidonscroll = HomeGrid.attachEvent("onScroll", function (sLeft, sTop) {
            $(".dhx_combo_select").css("display", "none");
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            $("#popupType").css("display", "none");
        });
        if (eventidonbeforedrag != 0) {
            HomeGrid.detachEvent(eventidonbeforedrag);
        }
        eventidonbeforedrag = HomeGrid.attachEvent("onBeforeDrag", function (id) {
            if (id.split(".")[0].toString() != "tact") return false;//denies dragging if user data exists
            var locked = HomeGrid.cells(id, 1).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
            return true;                                          //allows dragging in any other case
        });


        //if (isCopyTacticHomeGrid != 0) {
        //    HomeGrid.collapseAll();
        //}
        $(".grid_Search").off("click");
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).parent().next().html();
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });
        $(".grid_add").click(function (e) {
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            gridSearchFlag = 1;
            var type = $(this).attr('id');
            var name = $(this).attr('alt');
            var title = $(this).parent().prev().attr('title');
            /*Modified by Mitesh for PL ticket 1570
            combination of title and permission conflict when title has "\" separator*/
            var permission = $(this).attr('per');
            //title = chk_permission[0];
            //var permission = chk_permission[1];
            var linetype = $(this).attr('lt');
            DisplayPopUpMenu(type, name, title, permission, linetype, e);

        });
        if (isCopyTacticHomeGrid != 0) {
            var selectedcell = HomeGrid.findCell(isCopyTacticHomeGrid, 3, true);
            var id = selectedcell[0];
            var rowid = id[0];
            var SourcePtype = (rowid).split(".")[0];
            // if (SourcePtype == "line") {
            // HomeGrid.openItem(HomeGrid.getParentId(rowid));
            HomeGrid.openItem(rowid);
            //}

            HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);

            isCopyTacticHomeGrid = 0;
            isCopyTactic = 0;
        }
        else if (isEditTacticHomeGrid != 0) {
            // HomeGrid.expandAll();
            var selectedcell = HomeGrid.findCell(isEditTacticHomeGrid, 3, true);

            //  HomeGrid.openItem(id[0]);

            var id = selectedcell[0];
            var rowid = id[0];
            HomeGrid.openItem(HomeGrid.getParentId(rowid));
            HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);
            //var scrolltop = $(".rowselected").offset().top;
            //  $(window).scrollTop(scrolltop - 100);
            isEditTacticHomeGrid = 0;
            isEditTactic = 0;
        }

        if (editidonOpenEnd != 0) {
            HomeGrid.detachEvent(editidonOpenEnd);
        }
        editidonOpenEnd = HomeGrid.attachEvent("onOpenEnd", function (rowid) {
            //Modified by komal Rawal for #1553
            $(".grid_Search").off("click");
            $(".grid_Search").click(function (e) {
                inspectCloseFocus = $(this).position().top;
                var id = $(this).parent().next().html();
                var type = $(this).attr('id');
                gridSearchFlag = 1;
                DisplayEditablePopup(id, type);

            });

            $(".grid_add").click(function (e) {
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
                gridSearchFlag = 1;
                var type = $(this).attr('id');
                var name = $(this).attr('alt');
                var title = $(this).parent().prev().attr('title');
                /*Modified by Mitesh for PL ticket 1570
                combination of title and permission conflict when title has "\" separator*/
                var permission = $(this).attr('per');
                //title = chk_permission[0];
                //var permission = chk_permission[1];
                var linetype = $(this).attr('lt');
                DisplayPopUpMenu(type, name, title, permission, linetype, e);

            });

        });


    }

  
    function sort_Owner(a, b, ord, a_id, b_id) {
   
        a = HomeGrid.cells(a_id, 8).getText();
        b = HomeGrid.cells(b_id, 8).getText();
        return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
    };
    function sort_TacticType(a, b, ord, a_id, b_id) {
     
        var atype = a_id.split(".")[0].toString();
        var btype = b_id.split(".")[0].toString();
        if (atype == "tact" && btype == "tact") {
            a = HomeGrid.cells(a_id, 7).getText();
            b = HomeGrid.cells(b_id, 7).getText();
            return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
        } else return 0;
    };
    function convertNumber(num) {
   
        var finlval = 0;
        var base = parseFloat(num.replace('$', ''));
        if (num.toLowerCase().match(/k/)) {
            return finlval = Math.round(base * 1000);
        }
        else if (num.toLowerCase().match(/m/)) {
            return finlval = Math.round(base * 1000000);
        }
        else if (num.toLowerCase().match(/b/)) {
            return finlval = Math.round(base * 1000000000);
        }
        else
            return finlval = numb.replace('$', '');
    }
    function ResizeGrid(wid) {
        $("#gridbox").attr("width", wid);
        HomeGrid.setSizes();
        LoadAfterParsing();
    }
    function doOnDrag(sid, tid) {

        var dragSourcePtype = HomeGrid.getParentId(sid).split(".")[0];
        var dragSourcetype = sid.split(".")[0].toString()
        var dragTargettype = tid.split(".")[0];
        if (dragSourcetype == "tact") {
            if (dragSourcePtype == dragTargettype) {
                var splanid = HomeGrid.cells("plan." + sid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                var dplanid = HomeGrid.cells("plan." + tid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();

                var parentid = HomeGrid.getParentId(sid);
                if (dplanid == splanid) {
                    if (parentid != tid) {
                        var DestinationMember = new Array();
                        DestinationMember = HomeGrid.getAllSubItems(tid).split(',');

                        var sourseid = HomeGrid.cells(sid, HomeGrid.getColIndexById('id')).getValue();
                        var destinatinId = HomeGrid.cells(tid, HomeGrid.getColIndexById('id')).getValue();
                        var tacticname = HomeGrid.cells(sid, 1).getValue();
                        var dtactictitle = "";

                        for (a in DestinationMember) {
                            if (DestinationMember[a].toString() != "" && DestinationMember[a].toString() != null) {
                                dtactictitle = HomeGrid.cells(DestinationMember[a].toString(), 1).getValue();
                                if (dtactictitle == tacticname) {
                                    alert("Tactic with same title already exist in Targeted Program.");
                                    return false;
                                }
                            }

                        }

                        ProgarmName = HomeGrid.cells(tid, 1).getValue();
                        $("#lipname").html(ProgarmName);
                        $("#hdnsourceid").val(sourseid);
                        $("#hdndestid").val(destinatinId);
                        $("#divMovetacticPopup").modal('show');
                    }
                    else {
                        ProgarmName = HomeGrid.cells(tid, 1).getValue();
                        alert("Tactic is already in " + ProgarmName + ".");
                    }
                }
                else
                    alert("Tactic can move only to same plan program."); return false;
            }
            else {
                var stype = GetItemType(sid.split(".")[0].toString());
                var dtype = GetItemType(dragTargettype.toString());

                alert(stype + " can not move to " + dtype); return false;
            }
        }
        else {
            alert("Only tactic can Move.");
            return false;
        }

    }
    function GetItemType(val) {
        var itemType = "";
        if (val.toString() == "tact")
            itemType = "Tactic";
        else if (val.toString() == "prog")
            itemType = "Program";
        else if (val.toString() == "camp")
            itemType = "Campaign";
        else if (val.toString() == "plan")
            itemType = "Plan";
        else if (val.toString() == "line")
            itemType = "LineItem";
        return itemType;
    }
    function SaveMoveTactic() {
        var sourseid = $("#hdnsourceid").val();
        var destinatinId = $("#hdndestid").val();
        $.ajax({

            type: 'POST',

            url: '@Url.Action("SaveGridDetail")', // we are calling json method
            data: { UpdateType: "tactic", UpdateColumn: "ParentID", UpdateVal: destinatinId, Id: parseInt(sourseid) },
            dataType: 'json',

            success: function (states) {
                LoadPlanGrid();
            }
        });
    }
    function formatDate(d) {
        d = new Date(d);
        function addZero(n) {
            return n < 10 ? '0' + n : '' + n;
        }
        return addZero(d.getMonth() + 1) + "/" + addZero(d.getDate()) + "/" + d.getFullYear();
    }
    var progid = 0;
    var campid = 0;
    var planid = 0;
    var tactid = 0;
    var progActVal = 0;
    var CampActVal = 0;
    var PlanActVal = 0;
    var TactActVal = 0;
    var diff = 0;
    var newProgVal = 0;
    var newCampVal = 0;
    var newPlanVal = 0;
    var newTactVal = 0;

    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var updatetype = rowId.split(".")[0];
        var Id;
        var UpdateColumn;
        var UpdateVal;
        var Colind = this.cell.cellIndex;
        var lineItemFlag = 0;
        //Added by Rahul Shah on 30/11/2015 for PL #1764.
        var hdnYear;
        hdnYear= @ViewBag.Year;
        UpdateColumn = HomeGrid.getColLabel(Colind, 0);
        if (stage == 0) {
            // Only check for type column
            if (Colind == 7) {
                if (updatetype == "line") {
                    var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                    if (actval == "") {
                        return false;
                    }
                    var combo = HomeGrid.getCombo(cellInd);
                    var lineitemtype = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.lineitemtype))');
                    //  d = optionlist.filter(filterbyname);
                    combo.clear();
                    $.each(lineitemtype, function (i, item) {
                        combo.put(item.LineItemTypeId, item.Title);
                    });
                }
                else {
                    var combo = HomeGrid.getCombo(cellInd);
                    var tacticTypelist = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.TacticTypelist))');
                    combo.clear();
                    $.each(tacticTypelist, function (i, item) {
                        combo.put(item.TacticTypeId, item.Title);
                    });
                }
            }

            var locked = HomeGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
        }
        if (stage == 1) {
            if (updatetype == "line") {
                var oldval = HomeGrid.cells(rowId, cellInd).getValue();
                var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                if (cellInd != 1) {
                    if (oldval == "")
                        $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                    else {
                        var v1 = parseInt(oldval);
                        if (isNaN(v1)) {
                            $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                            $('.dhx_combo_select').val(actval);
                            //var v = $('.dhx_combo_select option:contains("' + oldval + '")').val();
                            //if (v != "undefined")
                            //    $('.dhx_combo_select').val(v);
                        }
                        else
                            $('.dhx_combo_select').val(actval);
                    }
                }
            }
            $(".dhx_combo_edit").off("keydown");
            if (UpdateColumn == "Planned Cost" || UpdateColumn == "Target Stage Goal") {

                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                HomeGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }

            if (UpdateColumn == "Target Stage Goal") {
                var psv = HomeGrid.cells(rowId, 9).getValue().split(" ");
                this.editor.obj.value = (psv[0].replace(/,/g, ""));
            }
        }
        if (stage == 2) // start edit Shipping column
        {
            if (nValue != null && nValue != "") {
                var sdateindex = HomeGrid.getColIndexById('startdate');
                var edateindex = HomeGrid.getColIndexById('enddate');
                var idindex = HomeGrid.getColIndexById('id');
                var costindex = HomeGrid.getColIndexById('plannedcost');
                var stageindex = HomeGrid.getColIndexById('inq');

                if (UpdateColumn == "" || UpdateColumn == null)
                    UpdateColumn = HomeGrid.getColLabel(Colind, 0);
                Id = HomeGrid.cells(rowId, idindex).getValue();

                if (UpdateColumn == "Start Date") {

                    var startyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], sdateindex).getValue()).getFullYear();
                    var edate = HomeGrid.cells(rowId, edateindex).getValue();
                    if (!CheckDateYear(nValue, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false; //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                    if (!validateDateCompare(nValue, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                    if (updatetype == "prog") {
                        var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                        if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) return false;
                    }
                    if (updatetype == "camp") {
                        var psdate = HomeGrid.getUserData(rowId, "psdate");
                        var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                        if (!validateDateCompare(nValue, psdate, "@RevenuePlanner.Helpers.Common.objCached.ProgramStartDateCompareWithParentStartDate")) {
                            return false;
                        }
                        if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) {
                            return false;
                        }
                    }
                    nValue = formatDate(nValue);
                    oValue = formatDate(oValue);
                }
                if (UpdateColumn == "End Date") {
                    var endyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], edateindex).getValue()).getFullYear();
                    var sdate = HomeGrid.cells(rowId, sdateindex).getValue();

                    if (!CheckDateYear(nValue, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;  //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                    if (!validateDateCompare(sdate, nValue, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                    if (updatetype == "prog") {
                        var tedate = HomeGrid.getUserData(rowId, "tedate");
                        if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) return false;
                    }
                    if (updatetype == "camp") {
                        var pedate = HomeGrid.getUserData(rowId, "pedate");
                        var tedate = HomeGrid.getUserData(rowId, "tedate");
                        if (!validateDateCompare(pedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.ProgramEndDateCompareWithParentEndDate")) {
                            return false;
                        }
                        if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) {
                            return false;
                        }
                    }
                    nValue = formatDate(nValue);
                    oValue = formatDate(oValue);
                }
                if (UpdateColumn.toString().trim() == "Target Stage Goal") {
                    var splitoval = oValue.split(" ");
                    if (nValue != splitoval[0].replace(/,/g, "")) {
                        var tactictypeindex = HomeGrid.getColIndexById('tactictype');
                        //var tacticTypeId = HomeGrid.cells(rowId, cellInd).getAttribute("tactictype");
                        var tacticTypeId = HomeGrid.getUserData(rowId, "tactictype");
                        GetConversionRate(Id, tacticTypeId, UpdateColumn, nValue, rowId, nValue, null);
                        return true;
                    }
                    else
                        return false;
                }
                if (UpdateColumn == "Type" && updatetype == "tact") {

                    var tacticTypeId = nValue;
                    if (nValue != oValue) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                            data: { tacticTypeId: tacticTypeId },
                            success: function (data) {
                                pcost = data.revenue;
                                var stagetitle = data.stageTitle;
                                var projectedStageValue = data.projectedStageValue;
                                if (parseFloat(projectedStageValue) > 0)
                                    HomeGrid.cells(rowId, 9).setValue(FormatCommas(projectedStageValue.toString(), false) + " " + stagetitle);
                                else
                                    HomeGrid.cells(rowId, 9).setValue(projectedStageValue + " " + stagetitle);
                                //HomeGrid.cells(rowId, 9).setAttribute("stage", stagetitle);
                                HomeGrid.setUserData(rowId, "stage", stagetitle);
                                //HomeGrid.cells(rowId, 9).setAttribute("tactictype", tacticTypeId);
                                HomeGrid.setUserData(rowId, "tactictype", tacticTypeId);
                                GetConversionRate(Id, tacticTypeId, UpdateColumn, projectedStageValue, rowId, nValue, data.stageId);
                            }
                        });
                        return true;
                    }
                }
                if (updatetype == "line") {
                    var actval = HomeGrid.cells(rowId, cellInd).getAttribute("actval");
                    if (actval == null || actval == "")
                        actval = oValue;
                    if (nValue != oValue && nValue != actval) {

                        UpdateVal = nValue;
                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                        tactid = HomeGrid.getParentId(rowId);
                        progid = HomeGrid.getParentId(tactid);
                        campid = HomeGrid.getParentId(progid);
                        planid = HomeGrid.getParentId(campid);
                        var TotalRowIds = HomeGrid.getAllSubItems(tactid);
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("SaveGridDetail")', // we are calling json method
                            data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                            dataType: 'json',
                            success: function (states) {
                                if (states.errormsg != null && states.errormsg.trim() != "") {
                                    alert(states.errormsg.trim());
                                    HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                    return false;
                                }
                                else if (UpdateColumn == "Planned Cost") {

                                    //Added By Rahul Shah on 16/10/2015 for PL 1559
                                    diff = parseInt(nValue) - parseInt(oValue);
                                    diffLineAndTactic = states.lineItemCost - states.tacticCost
                                    if (states.lineItemCost > states.tacticCost) {

                                        SetColumUpdatedValue(6, diffLineAndTactic);
                                        HomeGrid.cells(progid, 6).setValue((newProgVal));
                                        HomeGrid.cells(campid, 6).setValue((newCampVal));
                                        HomeGrid.cells(planid, 6).setValue((newPlanVal));
                                        HomeGrid.cells(tactid, 6).setValue((newTactVal));
                                        for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                            //if (HomeGrid.cells(TotalRowIds.split(',')[i], 6).getAttribute("IsOther") == "True") {
                                            if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "true") {

                                                HomeGrid.cells(TotalRowIds.split(',')[i], 6).setValue((states.otherLineItemCost));
                                            }
                                        }
                                    }
                                    else {

                                        for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                            //if (HomeGrid.cells(TotalRowIds.split(',')[i], 6).getAttribute("IsOther") == "True") {
                                            if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "true") {

                                                HomeGrid.cells(TotalRowIds.split(',')[i], 6).setValue((states.otherLineItemCost));

                                            }
                                        }
                                    }
                                    HomeGrid.cells(rowId, 6).setValue((nValue));
                                    //Commented By Rahul Shah on 16/10/2015 for PL 1559
                                    //LoadPlanGrid();
                                }
                                else if(UpdateColumn == "Type")
                                    HomeGrid.cells(rowId, cellInd).setAttribute("actval",nValue);
                            }
                        });
                    }
                    return true;
                }
                if (htmlDecode(nValue) != oValue) {  //Modified by Rahul Shah on 30/11/2015 for PL #1778. here in special character nValue data carry with Extra character.
                    if (UpdateColumn != "Type" && UpdateColumn.toString().trim() != "Target Stage Goal") {
                        progid = HomeGrid.getParentId(rowId);
                        campid = HomeGrid.getParentId(progid);
                        planid = HomeGrid.getParentId(campid);
                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                        var TotalRowIds = HomeGrid.getAllSubItems(rowId);
                        //
                        UpdateVal = nValue;
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("SaveGridDetail")', // we are calling json method
                            data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                            dataType: 'json',
                            success: function (states) {
                                if (states.errormsg != null && states.errormsg.trim() != "") {
                                    alert(states.errormsg.trim());
                                    HomeGrid.cells(rowId, cellInd).setValue(oValue);
                                    return false;
                                }
                                if (UpdateColumn == "Start Date") {

                                    ComapreDate(updatetype, rowId, sdateindex, nValue, UpdateColumn);
                                }

                                if (UpdateColumn == "End Date") {

                                    ComapreDate(updatetype, rowId, edateindex, nValue, UpdateColumn);
                                }
                                if (UpdateColumn == "Planned Cost") {
                                    //Commented By Rahul Shah on 16/10/2015 for PL 1559
                                    //diff = parseInt(nValue) - parseInt(oValue);
                                    //SetColumUpdatedValue(6, diff);
                                    //HomeGrid.cells(progid, 6).setValue((newProgVal));
                                    //HomeGrid.cells(campid, 6).setValue((newCampVal));
                                    //HomeGrid.cells(planid, 6).setValue((newPlanVal));
                                    //HomeGrid.cells(rowId, 6).setValue((nValue));
                                    //Added By Rahul Shah on 16/10/2015 for PL 1559
                                    if (nValue < states.lineItemCost) {

                                        HomeGrid.cells(rowId, 6).setValue((oValue));
                                    }
                                    else {

                                        diff = parseInt(nValue) - parseInt(oValue);
                                        SetColumUpdatedValue(6, diff);
                                        HomeGrid.cells(progid, 6).setValue((newProgVal));
                                        HomeGrid.cells(campid, 6).setValue((newCampVal));
                                        HomeGrid.cells(planid, 6).setValue((newPlanVal));
                                        HomeGrid.cells(rowId, 6).setValue((nValue));
                                        if (TotalRowIds != "") {
                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {

                                                //if (HomeGrid.cells(TotalRowIds.split(',')[i], 6).getAttribute("IsOther") == "True") {
                                                if (HomeGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "true") {
                                                    HomeGrid.cells(TotalRowIds.split(',')[i], 6).setValue((states.OtherLineItemCost));
                                                }
                                            }
                                        }

                                    }
                                }
                                if (UpdateColumn == "Owner") {
                                    CheckPermissionByOwner(rowId, nValue, updatetype, parseInt(Id))

                                }
                            }
                        });
                    }
                    return true;
                }
            }
        }
    }
    function CheckPermissionByOwner(rowId, NewOwner, updatetype, updateid) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckPermissionByOwner")', // we are calling json method
            data: { NewOwnerID: NewOwner, UpdateType: GetItemType(updatetype), updatedid: parseInt(updateid) },
            dataType: 'json',
            success: function (data) {
                if (data.IsLocked == "1") {
                    HomeGrid.cells(rowId, 1).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 4).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 5).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 6).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 7).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 8).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 9).setAttribute("locked", data.IsLocked);
                    HomeGrid.setCellTextStyle(rowId, 1, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 2, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 4, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 5, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 6, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 7, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 8, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 9, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 10, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 11, data.cellTextColor);
                }
            },
            error: function (ts) { }
        });
    }
    function ComapreDate(updatetype, rowId, dateindex, nValue, Updatecolumn) {
        var newDate = new Date(formatDate(nValue)); //Modified by Rahul Shah on 30/11/2015 for PL #1764.
        if (updatetype == "tact") {

            progid = HomeGrid.getParentId(rowId);
            campid = HomeGrid.getParentId(progid);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(progid, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            var ProgstartDate = new Date(formatDate(HomeGrid.cells(progid, dateindex).getValue()));
            var Campstartdate = new Date(formatDate(HomeGrid.cells(campid, dateindex).getValue()));
            var Planstartdate = new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));

            if (Updatecolumn == "Start Date") {
                //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                if (ProgstartDate > newDate)
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (Campstartdate > newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMinDate = HomeGrid.getUserData(progid, "tsdate");
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(progid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) { }
                });

            }
            else if (Updatecolumn == "End Date") {
                //Modified by Rahul Shah on 30/11/2015 for PL #1764.
                if (ProgstartDate < newDate)
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (Campstartdate< newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMaxDate = HomeGrid.getUserData(progid, "tedate");
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(progid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMaxDate));
                    }
                });

            }

        }
        else if (updatetype == "prog") {

            campid = HomeGrid.getParentId(rowId);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(rowId, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            var Campstartdate = new Date(formatDate(HomeGrid.cells(campid, dateindex).getValue()));
            var Planstartdate = new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));
            if (Updatecolumn == "Start Date") {
                if (Campstartdate > newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                var tactMinDate = HomeGrid.getUserData(campid, "tsdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")',
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) { }
                });
            }
            else if (Updatecolumn == "End Date") {
                if (Campstartdate < newDate) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                var tactMaxDate = HomeGrid.getUserData(campid, "tedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "pedate", formatDate(data.ProgMaxDate));
                    },
                    error: function (ts) { }
                });
            }
        }
        else if (updatetype == "camp") {
            //Modified by Rahul Shah on 30/11/2015 for PL #1764.
            planid = HomeGrid.getParentId(rowId);
            var Planstartdate =  new Date(formatDate(HomeGrid.cells(planid, dateindex).getValue()));
            if (Updatecolumn == "Start Date") {
                if (Planstartdate > newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
            else if (Updatecolumn == "End Date") {
                if (Planstartdate < newDate) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
        }
    }
    function GetConversionRate(TacticID, TacticTypeID, UpdateColumn, projectedStageValue, rowid, UpdateVal, stageid) {
        var pmql = 0;
        var pcost = 0;
        var isAssortment = true;
        var StageValue = 0;
        var revenue = 0;
        progid = HomeGrid.getParentId(rowid);
        campid = HomeGrid.getParentId(progid);
        planid = HomeGrid.getParentId(campid);
        StageValue = projectedStageValue;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/CalculateMQL")',
            data: {
                tactictid: parseInt(TacticID), TacticTypeId: parseInt(TacticTypeID), projectedStageValue: StageValue, RedirectType: isAssortment, isTacticTypeChange: true, StageID: stageid
            },
            success: function (data) {
                var tactActMqlVal = HomeGrid.cells(rowid, 10).getAttribute("actval");
                var mqlConversion = 0;
                if (data.revenue != null)
                    revenue = data.revenue;
                if (data.mql == 'N/A') {
                    HomeGrid.setCellExcellType(rowid, 10, "ro");
                    HomeGrid.cells(rowid, 10).setValue(data.mql);
                    diff = parseInt(-tactActMqlVal);
                    SetColumUpdatedValue(10, diff);
                }
                else {
                    // HomeGrid.setCellExcellType(rowid, 10, "ron");


                    if (data.mql != null) {
                        mqlConversion = data.mql;
                    }
                    var mqlValue = GetAbberiviatedValue(mqlConversion.toString(), false);
                    HomeGrid.cells(rowid, 10).setValue(mqlValue);



                    diff = parseInt(mqlConversion) - parseInt(tactActMqlVal);
                    HomeGrid.cells(rowid, 10).setAttribute("actval", mqlConversion);
                    SetColumUpdatedValue(10, diff);





                }
                HomeGrid.cells(progid, 10).setValue(GetAbberiviatedValue(newProgVal), false);
                HomeGrid.cells(campid, 10).setValue(GetAbberiviatedValue(newCampVal), false);
                HomeGrid.cells(planid, 10).setValue(GetAbberiviatedValue(newPlanVal), false);


                HomeGrid.cells(rowid, 11).setValue(FormatNumber(revenue));
                var tactActRevenuVal = HomeGrid.cells(rowid, 11).getAttribute("actval");
                diff = parseInt(revenue) - parseInt(tactActRevenuVal);

                SetColumUpdatedValue(11, diff);
                HomeGrid.cells(progid, 11).setValue((FormatNumber(newProgVal)));
                HomeGrid.cells(campid, 11).setValue((FormatNumber(newCampVal)));
                HomeGrid.cells(planid, 11).setValue((FormatNumber(newPlanVal)));
                HomeGrid.cells(rowid, 11).setAttribute("actval", revenue);
                $.ajax({

                    type: 'POST',

                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: GetItemType("tact"), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(TacticID) },
                    dataType: 'json',

                    success: function (states) {
                        //    LoadPlanGrid();
                        if (UpdateColumn == "Target Stage Goal") {
                            var psv = HomeGrid.getUserData(rowid, "stage");
                            //var psv = HomeGrid.cells(rowid, 9).getAttribute("stage");
                            HomeGrid.cells(rowid, 9).setValue(FormatCommas(UpdateVal.toString()) + " " + psv);
                        }
                    }
                });
            }
        });
    }
    function SetColumUpdatedValue(CellInd, diff) {
        progActVal = HomeGrid.cells(progid, CellInd).getAttribute("actval");
        CampActVal = HomeGrid.cells(campid, CellInd).getAttribute("actval");
        PlanActVal = HomeGrid.cells(planid, CellInd).getAttribute("actval");

        newProgVal = parseInt(progActVal) + parseInt(diff);
        newCampVal = parseInt(CampActVal) + parseInt(diff);
        newPlanVal = parseInt(PlanActVal) + parseInt(diff);

        HomeGrid.cells(progid, CellInd).setAttribute("actval", newProgVal);
        HomeGrid.cells(campid, CellInd).setAttribute("actval", newCampVal);
        HomeGrid.cells(planid, CellInd).setAttribute("actval", newPlanVal);
        //Added By Rahul Shah on 16/10/2015 for PL 1559
        if (tactid != 0) {
            TactActVal = HomeGrid.cells(tactid, CellInd).getAttribute("actval");
            newTactVal = parseInt(TactActVal) + parseInt(diff);
            HomeGrid.cells(tactid, CellInd).setAttribute("actval", newTactVal);
        }
    }
    $(document).ready(function () {
        $('#cancel-button_Movetactic').on("click", function () {
            $('#divMovetacticPopup').modal("hide");

        });

        //// Proceed to save data.
        $('#proceed-button_Movetactic').on("click", function () {

            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
        $(".grid_add").click(function (e) {
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            gridSearchFlag = 1;
            var type = $(this).attr('id');
            var name = $(this).attr('alt');
            var title = $(this).parent().prev().attr('title');
            /*Modified by Mitesh for PL ticket 1570
            combination of title and permission conflict when title has "\" separator*/
            var permission = $(this).attr('per');
            //title = chk_permission[0];
            //var permission = chk_permission[1];
            var linetype = $(this).attr('lt');
            DisplayPopUpMenu(type, name, title, permission,linetype, e);

        });
    });
    x = 0;
    $('#useless').click(function () {
        HomeGrid.sortRows(1, 'str', 'asc');
        $("#spanscroll").text(x += 1);
        return true;
    });

    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");

        $("#useless").click();
    });


    $(document).scroll(function () {
        if (pageIsScroll == false) {

            pageIsScroll = true;
            // $("#useless").click();
        }
    });
</script>