@model RevenuePlanner.Models.Plangrid

@{
    var isTacticExist = Model.ImprovementObj.IsTacticExists;
}
<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid1.css")" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="@Url.Content("~/Scripts/js/DHTMLX/dhtmlxTreeGrid.js")">
</script>


<style>
    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
        padding-left:0px !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }
</style>

<div class="goals-wrapper" id="goalwrapper">
    <span class="goal-text">Goals</span>
    <span id="spnrevenue"></span>
    <span id="spninq"></span>
    <span id="spnmql"></span>
    <span id="spncw"></span>
    <a class="btn btn-blue-grid text-shadow-blue source-sans-proregular"  id="exportcsv" onclick="return ExportToCSV();">
        <img src="~/Content/images/grid-export.png" /> Export .csv
    </a>
   
</div>

<div id="gridbox" style="background-color:white;width:100%;"></div>

<textarea id="mytextarea1" style="width:0px;height:0px;display:none;">@Model.xmlstring</textarea>
<div id="divTacticReqMsg" class="clue-tip-message-orange-grid" style="display:none;">This tactic needs to have all required fields filled out before submission for approval.</div>

@*Added by Komal Rawal for #1432*@
<div id="ImprovementGrid"  class="improvement-grid-wrapper">
    @Html.Partial("_GridImprovement", Model.ImprovementObj)
</div>
<div class="row-fluid calc-height">
    <div class="span12">
        <div id="divMovetacticPopup" class="form-inspect-share hide fade height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div>
                <form>

                    <h2 class="primary-title source-sans-prosemibold resubmission_header">Moving a Tactic</h2>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">You are about to move a tactic to </label>


                    <label id="lipname" style="text-align: center; width: 100%; font-weight:800;" class="resubmission_content"></label>
                    <label style="text-align: center; width: 100%;" class="resubmission_content">Do you want to proceed?</label>
                    <input type="hidden" id="hdnsourceid" />
                    <input type="hidden" id="hdndestid" />
                    <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button_Movetactic">Proceed</button>
                    <button id="cancel-button_Movetactic" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
                </form>
            </div>
        </div>
    </div>
</div>
<input type="button" id="useless" value="Click" name="useless" style="display:none;" />
<p style="display:none;">Scrolled <span id="spanscroll">0</span> times.</p>
<script type="text/javascript">
    var HomeGrid;
      var isTacticExist = '@isTacticExist';
    var revenue = "Revenue : $" + number_format('@Model.Revenue', 0, '.', ',');
    $("#spnrevenue").html(revenue);
    var mql = '@Model.MQLLable' + " : " + number_format('@Model.MQLValue', 0, '.', ',');
    $("#spnmql").html(mql);
    var inq = '@Model.INQLable' + " : " + number_format('@Model.INQValue', 0, '.', ',');
    $("#spninq").html(inq);

    var cw = '@Model.CWLable' + " : " + number_format('@Model.CWValue', 0, '.', ',');
    $("#spncw").html(cw);

   

    $(document).ready(function () {
        $("#divupcomingact").hide();
        $("#liplanrequest").hide();
        $('.nav').addClass('no-bottom-border');
        BindHomeGrid();
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;

        //Modified by komal Rawal for #1553
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).attr('alt');
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });

        //End

        $(".orange-corner-grid").hover(function () {
            $("#divTacticReqMsg").css('display', 'block');
            var position = $(this).offset();
            var targetOffset = $(this).offset().top;
            var targetHeight = $(this).height();
            var contentHeight = $('#divTacticReqMsg').outerHeight();
            var targetBottomOffset = targetOffset + targetHeight - contentHeight;
            //var left = $(this).left;
            //var target = $(this).target;
            //var top = $(this).top;
            $('#divTacticReqMsg').css({
                // 'display': 'block',
                'top': targetBottomOffset,
                'left': position.left,
            });
            $('#popupType').css('display', 'none');
            $('#dhx_combo_select').css('display', 'none');
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
        }, function () {
            $("#divTacticReqMsg").css('display', 'none');
        });
    });

    var $doc = $(document);
    $doc.click(function () {
        $('#popupType').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupType').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupType').css('display', 'none');
    });
 

    function ExportToCSV() {
        HomeGrid.expandAll();
        var count = HomeGrid.getRowsNum();
        var parentid = 0;
        var parentname = "";
        if (count > 0) {
            //Modified BY Komal rawal for #1471
            HomeGrid.insertColumn(2);
            HomeGrid.setColumnHidden(2, true);
            HomeGrid.insertColumn(3);
            HomeGrid.setColumnHidden(3, true);
            HomeGrid.insertColumn(4);
            HomeGrid.setColumnHidden(4, true);
            HomeGrid.insertColumn(5);
            HomeGrid.setColumnHidden(5, true);
            //  var planname = HomeGrid.cellByIndex(0, 1).getValue();
            for (var i = 0; i < count; i++) {
                //  HomeGrid.cellByIndex(i, 2).setValue(planname);
                var Taskname = HomeGrid.cellByIndex(i, 1).getValue();
                var ActivityTypeName = HomeGrid.cellByIndex(i, 0).getValue();
                if (ActivityTypeName == "Plan") {

                    HomeGrid.cellByIndex(i, 2).setValue(Taskname);
                }
                if (ActivityTypeName == "Campaign") {

                    HomeGrid.cellByIndex(i, 3).setValue(Taskname);
                }
                if (ActivityTypeName == "Program") {
                    parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 3).setValue(parentname);
                    HomeGrid.cellByIndex(i, 4).setValue(Taskname);
                }
                if (ActivityTypeName == "Tactic") {
                    parentid = HomeGrid.getParentId(HomeGrid.getRowId(i));
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 4).setValue(parentname);
                    parentid = HomeGrid.getParentId(parentid);
                    parentname = HomeGrid.cells(parentid, 1).getValue();
                    HomeGrid.cellByIndex(i, 3).setValue(parentname);
                    HomeGrid.cellByIndex(i, 5).setValue(Taskname);
                }
            }

        HomeGrid.enableCSVAutoID(true);
        HomeGrid.enableCSVHeader(true);
            HomeGrid.setSerializableColumns("false,false,true,true,true,true,false,false,true,true,true,true,true,true,true,true");
        var myCSVString = HomeGrid.serializeToCSV(true);
        var lines = myCSVString.split(",");
            lines.splice(0, 11);
            lines.splice(0, 1, "Plan");
            lines.splice(1, 1, "Campaign");
            lines.splice(2, 1, "Program");
            lines.splice(3, 1, "Tactic");
            var Filename = HomeGrid.cellByIndex(0, 1).getValue().toString().substring(0,20);
            $("#exportcsv").attr('download', Filename + ' @DateTime.Now'+ '_GridData.csv')
            $("#exportcsv").attr("href", 'data:Application/octet-stream,' + (escape(lines)));

            BindHomeGrid();
				         $(".orange-corner-grid").hover(function () {
                $("#divTacticReqMsg").css('display', 'block');
                var position = $(this).offset();
                var targetOffset = $(this).offset().top;
                var targetHeight = $(this).height();
                var contentHeight = $('#divTacticReqMsg').outerHeight();
                var targetBottomOffset = targetOffset + targetHeight - contentHeight;
                //var left = $(this).left;
                //var target = $(this).target;
                //var top = $(this).top;
                $('#divTacticReqMsg').css({
                    // 'display': 'block',
                    'top': targetBottomOffset,
                    'left': position.left,
                });
                $('#popupType').css('display', 'none');
                $('#dhx_combo_select').css('display', 'none');
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            }, function () {
                $("#divTacticReqMsg").css('display', 'none');
            });
            $(".grid_Search").click(function (e) {
                inspectCloseFocus = $(this).position().top;
                var id = $(this).attr('alt');
                var type = $(this).attr('id');
                gridSearchFlag = 1;
                DisplayEditablePopup(id, type);
            });
            $(".grid_add").click(function (e) {
                $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
                gridSearchFlag = 1;
                var type = $(this).attr('id');
                var name = $(this).attr('alt');
                var title = $(this).attr('data-title');
                /*Modified by Mitesh for PL ticket 1570
                combination of title and permission conflict when title has "\" separator*/
                var permission = $(this).attr('permission');
                //title = chk_permission[0];
                //var permission = chk_permission[1];
                DisplayPopUpMenu(type, name, title, permission, e);

            });
        
    }
        else {
            $('#cErrorInspectPopup').html('No Records found for Export Grid data.');
            $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");
            $('#errorMessageInspectPopup').css("display","block");
        }
    }

    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });
    function BindHomeGrid() {
        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        HomeGrid.enableDragAndDrop(true);
        HomeGrid.enableAutoHeight(true);
        HomeGrid.enableAutoWidth(false);
     
        HomeGrid.setNumberFormat("$0,000", 6, ".", ",");
    
        HomeGrid.setImageSize(1, 1);
        HomeGrid.setCustomSorting(sort_Owner, 8);

        HomeGrid.setCustomSorting(sort_TacticType, 7);
       HomeGrid.csvParser = HomeGrid.csvExtParser;
        HomeGrid.init();
        HomeGrid.attachEvent("onEditCell", doOnEditCell);
        HomeGrid.attachEvent("onDrag", doOnDrag);
        HomeGrid.attachEvent("onScroll", function (sLeft, sTop) {
            $(".dhx_combo_select").css("display", "none");
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            $("#popupType").css("display", "none");
        });

        HomeGrid.attachEvent("onBeforeDrag", function (id) {
            if (id.split(".")[0].toString() != "tact") return false;//denies dragging if user data exists
            var locked = HomeGrid.cells(id, 1).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
            return true;                                          //allows dragging in any other case
        });
   
        HomeGrid.loadXMLString(document.getElementById("mytextarea1").value);
        if (isCopyTactic != 0) {
           HomeGrid.collapseAll();
        }
        HomeGrid.sortRows(1, 'str', 'asc');
        HomeGrid.forEachRow(function (rowid) {
       
            var MQL = HomeGrid.cells(rowid, 10).getValue();
            if(MQL!="--")
            HomeGrid.cells(rowid, 10).setValue(GetAbberiviatedValue(MQL));
            var Revenue = HomeGrid.cells(rowid, 11).getValue();
            if (Revenue != "--")
            HomeGrid.cells(rowid, 11).setValue(FormatNumber(Revenue, false));

            var psv = HomeGrid.cells(rowid, 9).getValue().split("_");
            if (psv.length > 1) {
                var psvnum = FormatCommas(psv[0], false);
                HomeGrid.cells(rowid, 9).setValue(psvnum + " " + psv[1]);
            }
            //HomeGrid.closeItem(rowid);
            var id = HomeGrid.cells(rowid, 3).getValue();
            var pid = HomeGrid.getParentId(rowid);
            if (isCopyTactic != 0) {
                //if (HomeGrid.getOpenState(rowid) == true)
                //    HomeGrid.closeItem(rowid);
                if (id == isCopyTactic) {
                    var SourcePtype = (rowid).split(".")[0];
                    if (SourcePtype == "tact") {
                        HomeGrid.openItem(pid);
                        HomeGrid.openItem(HomeGrid.getParentId(pid));
                        HomeGrid.openItem(HomeGrid.getParentId(HomeGrid.getParentId(pid)));
                    }
                    if (SourcePtype == "prog") {
                        HomeGrid.openItem(rowid);
                        HomeGrid.openItem(pid);
                        HomeGrid.openItem(HomeGrid.getParentId(pid));
                       
                    }
                    if (SourcePtype == "camp") {
                        HomeGrid.openItem(rowid);
                        HomeGrid.openItem(pid);
                       
                    }
                    HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);
                    var scrolltop = $(".cellselected").offset().top;
                    $("html").scrollTop(scrolltop);
                    ///  HomeGrid.showRow((pid));
                  
                }

            }
            else if (isEditTactic != 0)
            {
               // HomeGrid.expandAll();
                if (id == isEditTactic)
                {
                    HomeGrid.selectRow(HomeGrid.getRowIndex(rowid), true, true, true);
                    var scrolltop = $(".rowselected").offset().top;
                    $("html").scrollTop(scrolltop);
                }
            }
        });
        isCopyTactic = 0;
        isEditTactic = 0;
      
        $('#gridbox').find('tbody tr').each(function () {
            var spnerror = $(this).find("#tacticIsRequired");
            if (typeof spnerror != 'undefined' && spnerror!=null) {
                var div = $(spnerror).parent().parent();
            //if ($(this).hasClass('ev_dhx_skyblue') || $(this).hasClass('odd_dhx_skyblue')) {
            //    var div = $(this).find('.treegrid_cell');
                if (typeof div != 'undefined') {
                    $(spnerror).remove();
                 $('<span class="orange-corner-grid" id="spnError"></span>').insertAfter(div);
                }
            }
        })
    }
    function sort_Owner(a, b, ord, a_id, b_id) {

        a = HomeGrid.cells(a_id, 8).getText();
        b = HomeGrid.cells(b_id, 8).getText();
        return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
    };
    function sort_TacticType(a, b, ord, a_id, b_id) {
        var atype = a_id.split(".")[0].toString();
        var btype = b_id.split(".")[0].toString();
        if (atype == "tact" && btype == "tact") {
            a = HomeGrid.cells(a_id, 7).getText();
            b = HomeGrid.cells(b_id, 7).getText();
            return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
        } else return 0;
    };
    function convertNumber(num) {
        var finlval = 0;
        var base = parseFloat(num.replace('$', ''));
        if (num.toLowerCase().match(/k/)) {
            return finlval = Math.round(base * 1000);
        }
        else if (num.toLowerCase().match(/m/)) {
            return finlval = Math.round(base * 1000000);
        }
        else if (num.toLowerCase().match(/b/)) {
            return finlval = Math.round(base * 1000000000);
        }
        else
            return finlval = numb.replace('$', '');
    }
    function ResizeGrid(wid) {
        $("#gridbox").attr("width", wid);
        HomeGrid.setSizes();
    }
    function doOnDrag(sid, tid) {

        var dragSourcePtype = HomeGrid.getParentId(sid).split(".")[0];
        var dragSourcetype = sid.split(".")[0].toString()
        var dragTargettype = tid.split(".")[0];
        if (dragSourcetype == "tact") {
            if (dragSourcePtype == dragTargettype) {
                var splanid = HomeGrid.cells("plan." + sid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();
                var dplanid = HomeGrid.cells("plan." + tid.split(".")[1], HomeGrid.getColIndexById('id')).getValue();

                var parentid = HomeGrid.getParentId(sid);
                if (dplanid == splanid) {
                    if (parentid != tid) {
                        var DestinationMember = new Array();
                        DestinationMember = HomeGrid.getAllSubItems(tid).split(',');

                    var sourseid = HomeGrid.cells(sid, HomeGrid.getColIndexById('id')).getValue();
                    var destinatinId = HomeGrid.cells(tid, HomeGrid.getColIndexById('id')).getValue();
                    var tacticname = HomeGrid.cells(sid, 1).getValue();
                        var dtactictitle = "";

                        for (a in DestinationMember) {
                            if (DestinationMember[a].toString() != "" && DestinationMember[a].toString() != null) {
                                dtactictitle = HomeGrid.cells(DestinationMember[a].toString(), 1).getValue();
                            if (dtactictitle == tacticname) {
                                alert("Tactic with same title already exist in Targeted Program.");
                                return false;
                            }
                            }

                        }

                    ProgarmName = HomeGrid.cells(tid, 1).getValue();
                    $("#lipname").html(ProgarmName);
                    $("#hdnsourceid").val(sourseid);
                    $("#hdndestid").val(destinatinId);
                    $("#divMovetacticPopup").modal('show');
                    }
                    else {
                        ProgarmName = HomeGrid.cells(tid, 1).getValue();
                        alert("Tactic is already in " + ProgarmName+".");
                    }
                }
                else
                    alert("Tactic can move only to same plan program."); return false;
            }
        else {
                var stype = GetItemType(sid.split(".")[0].toString());
                var dtype = GetItemType(dragTargettype.toString());

                alert(stype + " can not move to " + dtype); return false;
            }
        }
        else {
            alert("Only tactic can Move.");
            return false;
        }

    }
    function GetItemType(val) {
        var itemType = "";
        if (val.toString() == "tact")
            itemType = "Tactic";
        else if (val.toString() == "prog")
            itemType = "Program";
        else if (val.toString() == "camp")
            itemType = "Campaign";
        else if (val.toString() == "plan")
            itemType = "Plan";
        return itemType;
    }
    function SaveMoveTactic() {
        var sourseid = $("#hdnsourceid").val();
        var destinatinId = $("#hdndestid").val();
        $.ajax({

            type: 'POST',

            url: '@Url.Action("SaveGridDetail")', // we are calling json method
            data: { UpdateType: "tactic", UpdateColumn: "ParentID", UpdateVal: destinatinId, Id: parseInt(sourseid) },
            dataType: 'json',

            success: function (states) {
                  LoadPlanGrid();
            }
        });
    }
    function formatDate(d) {
        d = new Date(d);
        function addZero(n) {
            return n < 10 ? '0' + n : '' + n;
        }
        return addZero(d.getMonth() + 1) + "/" + addZero(d.getDate()) + "/" + d.getFullYear();
    }
    var progid = 0;
    var campid = 0;
    var planid = 0;
    var progActVal = 0;
    var CampActVal = 0;
    var PlanActVal = 0;
    var diff = 0;
    var newProgVal = 0;
    var newCampVal = 0;
    var newPlanVal = 0;

    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var updatetype = rowId.split(".")[0];
        var Id;
        var UpdateColumn;
        var UpdateVal;
          var Colind = this.cell.cellIndex;
            UpdateColumn = HomeGrid.getColLabel(Colind, 1);
        if (stage == 0) {
            var locked = HomeGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
        }
        if (stage == 1) {
            $(".dhx_combo_edit").off("keydown");
            if (UpdateColumn == "Tactic Planned Cost" || UpdateColumn == "Target Stage Goal") {

                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                HomeGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }
           
            if (UpdateColumn == "Target Stage Goal") {
                var psv = HomeGrid.cells(rowId, 9).getValue().split(" ");
                this.editor.obj.value = (psv[0].replace(/,/g, ""));
            }
        }
        if (stage == 2) // start edit Shipping column
        {
            if (nValue != null && nValue != "") {
            var sdateindex = HomeGrid.getColIndexById('startdate');
            var edateindex = HomeGrid.getColIndexById('enddate');
            var idindex = HomeGrid.getColIndexById('id');
            var costindex = HomeGrid.getColIndexById('plannedcost');
            var stageindex = HomeGrid.getColIndexById('inq');
          
            if (UpdateColumn == "" || UpdateColumn == null)
                UpdateColumn = HomeGrid.getColLabel(Colind, 0);
            Id = HomeGrid.cells(rowId, idindex).getValue();

            if (UpdateColumn == "Start Date") {

                var startyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], sdateindex).getValue()).getFullYear();
                var edate = HomeGrid.cells(rowId, edateindex).getValue();
                if (!CheckDateYear(nValue, startyear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
                if (!validateDateCompare(nValue, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) return false;
                }
                if (updatetype == "camp") {
                    var psdate = HomeGrid.getUserData(rowId, "psdate");
                    var tsdate = HomeGrid.getUserData(rowId, "tsdate");
                    if (!validateDateCompare(nValue, psdate, "@RevenuePlanner.Helpers.Common.objCached.ProgramStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                    if (!validateDateCompare(nValue, tsdate, "@RevenuePlanner.Helpers.Common.objCached.TacticStartDateCompareWithParentStartDate")) {
                        return false;
                    }
                }
                nValue = formatDate(nValue);
                oValue = formatDate(oValue);
            }
            if (UpdateColumn == "End Date") {
                var endyear = new Date(HomeGrid.cells("plan." + rowId.split(".")[1], edateindex).getValue()).getFullYear();
                var sdate = HomeGrid.cells(rowId, sdateindex).getValue();

                if (!CheckDateYear(nValue, endyear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;
                if (!validateDateCompare(sdate, nValue, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;

                if (updatetype == "prog") {
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) return false;
                }
                if (updatetype == "camp") {
                    var pedate = HomeGrid.getUserData(rowId, "pedate");
                    var tedate = HomeGrid.getUserData(rowId, "tedate");
                    if (!validateDateCompare(pedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.ProgramEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                    if (!validateDateCompare(tedate, nValue, "@RevenuePlanner.Helpers.Common.objCached.TacticEndDateCompareWithParentEndDate")) {
                        return false;
                    }
                }
                nValue = formatDate(nValue);
                oValue = formatDate(oValue);
            }
            if (UpdateColumn.toString().trim() == "Target Stage Goal") {
                var splitoval = oValue.split(" ");
                    if (nValue != splitoval[0].replace(/,/g, "")) {
                var tactictypeindex = HomeGrid.getColIndexById('tactictype');
                var tacticTypeId = HomeGrid.cells(rowId, cellInd).getAttribute("tactictype");
                GetConversionRate(Id, tacticTypeId, UpdateColumn, nValue, rowId, nValue,null);
                return true;
            }
                else
                    return false;
            }
            if (UpdateColumn == "Tactic Type") {

                var tacticTypeId = nValue;
                    if (nValue != oValue) {
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                            data: { tacticTypeId: tacticTypeId },
                            success: function (data) {
                                pcost = data.revenue;
                                var stagetitle = data.stageTitle;
                                var projectedStageValue = data.projectedStageValue;
                            if (parseFloat(projectedStageValue) > 0)
                                HomeGrid.cells(rowId, 9).setValue(FormatCommas(projectedStageValue.toString(), false) + " " + stagetitle);
                            else
                                HomeGrid.cells(rowId, 9).setValue(projectedStageValue + " " + stagetitle);
                            HomeGrid.cells(rowId, 9).setAttribute("stage", stagetitle);
                            HomeGrid.cells(rowId, 9).setAttribute("tactictype", tacticTypeId);
                            GetConversionRate(Id, tacticTypeId, UpdateColumn, projectedStageValue, rowId, nValue, data.stageId);
                            }
                        });
                    return true;
                }
            }

            if (nValue != oValue) {
                if (UpdateColumn != "Tactic Type" && UpdateColumn.toString().trim() != "Target Stage Goal") {
                    progid = HomeGrid.getParentId(rowId);
                    campid = HomeGrid.getParentId(progid);
                    planid = HomeGrid.getParentId(campid);

                UpdateVal = nValue;
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                        data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                    dataType: 'json',
                    success: function (states) {
                        if (states.errormsg != null && states.errormsg.trim() != "") {
                            alert(states.errormsg.trim());
                            HomeGrid.cells(rowId, cellInd).setValue(oValue);
                            return false;
                        }
                            if (UpdateColumn == "Start Date") {

                                ComapreDate(updatetype, rowId, sdateindex, nValue, UpdateColumn);
                            }

                            if (UpdateColumn == "End Date") {

                                ComapreDate(updatetype, rowId, edateindex, nValue, UpdateColumn);
                            }
                            if (UpdateColumn == "Tactic Planned Cost") {
                                diff = parseInt(nValue) - parseInt(oValue);
                                SetColumUpdatedValue(6, diff);
                                HomeGrid.cells(progid, 6).setValue((newProgVal));
                                HomeGrid.cells(campid, 6).setValue((newCampVal));
                                HomeGrid.cells(planid, 6).setValue((newPlanVal));
                                HomeGrid.cells(rowId, 6).setValue((nValue));
                            }
                                if (UpdateColumn == "Owner") {
                                    CheckPermissionByOwner(rowId, nValue, updatetype, parseInt(Id))
                                  
                                }
                    }
                });
                }
            return true;
                }
            }
        }
    }
    function CheckPermissionByOwner(rowId, NewOwner, updatetype, updateid) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CheckPermissionByOwner")', // we are calling json method
            data: { NewOwnerID: NewOwner, UpdateType: GetItemType(updatetype), updatedid: parseInt(updateid) },
            dataType: 'json',
            success: function (data) {
                if (data.IsLocked == "1") {
                    HomeGrid.cells(rowId, 1).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 4).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 5).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 6).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 7).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 8).setAttribute("locked", data.IsLocked);
                    HomeGrid.cells(rowId, 9).setAttribute("locked", data.IsLocked);
                    HomeGrid.setCellTextStyle(rowId, 1, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 2, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 4, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 5, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 6, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 7, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 8, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 9, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 10, data.cellTextColor);
                    HomeGrid.setCellTextStyle(rowId, 11, data.cellTextColor);
                }
            },
            error: function (ts) { }
        });
    }
    function ComapreDate(updatetype, rowId, dateindex, nValue, Updatecolumn) {
        if (updatetype == "tact") {

            progid = HomeGrid.getParentId(rowId);
            campid = HomeGrid.getParentId(progid);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(progid, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();

            var ProgstartDate = HomeGrid.cells(progid, dateindex).getValue();
            var Campstartdate = HomeGrid.cells(campid, dateindex).getValue();
            var Planstartdate = HomeGrid.cells(planid, dateindex).getValue();
            if (Updatecolumn == "Start Date") {
                if (formatDate(ProgstartDate) > formatDate(nValue))
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (formatDate(Campstartdate) > formatDate(nValue)) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (formatDate(Planstartdate) > formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMinDate = HomeGrid.getUserData(progid, "tsdate");
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(progid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.TactMinDate) != formatDate(tactActMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) {  }
                });

            }
            else if (Updatecolumn == "End Date") {
                if (formatDate(ProgstartDate) < formatDate(nValue))
                    HomeGrid.cells(progid, dateindex).setValue(formatDate(nValue));
                if (formatDate(Campstartdate) < formatDate(nValue)) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (formatDate(Planstartdate) < formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var tactActMaxDate = HomeGrid.getUserData(progid, "tedate");
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Tactic", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(progid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.TactMaxDate) != formatDate(tactActMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMaxDate));
                    }
                });
               
            }

        }
        else if (updatetype == "prog") {
           
            campid = HomeGrid.getParentId(rowId);
            planid = HomeGrid.getParentId(campid);
            var programid = HomeGrid.cells(rowId, 3).getValue();
            var campaignid = HomeGrid.cells(campid, 3).getValue();

            var Campstartdate = HomeGrid.cells(campid, dateindex).getValue();
            var Planstartdate = HomeGrid.cells(planid, dateindex).getValue();
            if (Updatecolumn == "Start Date") {
                if (formatDate(Campstartdate) > formatDate(nValue)) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (formatDate(Planstartdate) > formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMinDate = HomeGrid.getUserData(campid, "psdate");
                var tactMinDate = HomeGrid.getUserData(campid, "tsdate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', 
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMinDate) != formatDate(tactMinDate))
                            HomeGrid.setUserData(campid, "tsdate", formatDate(data.TactMinDate));
                        if (formatDate(data.ProgMinDate) != formatDate(progMinDate))
                            HomeGrid.setUserData(campid, "psdate", formatDate(data.ProgMinDate));
                    },
                    error: function (ts) {  }
                });
            }
            else if (Updatecolumn == "End Date") {
                if (formatDate(Campstartdate) < formatDate(nValue)) {
                    HomeGrid.cells(campid, dateindex).setValue(formatDate(nValue));
                }
                if (formatDate(Planstartdate) < formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
                var progMaxDate = HomeGrid.getUserData(campid, "pedate");
                var tactMaxDate = HomeGrid.getUserData(campid, "tedate");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMinMaxDate")', // we are calling json method
                    data: { Parentid: parseInt(campaignid), UpdateType: "Program", updatedid: parseInt(programid) },
                    dataType: 'json',
                    success: function (data) {
                        if (formatDate(data.TactMaxDate) != formatDate(tactMaxDate))
                            HomeGrid.setUserData(campid, "tedate", formatDate(data.TactMaxDate));
                        if (formatDate(data.ProgMaxDate) != formatDate(progMaxDate))
                            HomeGrid.setUserData(campid, "pedate", formatDate(data.ProgMaxDate));
                    },
                    error: function (ts) {  }
                });
            }
        }
        else if (updatetype == "camp") {
            planid = HomeGrid.getParentId(rowId);
            var Planstartdate = HomeGrid.cells(planid, dateindex).getValue();
            if (Updatecolumn == "Start Date") {
                if (formatDate(Planstartdate) > formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
            else if (Updatecolumn == "Start Date") {
                if (formatDate(Planstartdate) < formatDate(nValue)) {
                    HomeGrid.cells(planid, dateindex).setValue(formatDate(nValue));
                }
            }
        }
    }
    function GetConversionRate(TacticID, TacticTypeID, UpdateColumn, projectedStageValue, rowid, UpdateVal,stageid) {
        var pmql = 0;
        var pcost = 0;
        var isAssortment = true;
        var StageValue = 0;
        var revenue = 0;
        progid = HomeGrid.getParentId(rowid);
        campid = HomeGrid.getParentId(progid);
        planid = HomeGrid.getParentId(campid);
        StageValue = projectedStageValue;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/CalculateMQL")',
            data: {
                tactictid: parseInt(TacticID), TacticTypeId: parseInt(TacticTypeID), projectedStageValue: StageValue, RedirectType: isAssortment, isTacticTypeChange: true, StageID: stageid
            },
            success: function (data) {
                var tactActMqlVal = HomeGrid.cells(rowid, 10).getAttribute("actval");
                var mqlConversion = 0;
                if (data.revenue != null)
                    revenue = data.revenue;
                if (data.mql == 'N/A') {
                    HomeGrid.setCellExcellType(rowid, 10, "ro");
                    HomeGrid.cells(rowid, 10).setValue(data.mql);
                    diff = parseInt(-tactActMqlVal);
                    SetColumUpdatedValue(10, diff);
                }
                else {
                   // HomeGrid.setCellExcellType(rowid, 10, "ron");


                    if (data.mql != null) {
                        mqlConversion = data.mql;
                    }
                    var mqlValue = GetAbberiviatedValue(mqlConversion.toString(), false);
                    HomeGrid.cells(rowid, 10).setValue(mqlValue);



                    diff = parseInt(mqlConversion) - parseInt(tactActMqlVal);
                        HomeGrid.cells(rowid, 10).setAttribute("actval", mqlConversion);
                    SetColumUpdatedValue(10, diff);
                   

                  


                }
                HomeGrid.cells(progid, 10).setValue(GetAbberiviatedValue(newProgVal), false);
                HomeGrid.cells(campid, 10).setValue(GetAbberiviatedValue(newCampVal), false);
                HomeGrid.cells(planid, 10).setValue(GetAbberiviatedValue(newPlanVal), false);
           

                HomeGrid.cells(rowid, 11).setValue(FormatNumber(revenue));
                var tactActRevenuVal = HomeGrid.cells(rowid, 11).getAttribute("actval");
                diff = parseInt(revenue) - parseInt(tactActRevenuVal);

                SetColumUpdatedValue(11, diff);
                HomeGrid.cells(progid, 11).setValue((FormatNumber(newProgVal)));
                HomeGrid.cells(campid, 11).setValue((FormatNumber(newCampVal)));
                HomeGrid.cells(planid, 11).setValue((FormatNumber(newPlanVal)));
                HomeGrid.cells(rowid, 11).setAttribute("actval", revenue);
                $.ajax({

                    type: 'POST',

                    url: '@Url.Action("SaveGridDetail")', // we are calling json method
                    data: { UpdateType: GetItemType("tact"), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(TacticID) },
                    dataType: 'json',

                    success: function (states) {
                        //    LoadPlanGrid();
                        if (UpdateColumn == "Target Stage Goal") {
                            var psv = HomeGrid.cells(rowid, 9).getAttribute("stage");
                            HomeGrid.cells(rowid, 9).setValue(FormatCommas(UpdateVal.toString()) + " " + psv);
                        }
                    }
                });
            }
        });
    }
    function SetColumUpdatedValue(CellInd, diff) {
        progActVal = HomeGrid.cells(progid, CellInd).getAttribute("actval");
        CampActVal = HomeGrid.cells(campid, CellInd).getAttribute("actval");
        PlanActVal = HomeGrid.cells(planid, CellInd).getAttribute("actval");

        newProgVal = parseInt(progActVal) + parseInt(diff);
        newCampVal = parseInt(CampActVal) + parseInt(diff);
        newPlanVal = parseInt(PlanActVal) + parseInt(diff);

        HomeGrid.cells(progid, CellInd).setAttribute("actval", newProgVal);
        HomeGrid.cells(campid, CellInd).setAttribute("actval", newCampVal);
        HomeGrid.cells(planid, CellInd).setAttribute("actval", newPlanVal);
    }
    $(document).ready(function () {
        $('#cancel-button_Movetactic').on("click", function () {
            $('#divMovetacticPopup').modal("hide");

        });

        //// Proceed to save data.
        $('#proceed-button_Movetactic').on("click", function () {

            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
        $(".grid_add").click(function (e) {
            $(".dhtmlxcalendar_dhx_skyblue").css("display", "none");
            gridSearchFlag = 1;
            var type = $(this).attr('id');
            var name = $(this).attr('alt');
            var title = $(this).attr('data-title');
            /*Modified by Mitesh for PL ticket 1570
            combination of title and permission conflict when title has "\" separator*/
            var permission = $(this).attr('permission');
            //title = chk_permission[0];
            //var permission = chk_permission[1];
            DisplayPopUpMenu(type, name, title, permission, e);

    });
    });
    x = 0;
    $('#useless').click(function () {
        HomeGrid.sortRows(0, 'str', 'asc');
        $("#spanscroll").text(x += 1);
        return true;
    });
   
    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");

        $("#useless").click();
    });


    $(document).scroll(function () {
        if (pageIsScroll == false) {

            pageIsScroll = true;
            $("#useless").click();
        }
    });
</script>