@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@model List<BudgetModel>
@{
    string AllocatedBy = ViewBag.AllocatedBy;
    BudgetModel plan = Model.Where(p => p.ActivityType == ActivityType.ActivityPlan).SingleOrDefault();
    string strDefault = Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.defaults.ToString()].ToString().ToLower();
    string strMonths = Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.months.ToString()].ToString().ToLower();
    string strQuarters = Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.quarters.ToString()].ToString().ToLower();
    bool isquarter = false;
    if(AllocatedBy.ToLower() == strQuarters)
    {
        isquarter = true;
    }
}
@{
    BudgetMonth PercAllocated = ViewBag.PercAllocated;
    double planAllocation = 0;
    double sumMonth = plan.Month.Jan + plan.Month.Feb + plan.Month.Mar + plan.Month.Apr + plan.Month.May + plan.Month.Jun + plan.Month.Jul + plan.Month.Aug + plan.Month.Sep + plan.Month.Oct + plan.Month.Nov + plan.Month.Dec;
    planAllocation = (sumMonth == 0 && plan.Allocated == 0) ? 0 : (sumMonth > 0 && plan.Allocated == 0) ? 101 : sumMonth / plan.Allocated * 100;
}

<div class="tab-content all-height cf">
    <div class="tab-pane active all-height" id="panel-656352">
        <div id="paln-populated-collaborators-panel-wrapper" class="pl20 cf">
            <div class="cf all-height lenght-div">
                <div class="budget-table source-sans-proregular">
                    <table cellpadding="0" cellspacing="0" border="0" class="budget-table">
                        <tbody class="column1">
                            <tr>
                                <td>
                                    <div id="div2PlanDetails">&nbsp;</div>
                                </td>
                            </tr>
                            <tr>
                                <td class="event-row">
                                    <div id="divPlanDetails"><a id="aPlanDetails">@plan.ActivityName</a></div>
                                </td>
                            </tr>
                            @Html.ActivityCampaign(ActivityType.ActivityCampaign, plan.ActivityId, Model, "0")
                        </tbody>
                          <tbody class="column4">
                            <tr>
                                <td>
                                    <div>Budget</div>
                                </td>
                            </tr>
                            @Html.CampaignBudgetSummary(ActivityType.ActivityCampaign, plan.ActivityId, Model, AllocatedBy, "0")
                        </tbody>
                        <tbody class="column2">
                            @Html.AllocatedPlanMonth(ActivityType.ActivityPlan, plan.ActivityId, plan.Month, plan.ParentMonth, AllocatedBy,Model)
                            @Html.AllocatedCampaignMonth(ActivityType.ActivityCampaign, plan.ActivityId, Model, AllocatedBy)
                        </tbody>
                        <tbody class="column3">
                            <tr>
                                <td>
                                    <div>Unallocated</div>
                                </td>
                            </tr>
                            @Html.CampaignSummary(ActivityType.ActivityCampaign, plan.ActivityId, Model, AllocatedBy, "0")
                        </tbody>
                       
                    </table>
                    <div style="clear: both;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="loadme" class="loadme-true" style="display:none;">
   	<h3 class="source-sans-proregular"></h3>
   	<div class="tooltip-field">
    	
    </div>
    <p class="button-grp-tooltip"> <button class="btn btn-blue text-shadow-blue source-sans-proregular tooltip-button" id="btnClueTip">Save</button> </p>
   </div>
 <div class="container-fluid all-height" id="modalMainContainer">
    <div class="row-fluid calc-height">
        <div class="container-fluid">
            <div class="row-fluid ">
                <div class="span12">

  <div id="modal-container-186470" class="modal-inspect-review hide fade modal-full-view" role="dialog" aria-labelledby="myModalLabel" aria- hidden="true" style="display: none; position: fixed;">
                        <div style="margin: 80px auto !important">
                            <div id="successMessage" class="alert alert-success message-position-popup" style="display: none; margin: auto !important; max-width: 1000px !important;">
                                <a class="close">×</a>
                                <strong>Success.</strong> <span id="spanMessageSuccess"></span>
                            </div>
                            <div id="errorMessage" class="alert alert-error hide message-position-popup" style="display: none; margin: auto !important; max-width: 1000px !important;">
                                <a class="close">×</a>
                                <strong>Error!</strong> <span id="spanMessageError">@Common.objCached.ValidateForEmptyField</span>
                            </div>
                            <div id="divPartial">
                            </div>

                        </div>
                    </div>
                    <div id="divResubmission">
                    </div>
                </div>
            </div>
        </div>
    </div>
                    </div>
<script type="text/javascript">
  
    var heights = $('.column1').find('div').map(function () {
        var intWidth = 0;
        if ($(this).css('display') == 'none') {
            intWidth = $(this).actual('width');
        }
        else {
            intWidth = $(this).width();
        }
       
        return $(this).width();
    }).get();
   
    $(document).ready(function () {
        //The object CurrentTab is initiate in parent of this view
        var TacCustomTitle = "@Common.TacticCustomTitle";
        if (currentTab == "aPlanned" && $('#ddlViewBy').val().indexOf(TacCustomTitle) < 0) {
            $("#divCostBudget").removeAttr('style');
        }
        else {
            $("#aonCost").removeClass('request-btn-active');
            $("#aoffCost").addClass('request-btn-active');
            $("#divCostBudget").attr('style', 'display:none;')
        }
        SetHeader();
       // AddTipsy();
        $.fn.hasScrollBar = function () {
            return this.get(0).scrollWidth > this.width();
        }
       
        // Budget Table
        var mainTableWidth = $('.budget-table').width();
        var columnWidth1 = $('.column1').width();
        var columnWidth3 = $('.column3').width();
        var columnWidth4 = $('.column4').width();
        $('.column2').width(mainTableWidth - columnWidth1 - columnWidth3 - columnWidth4 - 24);
        $('.cluetip-outer').parent().remove();

        var isquarter = false;
        if ('@isquarter' == 'True') {
            isquarter = true;
        }
        $('.clickme').cluetip({ activation: 'click', arrows: true, dropShadow: false, sticky: true, mouseOutClose: false, local: true, isQuarter: isquarter });
        $('.accordionClick').on('click', function () {
            var accordionId = $(this).parent().attr('id');
            $('table').find(".sub[data-parent='" + accordionId + "']").fadeToggle(100);
            $(this).toggleClass('collapse');

            if ($(".sub[data-parent='" + accordionId + "']").show()) {
                $(".sub[data-parent='" + accordionId + "']").prev('#' + accordionId).toggleClass('open');
            }

            //Added By : Kalpesh Sharma : #739 Adding additional views to Budget Planning screen
            var data = $(".column1").get(0);
         
            $(".budget-table .column1 > tr").each(function () {
                $(this).width(data.scrollWidth);
                
        });
           
        });

        //in case of chrome browser it is creating design issue
        $.browser.chrome = /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
        if ($.browser.chrome) {
            var maxHeight = Math.max.apply(Math, heights);
            var column1Width = $('.column1 div').css('width');
            column1Width = column1Width.replace('px', '');
            try {
                if (parseInt(column1Width) < maxHeight) {
                    $('#divPlanDetails').css('width', parseInt(maxHeight) - 15);
                    $('#div2PlanDetails').css('width', parseInt(maxHeight) + 15);
                    if ($('.column1 .programLevel').length > 0)
                        $('.column1 .programLevel').css('width', parseInt(maxHeight) - parseInt($(".programLevel").css("padding-left").replace("px", "")) - parseInt($(".programLevel").css("padding-right").replace("px", "")) + 15);
                    if ($('.column1 .campaignLevel').length > 0)
                        $('.column1 .campaignLevel').css('width', parseInt(maxHeight) - parseInt($(".campaignLevel").css("padding-left").replace("px", "")) - parseInt($(".campaignLevel").css("padding-right").replace("px", "")) + 15);
                    if ($('.column1 .program-lvl').length > 0)
                        $('.column1 .program-lvl').css('width', parseInt(maxHeight) + 15);
                    
                }
            } catch (e) {

            }
        }
    });
    //function AddTipsy() {
    //    $("div[allocated]").each(function () {
    //        var num = $(this).attr('allocated');
    //        if (parseInt(num) < 0) {
    //            bootstrapetitle($(this), 'Remaining: ' + num.replace('-', '-$'), "tipsy-innerWhite");
    //        }
    //        else {
    //            bootstrapetitle($(this), 'Remaining: $' + num, "tipsy-innerWhite");
    //        }
    //    });
    //}
    function SetHeader() {
        $('#divViewBy').hide();
        if ('@AllocatedBy' != '@strDefault') {
            $('#planCostTitle').html('Planned Budget Allocation');
            var sumMonth = number_format('@sumMonth', 0, '.', ',');
            var allocated = number_format('@plan.Budgeted', 0, '.', ',');
            $('#planCostValue').prop('title', '$' + sumMonth + '/' + '$' + allocated);

            $('#planCostValue').popover('destroy');
            bootstrapetitle($('#planCostValue'), '$' + sumMonth + '/' + '$' + allocated, "tipsy-innerWhite");

        sumMonth = FormatNumber('@sumMonth', false);
        allocated = FormatNumber('@plan.Budgeted', false);

        $('#planCostValue').html(sumMonth + '/' + allocated);
        $('#divPlanProgress').css("width", "@planAllocation%");
            if ('@planAllocation' > 100) {
                $('#divPlanProgress').css("width", "100%");
                $('#divPlanProgress').css("background", "#ff1e26");
            }
            else {
                $('#divPlanProgress').css("background", "#3fa9f5");
            }


        $('#monthCompareTitle').html('Monthly Budget Allocation');
        $('.progressPlanned').show();
        }
        else {
            $('#planCostTitle').html('Planned Budget Allocation');

            $('#planCostValue').html('');
            $('#divPlanProgress').css("width", "0%");
            $('#monthCompareTitle').html('Monthly Budget Allocation');
            $('.progressPlanned').show();
        }
       
        if ('@AllocatedBy' == '@strQuarters') {
            $('#monthCompareTitle').html('Quarterly Budget Allocation');
        }
        var strMonthHTML = '';
        if ('@AllocatedBy' == '@strMonths') {
            for (var i = 1; i <= 12; i++) {
                strMonthHTML += '<div class="budgetMonth">';
                if (i == 1) {
                    strMonthHTML += '<span class="title source-sans-proregular">JAN</span>';
                    if ('@PercAllocated.Jan' <= 100)
                            strMonthHTML += '<div title="@PercAllocated.Jan%"><span style="width:@PercAllocated.Jan%;"></span></div>';
                        else
                        strMonthHTML += '<div title="@PercAllocated.Jan%"><span style="width:@PercAllocated.Jan%;background-color:#FF931E;" class="error"></span></div>';
                    }
                    else if (i == 2) {
                        strMonthHTML += '<span class="title source-sans-proregular">FEB</span>';
                        if ('@PercAllocated.Feb' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Feb%"><span style="width:@PercAllocated.Feb%;"></span></div>';
                    else
                            strMonthHTML += '<div title="@PercAllocated.Feb%"><span style="width:@PercAllocated.Feb%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 3) {
                    strMonthHTML += '<span class="title source-sans-proregular">MAR</span>';
                    if ('@PercAllocated.Mar' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Mar%"><span style="width:@PercAllocated.Mar%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Mar%"><span style="width:@PercAllocated.Mar%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 4) {
                    strMonthHTML += '<span class="title source-sans-proregular">APR</span>';
                    if ('@PercAllocated.Apr' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Apr%"><span style="width:@PercAllocated.Apr%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Apr%"><span style="width:@PercAllocated.Apr%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 5) {
                    strMonthHTML += '<span class="title source-sans-proregular">MAY</span>';
                    if ('@PercAllocated.May' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.May%"><span style="width:@PercAllocated.May%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.May%"><span style="width:@PercAllocated.May%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 6) {
                    strMonthHTML += '<span class="title source-sans-proregular">JUN</span>';
                    if ('@PercAllocated.Jun' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Jun%"><span style="width:@PercAllocated.Jun%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Jun%"><span style="width:@PercAllocated.Jun%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 7) {
                    strMonthHTML += '<span class="title source-sans-proregular">JUL</span>';
                    if ('@PercAllocated.Jul' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Jul%"><span style="width:@PercAllocated.Jul%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Jul%"><span style="width:@PercAllocated.Jul%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 8) {
                    strMonthHTML += '<span class="title source-sans-proregular">AUG</span>';
                    if ('@PercAllocated.Aug' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Aug%"><span style="width:@PercAllocated.Aug%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Aug%"><span style="width:@PercAllocated.Aug%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 9) {
                    strMonthHTML += '<span class="title source-sans-proregular">SEP</span>';
                    if ('@PercAllocated.Sep' <= 100)
                    strMonthHTML += '<div title="@PercAllocated.Sep%"><span style="width:@PercAllocated.Sep%;"></span></div>';
                else
                        strMonthHTML += '<div title="@PercAllocated.Sep%"><span style="width:@PercAllocated.Sep%;background-color:#FF931E;" class="error"></span></div>';
            }
            else if (i == 10) {
                strMonthHTML += '<span class="title source-sans-proregular">OCT</span>';
                if ('@PercAllocated.Oct' <= 100)
                    strMonthHTML += '<div title="@PercAllocated.Oct%"><span style="width:@PercAllocated.Oct%;"></span></div>';
                else
                    strMonthHTML += '<div title="@PercAllocated.Oct%"><span style="width:@PercAllocated.Oct%;background-color:#FF931E;" class="error"></span></div>';
            }
            else if (i == 11) {
                strMonthHTML += '<span class="title source-sans-proregular">NOV</span>';
                if ('@PercAllocated.Nov' <= 100)
                    strMonthHTML += '<div title="@PercAllocated.Nov%"><span style="width:@PercAllocated.Nov%;"></span></div>';
                else
                    strMonthHTML += '<div title="@PercAllocated.Nov%"><span style="width:@PercAllocated.Nov%;background-color:#FF931E;" class="error"></span></div>';
            }
            else if (i == 12) {
                strMonthHTML += '<span class="title source-sans-proregular">DEC</span>';
                if ('@PercAllocated.Dec' <= 100)
                    strMonthHTML += '<div title="@PercAllocated.Dec%"><span style="width:@PercAllocated.Dec%;"></span></div>';
                else
                    strMonthHTML += '<div title="@PercAllocated.Dec%"><span style="width:@PercAllocated.Dec%;background-color:#FF931E;" class="error"></span></div>';
            }
    strMonthHTML += '</div>';
}
}
else if ('@AllocatedBy' == '@strQuarters') {
            for (var i = 1; i <= 4; i++) {
                strMonthHTML += '<div class="budgetMonth">';
                if (i == 1) {
                    strMonthHTML += '<span class="title source-sans-proregular">Q1</span>';
                    if ('@PercAllocated.Jan' <= 100)
                            strMonthHTML += '<div title="@PercAllocated.Jan%"><span style="width:@PercAllocated.Jan%;"></span></div>';
                        else
                        strMonthHTML += '<div title="@PercAllocated.Jan%"><span style="width:@PercAllocated.Jan%;background-color:#FF931E;" class="error"></span></div>';
                    }
                    else if (i == 2) {
                        strMonthHTML += '<span class="title source-sans-proregular">Q2</span>';
                        if ('@PercAllocated.Apr' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Apr%"><span style="width:@PercAllocated.Apr%;"></span></div>';
                    else
                            strMonthHTML += '<div title="@PercAllocated.Apr%"><span style="width:@PercAllocated.Apr%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 3) {
                    strMonthHTML += '<span class="title source-sans-proregular">Q3</span>';
                    if ('@PercAllocated.Jul' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Jul%"><span style="width:@PercAllocated.Jul%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Jul%"><span style="width:@PercAllocated.Jul%;background-color:#FF931E;" class="error"></span></div>';
                }
                else if (i == 4) {
                    strMonthHTML += '<span class="title source-sans-proregular">Q4</span>';
                    if ('@PercAllocated.Oct' <= 100)
                        strMonthHTML += '<div title="@PercAllocated.Oct%"><span style="width:@PercAllocated.Oct%;"></span></div>';
                    else
                        strMonthHTML += '<div title="@PercAllocated.Oct%"><span style="width:@PercAllocated.Oct%;background-color:#FF931E;" class="error"></span></div>';
                }

    strMonthHTML += '</div>';
}
}
else {
    for (var i = 1; i <= 12; i++) {
        strMonthHTML += '<div class="budgetMonth">';
        if (i == 1) {
            strMonthHTML += '<span class="title source-sans-proregular">JAN</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';
        }
        else if (i == 2) {
            strMonthHTML += '<span class="title source-sans-proregular">FEB</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';
        }
        else if (i == 3) {
            strMonthHTML += '<span class="title source-sans-proregular">MAR</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';
        }
        else if (i == 4) {
            strMonthHTML += '<span class="title source-sans-proregular">APR</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';
        }
        else if (i == 5) {
            strMonthHTML += '<span class="title source-sans-proregular">MAY</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';
        }
        else if (i == 6) {
            strMonthHTML += '<span class="title source-sans-proregular">JUN</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 7) {
            strMonthHTML += '<span class="title source-sans-proregular">JUL</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 8) {
            strMonthHTML += '<span class="title source-sans-proregular">AUG</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 9) {
            strMonthHTML += '<span class="title source-sans-proregular">SEP</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 10) {
            strMonthHTML += '<span class="title source-sans-proregular">OCT</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 11) {
            strMonthHTML += '<span class="title source-sans-proregular">NOV</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        else if (i == 12) {
            strMonthHTML += '<span class="title source-sans-proregular">DEC</span>';
            strMonthHTML += '<div><span style="width:0%;"></span></div>';

        }
        strMonthHTML += '</div>';
    }
}
    $('#monthContainer').html(strMonthHTML);

}

</script>
<script type="text/javascript">
    $(document).ready(function () {
        $("#monthContainer").mCustomScrollbar({
            scrollButtons: {
                enable: true
            },
            horizontalScroll: true,
            advanced: { autoExpandHorizontalScroll: true, updateOnContentResize: true }
        });
    });
    var Assortment = 'Budgeting';
    $('#aPlanDetails').click(function (e) {
         var id = CurrentPlanId;
        ShowModel('@Enums.InspectPopupMode.ReadOnly.ToString()', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Plan).ToLower()", id, "0", '@Enums.InspectPopupRequestedModules.Budgeting.ToString()');
    });

    function AssignDefaultValue() {
        $('#slidepanel-container').find("input[type=text],textarea,select").each(function () {
            $(this).attr("myValue", $(this).val());
        });
    }

    $("[linktype=campaign]").click(function (e) {
         var id = $(this).attr('id');     
        ShowModel('@Enums.InspectPopupMode.ReadOnly.ToString()', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Campaign).ToLower()", id, "0", '@Enums.InspectPopupRequestedModules.Budgeting.ToString()');
    });

    $("[linktype=program]").click(function (e) {
        var id = $(this).attr('id');       
        ShowModel('@Enums.InspectPopupMode.ReadOnly.ToString()', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Program).ToLower()", id, "0", '@Enums.InspectPopupRequestedModules.Budgeting.ToString()');
    });
    $("[linktype=tactic]").click(function (e) {
        var id = $(this).attr('id');
        ShowModel('@Enums.InspectPopupMode.ReadOnly.ToString()', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", id, "0", '@Enums.InspectPopupRequestedModules.Budgeting.ToString()');
    });
    $('#btnClueTip').click(function () {
        var entityId = $('#entityDetails').val();
        var section = $('#entityDetails').attr('section').toString();
        var month = $('#entityDetails').attr('mnth').toString();
        var isquarter = false;
        if ('@isquarter' == 'True') {
            isquarter = true;
        }
        var inputArr = [];
        $('.tooltip-field').find('input[type=text]').not('[disabled=disabled]').each(function () {
            inputArr.push({
                key: $(this).attr('id'),
                Value: $(this).val().replace(/,/g, "")
            });
        });
        var jsonInputs = JSON.stringify(inputArr);
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/SaveBudgetCell/")',
            dataType: "json",
            data: 'entityId=' + entityId + '&section=' + section + '&month=' + month + '&inputs=' + jsonInputs + '&isquarter=' + isquarter,
                  success: function (data) {
                      if (data.isSuccess == true) {
                          //updatePopupDetails(data, entityId, section, month);
                          $("#hdnBudgetingExpandId").val(section.toLowerCase() +entityId);
                          $("#hdnBudgetingIsSave").val("true");
                          $('#aAllocated').trigger('click');
                      }
                      else {
                          alert('Error');
                      }
                  }
           });
    });
    function updatePopupDetails(data, entityId, section, month) {
        section = section.toLowerCase();
        $('.cluetip-outer').parent().css('display', 'none');
        $('.column2').find('.'+section+'Level[id="'+section+entityId+'"] a[mnth="' + month + '"]').each(function () {

                var newBudget = parseFloat(data.budgetMonth);
                $(this).text(FormatCommasBudget(data.budgetMonth.toString(), false, false));
               
                if (section == 'plan') {

                    //update unallocated Budget for plan and its blue corner
                    var TotalAllocatedBudget = 0;
                    $('.column2').find('.' + section + 'Level a').each(function () {
                        if (!isNaN(parseFloat($(this).text().replace(/,/g, "")))) {
                            TotalAllocatedBudget += parseFloat($(this).text().replace(/,/g, ""));
                        }
                    });
                    var unallocatedBudget = parseFloat(data.budgetYear) - TotalAllocatedBudget;
                    $('.column3').find('#' + section + entityId).html(FormatCommasBudget(unallocatedBudget.toString(), false, false)+'<span></span>');
                    if (unallocatedBudget > 0) {
                        $('.column3').find('#' + section + entityId + ' span').addClass('blue-corner-budget');
                    }
                    //End update unallocated Budget for plan and its blue corner

                    //update monthly Budget of plan's orange corner
                    var childBudget = 0;
                    $('.campaignLevel').find('a[mnth="' + month + '"]').each(function () {
                        childBudget += parseFloat($(this).text().replace(/,/g, ""));
                    });
                    if (childBudget > newBudget) {
                        $(this).parent().find('span').addClass('orange-corner-budget');
                    }
                    else {
                        $(this).parent().find('span').removeClass('orange-corner-budget');
                    }
                    //End update monthly Budget of plan's orange corner

                    //update yearly budget for plan and it's orange corner
                    var newYearBudget = parseFloat(data.budgetYear);
                    var childYearBudget = 0;
                    $('.column4').find('.campaignLevel').each(function () {
                        if (!isNaN(parseFloat($(this).text().replace(/,/g, "")))) {
                            childYearBudget += parseFloat($(this).text().replace(/,/g, ""));
                        }
                    });
                    $('.column4').find('#' + section + entityId).html(FormatCommasBudget(newYearBudget.toString(), false, false)+'<span></span>');
                    if (childYearBudget > newYearBudget) {
                        $('.column4').find('#' + section + entityId + ' span').addClass('orange-corner-budget');
                    }
                    else {
                        $('.Column4').find('#' + section + entityId + ' span').removeClass('orange-corner-budget');
                    }
                    //End update yearly budget for plan and it's orange corner
                }
                else {
                    var subLevel = section == 'campaign' ? 'program-lvl' : 'tactic-lvl';
                    var subChildlvl = section == 'campaign' ? 'programLevel' : 'tacticLevel';

                    //update unAllocated Budget and its blue corner
                    var totalAllocatedBudget = 0;
                    $('.column2').find('[id="' + section + entityId + '"]').each(function () {
                        if (!isNaN(parseFloat($(this).find('a').text().replace(/,/g, "")))) {
                            totalAllocatedBudget += parseFloat($(this).find('a').text().replace(/,/g, ""));
                        }
                    });
                    var unallocatedBudget = parseFloat(data.budgetYear) - totalAllocatedBudget;
                    $('.column3').find('#' + section + entityId).html(FormatCommasBudget(unallocatedBudget.toString(), false, false) + '<span></span>');
                    if (unallocatedBudget > 0) {
                        $('.column3').find('#' + section + entityId + ' span').addClass('blue-corner-budget');
                    }
                    //End update unAllocated Budget and its blue corner

                    //update clicked cell orange corner
                    var childBudget = 0;
                    $(this).parents('.campaign-row').find('.' + subLevel + '[data-parent="' + section + entityId + '"]').each(function () {
                        $(this).find('.' + subChildlvl + ' a').each(function () {
                            if (!isNaN(parseFloat($(this).text().replace(/,/g, "")))) {
                                childBudget += parseFloat($(this).text().replace(/,/g, ""));
                            }
                        });
                    });
                    if (childBudget > newBudget) {
                        $(this).parent().find('span').addClass('orange-corner-budget');
                    }
                    else {
                        $(this).parent().find('span').removeClass('orange-corner-budget');
                    }
                    //End update clicked cell orange corner

                    //update yearly Budget and its orange corner
                    var newYearBudget = parseFloat(data.budgetYear);
                    var childYearBudget = 0;
                    $('.column4').find('.' + subLevel + '[data-parent="' + section + entityId + '"]').each(function () {
                        $(this).find('.' + subChildlvl).each(function () {
                            if (!isNaN(parseFloat($(this).text().replace(/,/g, "")))) {
                                childYearBudget += parseFloat($(this).text().replace(/,/g, ""));
                            }
                        });
                    });
                    $('.column4').find('#' + section + entityId).html(FormatCommasBudget(newYearBudget.toString(), false, false) + '<span></span>');
                    if (childYearBudget > newYearBudget) {
                        $('.column4').find('#' + section + entityId + ' span').addClass('orange-corner-budget');
                    }
                    else {
                        $('.Column4').find('#' + section + entityId + ' span').removeClass('orange-corner-budget');
                    }
                    //End update yearly Budget and its orange corner

                    //Update parent budget's orange corner
                    if (section == 'campaign') {
                        var parentDiv = $('.column2').find('.planLevel a[mnth="' + month + '"]').parent();
                        var parentBudget = parseFloat(parentDiv.find('a').text().replace(/,/g, ""));
                        if (!isNaN(parentBudget)) {
                            $(this).parent().attr('allocated', (parentBudget - newBudget).toString());
                            if (parentBudget >= newBudget) {
                                parentDiv.find('span').removeClass('orange-corner-budget');
                            }
                            else {
                                parentDiv.find('span').addClass('orange-corner-budget');
                            }
                        }
                        var parentId = parentDiv.attr('id').toString();
                        var parentYearDiv=$('.column4').find('#' + parentId);
                        var parentYearlyBudget = parseFloat(parentYearDiv.text().replace(/,/g, ""));
                        if (!isNaN(parentYearlyBudget)) {
                            if (parentYearlyBudget >= newYearBudget) {
                                parentYearDiv.find('span').removeClass('orange-corner-budget');
                            }
                            else {
                                parentYearDiv.find('span').addClass('orange-corner-budget');
                            }
                        }
                    }
                    else {
                        var parentId = $(this).parents('.sub').attr('data-parent').toString();
                        if (parent != '' && typeof parentId != 'undefined') {
                            var parentDiv = $(this).parents('.campaign-row').find('#' + parentId);
                            var parentBudget = parseFloat(parentDiv.find('a').text().replace(/,/g, ""));
                            if (!isNaN(parentBudget)) {
                                $(this).parent().attr('allocated', (parentBudget - newBudget).toString());
                                if (parentBudget >= newBudget) {
                                    parentDiv.find('span').removeClass('orange-corner-budget');
                                }
                                else {
                                    parentDiv.find('span').addClass('orange-corner-budget');
                                }
                            }
                            var parentYearDiv = $('.column4').find('#' + parentId);
                            var parentYearBudget = parseFloat(parentYearDiv.text().replace(/,/g, ""));
                            if (!isNaN(parentYearBudget)) {
                                if (parentYearBudget >= newYearBudget) {
                                    parentYearDiv.find('span').removeClass('orange-corner-budget');
                                }
                                else {
                                    parentYearDiv.find('span').addClass('orange-corner-budget');
                                }
                            }

                        }
                    }
                    //End Update parent monthly budget's orange corner
                }
        });

    }
    $('.cluetip-outer').click(function (e) {
        e.stopPropagation();
    });
    $(document).click(function () {
        $('.cluetip').css('display', 'none');
    });
    $('.tooltip-field').on('keyup', '#BudgetMonth', function () {
        var oldBudget = parseFloat($(this).attr('ov').toString());
        
        var newBudget = 0;
        if (!isNaN(parseFloat($(this).val().replace(/,/g, "")))) {
            newBudget = parseFloat($(this).val().replace(/,/g, ""));
        }
        $(this).attr('ov', newBudget.toString());
        var remaingBudgetInput = $(this).parent().find('#remainingBudget');
        if (typeof remaingBudgetInput.val() != 'undefined') {
            var remainigBudget = parseFloat(remaingBudgetInput.val().replace(/,/g, ""));
            remaingBudgetInput.val(((remainigBudget - newBudget) + oldBudget).toString());
        }

    });
    $('.tooltip-field').on('focusout', '#BudgetMonth', function () {
        var newBudget = $(this).val().replace(/,/g, "");
        $(this).val(FormatCommasBudget(newBudget.toString(), false, false));
        var remaingBudgetInput = $(this).parent().find('#remainingBudget');
        if (typeof remaingBudgetInput.val() != 'undefined') {
            remaingBudgetInput.val(FormatCommasBudget(remaingBudgetInput.val().replace(/,/g,"")));
        }
    });
    $('.tooltip-field').on('keyup', '#BudgetYear', function () {

        var oldYearBudget = parseFloat($(this).attr('ov').toString());
        var newYearBudget = 0;
        if (!isNaN(parseFloat($(this).val().replace(/,/g, "")))) {
            newYearBudget = parseFloat($(this).val().replace(/,/g, ""));
        }
        $(this).attr('ov', newYearBudget.toString());
    });
    $('.tooltip-field').on('focusout', '#BudgetYear', function () {
        var newYearBudget = $(this).val().replace(/,/g, "");
        $(this).val(FormatCommasBudget(newYearBudget.toString(), false, false));
    });
    $('.tooltip-field').on('keydown', '#BudgetMonth,#BudgetYear', function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [8, 9, 27, 13, 46, 110]) !== -1 ||
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
    $('.tooltip-field').on('focus', '#BudgetYear', function () {
        $(this).val($(this).val().replace(/,/g, ""));
    });
    $('.tooltip-field').on('focus', '#BudgetMonth', function () {
        $(this).val($(this).val().replace(/,/g, ""));
    });
    $('.column2,.column1').scroll(function () {
        $('.cluetip').css('display', 'none');
    });
    $('.orange-corner-budget').bind('click', function (event) {
        $(this).parent().find('a').get(0).click();
        return false;
    });
</script>
