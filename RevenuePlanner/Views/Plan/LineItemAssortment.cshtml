@model RevenuePlanner.Models.Plan_Campaign_Program_Tactic_LineItemModel
@using RevenuePlanner.Helpers
@*<script type="text/javascript" src="~/Scripts/js/Mask.js"></script>*@

@{
    string AllocatedBy = Model.AllocatedBy;
    bool IsBudgetAllocated = false;
    if (AllocatedBy != Enums.PlanAllocatedBy.defaults.ToString().TrimEnd('s'))
    {
        IsBudgetAllocated = true;
    }
    bool IsOtherLineItem = Model.IsOtherLineItem;
}

<div class="head">
    <span class="close-form source-sans-proregular">» CLOSE MENU</span>
    <div class="cf">
        <h2 class="source-sans-prolight">Line Item Detail</h2>
        @if (!(bool)ViewBag.IsCreated && (bool)ViewBag.IsAllowCustomRestriction)
        {
            if (!IsOtherLineItem)
            {
                <div class="btn-group pull-left margin-left20 gear-dropdown">
                    <span class="gear-sidebar dropdown-toggle" data-toggle="dropdown"></span>
                
                    <ul class="dropdown-menu">
                        @*<li><a id="spanDuplicate">Duplicate Tactic</a></li>*@
                        @if ((bool)ViewBag.IsOwner && !(bool)ViewBag.IsCreated)
                        {
                            <li><a id="deleteTactic">Delete Tactic</a></li>                        
                        }
                    </ul>
                </div>
            }
        }
    </div>
</div>
<!--end sidebar-head-->
<div id="errorMessage" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong> <span id="spanMessage"></span>
</div>
<div id="frm_campaigns" name="frm_campaigns">
    @using (Html.BeginForm(new { @id = "frmSaveLineitem" }))
    {
<script type="text/javascript">
            $(document).ready(function () {
                $(".verticalIdSelectBox select").selectbox();
            });
        </script>
        <div class="top-title">
            <p>Campaign</p>
            <span title="@ViewBag.Campaign" class="displaytitle">@ViewBag.Campaign</span>
        </div>
        <div class="top-title">
            <p>Program</p>
            <span title="@ViewBag.Program" class="displaytitle">@ViewBag.Program</span>
        </div>
        <div class="top-title">
            <p>Tactic</p>
            <span title="@ViewBag.Tactic" class="displaytitle">@ViewBag.Tactic</span>
        </div>
        <div class="content">
            @Html.HiddenFor(model => model.PlanTacticId, new { id = "hdnPlanTacticId" })
            @Html.HiddenFor(model => model.PlanLineItemId, new { id = "hdnPlanLineItemId" })
            @Html.HiddenFor(model => model.TStartDate, new { id = "hdnTStartDate" })
            @Html.HiddenFor(model => model.TEndDate, new { id = "hdnTEndDate" })
            @Html.HiddenFor(model => model.PStartDate, new { id = "hdnPStartDate" })
            @Html.HiddenFor(model => model.PEndDate, new { id = "hdnPEndDate" })
            @Html.HiddenFor(model => model.CStartDate, new { id = "hdnCStartDate" })
            @Html.HiddenFor(model => model.CEndDate, new { id = "hdnCEndDate" })
            @Html.HiddenFor(model => model.IsOtherLineItem, new { id = "hdnIsOtherLineItem" })
            @Html.Hidden("hdnIsBudgetAllocated", IsBudgetAllocated)
            @Html.Hidden("hdnRedirect", (bool)ViewBag.RedirectType, new { id = "hdnRedirectType" })

            <div class="content-row">
                <label class="t_title">Line Item Title</label>
                @if (!IsOtherLineItem)
                {
                    @Html.TextBoxFor(model => model.Title, new { placeholder = "Required", require = "true", maxlength = "255" })
                }
                else
                {
                    @Html.TextBoxFor(model => model.Title, new { placeholder = "Required", require = "true", maxlength = "255", @readonly = "true" })
                }
            </div>
            <div class="content-row alternate">
                @if (!IsOtherLineItem)
                {
                    <label>Line Item Type</label>
                    <span class="verticalIdSelectBox" style="margin-left: -2px;">@Html.DropDownListFor(model => model.LineItemTypeId, new SelectList((System.Collections.IEnumerable)ViewBag.lineItemTypes, "LineItemTypeId", "Title"), "Please Select", new { @class = "ddlStyle", require = "true", Id = "ddlLineItemType" })</span>
                }
                else
                {
                    <label>Line Item Cost</label>
                    @Html.TextBoxFor(model => model.Cost, new { @class = "currency_dollar", placeholder = "Required", require = "true", id = "txtLineItemCost", @readonly = "true" })
                }
            </div>
            <div class="cf"></div>
            <label>Description</label>
            @Html.TextAreaFor(model => model.Description, new { placeholder = "Optional", rows = "3", maxlength = "4000" })

            @if (!IsOtherLineItem)
            {
                if ((bool)ViewBag.RedirectType)
                {
                <label>Parent Campaign</label>
                @Html.TextBox("txtCampaign", (string)ViewBag.Campaign, new { @readonly = "true" });
                <label>Parent Program</label>
                @Html.TextBox("txtProgram", (string)ViewBag.Program, new { @readonly = "true" });
                <label>Parent Tactic</label>
                @Html.TextBox("txtTactic", (string)ViewBag.Tactic, new { @readonly = "true" });
                }

                <div class="cf margin-left-4">
                    <div class="pull-left width50">
                        <label class="padding-left4">Start date</label>
                        <div class="dp datepicker input-append date without-margin calendar-width sidebar-datepicker" id="dp_start" data-date="@Model.StartDate.ToShortDateString()" data-date-format="@RevenuePlanner.Helpers.Common.dateFormat">
                            @Html.TextBoxFor(model => model.StartDate, new { @class = "span2 black-border-right font-size13", id = "t_startdate" })
                            <span class="add-on">
                                <img src="~/Content/images/gray-calendar-icon.png"></span>
                        </div>
                    </div>

                    <div class="pull-right width50">
                        <label class="padding-left4">End date</label>
                        <div class="dp datepicker input-append date without-margin calendar-width sidebar-datepicker" id="dp_end" data-date="@Model.EndDate.ToShortDateString()" data-date-format="@RevenuePlanner.Helpers.Common.dateFormat">
                            @Html.TextBoxFor(model => model.EndDate, new { @class = "span2 black-border-right font-size13", id = "t_enddate" })
                            <span class="add-on">
                                <img src="~/Content/images/gray-calendar-icon.png"></span>
                        </div>
                    </div>
                </div>
                <div class="content-row">
                    <label class="padding-left4" title="Cost">Line Item Cost</label>
                    @Html.TextBoxFor(model => model.Cost, new { @class = "currency_dollar margin-top3px", placeholder = "Required", require = "true", id = "txtLineItemCost", maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })
                </div>
                <div class="content-row alternate">
                    <label class="padding-left4" title="Cost">Other Line Item Cost</label>
                    @Html.TextBox("txtOtherLineItemCost", "$0", new { @class = "currency_dollar margin-top3px", id = "txtOtherLineItemCost", @readonly = "true" })
                </div>
            }
        </div>
        <!--End content-->
        <!-- Start Cost allocation for line item -->
            if (!IsOtherLineItem)
            {
                if (AllocatedBy != Enums.PlanAllocatedBy.defaults.ToString().TrimEnd('s'))
                {
                    <div class="budget-section">
                        <div class="budget-head clearfix">
                            <p>Budget Allocation</p>
                            <a href="javascript:void(0)">- Collapse</a>
                        </div>
                        <div class="budget-collapse">
                            <div class="white-bg">
                                @HtmlHelpers.GenerateBudgetAllocationControl(AllocatedBy)
                            </div>
                             <div class="budget-result source-sans-prolight">
                                <p>
                                    Total Line Item Cost: 
                                    <span id="lblTotalLineItemCost" class="source-sans-proregular">@Model.Cost</span>
                                </p>
                            </div>
                        </div>
                    </div>
                }
            }
        <!-- End Cost allocation for line item -->
        
            if ((bool)ViewBag.IsOwner && (bool)ViewBag.IsAllowCustomRestriction)
            {
        <div class="wraper-btns cf">
            <div class="span2 btn-save">
                <button id="saveLineItem" class="btn btn-blue text-shadow-blue source-sans-proregular" type="button">Save</button>
            </div>
            <div class="span2">
                <button class="close-form btn-link source-sans-proregular" type="button">Cancel</button>
            </div>
        </div>
            }
        <!--End buttons-->
    }

</div>
<script type="text/javascript">

    var isAssortment = $("#hdnRedirectType").val();
    var hdnYear = '@ViewBag.Year';

    $(document).ready(function () {

        $(".budget-head a").click(function () {
            $('.budget-collapse').slideToggle();
            $('.budget-head a').html($('.budget-head a').text() == '- Collapse' ? '+ Expand' : '- Collapse');
        });

        ImageTipsy('#diffrentStageIcon');

        $('#slidepanel-container').slimScroll({ scrollTo: '0px' });
        var isredirect = "@ViewBag.RedirectType";

        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

        if ('@TempData["TacticMQL"]' == "N/A") {
            $("#txtmql").removeClass("priceValue");
            $("#txtmql").val("N/A");
        }

        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        if ($("#hdnIsOtherLineItem").val() == "False") {
            $("#t_startdate").val($("#t_startdate").val().split(' ')[0]);
            $("#t_enddate").val($("#t_enddate").val().split(' ')[0]);
        }

        if ($("#hdnIsBudgetAllocated").val() == "True" && $("#hdnIsOtherLineItem").val() == "False") {
            $("#lblTotalLineItemCost").html(FormatCommasBudget($("#lblTotalLineItemCost").html(), false,true));
        }
        
        $("span.tool-tip").tooltip();

        $("#Title").focus();

        $(".alert").find(".close").on("click", function (e) {

            e.stopPropagation();
            e.preventDefault();
            $(this).closest(".alert").slideUp(400);
        });

        $('.datepicker.dropdown-menu').css("display", "none");

    $('.close-form', this.$panel).click(function (e) {
        $('.datepicker.dropdown-menu').css("display", "none");
        $("#slidepanel").css("display", "none");
        $("#slidepanel-container").empty();
    });

        $("#spanDuplicate").click(function () {
            CheckUserSession("#spanDuplicate", true);
            if (reason == 'user') {
                return false;
            }
            var hdnPlanTacticId = $("#hdnPlanTacticId").val();
            var isAssortment = $("#hdnRedirectType").val();
            var arrClosedTaskString = null;
            if (typeof arrClosedTask != 'undefined') {
                arrClosedTaskString = arrClosedTask.toString();
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Plan/DuplicateCopyClone")',
                data:
                    {
                        id: hdnPlanTacticId,
                        RedirectType: isAssortment,
                        CopyClone: 'Tactic',
                        closedTask: arrClosedTaskString
                    },
                success: function (data) {
                    if (data.redirect) {
                        window.location.href = data.redirect;
                        return;
                    }
                    if (data.errormsg) {
                        ShowError(data.errormsg);
                        return;
                    }

                }
            });
        });


        var isOwner = "@ViewBag.IsOwner";
        var isAllowRestriction = "@ViewBag.IsAllowCustomRestriction";
        if (isOwner == 'False' || isAllowRestriction == 'False') {
            $('form').find(".sbSelector").each(function () {
                $(this).unbind("click");
                $(this).removeAttr("href");
                $(this).prev().unbind("click");
                $(this).prev().removeAttr("href");
            });
            $('form').find("input[type=text], textarea").each(function () {
                $(this).prop('readonly', true);
                $(this).unbind("focusout");
            });
            $('form').find(".add-on").each(function () {
                $(this).unbind("click");
            });
            return false;
        }


        $('form').find('input[type=text], select, textarea').each(function () {
            $(this).change(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val() == '') {
                        $(this).addClass("error");
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
        });

        $('form').find(".sbSelector").each(function () {
            $(this).next().find('li').click(function () {
                if ($(this).parent().parent().prev().attr('require') == 'true') {
                    if ($(this).parent().prev().text() == 'Please Select') {
                        $(this).parent().prev().addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).parent().prev().removeClass("error");
                    }
                }
            });
        });

        $("#saveLineItem").click(function () {
            saveLineItem();
        });

        $('#ddlTacticType').change(function () {
            var tacticTypeId = $(this).val();
            var pmql = 0;
            var pcost = 0;
            var projectedStageValue = 0;
            if (tacticTypeId != '') {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                    data: { tacticTypeId: tacticTypeId },
                    success: function (data) {
                        //pinq = data.inq;
                        //pmql = data.mql;
                        pcost = data.revenue;
                        projectedStageValue = data.projectedStageValue;
                        $("#lblStageTitle").text(data.stageTitle);
                        $("#hdnStageId").val(data.stageId);
                        $("#txtProjectedStageValue").val(projectedStageValue);
                        $("#txtCost").val(pcost);
                        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
                        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

                        if (data.IsDeployedToIntegration) {
                            $("#t_integration_status").addClass("icon-check-blue");
                            $("#t_integration_status").removeClass("icon-check-gray");
                            $("#hdnIsDeployedToIntegration").val(true);
                        }
                        else {
                            $("#t_integration_status").addClass("icon-check-gray");
                            $("#t_integration_status").removeClass("icon-check-blue");
                            $("#hdnIsDeployedToIntegration").val(false);
                        }

                    }
                });
            }
            else {
                $("#txtProjectedStageValue").val(projectedStageValue);
                $("#txtmql").val(pmql);
                $("#txtCost").val(pcost);
                $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
                $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
                $("#lblStageTitle").text("Stage");
                $("#hdnStageId").val("0");

            }


        });

        $("#deleteTactic").click(function () {
            //CheckUserSession("#deleteTactic", true);
            //if (reason == 'user') {
            //    return false;
            //}
            var uId = $(window).attr('name');
            if (confirm('@Common.objCached.ConfirmationForDeleteLineItem')) {
                var idLineitem = $("#hdnPlanLineItemId").val();
                var isAssortment = $("#hdnRedirectType").val();
                var arrClosedTaskString = null;
                if (typeof arrClosedTask != 'undefined') {
                    arrClosedTaskString = arrClosedTask.toString();
                }

                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/DeleteLineItem")',
                    data: {
                        ID: idLineitem,
                        RedirectType: isAssortment,
                        closedTask: arrClosedTaskString,
                        UserId: uId
                    },
                    success: function (data) {
                        if (data.returnURL != 'undefined' && data.returnURL == '#') {
                            window.location = '@Url.Content("~/Login/Index")';
                        }
                        else {
                            if (data.redirect) {
                                window.location.href = data.redirect;
                                return;
                            }
                            if (data.errormsg) {
                                alert(data.errormsg);
                                return;
                            }
                        }

                    }
                });
            }
            else {
                return false;
            }
        });

        $('.dp').datepicker({
            format: "@RevenuePlanner.Helpers.Common.dateFormat",
            autoclose: true,
        }).on('changeDate', function (ev) {
            $(this).datepicker('hide');
        });

        /*hide the other datepicker in input onclick*/
        $('#t_startdate').click(function () {
            $('#dp_end').datepicker('hide');
        });

        $('#t_enddate').click(function () {
            $('#dp_start').datepicker('hide');
        });

        //hide the other datepicker in add-on onclick
        $('#dp_start .add-on').click(function () {
            $('#dp_start').datepicker('show');
            $('#dp_end').datepicker('hide');

        });

        $('#dp_end .add-on').click(function () {
            $('#dp_start').datepicker('hide');
            $('#dp_end').datepicker('show');

        });

        NumberFormatterTipsyTitle(".displaytitle", 31);// uday PL Ticket #550 3-7-2014

        if ($("#hdnIsBudgetAllocated").val() == "True" && $("#hdnIsOtherLineItem").val() == "False") {
            fillCostAllocationData();
        }

        $("#txtLineItemCost").keyup(function () {
            $("#lblTotalLineItemCost").html($("#txtLineItemCost").val());
        });

        $('.budget-section').find('input').each(function () {
            $(this).keyup(function () {
                if ($(this).val().trim() != '') {
                    var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                    if (currentValue.match('^(0|[1-9][0-9]*)$')) {

                        var OldBudgetValue = parseInt($(this).attr("ov"));
                        var RemainingBudgetValue = parseInt($(this).attr("rmb"));
                        var differenceVal = OldBudgetValue - parseInt(currentValue);
                        var newRemainingBudgetValue = RemainingBudgetValue + differenceVal;
                        $(this).attr("rmb", newRemainingBudgetValue);
                        $(this).attr("ov", currentValue);
                        if (newRemainingBudgetValue < 0) {
                            $(this).addClass('error-text');
                        }
                        else {
                            $(this).removeClass('error-text');
                        }
                    }
                }
            });
        });

    });

    function fillCostAllocationData() {
        var hdnPlanLineItemId = $("#hdnPlanLineItemId").val();
        var hdnPlanTacticId = $("#hdnPlanTacticId").val();
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/GetCostAllocationLineItemData/")',
            data: {
                id: hdnPlanLineItemId,
                tid: hdnPlanTacticId
            },
            success: function (data) {
                var r = data.costData;
                if (typeof r != 'undefined') {
                    if (r.length) {
                        for (i in r) {
                            var remainingMonthlyCost = r[i].remainingMonthlyCost == '' ? '0' : r[i].remainingMonthlyCost;
                            $("#" + r[i].periodTitle).val(r[i].costValue);
                            $("#" + r[i].periodTitle).attr('ov', r[i].costValue == '' ? '0' : r[i].costValue);
                            $("#" + r[i].periodTitle).attr('rmb', remainingMonthlyCost);
                            if (parseInt(remainingMonthlyCost) < 0) {
                                $("#" + r[i].periodTitle).addClass('error-text');
                            }
                        }
                    }
                }

                if (typeof data.otherLineItemCost != 'undefined') {
                    $("#txtOtherLineItemCost").val(FormatCommasBudget(data.otherLineItemCost.toString(), false,true));
                    $("#txtOtherLineItemCost").attr('title', $("#txtOtherLineItemCost").val());
                    $("#txtOtherLineItemCost").attr('myvalue', $("#txtOtherLineItemCost").val());
                }
            },
            error: function () {
                ShowError('');
                return false;
            }
        });
    }

    function saveLineItem() {
        var iserror = false;
        $('form').find('input[type=text], select, textarea').each(function () {
            if ($(this).attr('require') == 'true') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            }
        });

        $('form').find('.sbSelector').each(function () {
            if ($(this).parent().prev().attr('require') == 'true') {
                if ($(this).text() == 'Please Select') {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            }
        });

        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
            return false;
        }

        var sdate = $('#t_startdate').val();
        var edate = $('#t_enddate').val();

        if ($("#hdnIsOtherLineItem").val() == "False") {
            if (!isDate(sdate)) {
                alert('@Common.objCached.ValidateStartDate');
                return false;
            }
            if (!isDate(edate)) {
                alert('@Common.objCached.ValidateEndDate');
                return false;
            }
            if (!CheckDateYear(sdate, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
            if (!CheckDateYear(edate, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;
            if (!validateDateCompare(sdate, edate, "@RevenuePlanner.Helpers.Common.objCached.DateComapreValidation")) return false;
        }

        $("#txtLineItemCost").val(ReplaceCC($("#txtLineItemCost").val()));
        var arrClosedTaskString = null;
        if (typeof arrClosedTask != 'undefined') {
            arrClosedTaskString = arrClosedTask.toString();
        }

        var allocationValue = [];
        var lstAllocInputs = $(".budget-section input");
        for (var i = 0; i < lstAllocInputs.length; i++) {
            allocationValue.push(ReplaceCC($(lstAllocInputs[i]).val()));
        }

        document.getElementById("Title").value = htmlEncode($('#Title').val());
        document.getElementById("Description").value = htmlEncode($('#Description').val());
        var uId = $(window).attr('name');
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/SaveLineitem")',
            data: $("form").serialize() + '&RedirectType=' + isAssortment + '&closedTask=' + arrClosedTaskString + '&CostInputValues=' + allocationValue.toString() + '&UserId=' + uId,
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else {
                    if (data.redirect) {
                        window.location.href = data.redirect;
                        return;
                    }
                    if (data.errormsg) {
                        document.getElementById("Title").value = htmlDecode($('#Title').val());
                        document.getElementById("Description").value = htmlDecode($('#Description').val());
                        ShowError(data.errormsg);
                        //Added By : Kalpesh Sharma Functional and Review Points 07/31/2014
                        $("#divBudgetError").slideUp(30);
                        return;
                    }
                }
            }
        });
    }

    function ShowError(value) {
        $("#errorMessage").slideDown(400);
        $("#spanMessage").empty();
        $("#spanMessage").text(value);
    }

</script>
