@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
}
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@Html.Display(popupvalue)
<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>
@{
    var TacticTitle = "";
    var Status = "";
    var PlanTacticId = 0;
    var IsResubmitableStatus = false;
    bool IsPlanEditable = false;
    var tacticMaster = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    var PlanProgramId = 0;
    var colorCode = "";
    if (ViewBag.TacticDetail != null)
    {        
        IsPlanEditable = (bool)ViewBag.IsPlanEditable;
        IsResubmitableStatus = (bool)Common.CheckAfterApprovedStatus(tacticMaster.Status);
        TacticTitle = tacticMaster.TacticTitle;
        PlanTacticId = tacticMaster.PlanTacticId;
        Status = tacticMaster.Status;
        colorCode = tacticMaster.ColorCode;
    }
    else
    {
        if (ViewBag.PlanProgrameId != null)
        {
            PlanProgramId = ViewBag.PlanProgrameId;
        }
    }

    bool IsTacticActualsAddEditAuthorized = (bool)ViewBag.IsTacticActualsAddEditAuthorized;
    string InspectMode = ViewBag.InspectMode;
        
    }


@Html.Hidden("hdnPlanTacticId", PlanTacticId, new { id = "hdnPlanTacticId" })
@Html.Hidden("hdnTacticStatus", Status, new { id = "hdnTacticStatus" })
@Html.Hidden("hdnTacticBudgetAllocationOpt", "View", new { id = "hdnTacticBudgetAllocationOpt" })
@Html.Hidden("hdnIsResubmitableStatus", IsResubmitableStatus, new { id = "hdnIsResubmitableStatus" })
@Html.Hidden("hdnInspectMode", InspectMode, new { id = "hdnInspectMode" })

<form>
<div class="modal-popup-title">
    <span class="icon-flag bg-purple flagcolor" style="background-color:#@colorCode !important;"></span>
    <h2 class="title-simple source-sans-prolight">
        @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
        {            
        <span>
         <span id="lblTacticTitle" class="tipsyclassTitle" title="@HttpUtility.HtmlDecode(TacticTitle)">@HttpUtility.HtmlDecode(TacticTitle)</span>
            @if (IsPlanEditable)
            {
                <span class="edit-icon-white btn-blue btn-large" style="display:block;cursor: pointer;" id="EditForm"></span>
            }
         </span>
        }

        @Html.TextBox("txtTacticTitle", HttpUtility.HtmlDecode(TacticTitle), new { placeholder = "Required", require = "true", maxlength = "255", @class = "span12 input-small truncate", @style = "width: 95%; height: 28px;display:none", title = HttpUtility.HtmlDecode(TacticTitle) })
        @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle" })
    </h2>
</div>
</form>

@if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
{
<div class="modal-popup-summary">
    <h3 class="modal-popup-innertitle source-sans-proregular">Summary</h3>
    <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight">
        I'm running 
            <span id="tactic-type" class="source-sans-prosemibold color5693B3">@tacticMaster.TacticTypeTitle</span>
        tactic called 
            <span id="tactic-name" class="source-sans-prosemibold color5693B3">@HttpUtility.HtmlDecode(TacticTitle)</span>
        from
            <span id="start-date" class="source-sans-prosemibold color5693B3">@tacticMaster.StartDate.ToString(Common.DateFormateForInspectPopupDescription) </span>
        to
            <span id="end-date" class="source-sans-prosemibold color5693B3">@tacticMaster.EndDate.ToString(Common.DateFormateForInspectPopupDescription) </span>
        for the
            <span id="vertical" class="source-sans-prosemibold color5693B3">@tacticMaster.VerticalTitle</span>
        vertical.
        
        <p class="modal-status">Status: 
            @if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statussubmitted">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statusrejected">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
               <span id="status" class="source-sans-prosemibold statusapproved">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statuscreated">@tacticMaster.Status</span>
            }</p>
    </div>
</div>
}

<div>

    <ul class="nav nav-tabs new-margin" id="InspectTab">
        <li class="active pull-left" id="liSetup">
            <a >Setup</a>
        </li>
        <li class="pull-left" id="liReview">
            <a >Review</a>
        </li>
        @if (IsTacticActualsAddEditAuthorized)
        {
        
        <li class="pull-left" id="liActuals">
            <a>Actuals</a>
        </li>
        }
         <li class="pull-left" id="liBudget">
            <a>Budget</a>
        </li>
         <li class="pull-right">
              <h3 class="modal-popup-innertitle source-sans-proregular">Details</h3>
        </li>
    </ul>
    <div id="divTab">
    </div>
</div>

<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabActual = "Actuals";
    var divTab = "#divTab";
    var TabBudget = "Budget";

    $(document).ready(
      function () {
          CloseIconClick();          
          NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
          var InspectValue = $("#hdnInspectPopup").val();
          var planTacticId = $("#hdnPlanTacticId").val();
          // Call Remove Tabclass
          RemoveTabClass();

          $("#li" + InspectValue).removeClass("pull-left");
          $("#li" + InspectValue).addClass("active pull-left");
          var tabtext = ($("#li" + InspectValue).children('a').text());
          $('#div' + tabtext).css({ display: "block" });

          loadReview(planTacticId, tabtext);

          // Click on Tab Partialview Refresh Based On Selected Tab
          $("#liSetup,#liReview,#liActuals,#liBudget").on("click", function () {
              var activeTab = $("#InspectTab li.active a").text();
              if (activeTab == 'Actuals') {
                  var tabtext = ($(this).children('a').text());
                  displayConfirm('topTabsClick("' + tabtext + '");');
              }
              else {
                  RemoveTabClass();
                  $(this).removeClass("pull-left");
                  $(this).addClass("active pull-left");
                  $("#errorMessage").css("display", "none");
                  $("#successMessage").css("display", "none");
                  /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                  var tabtext = ($(this).children('a').text());
                  var planTacticId = $("#hdnPlanTacticId").val();
                  loadReview(planTacticId, tabtext);
              }
          });

          // Close event for Error Message & Success Message Close button 
          $(".alert").find(".close").on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).closest(".alert").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
          });

          //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
          $(document).on("click", "#confirmClose", function (e) {
              $('#spanMessageError').html("");
              $("#errorMessage").hide();
          });
          //Dharmraj End 14July2014 : ticket #547, No warning of data loss during Add actuals

          $("#EditForm").on("click", function (e) {
              $("#errorMessage").css("display", "none");
              $("#successMessage").css("display", "none");
              $("#txtTacticTitle").removeClass("error");              
              var activeTab = $("#InspectTab li.active a").text()
              var planTacticId = $("#hdnPlanTacticId").val();
              $("#hdnTacticBudgetAllocationOpt").val("Edit");
              $('#txtTacticTitle').css('display', 'block');
              $("#txtTacticTitle").val($("#lblTacticTitle").text());
              $('#lblTacticTitle').css('display', 'none');
              $('#EditForm').css('display', 'none');
              loadReview(planTacticId, activeTab);
              //// Added By Kalpesh on 11/06/2014 to Non-Editable Tactic Name.mp4 mentioned in resolve ticket #868
              $("#txtTacticTitle").prop('readonly', false);
          });
          
      });

    function topTabsClick(tabText) {
        RemoveTabClass();
        $("#li" + tabText).removeClass("pull-left");
        $("#li" + tabText).addClass("active pull-left");
        $("#errorMessage").css("display", "none");
        $("#successMessage").css("display", "none");
        /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
        var tabtext = ($("#li" + tabText).children('a').text());
        var planTacticId = $("#hdnPlanTacticId").val();
        loadReview(planTacticId, tabtext);
    }

    function RemoveTabClass() {
        $('#InspectTab').children().each(function () {
            if ($(this).hasClass('active pull-left')) {
                $(this).removeClass("active pull-left");
                $(this).addClass("pull-left");
            }
        });
    }

    function loadReview(id, tabValue) {
        $.ajaxSetup({ cache: false });
        var url;
        var ProgramOpt = $("#hdnTacticBudgetAllocationOpt").val();
        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });
        $("#divTab").empty();
        if (tabValue == TabSetup) {
            if ('@InspectMode' == "Add") {
                url = '@Url.Content("~/Home/CreateTactic/")';
                $("#divTab").load(url + '?id=' + "@PlanProgramId");
            }
            else if (ProgramOpt == "Edit") {
                url = '@Url.Content("~/Home/EditTactic/")';
                $("#divTab").load(url + '?id=' + id + '&RedirectType=""&CalledFromBudget=""');
            }
            else {
                url = '@Url.Content("~/Home/LoadSetup/")';
                $("#divTab").load(url + '?id=' + id + '&Mode=' + ProgramOpt);
            }
        }

        if (tabValue == TabReview) {
            url = '@Url.Content("~/Home/LoadReview/")';
            $("#divTab").load(url + '?id=' + id );
        }
        if (tabValue == TabActual) {
            url = '@Url.Content("~/Home/LoadActuals/")';
            $("#divTab").load(url + '?id=' + id );
        }

        if (tabValue == TabBudget) {
            url = '@Url.Content("~/Home/LoadTacticBudgetAllocation/")';
            $("#divTab").load(url + '?id=' + id);
        }
      }

    //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
    function AssignDefaultValue() {
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            $(this).attr("myValue", $(this).val());
            //$(this).attr("title", $(this).val());//uday 2-7-2014
        });
    }
    //function to check myValue attribute values and input values that any changes made?
    function isDataChanged() {
        var changed = false;
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            var iv = $(this).attr("myValue");
            if ($(this).val() != iv) {
                changed = true;
            }
        });
        return changed;
    }

    function displayConfirmCommon() {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                $('#modal-container-186470').modal("hide");
            });
        }
        else {
            $('#modal-container-186470').modal("hide");
        }
    }

    function displayConfirm(functionName) {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                eval(functionName);
            });
        }
        else {
            eval(functionName);
        }
    }

    //Dharmraj End 14July2014 : ticket #547, No warning of data loss during Add actuals

</script>
