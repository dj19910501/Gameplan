@model RevenuePlanner.Models.UserChangePassword
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    ViewBag.Title = "Change Password";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.PageTitle = "ChangePassword";
    ViewBag.ModuleTitle = "MyProfile";
    //string isViewOnly = ViewBag.IsViewOnly;
}

@*@Html.Hidden("IsViewOnly", isViewOnly)*@
@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"])

@section Sidebar { 
    @Html.Partial("~/Views/shared/_preferences.cshtml")
}

<!--success message-->
<div id="successMessage" class="alert hide alert-success message-position">
    <a class="close">×</a>
    <strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))
</div>
<!--success message-->
<!--error message-->
<div id="errorMessage" class="alert hide alert-error message-position">
    <a class="close">×</a>
    <strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))
</div>
<!--error message-->

<ul class="nav nav-tabs">
    <li class="source-sans-proregular">
        <h2 class="title-header">Change Password</h2>
    </li>
</ul>

<div class="padding-content cf source-sans-proregular" id="content">
    <div class="row">
        @Html.Partial("~/Views/User/_myprofile.cshtml")
        <div class="span10 content-colum-right">
            @using (Html.BeginForm())
            {
                @Html.ValidationSummary(true)

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.CurrentPassword)

                    @Html.TextBoxFor(model => model.CurrentPassword, new { placeholder = "Enter current password", type = "password" })
                    <span class="field-validation-error" id="isCurrentPasswordOk"></span>
                    @Html.ValidationMessageFor(model => model.CurrentPassword)
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.NewPassword)

                    @Html.TextBoxFor(model => model.NewPassword, new { placeholder = "Enter new password (8 char. min)", type = "password" })
                    <span id="result"></span>
                    @Html.ValidationMessageFor(model => model.NewPassword)
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ConfirmNewPassword)

                    @Html.TextBoxFor(model => model.ConfirmNewPassword, new { placeholder = "Confirm new password (8 char. min)", type = "password" })
                    <span id="match"></span>
                    @Html.ValidationMessageFor(model => model.ConfirmNewPassword)
                </div>
                //if (isViewOnly != "true")
                //{
                <div class="cf inputs-aligned-horizontal">
                    <label></label>     @* Added by Sohel Pathan on 10/07/2014 for PL ticket #586 *@
                    <div class="container-button">
                        <input id="btnSubmit" type="submit" value="Save" title="save" class="btn btn-blue btn-large text-shadow-blue source-sans-proregular" style="margin-left: 20px;" />  @* Modified by Sohel Pathan on 10/07/2014 for PL ticket #586 *@
                    </div>
                </div>
                //}
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        //if ($('#IsViewOnly').val() != '') {
        //    $("#content :input").attr("disabled", true);
        //}

        $('#btnSubmit').click(function () {
            
            $('#content :input').each(function () {
                var input = $(this).val();
                if (input == '') {
                    $(this).addClass("error");
                } else {
                    $(this).removeClass("error");
                }
            });

            if ($("#NewPassword").val().length < 8) {
                return false;
            }

            //check whether or not new password is same as of current password
            var currpwd = $('#CurrentPassword').val();
            var newpwd = $('#NewPassword').val();
            if (currpwd == newpwd) {
                $('#result').removeClass()
                $('#result').html()
                $('#result').addClass('field-validation-error')
                $('#result').html('New and current password cannot be same.')
                return false;
            }
            // Modified by Dharmraj Mangukiya, #557
            //if ($('#successMessage').html() != '') {
            //    CheckUserSession("#btnSubmit", true);
            //    if (reason == 'user') {
            //        return false;
            //    }
            //}
        });

        //function to add or remove class ERROR when inputs text are empty.
        $('input').blur(function () {
            if ($(this).val() == '') {
                $(this).addClass("error");
            } else {
                $(this).removeClass("error");
            }

        });
        /*close x event on message*/
        $(".close").click(function (e) {
            e.stopPropagation();
            e.preventDefault();
            $(this).closest(".alert").slideUp(400);
        });

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
           // $("#successMessage").slideUp(3000);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }
    });

    $('#CurrentPassword').keyup(function () {
        $('#isCurrentPasswordOk').html('');
    });

    $('#CurrentPassword').blur(function () {
        $('#isCurrentPasswordOk').html('');
        if (this.value != null && this.value != '') {
            $.ajax(
            {
                type: "GET",
                cache: false,
                url: 'CheckCurrentPassword',
                data: { currentPassword: this.value },
                dataType: "json",
                success: function (data) {
                    if (data == '1') {
                        $('#isCurrentPasswordOk').html('Your current password is not correct.');
                    }
                    else {
                        $('#isCurrentPasswordOk').html('');
                    }
                },
                error: function () {
                    $('#isCurrentPasswordOk').html('');
                    GoToLogin();
                }
            });
        }
    });

    $('#NewPassword').blur(function (event) {
        //check whether or not new password is same as of current password
        $('#result').html(checkCurrentNew())
    });

    $('#NewPassword').keyup(function (event) {
        $('#result').removeClass()
        $('#result').html('')
        if ($('#NewPassword').val() != '')
            $('#result').html(checkStrength($('#NewPassword').val()))
    });

    function checkCurrentNew() {
        var currpwd = $('#CurrentPassword').val();
        var newpwd = $('#NewPassword').val();
        if (currpwd == newpwd) {
            $('#result').removeClass()
            $('#result').html()
            $('#result').addClass('field-validation-error')
            return "New and current password cannot be same.";
        } 
    }

    $('#ConfirmNewPassword').keyup(function (event) {
        $('#match').removeClass()
        $('#match').html('')
        if (($('#ConfirmNewPassword').val() != '') && ($('#NewPassword').val() != ''))
            $('#match').html(checkMatch($('#ConfirmNewPassword').val(), $('#NewPassword').val()))
    });
        
    function checkMatch(password1, password2) {
        $('#match').removeClass()
        if (password1 == password2) {
            $('#match').addClass('check-icon-green')
            return "Match";
        } else {
            $('#match').addClass('check-icon-red')
            return "Don't match";
        }
    }

    function checkStrength(password) {

        //initial strength
        var strength = 0

        //check if current password & new password are same or not
        //if ($('#CurrentPassword').val() != '' && password != '') {
        //    if ($('#CurrentPassword').val() == password) {
        //        $('#result').removeClass()
        //        $('#result').addClass('check-icon-red')
        //        return 'Same as current password'
        //    }
        //}

        //if the password length is less than 6, return message.
        if (password.length < 8) {
            $('#result').removeClass()
            $('#result').addClass('check-icon-red')
            return 'Too short'
        }

        //length is ok, lets continue.

        //if length is 8 characters or more, increase strength value
        if (password.length > 7) strength += 1

        //if password contains both lower and uppercase characters, increase strength value
        if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) strength += 1

        //if it has numbers and characters, increase strength value
        if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) strength += 1

        //if it has one special character, increase strength value
        if (password.match(/([!,%,&,@@,#,$,^,*,?,_,~])/)) strength += 1

        //if it has two special characters, increase strength value
        if (password.match(/(.*[!,%,&,@@,#,$,^,*,?,_,~].*[!,",%,&,@@,#,$,^,*,?,_,~])/)) strength += 1

        //now we have calculated strength value, we can return messages

        //if value is less than 2
        if (strength < 2) {
            $('#result').removeClass()
            $('#result').addClass('check-icon-red')//weak
            return 'Weak'
        } else if (strength == 2) {
            $('#result').removeClass()
            $('#result').addClass('check-icon-green')//good)
            return 'Good'
        } else {
            $('#result').removeClass()
            $('#result').addClass('check-icon-green')//strong
            return 'Strong'
        }
    }

    // Added by :- Sohel Pathan on 13/5/2014 for PL #430 to setup integration screen
    $('#aIntegrations').click(function () {
        var url = '';
        url = '@Url.Content("~/ExternalService/Index")';
        window.location.href = url;
    });


    //Modified by Mitesh Vaishnav on 23-06-2014
    $('#aOrganization').click(function () {
        var url = '';
        url = '@Url.Action("ViewEditPermission", "Organization", new { Id = Sessions.User.UserId, Mode = "MyPermission" })';

        window.location.href = url;
    });
</script>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
