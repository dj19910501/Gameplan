@model RevenuePlanner.Models.UserModel
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    var srcval = (string)ViewBag.SourceValue;
    var currentUserId = (string)ViewBag.CurrentUserId;
    var currentUserRole = (string)ViewBag.CurrentUserRole;
    var permRoleCodesForDel = (string)ViewBag.PermRoleCodesForDel;

    if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myteam")
    {
        ViewBag.Title = "Edit User";
    }
    else if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myaccount")
    {
        ViewBag.Title = "My Account";
    }


    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
    string isViewOnly = ViewBag.IsViewOnly;
}

@Html.Hidden("IsViewOnly", isViewOnly)
@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"])

@section Sidebar {
    <div class="padding-content">
        <h4 class="text-shadow-black source-sans-prolight">Preferences</h4>
    </div>
    <ul class="nav nav-list nav-gray">
        <li class="item active">
            <a class="source-sans-probold inputs" href="#"><span></span>MY PROFILE</a>
        </li>
         @if (currentUserRole.Equals(Enums.RoleCodes.SA.ToString(), StringComparison.OrdinalIgnoreCase) || currentUserRole.Equals(Enums.RoleCodes.CA.ToString(), StringComparison.OrdinalIgnoreCase))
        {
            <li class="item">
                <a class="source-sans-probold integrations" href="#" id="aIntegrations"><span></span>INTEGRATIONS</a>
            </li>
        }
    </ul>
}

@if (TempData["SuccessMessage"] != null)
{
    if (!Convert.ToString(TempData["SuccessMessage"]).ToLower().Contains("model"))
    {
    <!--success message-->
    <div id="successMessage" class="alert hide alert-success message-position">
        <a class="close">×</a>
        <strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))
    </div>
    <!--success message-->
        TempData["SuccessMessage"] = "";
    }
}

@if (TempData["ErrorMessage"] != null)
{
    if (!Convert.ToString(TempData["ErrorMessage"]).ToLower().Contains("model"))
    {
    <!--error message-->
    <div id="errorMessage" class="alert hide alert-error message-position">
        <a class="close">×</a>
        <strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))
    </div>
    <!--error message-->
        TempData["ErrorMessage"] = "";
    }
}

@if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myteam")
{
    <ul class="nav nav-tabs margin-bottom0">
        <li class="source-sans-proregular">
            <h2 class="title-header">Edit User</h2>
        </li>
    </ul>    
    <a class="link-gray" href="@Url.Action("Index", "User")">« BACK TO LIST</a>
}
else if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myaccount")
{
    <ul class="nav nav-tabs">
        <li class="source-sans-proregular">
            <h2 class="title-header">My Account</h2>
        </li>
    </ul>
}

<div class="padding-content cf source-sans-proregular" id="content">
    <div class="row">
        @if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myteam")
        {
            <div class="span2 content-colum-left content-img-user">
                <img src="@Url.Action("LoadUserImage", "User", new { id = Model.UserId, width= 60, height=60 })" class="img-user" style="height:140px; width:140px;">
            </div>
        }
        else if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myaccount")
        {
            <div class="span2 myaccount-colum">
                <div class="padding-right70">
                    <ul class="nav nav-pills nav-stacked width216">
                        <li class="active"><a href="@Url.Action("Edit", "User", new { usrid = Model.UserId, src = "myaccount" })">Account</a></li>
                        <li><a href="@Url.Action("Index", "User")">Team Members</a></li>
                        <li><a href="@Url.Action("Notifications", "User")">Notifications</a></li>
                        <li><a href="@Url.Action("SecurityQuestion", "User")">Security Question</a></li>
                        <li><a href="@Url.Action("ChangePassword", "User")">Change Password</a></li>
                    </ul>
                </div>
            </div>
        }

        <div class="span10 content-colum-info-user">
            @using (Html.BeginForm("Edit", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.ValidationSummary(true)

                @Html.HiddenFor(model => model.UserId)
                @Html.HiddenFor(model => model.RoleCode)
                @Html.HiddenFor(model => model.Password)
                @Html.HiddenFor(model => model.ConfirmPassword)

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.FirstName)
                    @if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "input-small" })
                        @Html.ValidationMessageFor(model => model.FirstName)
                    }
                    else
                    {
                        @Html.TextBox("txtFirstName", Model.FirstName, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.FirstName })
                    }
                </div>
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.LastName)
                    @if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        @Html.TextBoxFor(model => model.LastName)
                        @Html.ValidationMessageFor(model => model.LastName)
                    }
                    else
                    {
                        @Html.TextBox("txtLastName", Model.LastName, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.LastName })
                    }
                </div>
                <div class="cf inputs-aligned-horizontal">
                    @Html.Hidden("CurrEmail", Model.Email)
                    @Html.LabelFor(model => model.Email)
                    @if (permRoleCodesForDel.Contains(Model.RoleCode))
                    //@if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        @Html.TextBoxFor(model => model.Email)
                        <span class="field-validation-error" id="isEmailExist"></span>
                        @Html.ValidationMessageFor(model => model.Email)
                    }

                    else
                    {
                        @Html.HiddenFor(model => model.Email)
                        @Html.TextBox("txtEmail", Model.Email, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.Email })
                    }
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.JobTitle)
                    @if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        @Html.TextBoxFor(model => model.JobTitle)
                        @Html.ValidationMessageFor(model => model.JobTitle)
                    }
                    else
                    {
                        @Html.TextBox("txtJobTitle", Model.JobTitle, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.JobTitle })
                    }

                </div>
                    if (!string.IsNullOrWhiteSpace(srcval) && srcval.ToLower() == "myaccount")
                    {
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ProfilePhoto)
                    <div class="container-img">
                        <img id="userImage" src="@Url.Action("LoadUserImage", "User", new { id = Model.UserId, width= 60, height=60 })" class="pull-left">
                        <div class="pull-left">
                            <div class="btn-group">
                                <input name="file" id="filePrev" type="file" style="display: inline-block; width: 200px;" />
                            </div>
                            <small>JPG or PNG format only (size up to 1 MB).</small>
                        </div>
                        @if (Model.ProfilePhoto != null)
                        {
                            <a href="#" prop="@ViewBag.DefaultImage" id="aRemoveImage" class="remove-img">Remove Image</a>
                        }
                    </div>
                </div>
                    }
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ClientId)
                    @if (Model.IsSystemAdmin)
                    {
                        //Modified by :- Sohel on 27 March 2014 for ticket #334
                        <div class="selectBox" id="ddlClientIdSelectBox">
                            @Html.DropDownListFor(c => c.ClientId, new SelectList((System.Collections.IEnumerable)ViewData["Clients"], "ClientId", "Name"), "Please Select")
                        </div>
                        @Html.ValidationMessageFor(model => model.ClientId)
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.ClientId)
                        @Html.HiddenFor(model => model.Client)
                        @Html.TextBox("txtClient", Model.Client, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.Client })
                    }
                </div>
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.BusinessUnitId)
                    @if (permRoleCodesForDel.Contains(Model.RoleCode) || (Model.IsSystemAdmin && currentUserId == Convert.ToString(Model.UserId)))
                    //@if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        //Modified by :- Sohel on 27 March 2014 for ticket #334
                        <div class="selectBox" id="ddlBusinessUnitIdSelectBox">
                            @Html.DropDownListFor(c => c.BusinessUnitId, new SelectList((System.Collections.IEnumerable)ViewData["BusinessUnits"], "BusinessUnitId", "Title"), "Please Select")
                        </div>
                        @Html.ValidationMessageFor(model => model.BusinessUnitId)
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.BusinessUnitId)
                        @Html.HiddenFor(model => model.BusinessUnit)
                        @Html.TextBox("txtBusinessUnit", Model.BusinessUnit, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.BusinessUnit })
                    }
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.GeographyId)
                    @if (permRoleCodesForDel.Contains(Model.RoleCode) || (Model.IsSystemAdmin && currentUserId == Convert.ToString(Model.UserId)))
                    //@if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        //Modified by :- Sohel on 27 March 2014 for ticket #334
                        <div class="selectBox" id="ddlGeographyIdSelectBox">
                            @Html.DropDownListFor(c => c.GeographyId, new SelectList((System.Collections.IEnumerable)ViewData["Geographies"], "GeographyId", "Title"), "Please Select")
                        </div>
                        @Html.ValidationMessageFor(model => model.GeographyId)
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.GeographyId)
                        @Html.HiddenFor(model => model.Geography)
                        @Html.TextBox("txtGeography", Model.Geography, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.Geography })
                    }
                </div>
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.RoleId)
                    @if (permRoleCodesForDel.Contains(Model.RoleCode) || (Model.IsSystemAdmin && currentUserId == Convert.ToString(Model.UserId)))
                    //@if ((Convert.ToString(Model.UserId) == currentUserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                    {
                        //Modified by :- Sohel on 27 March 2014 for ticket #334
                        <div class="selectBox" id="ddlRoleIdSelectBox">
                            @Html.DropDownListFor(c => c.RoleId, new SelectList((System.Collections.IEnumerable)ViewData["Roles"], "RoleId", "Title"), "Please Select")
                        </div>
                        @Html.ValidationMessageFor(model => model.RoleId)
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.RoleId)
                        @Html.HiddenFor(model => model.RoleTitle)
                        @Html.TextBox("txtRole", Model.RoleTitle, new { style = "background:#F2F2F2;", @readonly = "true", title = Model.RoleTitle })
                    }
                </div>
                <div class="cf inputs-aligned-horizontal" style="margin-left: 179px;">
                    @if (currentUserId != Convert.ToString(Model.UserId))
                    {
                        if (permRoleCodesForDel.Contains(Model.RoleCode))
                        {
                        <div class="delete-container">
                            @Html.LabelFor(model => model.IsDeleted, new { style = "float:left;padding-left:80px;padding-top:2px;" })
                            @{
                            var items = new List<System.Web.UI.WebControls.ListItem> { new System.Web.UI.WebControls.ListItem { Text = "No", Value = "No" }, new System.Web.UI.WebControls.ListItem { Text = "Yes", Value = "Yes" } };
                            }
                            @*Modified by :- Sohel on 27 March 2014 for ticket #334*@
                            <div class="selectBox" id="ddlIsDeletedSelectBox">
                                @Html.DropDownListFor(c => c.IsDeleted, new SelectList(items, "Value", "Text" ), new { style = "width:54px; height:23px;float:right;margin-top:10px;margin-right:12px;" })
                            </div>
                        </div>
                        }
                    }
                    else
                    {
                        if (!Model.IsSystemAdmin)
                        {
                        <div class="cf inputs-aligned-horizontal">
                            <p>Contact your <strong>administrator</strong> to update locked settings.</p>
                        </div>
                        }
                    }
                </div>
                    if (isViewOnly != "true")
                    {
                        if (currentUserId == Convert.ToString(Model.UserId) || permRoleCodesForDel.Contains(Model.RoleCode))
                        {
                <div class="cf inputs-aligned-horizontal">
                    <div class="container-button">
                        <input id="btnSubmit" type="submit" value="Save" title="save" class="btn btn-blue btn-large text-shadow-blue source-sans-proregular" style="margin-left: 179px;" />
                    </div>
                </div>
                        }
                    }
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        //Added by :- Sohel on 27 March 2014 for ticket #334
        $(".selectBox select").selectbox();

        $('#btnSubmit').click(function () {
            var isValid = true;

            //ClientId Dropdown Required Validtion
            if (($("#ClientId option").eq(0).val() == "" && $("#ClientId").val() == "")) {
                $("#ddlClientIdSelectBox .sbHolder").addClass("selectBoxError");
                isValid = false;
            }
            else {
                $("#ddlClientIdSelectBox .sbHolder").removeClass("selectBoxError");
            }

            //BusinessID Dropdown Required Validtion
            if (($("#BusinessUnitId option").eq(0).val() == "" && $("#BusinessUnitId").val() == "")) {
                $("#ddlBusinessUnitIdSelectBox .sbHolder").addClass("selectBoxError");
                isValid = false;
            }
            else {
                $("#ddlBusinessUnitIdSelectBox .sbHolder").removeClass("selectBoxError");
            }

            //GeographyId Dropdown Required Validtion
            if (($("#GeographyId option").eq(0).val() == "" && $("#GeographyId").val() == "")) {
                $("#ddlGeographyIdSelectBox .sbHolder").addClass("selectBoxError");
                isValid = false;
            }
            else {
                $("#ddlGeographyIdSelectBox .sbHolder").removeClass("selectBoxError");
            }

            //RoleID Dropdown Required Validtion
            if (($("#RoleId option").eq(0).val() == "" && $("#RoleId").val() == "")) {
                $("#ddlRoleIdSelectBox .sbHolder").addClass("selectBoxError");
                isValid = false;
            }
            else {
                $("#ddlRoleIdSelectBox .sbHolder").removeClass("selectBoxError");
            }
            CheckUserSession("#btnSubmit", true);
            if (reason == 'user') {
                return false;
            }
            return isValid;
        });
        //

        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        if ($('#IsViewOnly').val() != '') {
            $("#content :input").attr("disabled", true);
        }

        $("#aRemoveImage").click(function () {
            var src = $(this).attr('prop');
            $('#userImage').attr('src', 'data:image/jpg;base64,' + src);
        });

        $('#btnSubmit').click(function () {
            CheckUserSession("#btnSubmit", true);
            if (reason == 'user') {
                return false;
            }
            $('#content :input').each(function () {
                if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                }
            });
        });

        //function to add or remove class ERROR when inputs text are empty.
        $('input').blur(function () {
            if ($(this).attr('type') == 'text') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                } else {
                    $(this).removeClass("error");
                }
            }
        });
        $('select').blur(function () {
            if ($(this).val() == '') {
                $(this).addClass("error");
            } else {
                $(this).removeClass("error");
            }
        });

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
            $("#successMessage").slideUp(3000);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }
        $("#ClientId").change(function () {
            var clientId = $(this).val();
            if (clientId != "") {
                loadBusinessUnit(clientId);
                loadGeography(clientId);
            }
        });
        function loadBusinessUnit(clientId) {
            if (clientId != "" && clientId != "0" && clientId != "null") {
                $.getJSON("@Url.Content("~/User/GetBusinessUnit")", { id: clientId },
function (businessUnitData) {
    var select = $("#BusinessUnitId");
    select.empty();
    $.each(businessUnitData, function (index, itemData) {
        select.append($('<option/>', {
            value: itemData.Value,
            text: itemData.Text
        }));
    });
    if ($("#BusinessUnitId option").eq(0).val() != "") {
        $("#BusinessUnitId option").eq(0).before($("<option></option>").val("").text("Please select"));
    }
    if ($("#BusinessUnitId option").eq(0).val() == undefined) {
        $("#BusinessUnitId").append($("<option></option>").val("").text("Please select"));
    }
    $("#BusinessUnitId").val("");

    //Added by :- Sohel on 27 March 2014 for ticket #334
    $(".selectBox select").selectbox('detach');
    $(".selectBox select").selectbox("attach");
});
        }
    }
        function loadGeography(clientId) {
            if (clientId != "" && clientId != "0" && clientId != "null") {
                $.getJSON("@Url.Content("~/User/GetGeography")", { id: clientId },
            function (geographyData) {
                var select = $("#GeographyId");
                select.empty();
                $.each(geographyData, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.Value,
                        text: itemData.Text
                    }));
                });
                if ($("#GeographyId option").eq(0).val() != "") {
                    $("#GeographyId option").eq(0).before($("<option></option>").val("").text("Please select"));
                }
                if ($("#GeographyId option").eq(0).val() == undefined) {
                    $("#GeographyId").append($("<option></option>").val("").text("Please select"));
                }
                $("#GeographyId").val("");

                //Added by :- Sohel on 27 March 2014 for ticket #334
                $(".selectBox select").selectbox('detach');
                $(".selectBox select").selectbox("attach");
            });
            }
        }

        // Added by :- Sohel Pathan on 1/5/2014 for PL #430 to setup integration screen
        $('#aIntegrations').click(function () {
            var url = '';
            url = '@Url.Content("~/ExternalService/Index")';
            window.location.href = url;
        });
    });
    $('#Email').keyup(function () {
        $('#isEmailExist').html('');
    });
    $('#Email').blur(function () {
        $('#isEmailExist').html('');
        $('#isEmailExist').removeClass();

        var email = this.value;
        var currEmail = $("#CurrEmail").val();

        if ((currEmail != null && currEmail != '') && (email != null && email != '')) {
            if (email == currEmail) {
                return;
            }
        }

        if (email != null && email != '') {
            var pattern = new RegExp(/^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i);
            if (!pattern.test(email)) {
                $('#isEmailExist').addClass('field-validation-error');
                $('#isEmailExist').html('Not a valid Email.');
                return;
            }
            $.ajax(
            {
                type: "GET",
                cache: false,
                url: 'IsEmailExist',
                data: { email: this.value },
                dataType: "json",
                success: function (data) {
                    if (data == '1') {
                        $('#isEmailExist').addClass('field-validation-error');
                        $('#isEmailExist').html('This email already exists. Please choose another email.');
                    }
                    else if (data == '0') {
                        $('#isEmailExist').addClass('field-validation-success');
                        $('#isEmailExist').html('Email available.');
                    }
                    else {
                        $('#isEmailExist').html('');
                    }
                },
                error: function () {
                    $('#isEmailExist').html('');
                    GoToLogin();
                }
            });
        }
    });

    $("#filePrev").change(function () {
        var id = $(this).attr("id");
        var filesize = this.files[0].size;
        if (filesize > 1 * 1024 * 1024) {
            alert("- Only files with extensions " + (validExtensions.join("  ").toUpperCase()) + " and size upto 1MB are allowed.");
            return false;
        }
        ChangeFile("#userImage", "#filePrev");
    });

    var validExtensions = new Array(".jpg", ".png");
    function isValidExtension(ext) {
        var flag = false;
        for (var i = 0; i < validExtensions.length; i++) {
            if (validExtensions[i] == ext) {
                flag = true;
                break;
            }
        }
        return flag;
    }

    function ChangeFile(thumbID, fileID) {

        var imgTag = $(thumbID);
        var inputTag = $(fileID);

        var file = $(fileID).val();
        var ext = file.slice(file.lastIndexOf(".")).toLowerCase();
        if (!isValidExtension(ext)) {
            alert("- Only files with extensions " + (validExtensions.join("  ").toUpperCase()) + " and size upto 1MB are allowed.");
            return false;
        }
        $('<input>').attr({ type: $(inputTag).attr('type'), name: "name-clone" }).addClass("upload-clone").insertAfter(inputTag);
        $("<form>").attr({
            method: "post",
            id: "prototype",
            action: "@Url.Content("~/User/AjaxSubmit")"
        }).appendTo("body").hide();
        $('#prototype').attr((this.encoding ? 'encoding' : 'enctype'), 'multipart/form-data');
        $(inputTag).appendTo("#prototype").hide();
        $("#prototype").ajaxSubmit(function () {
            var d = new Date();
            $(imgTag)[0].src = "@Url.Content("~/User/ImageLoad?a=")" + d.getMilliseconds();
            $(inputTag).insertAfter('.upload-clone').show();
            $('.upload-clone').remove();
            $('#prototype').remove();

            return false;
        });
        return false;
    }

</script>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
