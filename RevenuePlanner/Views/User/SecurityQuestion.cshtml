@model RevenuePlanner.Models.SecurityQuestionListModel
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    ViewBag.Title = "Security Question";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"])

@section Sidebar {
    <div class="padding-content">
        <h4 class="text-shadow-black source-sans-prolight">Preferences</h4>
    </div>
    <ul class="nav nav-list nav-gray">
        <li class="item active">
            <a class="source-sans-probold inputs" href="#"><span></span>MY PROFILE</a>
        </li>
          <li class="item">@*uday for new screen*@
            <a class="source-sans-probold organization" href="#" id="aOrganization"><span></span>ORGANIZATION</a>
        </li>
        @if ((bool)ViewBag.IsIntegrationCredentialCreateEditAuthorized)   // Added by Sohel Pathan on 19/06/2014 for PL ticket #519 to implement user permission Logic
        {
            <li class="item">
                <a class="source-sans-probold integrations" href="#" id="aIntegrations"><span></span>INTEGRATIONS</a>
            </li>
        }
    </ul>
}

<!--success message-->
<div id="successMessage" class="alert hide alert-success message-position">
    <a class="close">×</a>
    <strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))
</div>
<!--success message-->
<!--error message-->
<div id="errorMessage" class="alert hide alert-error message-position">
    <a class="close">×</a>
    <strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))
</div>
<!--error message-->

<ul class="nav nav-tabs">
    <li class="source-sans-proregular">
        <h2 class="title-header">Security Question</h2>
    </li>
</ul>

<div class="padding-content cf source-sans-proregular" id="content">
    <div class="row">
        <div class="span2 width216">
            <div class="padding-right70">
                <ul class="nav nav-pills nav-stacked width216">
                    <li>
                        <a href="@Url.Action("Edit", "User", new { src = "myaccount" })">Account</a>
                    </li>
                    <li><a href="@Url.Action("Index", "User")">Team Members</a></li>
                    <li><a href="@Url.Action("Notifications", "User")">Notifications</a></li>
                    <li class="active"><a href="@Url.Action("SecurityQuestion", "User")">Security Question</a></li>
                    <li><a href="@Url.Action("ChangePassword", "User")">Change Password</a></li>
                </ul>
            </div>
        </div>
        <div class="span10 content-colum-right">
            @using (Html.BeginForm())
            {
                var strValidation = "^(?:|^[^<>~%^;/|]+)$";
                
                @Html.ValidationSummary(true)

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.SecurityQuestionList)
                    
                    <div class="selectBox UserProfile" id="ddlSecurityQuestionSelectBox1">
                        @Html.DropDownListFor(f => f.SecurityQuestionId, new SelectList(Model.SecurityQuestionList, "Value", "Text", Model.SecurityQuestionId), "Select Security Question", new { pattern = strValidation, @required = "required" })
                    </div>
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.Answer)

                    @Html.TextBoxFor(f => f.Answer, new { maxlength = "255", placeholder = "Answer", required = "required", type = "password" })
                    
                    @Html.ValidationMessageFor(model => model.Answer)
                </div>
                
                <div class="cf inputs-aligned-horizontal">
                    <div class="container-button">
                        <input id="btnSubmit" type="submit" style="margin-left:209px;" value="Update" title="Update" class="btn btn-blue btn-large text-shadow-blue source-sans-proregular" />
                    </div>
                </div>
                }
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $(".selectBox select").selectbox();
        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
            //$("#successMessage").slideUp(3000);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }


        $('#btnSubmit').click(function () {
            // Modified by Dharmraj Mangukiya, #557
            //CheckUserSession("#btnSubmit", true);
            //if (reason == 'user') {
            //    return false;
            //}
            /* Modified by Mitesh Vaishnav on 26-06-2014 for internal issue "Change dropdown styling"*/
            var isValid = true;
            if (($("#SecurityQuestionId option").eq(0).val() == "" && $("#SecurityQuestionId").val() == "")) {
                $("#ddlSecurityQuestionSelectBox1 .sbHolder").addClass("selectBoxError");
                isValid = false;
                return isValid;
            }
            else {
                $("#ddlSecurityQuestionSelectBox1 .sbHolder").removeClass("selectBoxError");
            }
            /*End: Modified by Mitesh Vaishnav on 26-06-2014 for internal issue "Change dropdown styling"*/
            $('#content :input').each(function () {
                if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                }
            });
        });

        $("#Answer").keyup(function () {
            var v = $(this).val();
            if ($(this).attr("type") != 'text') {
                $(this).attr("type", "text");
                $(this).val(v);
                this.setSelectionRange(this.value.length, this.value.length);
                this.scrollLeft = this.scrollWidth;
            }
        });

        //$("#Answer").focusin(function () {
        //    $(this).select();
        //});

    });

    // Added by :- Sohel Pathan on 13/5/2014 for PL #430 to setup integration screen
    $('#aIntegrations').click(function () {
        var url = '';
        url = '@Url.Content("~/ExternalService/Index")';
        window.location.href = url;
    });

    //Modified by Mitesh Vaishnav on 23-06-2014
    $('#aOrganization').click(function () {
        var url = '';
        url = '@Url.Action("ViewEditPermission", "Organization", new { Id = Sessions.User.UserId, Mode = "MyPermission" })';
        window.location.href = url;
    });

</script>
