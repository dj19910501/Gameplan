@model RevenuePlanner.Models.UserModel
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    ViewBag.Title = "Add User";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
    int clientId = ViewBag.CurrClientId;
    string client = (string)ViewBag.CurrClient;
    @Html.Hidden("hdnLoggedInUserRole", Sessions.User.RoleCode.ToString());     // Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517 
    //ViewBag.ModuleTitle = "MyProfile";   Commented by Rahul Shah on 11/09/2015 fo PL Ticket #1112*
    ViewBag.ModuleTitle = "Organization";   //Added by Rahul Shah on 11/09/2015 fo PL Ticket #1112*
    
}

@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"]) 
<style type="text/css"> 
 	    .inputs-aligned-horizontal .selectBox .sbHolder.sbToggleOpen { 
 	    z-index:inherit; 
 	    } 
 	    .sbHolder{ 
 	    z-index:inherit; 
 	    } 
 	</style> 
@section Sidebar {
    @Html.Partial("~/Views/shared/_preferences.cshtml")
}

<!--success message-->
<div id="successMessage" class="alert hide alert-success message-position">
    <a class="close">×</a>
    <strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))
</div>
<!--success message-->
<!--error message-->
<div id="errorMessage" class="alert hide alert-error message-position">
    <a class="close">×</a>
    <strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))
    <div id="PasswordValidatorMessage"></div> @*Added By Maitri Gandhi on 26/4/2016 for #2131*@
</div>
<!--error message-->
<div class="title-header source-sans-proregular margin-bottom25">
    <h2>Add New User</h2>
</div> @*#2312*@
@*<ul class="nav nav-tabs margin-bottom0">
    <li class="source-sans-proregular">
        <h2 class="title-header">Add New User</h2>
    </li>
</ul>*@
<a class="link-gray" href="@Url.Action("Index", "User")">« BACK TO LIST</a>

<div class="padding-content cf source-sans-proregular" id="content">
    <div class="row chrome-ie-height-720px">
        <div class="span2 content-colum-left content-img-user">
        </div>
        <div class="span10 content-colum-info-user content-colum-right">
            <div id="UserPasswordRequirements" class="alert password-requirement-box ">
                <strong>Password Requirements</strong> <br>
                <span id="spanMessageSuccess">
                    Password should contain  minimum 8 characters and  at least one lower case, one upper case, one digit and one special character
                </span>
            </div>

            @using (Html.BeginForm("Create", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.ValidationSummary(true)
                @Html.AntiForgeryToken()

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.FirstName)

                    @Html.TextBoxFor(model => model.FirstName, new { id = "txtFirstName" })
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.LastName)

                    @Html.TextBoxFor(model => model.LastName, new { id = "txtLastName" })
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.Email)

                    @Html.TextBoxFor(model => model.Email)
                    <span class="field-validation-error" id="isEmailExist"></span>
                    @Html.ValidationMessageFor(model => model.Email)
                </div>



                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.Password)

                    @Html.TextBoxFor(model => model.Password, new { maxlength = "50",placeholder = "Password (8 char. min)", type = "password" })
                    <span id="result"></span>
                    @Html.ValidationMessageFor(model => model.Password)
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ConfirmPassword)

                    @Html.TextBoxFor(model => model.ConfirmPassword, new { maxlength = "50",placeholder = "Confirm Password (8 char. min)", type = "password" })
                    <span id="match"></span>
                    @Html.ValidationMessageFor(model => model.ConfirmPassword)
                </div>
                // Start - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.Phone)

                    @Html.TextBoxFor(model => model.Phone)
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>
                // End - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.JobTitle)

                    @Html.TextBoxFor(model => model.JobTitle, new { id = "txtJobTitle" })
                    @Html.ValidationMessageFor(model => model.JobTitle)
                    @Html.Label("", Common.objCached.TitleContainHTMLString, new { @class = "field-validation-error selectbox-validation-message", id = "lblJobtitleInvalid", For = "txtJobTitle", style = "display:none;" })  @* Added by devanshi gandhi on 17/06/2016 for PL ticket #2276 *@


                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ProfilePhoto)
                    <div class="container-img">
                        <img id="userImage" src="@Url.Action("LoadUserImage", "User", new { UserGuid = new Guid(), width = 60, height = 60 })" class="pull-left">
                        <div class="pull-left">
                            <div class="btn-group">
                                <input name="file" id="filePrev" type="file" style="display: inline-block; width: 200px;" />
                            </div>
                            <small>JPG or PNG format only (size up to 1 MB).</small>
                        </div>
                    </div>
                </div>

                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.ClientId)

                    @*Modified by Dharmraj for ticket #583 on 7th July 2014 *@
                    @*@Html.Hidden("Client", client)*@
                    @Html.TextBox("txtClient", client, new { style = "background:#F2F2F2;", @readonly = "true", title = client })

                </div>
                <div class="cf inputs-aligned-horizontal">
                    @Html.LabelFor(model => model.RoleId)
                    @*Modified by :- Sohel on 27 March 2014 for ticket #334*@
                    <div class="selectBox UserProfile secondlast-ddl" id="ddlRoleIdSelectBox">
                        @Html.DropDownListFor(c => c.RoleId, new SelectList((System.Collections.IEnumerable)ViewData["Roles"], "RoleId", "Title"), "Please Select", new { @class = "hide" })
                    </div>
                    @Html.ValidationMessageFor(model => model.RoleId)
                    @Html.Label("", Common.objCached.RoleRequired, new { @class = "field-validation-error selectbox-validation-message", id = "lblRoleIdRequired" })
                </div>

                // Start - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517

                <div class="cf inputs-aligned-horizontal" id="divManager">
                    @Html.Label("Manager")
                    <div class="selectBox UserProfile last-ddl" id="ddlManagerIdSelectBox">
                        @if (ViewData["ManagerList"] != null)
                        {
                            @Html.DropDownListFor(c => c.ManagerId, new SelectList((System.Collections.IEnumerable)ViewData["ManagerList"], "ManagerId", "ManagerName"), "Please Select", new { @class = "hide" })
                        }
                        else
                        {
                            @Html.DropDownListFor(c => c.ManagerId, Enumerable.Empty<SelectListItem>(), "Please Select", new { @class = "hide" })
                        }
                    </div>
                    @Html.Label("", Common.objCached.ManagerRequired, new { @class = "field-validation-error selectbox-validation-message", id = "lblManagerIdRequired" })
                </div>
                @*}*@
                // End - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517

                <div class="cf inputs-aligned-horizontal">
                    <label></label>
                    @*<div class="container-button">*@ @* commented by Bhumika to align Save btn *@
                    <input id="btnSubmit" type="submit" value="Save" title="Save" class="btn btn-blue width75px btn-save source-sans-proregular" style="margin-left: 20px;" />
                    @*</div>*@
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        myApp.hidePleaseWait();
        $('#lblClientIdRequired').hide();
        $('#lblRoleIdRequired').hide();
        $('#lblManagerIdRequired').hide();

        //Added by :- Sohel on 27 March 2014 for ticket #334
        $(".selectBox select").selectbox();

        $('.sbHolder .sbOptions li').click(function () {
            SetCreateddlSelectedItem(this);
        });

        $('.sbHolder .sbOptions li').keyup(function () {
            SetCreateddlSelectedItem(this);
        });

        $('.sbHolder .sbSelector').bind("DOMSubtreeModified", function () {
            SetCreateddlSelectedItem($(this).parent().find('ul li.setFocusli'));
        });

        function SetCreateddlSelectedItem(obj) {
            var id = $(obj).parent().parent().parent().find('select').attr('id');
            $('#' + id + ' option').each(function () {
                $(this).removeAttr('selected');
            });

            var selectedOption = $(obj).find('a').attr('rel');

            $("#" + id + " option").filter(function (index) {
                return $(this).attr("value") === selectedOption;
            }).attr("selected", "selected");
        }

        $('#btnSubmit').click(function () {
            //added by nishant Sheth 
            if ($("form").valid()) {
            myApp.showPleaseWait();
            }
            var isValid = true;

            //ClientId Dropdown Required Validtion
            if (($("#ClientId option").eq(0).val() == "" && $("#ClientId").val() == "")) {
                $("#ddlClientIdSelectBox .sbHolder").addClass("selectBoxError");
                $('#lblClientIdRequired').show();
                isValid = false;
            }
            else {
                $("#ddlClientIdSelectBox .sbHolder").removeClass("selectBoxError");
                $('#lblClientIdRequired').hide();
            }

            //RoleID Dropdown Required Validtion
            if (($("#RoleId option").eq(0).val() == "" && $("#RoleId").val() == "")) {
                $("#ddlRoleIdSelectBox .sbHolder").addClass("selectBoxError");
                $('#lblRoleIdRequired').show();
                isValid = false;
            }
            else {
                $("#ddlRoleIdSelectBox .sbHolder").removeClass("selectBoxError");
                $('#lblRoleIdRequired').hide();
            }

            // Start - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517 
                    if (($("#ManagerId option").eq(0).val() == "" && $("#ManagerId").val() == "")) {
                        $("#ddlManagerIdSelectBox .sbHolder").addClass("selectBoxError");
                        $('#lblManagerIdRequired').show();
                        isValid = false;
                    }
                    else {
                        $("#ddlManagerIdSelectBox .sbHolder").removeClass("selectBoxError");
                        $('#lblManagerIdRequired').hide();
                    }
            // End - Added by :- Sohel Pathan on 17/06/2014 for PL ticket #517 
                    if (isValid == false) {
                        myApp.hidePleaseWait();
                    }
            return isValid;
        });

        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
           // $("#successMessage").slideUp(3000);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }

        $('#btnSubmit').click(function () {
            $('#content :input').each(function () {
                if (($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') && this.id != 'Phone') {     // Modified by :- Sohel Pathan on 17/06/2014 for PL ticket #517 
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                }
            });
            //Added By Maitri Gandhi on 8/4/2016 for #2105
            if ($('#result').text() != '' && $('#result').text().toLowerCase() == 'too short') {
                $('#result').removeClass();
                $('#result').addClass('check-icon-red');
                $('#result').prop('title', 'Minimum 8 characters required');
                $('#Password').prop('title', 'Minimum 8 characters required');
                $("#Password").addClass("error");
                myApp.hidePleaseWait();
                return false;
            }

            if ($('#result').text() != '' && $('#result').text().toLowerCase() == 'weak') {
                $('#result').removeClass();
                $('#result').addClass('check-icon-red')
                $('#result').prop('title', 'Password should contain at least one lower case, one upper case, one digit and one special character');
                $('#Password').prop('title', 'Password should contain at least one lower case, one upper case, one digit and one special character');
                $("#Password").addClass("error");
                myApp.hidePleaseWait();
                return false;
            }

            if ($('#match').text() != '' && $('#match').text().toLowerCase() == 'don\'t match') {
                $('#match').removeClass();
                $('#match').addClass("check-icon-red");
                myApp.hidePleaseWait();
                return false;
            }

            if ($('#Password').val().length < 8 && $('#Password').val().length > 0) {
                $('#result').removeClass();
                $('#result').addClass('check-icon-red');
                myApp.hidePleaseWait();
                return false;
            }

            if ($('#ConfirmPassword').val().length < 8 && $('#ConfirmPassword').val().length > 0) {
                $('#match').removeClass();
                $('#match').addClass("check-icon-red");
                myApp.hidePleaseWait();
                return false;
            }
        });

        //function to add or remove class ERROR when inputs text are empty.
        $('input').blur(function () {
            if (($(this).attr('type') == 'text' || $(this).attr('type') == 'password') && this.id != 'Phone') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                }
                else if (this.id != 'Email' && this.id != 'Password' && this.id!='ConfirmPassword') {
                    if (CheckHtmlTag($(this).val()) == false) {
                        var label = $("label[for='" + $(this).attr('id') + "']");
                        $(label).show();
                        $(this).addClass("error");
                    }

                    else {

                        var label = $("label[for='" + $(this).attr('id') + "']");
                        $(label).hide();
                        $(this).removeClass("error");

                    }
                }
                else {
                  
                    $(this).removeClass("error");
                }
            }
        });

        $('select').blur(function () {
            if ($(this).val() == '') {
                $(this).addClass("error");
            } else {
                $(this).removeClass("error");
            }
        });

        $("#ClientId").change(function () {
            var clientId = $(this).val();
            if (clientId != "") {
                loadManagers(clientId);     // Added by Sohel Pathan on 03/07/2014 for Functional review points.
                $('#lblClientIdRequired').hide();
                $('#lblRoleIdRequired').hide();
                $('#lblManagerIdRequired').hide();
            }
            else {
                $("#ddlClientIdSelectBox .sbHolder").addClass("selectBoxError");
                $('#lblClientIdRequired').show();
            }
        });
                
        // Start - Added by Sohel Pathan on 03/07/2014 for Functional review points.
        function loadManagers(clientId) {
            if (clientId != "" && clientId != "0" && clientId != "null") {
                $.getJSON("@Url.Content("~/User/GetManagers")", { id: clientId },
                function (managerData) {
                    var select = $("#ManagerId");
                    select.empty();
                    $.each(managerData, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.ManagerId,
                            text: itemData.ManagerName
                        }));
                    });
                    if ($("#ManagerId option").eq(0).val() != "") {
                        $("#ManagerId option").eq(0).before($("<option></option>").val("").text("Please select"));
                    }
                    if ($("#ManagerId option").eq(0).val() == undefined) {
                        $("#ManagerId").append($("<option></option>").val("").text("Please select"));
                    }
                    $("#ManagerId").val("");

                    $(".selectBox select").selectbox('detach');
                    $(".selectBox select").selectbox("attach");
                });
            }
        }
        // End - Added by Sohel Pathan on 03/07/2014 for Functional review points.
    });
    $('#Email').keyup(function () {
        $('#isEmailExist').html('');
    });
    $('#Email').blur(function () {
        $('#isEmailExist').html('');
        $('#isEmailExist').removeClass();

        var email = this.value;
        if (email != null && email != '') {
            if ($("span[data-valmsg-for=Email]").length > 0) {
                if ($("span[data-valmsg-for=Email]").find('span:eq(0)').length > 0) {
                    var messageSpan = $("span[data-valmsg-for=Email]").find('span:eq(0)').html();
                    if (messageSpan.length > 0) {
                        return false;
                    }
                }
            }
            $.ajax(
            {
                type: "GET",
                cache: false,
                url: 'IsEmailExist',
                data: { email: this.value },
                dataType: "json",
                success: function (data) {
                    if (data == '1') {
                        $('#isEmailExist').addClass('field-validation-error');
                        $('#isEmailExist').html('@Common.objCached.EmailAlreadyExits');
                    }
                    else if (data.serviceUnavailable != 'undefined' && data.serviceUnavailable == '#') {
                        //// Function to redirect to login page on unavailability of web service.
                        //// Added By: Maninder Singh Wadhva on 11/24/2014.
                        //// Ticket: 942 Exception handeling in Gameplan.
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    else if (data == '0') {
                        $('#isEmailExist').addClass('field-validation-success');
                        $('#isEmailExist').html('@Common.objCached.EmailAvailable');
                    }
                    else {
                        $('#isEmailExist').html('');
                    }
                },
                error: function () {
                    $('#isEmailExist').html('');
                    GoToLogin();
                }
            });
        }
    });

    $("#filePrev").change(function () {
        var id = $(this).attr("id");
        var filesize = this.files[0].size;
        if (filesize > 1 * 1024 * 1024) {
            alert("@Common.objCached.InvalidProfileImage");
            return false;
        }
        ChangeFile("#userImage", "#filePrev");
    });

    var validExtensions = new Array(".jpg", ".png");
    function isValidExtension(ext) {
        var flag = false;
        for (var i = 0; i < validExtensions.length; i++) {
            if (validExtensions[i] == ext) {
                flag = true;
                break;
            }
        }
        return flag;
    }

    function ChangeFile(thumbID, fileID) {

        var imgTag = $(thumbID);
        var inputTag = $(fileID);

        var file = $(fileID).val();
        var ext = file.slice(file.lastIndexOf(".")).toLowerCase();
        if (!isValidExtension(ext)) {
            alert("@Common.objCached.InvalidProfileImage");
            return false;
        }
        $('<input>').attr({ type: $(inputTag).attr('type'), name: "name-clone" }).addClass("upload-clone").insertAfter(inputTag);
        $("<form>").attr({
            method: "post",
            id: "prototype",
            action: "@Url.Content("~/User/AjaxSubmit")"
        }).appendTo("body").hide();
        $('#prototype').attr((this.encoding ? 'encoding' : 'enctype'), 'multipart/form-data');
        $(inputTag).appendTo("#prototype").hide();
        $("#prototype").ajaxSubmit(function () {
            var d = new Date();
            $(imgTag)[0].src = "@Url.Content("~/User/ImageLoad?a=")" + d.getMilliseconds();
            $(inputTag).insertAfter('.upload-clone').show();
            $('.upload-clone').remove();
            $('#prototype').remove();

            return false;
        });
        return false;
    }

    $('#Password').keyup(function (event) {
        $('#result').removeClass()
        $('#result').html('')
        if ($('#Password').val() != '')
            $('#result').html(checkStrength($('#Password').val()))
    });
    //Added By Maitri Gandhi on 26/4/2016 for #2131
    $('#Password').focusout(function () {
        var result = checkStrength($('#Password').val());
        if (result == "Too short") {
            $("#ErrMsg").val('Minimum 8 characters required');
            $("#PasswordValidatorMessage").text('Minimum 8 characters required.');
            $("#errorMessage").slideDown(400);
        }
        else if (result == "Strong") {
            $("#ErrMsg").val('');
            $("#PasswordValidatorMessage").text('');
            $("#errorMessage").slideUp(400);
        }
        else if (result == "Good") {
            $("#ErrMsg").val('');
            $("#PasswordValidatorMessage").text('');
            $("#errorMessage").slideUp(400);
        }
        else if (result == "Weak") {
            $("#ErrMsg").val('Password should contain at least one lower case, one upper case, one digit and one special character.');
            $("#PasswordValidatorMessage").text('Password should contain at least one lower case, one upper case, one digit and one special character.');
            $("#errorMessage").slideDown(400);
        }
        //added by nishant Sheth 
        if ($("#Password").val() == '') {
            $("#result").removeClass();
        }
        //end
    });
    $('#ConfirmPassword').keyup(function (event) {
        $('#match').removeClass()
        $('#match').html('')
        if (($('#ConfirmPassword').val() != '') && ($('#Password').val() != ''))
            $('#match').html(checkMatch($('#ConfirmPassword').val(), $('#Password').val()))
    });

    function checkMatch(password1, password2) {
        $('#match').removeClass()
        if (password1 == password2) {
            $('#match').addClass('check-icon-green')
            return "Match";
        } else {
            $('#match').addClass('check-icon-red')
            return "Don't match";
        }
    }

    function checkStrength(password) {

        //initial strength
        var strength = 0
        //Modified By Maitri Gandhi on 8/4/2016 for #2105
        //if the password length is less than 6, return message.
        if (password.length < 8) {
            $('#result').removeClass()
            $('#result').addClass('check-icon-red');
            $('#result').prop('title', 'Minimum 8 characters required');
            $('#Password').prop('title', 'Minimum 8 characters required');
            return 'Too short'
        }

       
        //Added By Maitri Gandhi on 4/7/2016
        if (password.match(/([a-z])/) && password.match(/([A-Z])/) && password.match(/([0-9])/) && password.match(/([@@,#,$,%,^,&,*,_,+,|,~,!,?,.,\-,=,\\,`,:,\",;,',(,),{,},\],\[,<,>,\/])/)) {
            if (password.match(/(.*[@@,#,$,%,^,&,*,_,+,|,~,!,?,.,\-,=,\\,`,:,",;,',(,),{,},\],\[,<,>,\/].*[@@,#,$,%,^,&,*,_,+,|,~,!,?,.,\-,=,\\,`,:,\",;,',(,),{,},\],\[,<,>,\/])/)) {
                $('#result').removeClass()
                $('#result').addClass('check-icon-green')//strong
                $('#result').prop('title', '');
                $('#Password').prop('title', '');
                return 'Strong'
            }
            $('#result').removeClass()
            $('#result').addClass('check-icon-green')//good)
            $('#result').prop('title', '');
            $('#Password').prop('title', '');
            return 'Good'
        }
        else {
            $('#result').removeClass()
            $('#result').addClass('check-icon-red')//weak
            $('#result').prop('title', 'Password should contain at least one lower case, one upper case, one digit and one special character');
            $('#Password').prop('title', 'Password should contain at least one lower case, one upper case, one digit and one special character');
            return 'Weak'
        }

        
    }

    $("#RoleId").change(function () {
        var RoleId = $(this).val();
        if (RoleId != "") {
            $("#ddlRoleIdSelectBox .sbHolder").removeClass("selectBoxError");
            $('#lblRoleIdRequired').hide();
        }
        else {
            $("#ddlRoleIdSelectBox .sbHolder").addClass("selectBoxError");
            $('#lblRoleIdRequired').show();
        }
    });

    $("#ManagerId").change(function () {
        var ManagerId = $(this).val();
        if (ManagerId != "") {
            $("#ddlManagerIdSelectBox .sbHolder").removeClass("selectBoxError");
            $('#lblManagerIdRequired').hide();
        }
        else {
            $("#ddlManagerIdSelectBox .sbHolder").addClass("selectBoxError");
            $('#lblManagerIdRequired').show();
        }
    });
</script>
