@model IEnumerable<RevenuePlanner.Models.UserNotification>
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    ViewBag.Title = "Notification Settings";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
    int SMCount = (int)ViewBag.SMCount;
    int AMCount = (int)ViewBag.AMCount;
    ViewBag.PageTitle = "Notifications";//Added by Mitesh Vaishnav on 10-07-2014 for functional review point 49
    ViewBag.ModuleTitle = "MyProfile";//Added by Mitesh Vaishnav on 10-07-2014 for functional review point 49
}

@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"])

@section Sidebar {
    @Html.Partial("~/Views/shared/_preferences.cshtml")
}

<style>
    
  .toggle.NotificationToggle, .toggle-on.NotificationToggle, .toggle-off.NotificationToggle { border-radius: 20px;-webkit-border-radius: 20px;-ms-border-radius: 20px;}
  .toggle.NotificationToggle .toggle-handle { border-radius: 20px;-webkit-border-radius: 20px;-ms-border-radius: 20px; }
  .NotificationToggle .toggle-group { transition: left 0.1s; -webkit-transition: left 0.1s; }
  .toggle.NotificationToggle {min-height: 25px !important; min-width:45px !important}
  .NotificationToggle .toggle-group label{font-size:10px; padding:2px 8px}

    /* Add to solve Chrome Browser issue of on/off button radius #2296 - Bhumika*/
    .btn.btn-success, .btn.toggle-off, .btn.toggle-handle, .btn.off {
        backface-visibility: visible;
        box-shadow: none;/*0 1px 0 rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.05);*/
        border-color:#ccc; /*rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);*/
        text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
    }

    .btn.NotificationToggle {
        border-style: solid;
        border-width: 1px;
        box-shadow:none; /*0 1px 0 rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.05)*/
    }
    .NotificationToggle.btn-success{border-color:#89cede;}
    .NotificationToggle .btn.btn-success {
        background-image: none; /*linear-gradient(to bottom, #62c462, #51a351)*/
        background-color: #89cede;
        
    }

    .NotificationToggle .btn.toggle-off {
        box-shadow:none ;/*0 2px 4px rgba(0, 0, 0, 0.15) inset, 0 1px 2px rgba(0, 0, 0, 0.05)*/
        background-color: #eee;
        background-image: none;
        padding-left:14px;
    }
    .NotificationToggle .toggle-on.btn {
    padding-right: 16px;
}
       .NotificationToggle .btn.toggle-off:hover {
            color: #333;
        }

    .NotificationToggle .btn.toggle-handle {
        background-color: #fff;
        background-image: none;/*linear-gradient(to bottom, #fff, #e6e6e6);*/
    }

      .NotificationToggle   .btn.toggle-handle:hover, .NotificationToggle .btn.toggle-handle:focus {
            background-position: 0 -15px;
            color: #333;
            text-decoration: none;
            transition: background-position 0.1s linear 0s;
        }
</style>

@if (TempData["SuccessMessage"] != null)
{
    if (!Convert.ToString(TempData["SuccessMessage"]).ToLower().Contains("model"))
    {

    <!--success message-->

        <div id="successMessage" class="alert hide alert-success message-position">
            <a class="close">×</a>
            <strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))
        </div>

    <!--success message-->
        TempData["SuccessMessage"] = "";
    }
}

@if (TempData["ErrorMessage"] != null)
{
    if (!Convert.ToString(TempData["ErrorMessage"]).ToLower().Contains("model"))
    {

    <!--error message-->

        <div id="errorMessage" class="alert hide alert-error message-position">
            <a class="close">×</a>
            <strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))
        </div>

    <!--error message-->
        TempData["ErrorMessage"] = "";
    }
}
<!--error message-->
<div class="title-header source-sans-proregular margin-bottom25">
    <h2>Notifications</h2>
</div> @*#2312*@
@*<ul class="nav nav-tabs">
        <li class="source-sans-proregular">
            <h2 class="title-header">My Notifications</h2>
        </li>
    </ul>*@

<div class="padding-content cf source-sans-proregular" id="content">
    <div class="row">
        @Html.Partial("~/Views/User/_myprofile.cshtml")
        <div class="span10 content-colum-right  margin-left44">
            @*Modified by komal rawal on 16-08-2016 regarding #2468 not to display system messages*@ 
            @*@if (SMCount > 0)
            {
                <div class="pref-msg-row">
                    <h4 class="pref-msg-header">System Messages</h4>

                    @foreach (var item in Model)
                    {
                        var checkBoxIdSMSel = "chk" + item.NotificationId;
                        var checkBoxIdSM = "chk" + item.NotificationId;
                        var notificationType = item.NotificationType;

                        if (notificationType.ToString().ToLower() == Enums.NotificationType.SM.ToString().ToLower())
                        {
                            if (item.IsSelected)
                            {
                                <div class="wraper-checkbox">
                                    <span> @item.NotificationTitle</span><input id="@checkBoxIdSMSel" value="@item.NotificationId" checked="checked" class="btn-blue" type="checkbox" data-toggle="toggle" data-onstyle="success" data-style="NotificationToggle">
                                </div>

                            }
                            else
                            {
                                <div class="wraper-checkbox">
                                    <span> @item.NotificationTitle</span><input id="@checkBoxIdSM" value="@item.NotificationId" class="btn-blue" type="checkbox" data-toggle="toggle" data-onstyle="success" data-style="NotificationToggle">
                                </div>
                            }
                        }
                    }

                </div>
            }*@

            @if (AMCount > 0)
            {
                <div class="pref-msg-row">
                    <h4 class="pref-msg-header">Activity Messages</h4>

                    @foreach (var item in Model)
                    {
                        var checkBoxIdAMSel = "chk" + item.NotificationId;
                        var checkBoxIdAM = "chk" + item.NotificationId;
                        var notificationType = item.NotificationType;

                        if (notificationType.ToString().ToLower() == Enums.NotificationType.AM.ToString().ToLower())
                        {
                            if (item.IsSelected)
                            {
                                <div class="wraper-checkbox">
                                    <span>@item.NotificationTitle</span><input id="@checkBoxIdAMSel" value="@item.NotificationId" checked="checked" class="btn-blue" type="checkbox" data-toggle="toggle" data-onstyle="success" data-style="NotificationToggle">
                                </div>
                            }
                            else
                            {
                                <div class="wraper-checkbox">
                                    <span> @item.NotificationTitle </span>  <input id="@checkBoxIdAM" value="@item.NotificationId" class="btn-blue" type="checkbox" data-toggle="toggle" data-onstyle="success" data-style="NotificationToggle">
                                </div>
                            }

                        }
                    }

                </div>
            }

            <div class="cf inputs-aligned-horizontal">
                <div class="container-button">
                    <input type="submit" value="Save" title="save" id="saveNotifications" class="btn btn-blue btn-save" />
                </div>
            </div>
        </div>

    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {

        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        /*close x event on message*/
        $(".close").click(function (e) {
            e.stopPropagation();
            e.preventDefault();
            $(this).closest(".alert").slideUp(400);
        });

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }

    });

    $('#saveNotifications').click(function () {
        var checkedList = '';
        $('input[type=checkbox]').each(function () {
            if (this.checked) {
                checkedList += $(this).val() + ',';
            }
        });
        $.ajax(
       {
           type: "GET",
           cache: false,
           url: 'SaveNotifications',
           data: { notifications: checkedList.substring(0, checkedList.length - 1) },
           success: function (data) {
               window.location = "@Url.Content("~/User/Notifications")";
           }
       });
    });
</script>
