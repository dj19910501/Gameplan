@using RevenuePlanner.Helpers;

@model RevenuePlanner.Models.FinanceModel

<style type="text/css">
    /*Commented By Maitri Gandhi on 9/3/2016 for #2049
    div.xhdr {
        height: auto !important;
        width: 100.7% !important;
    }

    div.objbox {
        width: 100.7% !important;
    }
    div.objbox {
        height: 100% !important;
    }

    div.gridbox {
        height: 100% !important;
    }*/

    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
        padding-left: 0px !important;
        /*padding-right: 7px !important;*/
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }
    /*Added by Maitri*/
    .dhxgrid_sort_desc, .dhxgrid_sort_asc
    { /*Only for this page*/
        margin-left:-48px;
        margin-top:9px;
    }
</style>
<div  class="grid-full-view"><div id="gridbox" style="width:100%; background-color:white;" class="gridViewGrid"></div></div>
<script type="text/javascript">
    var RowIDs = {
        IDs: []
    }
    var myTreeGrid;
    //  var GlobalBudgetId = '';
    //var GlobalEditLevel = '';
    var IsAddNew = false;
    var _isBudgetCreateEdit = '', _isForecastCreateEdit = '';
    var ValidParentId = 0;
    var ValidColumnId = 0;
    var ValidRowId = 0;
    var CustColumnsList;
    var ColumneditLevel;
    var BudgetColName;
    var ForecastColName;
    var PlanColName;
    var ActualColName;
    var GridData = "";
    var EditPermission = "";
   // var mygrid;
    var AllocatedBy;
    var combo;
    $(document).ready(function () {

        GlobalBudgetId = '@ViewBag.BudgetId';
        GlobalEditLevel = '@ViewBag.EditLevel';
        
        if (GlobalEditLevel == "Budget") {
            GetListOfBudgetName();
        }
        else {
            GetListofForecastNames($("#hdn_BudgetDetailId").val());
        }
        pageName = "EditBudget";
        _isBudgetCreateEdit = '@ViewBag.IsBudgetCreate_Edit';
        _isForecastCreateEdit = '@ViewBag.IsForecastCreate_Edit';
        ShowHideControls("EditBudget");
        $("#divGridView").show();
        $("#dvNoData").hide();
        //ShowHideColumns($("#chkPlan"));
        var GridData = "";
        AllocatedBy = $('#ddlRevenueTimeFrame option:selected').val();
        //    alert(AllocatedBy);

        //if (AllocatedBy == 'quarters') {
        //    AllocatedBy = true;
        //}
        //else {
        //    AllocatedBy = false;
        //}
        LoadBudgetGrid(AllocatedBy);

        //var ChkPlan = $("#chkPlan");
        //var ChkBudget = $("#chkBudget");
        //var ChkForeCast = $("#chkForeCast");
        //var ChkActual = $("#chkActual");
        //ShowHideColumns(ChkPlan[0]);
        //ShowHideColumns(ChkBudget[0]);
        //ShowHideColumns(ChkForeCast[0]);
        //ShowHideColumns(ChkActual[0]);
        GetFinanceHeaderValue(0, false);
        //ShowHideColumns($("#chkBudget"));
        //ShowHideColumns($("#chkForeCast"));
        //ShowHideColumns($("#chkActual"));
        //myApp.hidePleaseWait();
        //Commented by Rahul Shah desc: it override dropdown lable value
        //$("#btnMultiselect_ddlParentFinance").find("span").text(htmlDecode($("#btnMultiselect_ddlParentFinance").find("span").text()));
        //$("#btnMultiselect_ddlChildFinance").find("span").text(htmlDecode($("#btnMultiselect_ddlChildFinance").find("span").text()));

    });

    function LoadBudgetGrid(AllocatedBy) {

        myApp.showPleaseWait();
        var GridWidth = $("#gridbox").width();
        RevnueTimeFrameChange = true;


        dhtmlxValidation.isCustomNameValid = function (data) {
            var isrepeat = true;
            if (ValidParentId != 0) {

                var childitems = myTreeGrid.getSubItems(ValidParentId).split(',');
                if (data.trim() == '' || data.trim() == null) {
                    isrepeat = false;
                    IsValid = false;
                } else {
                    $.each(childitems, function () {

                        if (this.toString() != ValidRowId.toString()) {
                            var ColCurrentValue = myTreeGrid.cells(this, ValidColumnId).getValue();
                            if (data.toLowerCase().trim() == ColCurrentValue.toLowerCase().trim()) {
                                isrepeat = false;
                                IsValid = false;
                            }
                        }
                    });
                }
            }
            else {
                if (data != ValidOldValue.trim()) {
                    var BudgetIndex = BudgetDetails.Name.indexOf(data.toLowerCase().trim());
                    if (BudgetIndex >= 0) {

                        isrepeat = false;
                        IsValid = false;
                    }
                }

            }
            return isrepeat;
        };

        myTreeGrid = new dhtmlXGridObject('gridbox');
        myTreeGrid.setImagePath("@Url.Content("~/codebase/imgs/")");
        //myTreeGrid.setImageSize(1, 1);
        
       // var Columnsetval = $("#ddlColumnSet").val();
        var ColumnsCheckBox = $("#multipleselect_budget-select").find('label[class^="ui-corner-all"]').find("input");
        var CheckedColumns = "";
        $.each(ColumnsCheckBox, function () {
            var a = $(this).attr("aria-selected");
            if (a != undefined && a == "true") {
                CheckedColumns += $(this).val() + ",";
            }
            
        });
        CheckedColumns = CheckedColumns.slice(0, -1);
        $.ajax({
            dataType: 'json',
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Finance/EditBudgetGridData/")',
            data: {
                BudgetId: GlobalBudgetId,
                IsQuaterly: AllocatedBy,
                EditLevel: GlobalEditLevel,
                //ColumnSetId: Columnsetval,
                BudgetCreateEdit: _isBudgetCreateEdit,
                ForecastCreateEdit: _isForecastCreateEdit,
                ListofCheckedColums: CheckedColumns,
                EditPermission: GlobalEditPermission
            },
            success: function (data) {

                GridData = data;
                //var mainGridData = $('<div/>').html(data).text(); // Decode Html content.
                //GridData = (mainGridData.toString().replace(/&quot;/g, '"'));
                //alert(GridData);
                //alert(Data1);

                //myTreeGrid.enableCellIds(true);

            }

        });
        CustColumnsList = GridData.CustColumnsList;

        ColumneditLevel = GridData.ColumneditLevel;

        BudgetColName = GridData.BudgetColName;

        ForecastColName = GridData.ForecastColName;

        PlanColName = GridData.PlanColName;

        ActualColName = GridData.ActualColName;

        myTreeGrid.attachHeader(GridData.attachHeader);

        myTreeGrid.setColumnIds(GridData.setColumnIds);

        myTreeGrid.setColValidators(GridData.setColValidators);

        myTreeGrid.enableTreeCellEdit(GridData.enableTreeCellEdit);

        myTreeGrid.setColumnsVisibility(GridData.setColumnsVisibility);


        myTreeGrid.init(); 
//Added by Maitri Gandhi for #2049 on 8/3/2016        
        myTreeGrid.attachEvent("onDistributedEnd", function () {
            if (Maintained != 0) {
                var ID = myTreeGrid.getRowId(Maintained);
                if (ID != undefined || ID == '') {
                    myTreeGrid.showRow(ID.toString());                    
                }
            }
        });
        myTreeGrid.enableDistributedParsing(true, 10, 300);
        myTreeGrid.setImageSize(1, 1);
        myTreeGrid.setSkin("dhx_skyblue");
        //GridData = 'GridData';
        myTreeGrid.parse(GridData, "json");
        var titleIndx = myTreeGrid.getColIndexById('Title');
        myTreeGrid.forEachRow(function (rowid) {
            if (GlobalEditLevel != 'Budget') {
                var locked = myTreeGrid.getUserData(rowid, "row_locked");


                myTreeGrid.forEachCell(rowid, function (cellObj, ind) {
                    //execute code for each cell in a row with the id "row1"
                    //cellObj - related cell object
                    //ind - column index
                    var headerLable = myTreeGrid.getColLabel(ind, 1);
                    var LineItemIndex = 0;
                    if (headerLable == "Line Items") {
                        LineItemIndex = myTreeGrid.getColIndexById("LineItems");
                    }
                    else {
                        LineItemIndex = ind;
                    }
                    var CustColExist = CustColumnsList.indexOf(headerLable);
                    if (headerLable != "Task Name" && LineItemIndex != 2) {
                        if (locked == 1) {
                            myTreeGrid.cells(rowid, ind).setDisabled(true);
                            myTreeGrid.setCellTextStyle(rowid, ind, "color:gray;");
                        }
                        else {
                            //var headerLable = myTreeGrid.getColLabel(ind, 1);
                            //#region start
                            if (headerLable.toLowerCase() != ColumneditLevel.toLowerCase() && !(CustColExist >= 0)) {
                                myTreeGrid.cells(rowid, ind).setDisabled(true);
                                myTreeGrid.setCellTextStyle(rowid, ind, "color:gray;");
                            }
                            //#endregion end
                        }
                    }
                });

            }
            else {
                myTreeGrid.forEachCell(rowid, function (cellObj, ind) {
                    //execute code for each cell in a row with the id "row1"
                    //cellObj - related cell object
                    //ind - column index
                    var headerLable = myTreeGrid.getColLabel(ind, 1);
                    var LineItemIndex = 0;
                    if (headerLable == "Line Items") {
                        LineItemIndex = myTreeGrid.getColIndexById("LineItems");
                    }
                    else {
                        LineItemIndex = ind;
                    }
                    var CustColExist = CustColumnsList.indexOf(headerLable);
                    if (headerLable.toLowerCase() != ColumneditLevel.toLowerCase() && headerLable != "Task Name" && LineItemIndex != 2 && !(CustColExist >= 0)) {
                        myTreeGrid.cells(rowid, ind).setDisabled(true);
                        myTreeGrid.setCellTextStyle(rowid, ind, "color:gray;");
                    }
                });
            }
            var isTitleEdit = myTreeGrid.getUserData(rowid, "isTitleEdit");
            if (isTitleEdit == "0") {
                myTreeGrid.cells(rowid, titleIndx).setDisabled(true);
            }

        });
        //myTreeGrid.setUserData("id");
        $("#gridbox").find("table").first().find("tr").next().last().find("td").first().css("text-align", "center");

        var IsValid = true;

        myTreeGrid.attachEvent("onValidationError", function (id, ind, value) {
            ValidOldValue = "";
            IsValid = false;
            return true;
        });
        myTreeGrid.attachEvent("onValidationCorrect", function (id, index, value, rule) {
            ValidOldValue = "";
            IsValid = true;
        });
        myTreeGrid.attachEvent("onEditCancel", function (id, value) {
            
            //myTreeGrid.cells(id, 0).setCValue("invalid");
            //alert('');
            RevnueTimeFrameChange = true;
        });
        myTreeGrid.attachEvent("onCellChanged", function (id, ind, value) {

            //if (!myTreeGrid._ignore_next) {
            //    myTreeGrid._ignore_next = true;
            if (parseInt(value) == 0) {
                // myTreeGrid.cells(id, ind).setValue("0");
            }
            //    myTreeGrid._ignore_next = false;
            //}
        });

        //myTreeGrid.attachEvent("onResizeEnd", function (obj) {
        //    $("#gridbox").find("table").css("width", GridWidth);
        //});

        //myTreeGrid.attachEvent("onResizeEnd", function (cInd, cWidth, obj) {
        //    $("#gridbox").find("table").css("width", GridWidth);
        //});
        //IsValid = true;
        myTreeGrid.enableAutoHeight(false); //Modified By Maitri Gandhi on 9/3/2016 for #2049
        myTreeGrid.enableAutoWidth(false);
        myTreeGrid.attachEvent("onEditCell", function (stage, rId, cInd, nValue, oValue) {

            if (!_isNewRowAdd) {
                RevnueTimeFrameChange = false;
            }
            combo = myTreeGrid.getCombo(cInd);
            ValidParentId = myTreeGrid.getParentId(rId);
            ValidColumnId = cInd;
            ValidRowId = rId;
            //Added by Maitri Gandhi for #2049 on 8/3/2016
            ItemIdForFocus = myTreeGrid.getRowIndex(ValidRowId);    
            Maintained = ItemIdForFocus;
            var ColumnName = myTreeGrid.getColLabel(cInd, 1);
            if (stage == 1) {
                if (ColumnName != "Task Name") {
                    $(".dhx_combo_edit").off("keydown");
                    $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                    myTreeGrid.editor.obj.onkeypress = function (e) {

                        e = e || window.event;
                        if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                            var text = this.value;
                            if (text.length > 10) { //max length of the text
                                return false;
                            }
                        }
                    }

                    var psv = myTreeGrid.cell;
                    this.editor.obj.value = (psv.title.replace(/,/g, ""));
                } else if (ColumnName == "Task Name") {
                    //$(".dhx_combo_edit").off("keydown");
                    $(".dhx_combo_edit").on('keydown', (
                    myTreeGrid.editor.obj.onkeypress = function (e) {

                        var key = window.event ? event.keyCode : event.which;
                        var text = this.value;
                        if (event.keyCode == 8 || event.keyCode == 46
                         || event.keyCode == 37 || event.keyCode == 39) {

                            return true;
                        }
                        else if (text.length > 250) { //max length of the text
                            return false;
                        }
                        else { return true; }

                    }));
                }
                AddNewrow = false;

                EditRowID = $("#dv" + rId + "").attr('id');
                DeletIconID = $("#cb" + rId + "").attr('id');

                var value = myTreeGrid.cells(rId, cInd).getValue();
                var comboList = combo.getKeys();
                $('.dhx_combo_select option[value="' + value + '"]').remove();
                
                $(".dhx_combo_select option").filter(function () {
                    return this.text == value;
                }).attr('selected', true);
                $(".dhx_combo_select").css("right", "20px");
                $(".dhx_combo_select").css("left", "auto");
                combo.save();
                
            }
            if (stage == 0 && cInd == 2) return true;
            var ParentID = $("#ddlParentFinance").val();
            var ChildID = $("#ddlChildFinance").val();
            if (IsValid) {
                if (stage == 0) {
                    ValidOldValue = myTreeGrid.cells(rId, cInd).getValue();
                }
                if (oValue != undefined) {
                    oValue = oValue.replace(/,/g, "");
                }
                //if (IsAddNew == true) {
                //    _parentRowId = $("#hdn_row_parentId").val();
                //}
                var splitRowParentIds = '';
                var rowId = '', parentId = '', parentRowID = '';
                var itemIndex = -1;
                if (_row_parentId != null && _row_parentId.length > 0) {
                    splitRowParentIds = _row_parentId.split(',');
                    $.each(splitRowParentIds, function (key, val) {
                        rowId = val.split('~')[0];
                        parentId = val.split('~')[1];
                        parentRowID = val.split('~')[2];
                        itemIndex = key;
                        if (rowId == rId) {
                            return false;
                        }
                    });
                }

                var Period = myTreeGrid.getColLabel(cInd, 0);

                var BudgetQuartelyColIndex = ["4", "8", "12", "16"];
                var ForeCastQuartelyColIndex = ["5", "9", "13", "17"];
                var BudgetQuaterTotalIndex = 20;
                var ForcastQuaterTotalIndex = 21;
                var BudgetMonthTotalIndex = 52;
                var ForcastMonthTotalIndex = 53;
                var BudgetRowTotal = 0;
                var ForCastRowTotal = 0;
                var PlanRowTotal = 0;
                var ActualRowTotal = 0;
                var PlanTotalIndex = 0;
                var ActualTotalIndex = 0;
                if (stage.toString() == '2') {
                    if (nValue == null || nValue == '' || nValue == oValue) {
                        AddNewrow = true;
                        return false;
                    }
                }
                if (nValue != oValue) {
                    AddNewrow = true;
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("UpdateBudgetGridData")',
                        data: {
                            BudgetId: rId, IsQuaterly: AllocatedBy, nValue: htmlDecode(nValue), oValue: oValue, ColumnName: ColumnName, Period: Period, ParentRowId: _parentRowId, GlobalEditLevel: GlobalEditLevel, isFromForecastChild: isFromForecastChild
                        },
                        dataType: 'json',
                        beforeSend: function (x) { //Called before every request
                            myApp.hidePleaseWait();
                        },
                        success: function (states) {
                            var cellObj = myTreeGrid.cells(rId, cInd);

                            if (states.errormsg != null && states.errormsg.trim() != "") {
                                alert(states.errormsg.trim());
                                myTreeGrid.cells(rId, cInd).setValue(oValue);
                                return false;
                            }
                            var checkComobo = myTreeGrid.getCombo(cInd);
                            if (!(checkComobo.keys.length > 0)) {
                            myTreeGrid.cells(rId, cInd).setValue(Intl.NumberFormat().format(nValue));
                            } else {
                                var result;
                                for (var i = 0, len = combo._save.length; i < len; i++) {
                                    
                                    if (combo._save[i][0].toString() === nValue) {
                                        result = combo._save[i][1];
                                        break;
                                    }
                                }
                                myTreeGrid.cells(rId, cInd).setValue(result);
                            }
                            if (ColumnName == BudgetColName) {

                                if (AllocatedBy == "@Enums.PlanAllocatedBy.quarters.ToString()") {
                                    //        $.each(BudgetQuartelyColIndex, function () {

                                    //            var ColValue = myTreeGrid.cells(rId, this).getValue();
                                    //    BudgetRowTotal += parseFloat(ColValue.replace(/,/g, ""));
                                    //        });
                                    //        myTreeGrid.cells(rId, BudgetQuaterTotalIndex).setValue(BudgetRowTotal);
                                    for (var i = 1; i <= 18; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == BudgetColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            BudgetRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    BudgetMonthTotalIndex = myTreeGrid.getColIndexById(BudgetColName + "Total");
                                    myTreeGrid.cells(rId, BudgetMonthTotalIndex).setValue(Intl.NumberFormat().format(BudgetRowTotal));
                                } else if (AllocatedBy == "@Enums.PlanAllocatedBy.months.ToString()") {

                                    //        var ColTotalValue = myTreeGrid.cells(rId, BudgetMonthTotalIndex).getValue();
                                    for (var i = 1; i <= 50; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == BudgetColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            BudgetRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //        BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    BudgetMonthTotalIndex = myTreeGrid.getColIndexById(BudgetColName + "Total");
                                    myTreeGrid.cells(rId, BudgetMonthTotalIndex).setValue(Intl.NumberFormat().format(BudgetRowTotal));
                                } else {
                                    for (var i = 1; i <= 14; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == BudgetColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            BudgetRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    BudgetMonthTotalIndex = myTreeGrid.getColIndexById(BudgetColName + "Total");
                                    myTreeGrid.cells(rId, BudgetMonthTotalIndex).setValue(Intl.NumberFormat().format(BudgetRowTotal));
                                }
                                var TotalVal = "$" + myTreeGrid.cells(myTreeGrid.getRowId(0), BudgetMonthTotalIndex).getValue();
                                $("#budgetID").html(TotalVal);
                                $("#budgetID").attr("data-original-title", TotalVal);
                                formatBudgetValues("#budgetID");

                            }
                            else if (ColumnName == ForecastColName) {


                                var forparentid = myTreeGrid.getParentId(rId);
                                if (forparentid > 0) {
                                    RollupFinanceValue(forparentid, 0, cInd);// Forecast
                                }

                                if (AllocatedBy == "@Enums.PlanAllocatedBy.quarters.ToString()") {
                                   
                                    for (var i = 1; i <= 18; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == ForecastColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ForCastRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        } else if (ColName == PlanColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Plan
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            PlanRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        } else if (ColName == ActualColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Actual
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ActualRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //        BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    ForcastMonthTotalIndex = myTreeGrid.getColIndexById(ForecastColName + "Total");
                                    myTreeGrid.cells(rId, ForcastMonthTotalIndex).setValue(Intl.NumberFormat().format(ForCastRowTotal));

                                    PlanTotalIndex = myTreeGrid.getColIndexById(PlanColName + "Total");
                                    myTreeGrid.cells(rId, PlanTotalIndex).setValue(Intl.NumberFormat().format(PlanRowTotal));

                                    ActualTotalIndex = myTreeGrid.getColIndexById(ActualColName + "Total");
                                    myTreeGrid.cells(rId, ActualTotalIndex).setValue(Intl.NumberFormat().format(ActualRowTotal));
                                }
                                else if (AllocatedBy == "@Enums.PlanAllocatedBy.months.ToString()") {
                                    //var ColTotalValue = myTreeGrid.cells(rId, BudgetMonthTotalIndex).getValue();
                                    for (var i = 1; i <= 50; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == ForecastColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ForCastRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                        else if (ColName == PlanColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Plan
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            PlanRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        } else if (ColName == ActualColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Actual
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ActualRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    ForcastMonthTotalIndex = myTreeGrid.getColIndexById(ForecastColName + "Total");
                                    myTreeGrid.cells(rId, ForcastMonthTotalIndex).setValue(Intl.NumberFormat().format(ForCastRowTotal));

                                    PlanTotalIndex = myTreeGrid.getColIndexById(PlanColName + "Total");
                                    myTreeGrid.cells(rId, PlanTotalIndex).setValue(Intl.NumberFormat().format(PlanRowTotal));

                                    ActualTotalIndex = myTreeGrid.getColIndexById(ActualColName + "Total");
                                    myTreeGrid.cells(rId, ActualTotalIndex).setValue(Intl.NumberFormat().format(ActualRowTotal));
                                } else {
                                    for (var i = 1; i <= 14; i++) {
                                        var colId = myTreeGrid.getColumnId(i);
                                        var colIndex = myTreeGrid.getColIndexById(colId);
                                        var ColName = myTreeGrid.getColLabel(colIndex, 1);
                                        if (ColName == ForecastColName) {
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ForCastRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                        else if (ColName == PlanColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Plan
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            PlanRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        } else if (ColName == ActualColName) {
                                            if (forparentid > 0) {
                                                RollupFinanceValue(forparentid, 0, colIndex);// Actual
                                            }
                                            var ColCurrentValue = myTreeGrid.cells(rId, colIndex).getValue();
                                            ActualRowTotal += parseFloat(ColCurrentValue.replace(/,/g, ""));
                                        }
                                    }
                                    //BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    ForcastMonthTotalIndex = myTreeGrid.getColIndexById(ForecastColName + "Total");
                                    myTreeGrid.cells(rId, ForcastMonthTotalIndex).setValue(Intl.NumberFormat().format(ForCastRowTotal));

                                    PlanTotalIndex = myTreeGrid.getColIndexById(PlanColName + "Total");
                                    myTreeGrid.cells(rId, PlanTotalIndex).setValue(Intl.NumberFormat().format(PlanRowTotal));

                                    ActualTotalIndex = myTreeGrid.getColIndexById(ActualColName + "Total");
                                    myTreeGrid.cells(rId, ActualTotalIndex).setValue(Intl.NumberFormat().format(ActualRowTotal));
                                }
                                if (forparentid > 0) {
                                    RollupFinanceValue(forparentid, 0, ForcastMonthTotalIndex);
                                    RollupFinanceValue(forparentid, 0, PlanTotalIndex);
                                    RollupFinanceValue(forparentid, 0, ActualTotalIndex);
                                }
                                //myTreeGrid.cells(rId, ForcastMonthTotalIndex).setValue(Intl.NumberFormat().format(myTreeGrid.cells(rId, ForcastMonthTotalIndex).getValue()));
                                var TotalVal = "$" + myTreeGrid.cells(myTreeGrid.getRowId(0), ForcastMonthTotalIndex).getValue();
                                $("#ForecastID").html(TotalVal);
                                $("#ForecastID").attr("data-original-title", TotalVal);

                                formatForecastValues("#ForecastID");

                                //$("#ForecastID").html("$" + myTreeGrid.cells(myTreeGrid.getRowId(0), ForcastMonthTotalIndex).getValue());
                                //formatForecastValues("#ForecastID");
                            }

                            //LoadBudgetGrid(AllocatedBy);
                            // GetFinanceHeaderValue(rId, false);

                            //var rowIndex = myTreeGrid.getRowIndex(rId);
                            //if (rowIndex == 0) {
                            if (RevnueTimeFrameChange) {
                                $("#ddlRevenueTimeFrame").change();
                            }

                            if (RevnueTimeFrameChange == false) {
                                //var ChkPlan = $("#chkPlan");
                                //var ChkBudget = $("#chkBudget");
                                //var ChkForeCast = $("#chkForeCast");
                                //var ChkActual = $("#chkActual");
                                //ShowHideColumns(ChkPlan[0]);
                                //ShowHideColumns(ChkBudget[0]);
                                //ShowHideColumns(ChkForeCast[0]);
                                //ShowHideColumns(ChkActual[0]);
                            }

                            $("#divFinanceBack").css("display", "block");
                            //}
                            if (ColumnName == "Task Name") {
                                 AllocatedBy = $('#ddlRevenueTimeFrame option:selected').val();
                                LoadBudgetGrid(AllocatedBy);
                                //GetFinanceHeaderValue(rId, false);
                                BindParentBudgetDrp(ParentID);

                                BindChildBudgetDrp(ParentID);

                                if (GlobalEditLevel == "Budget") {
                                    GetListOfBudgetName();
                                }
                                else {
                                    GetListofForecastNames($("#hdn_BudgetDetailId").val());
                                }
                            }
                            _isNewRowAdd = false;
                            RevnueTimeFrameChange = true;
                            //myApp.hidePleaseWait();
                        }
                    });
                   
                }

            }

        });
        //myTreeGrid.attachEvent("onMouseIn", function (id) {
        //    $("#gridbox").find("table").css("width", GridWidth);
        //});
        //myTreeGrid.attachEvent("onSelect", function (id) {

        //    $("#gridbox").find("table").css("width", GridWidth);
        //});
        myTreeGrid.attachEvent("onOpenEnd", function () {

            //$("#gridbox").find("table").css("width", "100%");
            //var tableheight = $(".objbox").find("table").height();

            //$("#gridbox").css("height", tableheight + 100);
            //myTreeGrid.setSizes();

            //$("#gridbox").find("table").css("width", GridWidth);


            //return true;
        });

        myTreeGrid.expandAll();
        //alert(GridWidth);
        //var PlanColumns = $("#chkPlan");
        //var ActualColumns = $("#chkActual");
        //PlanColumns.change();
        //ActualColumns.change();

        //myTreeGrid.enableAutoWidth(true, GridWidth, GridWidth);
        //var tableheight = $(".objbox").find("table").height();

        //$("#gridbox").css("height", tableheight + 100);
        //   myTreeGrid.setSizes();


        //$("#gridbox").find("table").css("width", GridWidth);

        $(".grid_add").attr("data-title", "Add Row");
        CollapseExpand = true;
        _isNewRowAdd = false;

        // GetFinanceHeaderValue(rId, false);
        //alert($("#gridbox").find("table").width());
    }

    //$("#ddlRevenueTimeFrame").change(function () {
    //    var AllocatedBy = $('#ddlRevenueTimeFrame option:selected').text();
    //    if (AllocatedBy == 'Quarterly') {
    //        AllocatedBy = true;
    //    }
    //    else {
    //        AllocatedBy = false;
    //    }
    //    LoadBudgetGrid(AllocatedBy);
    //    var BudgetColumns = $("#chkBudget");
    //    var ForeCastColumns = $("#chkForeCast");
    //    var PlanColumns = $("#chkPlan");
    //    var ActualColumns = $("#chkActual");
    //    BudgetColumns.change();
    //    ForeCastColumns.change();
    //    PlanColumns.change();
    //    ActualColumns.change();
    //});

    var _isNewRowAdd = false;
    var _newrowid = '';
    var _newParentId = '';
    var _parentRowId = '';
    var _row_parentId = '';

    function CheckboxClick(checkbox) {
        var controlid = $(checkbox).attr('id')
        if (AddNewrow == false & DeletIconID == controlid) {
            return false;
        }
        else {
            RowIDs = {
                IDs: []
            }
            var val = $(checkbox).attr('row-id');

            var Name = $(checkbox).attr('name');
            RowIDs.IDs.push(val);
            $("#lipname").html(Name);
            $("#divDeletePopup").modal('show');
            $('#cancel-button_DeleteItem').on("click", function () {
                var index = RowIDs.IDs.indexOf(val);
                RowIDs.IDs.splice(index, 1);
                $('#divDeletePopup').modal("hide");

            });
        }
        
        ItemIdForFocus = myTreeGrid.getRowIndex($(checkbox).attr('row-id').toString());    //Added by Maitri Gandhi for #2049 on 10/3/2016
        Maintained = ItemIdForFocus -1;
    }
    //Added BY Komal Rawal for #1639
    //RowIDs = {
    //    IDs: []
    //}
    //var CheckedSubitems = [];
    //var ids = [];
    //function CheckboxClick(checkbox) {
    //    RowIDs = {
    //        IDs: []
    //    }
    //    var state = $(checkbox).attr("checked");
    //    ids = myTreeGrid.getAllSubItems($(checkbox).attr('row-id')).split(',');

    //    //if (ids.length > 1) {
    //        for (var i = 0; i < ids.length; i++) {
    //            var Checkbox = ids[i];

    //    if (state == "checked") {
    //        $('#cb_' + Checkbox).attr("checked", "checked");
    //        if (ids[i] != "") {
    //            RowIDs.IDs.push(ids[i]);
    //    }
    //    }
    //    else {

    //                $('#cb_' + Checkbox).removeAttr("checked");
    //    }

    //}
    //   // }

    //    var parentid = myTreeGrid.getParentId($(checkbox).attr('row-id'));
    //    if (parentid == 0) {
    //        if ($(checkbox).attr("checked") == "checked")
    //            {

    //            RowIDs.IDs.push($(checkbox).attr("id").split('_')[1]);
    // }
    //        else {
    //            var index = RowIDs.IDs.indexOf($(checkbox).attr("id").split('_')[1]);
    //            RowIDs.IDs.splice(index, 1);

    //        }
    //    }
    //    SetParentCheckbox(parentid);
    //}

    //function SetParentCheckbox(parentid) {
    //    var flag = true;
    //    if (parentid != 0) {
    //        RowIDs = {
    //            IDs: []
    //        }
    //        CheckedSubitems = myTreeGrid.getAllSubItems(parentid).split(',');
    //        if (CheckedSubitems.length >= 1) {

    //            for (var i = 0; i < CheckedSubitems.length; i++) {
    //                if ($('#cb_' + CheckedSubitems[i]).attr("checked") == "checked") {
    //                    flag == true
    //                    RowIDs.IDs.push(CheckedSubitems[i]);
    //                }
    //                else {
    //                    var index = RowIDs.IDs.indexOf(CheckedSubitems[i]);
    //                    if (index >= 0) {
    //        RowIDs.IDs.splice(index, 1);
    //    }
    //                    flag = false;
    //                }
    //            }

    //        }
    //        if (flag == true) {
    //            $('#cb_' + parentid).attr("checked", "checked")
    //            RowIDs.IDs.push($('#cb_' + parentid).attr("id").split('_')[1]);
    //        }
    //        else {
    //            $('#cb_' + parentid).removeAttr("checked");
    //        }
    //        var parentid = myTreeGrid.getParentId($('#cb_' + parentid).attr('row-id'));
    //        SetParentCheckbox(parentid);
    //    }
    //    return;
    //}

    ////End
    function AddRow(cntrl) {
        var controlid = $(cntrl).attr('id');
        if (AddNewrow == false && EditRowID == controlid) {
            return false;
        }
        else {
            var attrRowId = $(cntrl).attr('row-id');
            var rowIndex = myTreeGrid.getRowIndex(attrRowId);
            DisplayPopUpMenu(cntrl, rowIndex);
        }
    }
    function IsRootMostParentId(curntRowid) {
        var parentid = myTreeGrid.getParentId(curntRowid);
        var result = false;
        if (parentid == null || parentid == 'undefined' || parentid <= 0) {
            result = true;
        }
        return result;
    }
    function AddNewRowbyType(itemType, cntrl) {
        if (_isNewRowAdd == false) {
             AllocatedBy = $('#ddlRevenueTimeFrame option:selected').val();
            //if (AllocatedBy == 'quarters') {
            //    AllocatedBy = true;
            //}
            //else {
            //    AllocatedBy = false;
            //}
            var row_id = $(cntrl).attr('row-id');
            //Added by Maitri Gandhi for #2049 on 8/3/2016
            ItemIdForFocus = myTreeGrid.getRowIndex(row_id.toString());   
            Maintained = ItemIdForFocus;
            //var rowId = myTreeGrid.getSelectedId();
            //var rowindex = myTreeGrid.getRowIndex(row_id.toString());

            var childrencount = myTreeGrid.hasChildren(row_id); // Get Current Row Children count.
            var insertrowindex = childrencount + 1;
            /*Start: Get ParentId and BudgetDetailId from RowId */
            var budgetDetailId = 0;
            if (row_id !== null && row_id !== 'undefined' && row_id !== '') {
                var arr = row_id.split('_');
                _newParentId = arr;
                //if (arr !== null && arr !== 'undefined' && arr.length > 0) {
                //    if (arr[1] != null && arr[1] != 'undefined') {
                //        _newParentId = budgetDetailId = arr[1];
                //    }
                //}
            }
            // Create RowId for newRecord.
            _newrowid = "new" + insertrowindex.toString() + "_0_" + _newParentId;  // RowId format: NameofItem_BudgetDetailId_ParentId.
            _isNewRowAdd = true;
            if (itemType.toLowerCase() == 'parallelitem') {
                _parentRowId = $(cntrl).attr('parentId');
            }
            else {
                _parentRowId = row_id;
            }
            _row_parentId = _row_parentId + "," + _newrowid + "~" + _newParentId + "~" + row_id; // Store NewRowId & ParentRowId in global variable This variable use to save data in OnEditCell event.
            $("#hdn_row_parentId").val(_row_parentId);
            /*End: Get ParentId and BudgetDetailId from RowId */
            var isRootMostParent = IsRootMostParentId(row_id);

            var TotalColumn = myTreeGrid.getColumnCount();
            var AddRowString = [];
            var AddRowColTypes = "tree,ro,ro";
            var ColumnsVisibility = "";

            AddRowString.push("New item");
            AddRowString.push("");
            for (var k = 0; k <= TotalColumn; k++) {
                ColumnsVisibility += myTreeGrid.isColumnHidden(k) + ",";
                if (k > 2) {
                    AddRowString.push("0");
                    AddRowColTypes += ",ro";
                }
            }

            ColumnsVisibility = ColumnsVisibility.slice(0, -1);
            myTreeGrid.setColTypes(AddRowColTypes);
            myTreeGrid.setColumnsVisibility(ColumnsVisibility);
            if (itemType.toLowerCase() == 'childitem') {
                myTreeGrid.addRow(_newrowid, AddRowString, -1, row_id);
            }
            else if (isRootMostParent) {
                myTreeGrid.addRow(_newrowid, AddRowString);
            }
            else {
                myTreeGrid.addRow(_newrowid, AddRowString, -1, _parentRowId);
            }


            myTreeGrid.openItem(row_id);
            var GridWidth = $("#gridbox").width();
            $("#gridbox").find("table").css("width", GridWidth);
            //myTreeGrid.enableValidation(true);
            var titleIndex = myTreeGrid.getColIndexById('title');
            //myTreeGrid.cells(_newrowid, titleIndex).setAttribute("validate", "NotEmpty");

            //myTreeGrid.setItemText(_newrowid, 'new text')
            //var sdateindex = myTreeGrid.getColIndexById('Tree');

            //if (childrencount == null || childrencount == 'undefined' || childrencount == '' || childrencount.toString() == "0") {
            //    //UpdateActionColumn(budgetDetailId);
            //}
            var _newRowIndex = myTreeGrid.getRowIndex(_newrowid.toString());
            IsAddNew = true;

            //myTreeGrid.selectCell(myTreeGrid.getRowIndex(_newRowIndex), 0, false, false, true);
            //myTreeGrid.selectRow(_newRowIndex);
            //myTreeGrid.selectCell(_newRowIndex, 0, false, false, true, true);
            //var ChkPlan = $("#chkPlan");
            //var ChkBudget = $("#chkBudget");
            //var ChkForeCast = $("#chkForeCast");
            //var ChkActual = $("#chkActual");
            //ShowHideColumns(ChkPlan[0]);
            //ShowHideColumns(ChkBudget[0]);
            //ShowHideColumns(ChkForeCast[0]);
            //ShowHideColumns(ChkActual[0]);
            //myTreeGrid.cells(_newrowid, titleIndex).edit();
            //myTreeGrid.selectCell(_newRowIndex, titleIndex, false, true, true);
            if (GlobalEditLevel !== 'Budget') {
                myTreeGrid.forEachCell(row_id, function (cellObj, ind) {
                    //execute code for each cell in a row with the id "row1"
                    //cellObj - related cell object
                    //ind - column index
                    myTreeGrid.cells(row_id, ind).setDisabled(true);
                    myTreeGrid.setCellTextStyle(row_id, ind, "color:gray;");
                });
            }

            window.setTimeout(function () {

                myTreeGrid.selectCell(_newRowIndex, 0, false, false, true, true);
                myTreeGrid.editCell();
            }, 1);
            return true;

            // event.cancelBubble = true;
        }
        //myTreeGrid.editCell();
    }

    function RollupFinanceValue(rId, cId, colIndex) {

        var parentid = rId;
        var sum = 0;
        var childitems = myTreeGrid.getSubItems(rId).split(',');
        $.each(childitems, function () {
            var ColCurrentValue = myTreeGrid.cells(this, colIndex).getValue();
            sum += parseFloat(ColCurrentValue.replace(/,/g, ""));
        });
        myTreeGrid.cells(rId, colIndex).setValue(Intl.NumberFormat().format(sum));
        parentid = myTreeGrid.getParentId(rId);
        if (parentid == "") {
            return true;
        }
        else {
            return RollupFinanceValue(parentid, 0, colIndex);
        }
    }

</script>