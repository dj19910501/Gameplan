@model RevenuePlanner.Models.FinanceModel
<style type="text/css">
    div.xhdr {
        height: auto !important;
        width: 100.7% !important;
    }

    div.objbox {
        width: 100.7% !important;
    }

    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell {
        text-align: center;
        padding-left: 0px !important;
        padding-right: 7px !important;
    }
</style>
<div id="gridbox" style="width:100%; background-color:white;"></div>
<script type="text/javascript">
    var myTreeGrid;
    var GlobalBudgetId = '';
    var GlobalEditLevel = '';
    var IsAddNew = false;
    var _isBudgetCreateEdit = '',_isForecastCreateEdit='';
    $(document).ready(function () {
        GlobalBudgetId = '@ViewBag.BudgetId';
        GlobalEditLevel = '@ViewBag.EditLevel';
        pageName = "EditBudget";
        _isBudgetCreateEdit = '@ViewBag.IsBudgetCreate_Edit';
        _isForecastCreateEdit = '@ViewBag.IsForecastCreate_Edit';
        ShowHideControls("EditBudget");

        //ShowHideColumns($("#chkPlan"));
        var GridData = "";
        var AllocatedBy = $('#ddlRevenueTimeFrame option:selected').text();
        if (AllocatedBy == 'Quarterly') {
            AllocatedBy = true;
        }
        else {
            AllocatedBy = false;
        }
        LoadBudgetGrid(AllocatedBy);
        BindSelectDropdowns();

        var ChkPlan = $("#chkPlan");
        var ChkBudget = $("#chkBudget");
        var ChkForeCast = $("#chkForeCast");
        var ChkActual = $("#chkActual");
        ShowHideColumns(ChkPlan[0]);
        ShowHideColumns(ChkBudget[0]);
        ShowHideColumns(ChkForeCast[0]);
        ShowHideColumns(ChkActual[0]);
        GetFinanceHeaderValue(0, false);
        //ShowHideColumns($("#chkBudget"));
        //ShowHideColumns($("#chkForeCast"));
        //ShowHideColumns($("#chkActual"));
        //myApp.hidePleaseWait();
        //Commented by Rahul Shah desc: it override dropdown lable value
        //$("#btnMultiselect_ddlParentFinance").find("span").text(htmlDecode($("#btnMultiselect_ddlParentFinance").find("span").text()));
        //$("#btnMultiselect_ddlChildFinance").find("span").text(htmlDecode($("#btnMultiselect_ddlChildFinance").find("span").text()));
    });

    function LoadBudgetGrid(AllocatedBy) {
        
        myApp.showPleaseWait();
        var GridWidth = $("#gridbox").width();

        var Jan = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Jan.ToString()]";
        var Feb = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Feb.ToString()]";
        var Mar = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Mar.ToString()]";
        var April = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.April.ToString()]";
        var May = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.May.ToString()]";
        var Jun = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Jun.ToString()]";
        var July = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.July.ToString()]";
        var Aug = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Aug.ToString()]";
        var Sep = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Sep.ToString()]";
        var Oct = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Oct.ToString()]";
        var Nov = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Nov.ToString()]";
        var Dec = "@RevenuePlanner.Helpers.Enums.ReportMonthDisplayValues[RevenuePlanner.Helpers.Enums.ReportMonthDisplay.Dec.ToString()]";

        myTreeGrid = new dhtmlXGridObject('gridbox');

        myTreeGrid.setImagePath("@Url.Content("~/codebase/imgs/")");
        //myTreeGrid.setImageSize(1, 1);
        $.ajax({
            dataType: 'json',
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Finance/EditBudgetGridData/")',
            data: {
                BudgetId: GlobalBudgetId,
                IsQuaterly: AllocatedBy
            },
            success: function (data) {

                GridData = data;
                //var mainGridData = $('<div/>').html(data).text(); // Decode Html content.
                //GridData = (mainGridData.toString().replace(/&quot;/g, '"'));
                //alert(GridData);
                //alert(Data1);

                //myTreeGrid.enableCellIds(true);

            }

        });
        if (AllocatedBy) {
            myTreeGrid.setHeader(",,,Q1,Q1,Q1,Q1,Q2,Q2,Q2,Q2,Q3,Q3,Q3,Q3,Q4,Q4,Q4,Q4,Total,Total,Total,Total");
            myTreeGrid.attachHeader("Task Name,,Line Items,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual");
            for (var i = 3; i <= 22; i++) {
                myTreeGrid.setNumberFormat("0,000.00", i, ".", ",");
            }

            myTreeGrid.setColValidators("NotEmpty,,,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric");
            myTreeGrid.setInitWidths("200,30,65,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60");
            myTreeGrid.setColAlign("left,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center");
            if (GlobalEditLevel == 'Budget') {
                if (_isBudgetCreateEdit != null && _isBudgetCreateEdit != 'undefined' && _isBudgetCreateEdit.toLowerCase() == 'true') {
                myTreeGrid.setColTypes("tree,ro,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(true);
                }
                else {
                    myTreeGrid.enableTreeCellEdit(false);
                    myTreeGrid.setColTypes("tree,ro,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron");
                }
                myTreeGrid.setColumnsVisibility("false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true");
            } else {
                if (_isForecastCreateEdit != null && _isForecastCreateEdit != 'undefined' && _isForecastCreateEdit.toLowerCase() == 'true') {
                myTreeGrid.setColTypes("tree,ro,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(true);
                }
                else {
                    myTreeGrid.setColTypes("tree,ro,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(false);
                }
                myTreeGrid.setColumnsVisibility("false,false,false,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true");
            }

            //myTreeGrid.setColSorting("str,str,str,na,str");

        } else {
            myTreeGrid.setHeader(",,," + Jan + "," + Jan + "," + Jan + "," + Jan + "," + Feb + "," + Feb + "," + Feb + "," + Feb + "," + Mar + "," + Mar + "," + Mar + "," + Mar + "," + April + "," + April + "," + April + "," + April + "," + May + "," + May + "," + May + "," + May + "," + Jun + "," + Jun + "," + Jun + "," + Jun + "," + July + "," + July + "," + July + "," + July + "," + Aug + "," + Aug + "," + Aug + "," + Aug + "," + Sep + "," + Sep + "," + Sep + "," + Sep + "," + Oct + "," + Oct + "," + Oct + "," + Oct + "," + Nov + "," + Nov + "," + Nov + "," + Nov + "," + Dec + "," + Dec + "," + Dec + "," + Dec + ",Total,Total,Total,Total");
            myTreeGrid.attachHeader("Task Name,,Line Items,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual,Budget,Forecast,Plan,Actual");
            for (var i = 3; i <= 54; i++) {
                myTreeGrid.setNumberFormat("0,000.00", i, ".", ",");
            }
            //myTreeGrid.setInitWidths("150,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65,60,65");
            myTreeGrid.setColValidators("NotEmpty,,,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric,ValidNumeric");
            myTreeGrid.setInitWidths("200,30,65,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60,60,65,55,60");
            myTreeGrid.setColAlign("left,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center,center");
            if (GlobalEditLevel == 'Budget') {
                if (_isBudgetCreateEdit != null && _isBudgetCreateEdit != 'undefined' && _isBudgetCreateEdit.toLowerCase() == 'true') {
                myTreeGrid.setColTypes("tree,ro,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(true);
                }
                else {
                    myTreeGrid.setColTypes("tree,ro,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(false);
                }
                myTreeGrid.setColumnsVisibility("false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true");
            } else {
                if (_isForecastCreateEdit != null && _isForecastCreateEdit != 'undefined' && _isForecastCreateEdit.toLowerCase() == 'true') {
                myTreeGrid.setColTypes("tree,ro,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(true);
                }
                else {
                    myTreeGrid.setColTypes("tree,ro,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron,ron");
                    myTreeGrid.enableTreeCellEdit(false);
                }
                myTreeGrid.setColumnsVisibility("false,false,false,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true,false,false,true,true");
            }

            //myTreeGrid.setColSorting("str,str,str,na,str");
        }

        //myTreeGrid.validateCell(1, 1);
        //myTreeGrid.forEachRow(function (id) {
        //    myTreeGrid.validateCell(id, 1);
        //});
        //myTreeGrid.setColumnIds("title,addrow");
        //myTreeGrid.setColValidators("NotEmpty");
        //myTreeGrid.enableAutoHeight(true);
        //myTreeGrid.enableValidation(true);
        //myTreeGrid.setImageSize(1, 1);
        myTreeGrid.init();
        myTreeGrid.setImageSize(1, 1);
        myTreeGrid.setSkin("dhx_skyblue");
        myTreeGrid.parse(GridData, "json");
        //myTreeGrid.setUserData("id");
        $("#gridbox").find("table").first().find("tr").next().last().find("td").first().css("text-align", "center");

        var IsValid = true;

        myTreeGrid.attachEvent("onValidationError", function (id, ind, value) {
            IsValid = false;
            return true;
        });
        myTreeGrid.attachEvent("onValidationCorrect", function (id, index, value, rule) {
            IsValid = true;
        });
        myTreeGrid.attachEvent("onEditCancel", function (id, value) {
            //debugger;
            //myTreeGrid.cells(id, 0).setCValue("invalid");
            //alert('');
        });
        myTreeGrid.attachEvent("onCellChanged", function (id, ind, value) {

            //if (!myTreeGrid._ignore_next) {
            //    myTreeGrid._ignore_next = true;
            if (parseInt(value) == 0) {
               // myTreeGrid.cells(id, ind).setValue("0");
            }
            //    myTreeGrid._ignore_next = false;
            //}
        });

        myTreeGrid.attachEvent("onResizeEnd", function (obj) {
            $("#gridbox").find("table").css("width", GridWidth);
        });

        myTreeGrid.attachEvent("onResizeEnd", function (cInd, cWidth, obj) {
            $("#gridbox").find("table").css("width", GridWidth);
        });
        //IsValid = true;
        //myTreeGrid.enableAutoWidth(true, GridWidth, GridWidth);
        myTreeGrid.attachEvent("onEditCell", function (stage, rId, cInd, nValue, oValue) {
         //   debugger;
            var ParentID = $("#ddlParentFinance").val();
            var ChildID = $("#ddlChildFinance").val();
            if (IsValid) {
                //if (IsAddNew == true) {
                //    _parentRowId = $("#hdn_row_parentId").val();
                //}
                var splitRowParentIds = '';
                var rowId = '', parentId = '', parentRowID = '';
                var itemIndex = -1;
                if (_row_parentId != null && _row_parentId.length > 0) {
                    splitRowParentIds = _row_parentId.split(',');
                    $.each(splitRowParentIds, function (key, val) {
                      //  debugger;
                        rowId = val.split('~')[0];
                        parentId = val.split('~')[1];
                        parentRowID = val.split('~')[2];
                        itemIndex = key;
                        if (rowId == rId) {
                            return false;
                        }
                    });
                }

                var Period = myTreeGrid.getColLabel(cInd, 0);
                var ColumnName = myTreeGrid.getColLabel(cInd, 1);
                var BudgetQuartelyColIndex = ["3", "7", "11", "15"];
                var ForeCastQuartelyColIndex = ["4", "8", "12", "16"];
                var BudgetQuaterTotalIndex = 19;
                var ForcastQuaterTotalIndex = 20;
                var BudgetMonthTotalIndex = 51;
                var ForcastMonthTotalIndex = 52;
                var BudgetRowTotal = 0;
                var ForCastRowTotal = 0;

                if (nValue != oValue) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("UpdateBudgetGridData")',
                        data: { BudgetId: rId, IsQuaterly: AllocatedBy, nValue: htmlDecode(nValue), oValue: oValue, ColumnName: ColumnName, Period: Period, ParentRowId: _parentRowId },
                        dataType: 'json',
                        success: function (states) {
                            var cellObj = myTreeGrid.cells(rId, cInd);

                            if (states.errormsg != null && states.errormsg.trim() != "") {
                                alert(states.errormsg.trim());
                                myTreeGrid.cells(rId, cInd).setValue(oValue);
                                return false;
                            }
                            myTreeGrid.cells(rId, cInd).setValue(nValue);
                            if (ColumnName == "Budget") {

                                if (AllocatedBy) {
                                    $.each(BudgetQuartelyColIndex, function () {

                                        var ColValue = myTreeGrid.cells(rId, this).getValue();
                                        BudgetRowTotal += parseFloat(ColValue);
                                    });
                                    myTreeGrid.cells(rId, BudgetQuaterTotalIndex).setValue(BudgetRowTotal);
                                } else {
                                    var ColTotalValue = myTreeGrid.cells(rId, BudgetMonthTotalIndex).getValue();
                                    var ColCurrentValue = myTreeGrid.cells(rId, cInd).getValue();
                                    BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    myTreeGrid.cells(rId, BudgetMonthTotalIndex).setValue(BudgetRowTotal);
                                }

                            }
                            else if (ColumnName == "Forecast") {

                                if (AllocatedBy) {
                                    $.each(ForeCastQuartelyColIndex, function () {

                                        var ColValue = myTreeGrid.cells(rId, this).getValue();
                                        ForCastRowTotal += parseFloat(ColValue);
                                    });
                                    myTreeGrid.cells(rId, ForcastQuaterTotalIndex).setValue(BudgetRowTotal);
                                }
                                else {
                                    var ColTotalValue = myTreeGrid.cells(rId, ForcastMonthTotalIndex).getValue();
                                    var ColCurrentValue = myTreeGrid.cells(rId, cInd).getValue();
                                    BudgetRowTotal = parseFloat(ColTotalValue) + parseFloat(ColCurrentValue);
                                    myTreeGrid.cells(rId, ForcastMonthTotalIndex).setValue(BudgetRowTotal);
                                }
                            }
                            
                            LoadBudgetGrid(AllocatedBy);
                            GetFinanceHeaderValue(rId, false);
                            var ChkPlan = $("#chkPlan");
                            var ChkBudget = $("#chkBudget");
                            var ChkForeCast = $("#chkForeCast");
                            var ChkActual = $("#chkActual");
                            ShowHideColumns(ChkPlan[0]);
                            ShowHideColumns(ChkBudget[0]);
                            ShowHideColumns(ChkForeCast[0]);
                            ShowHideColumns(ChkActual[0]);
                            //var rowIndex = myTreeGrid.getRowIndex(rId);
                            //debugger;
                            //if (rowIndex == 0) {
                            
                            $("#divFinanceBack").css("display", "block");
                            //}
                            BindParentBudgetDrp(ParentID);

                            BindChildBudgetDrp(ParentID);

                            _isNewRowAdd = false;
                            //myApp.hidePleaseWait();
                        }
                    });
                }

            }
        });
        //myTreeGrid.attachEvent("onMouseIn", function (id) {
        //    $("#gridbox").find("table").css("width", GridWidth);
        //});
        //myTreeGrid.attachEvent("onSelect", function (id) {

        //    $("#gridbox").find("table").css("width", GridWidth);
        //});
        myTreeGrid.attachEvent("onOpenEnd", function () {

            //$("#gridbox").find("table").css("width", "100%");
            var tableheight = $(".objbox").find("table").height();

            $("#gridbox").css("height", tableheight + 100);
            myTreeGrid.setSizes();

            $("#gridbox").find("table").css("width", GridWidth);


            return true;
        });
        myTreeGrid.expandAll();
        //alert(GridWidth);
        //var PlanColumns = $("#chkPlan");
        //var ActualColumns = $("#chkActual");
        //PlanColumns.change();
        //ActualColumns.change();

        //myTreeGrid.enableAutoWidth(true, GridWidth, GridWidth);
        var tableheight = $(".objbox").find("table").height();

        $("#gridbox").css("height", tableheight + 100);
        myTreeGrid.setSizes();

        $("#gridbox").find("table").css("width", GridWidth);

        $(".grid_add").attr("data-title", "Add Row");
        CollapseExpand = true;
        //alert($("#gridbox").find("table").width());
    }

    //$("#ddlRevenueTimeFrame").change(function () {
    //    var AllocatedBy = $('#ddlRevenueTimeFrame option:selected').text();
    //    if (AllocatedBy == 'Quarterly') {
    //        AllocatedBy = true;
    //    }
    //    else {
    //        AllocatedBy = false;
    //    }
    //    LoadBudgetGrid(AllocatedBy);
    //    var BudgetColumns = $("#chkBudget");
    //    var ForeCastColumns = $("#chkForeCast");
    //    var PlanColumns = $("#chkPlan");
    //    var ActualColumns = $("#chkActual");
    //    BudgetColumns.change();
    //    ForeCastColumns.change();
    //    PlanColumns.change();
    //    ActualColumns.change();
    //});

    function BindSelectDropdowns() {
        @*$('#ddlParentFinance').val('@ViewBag.BudgetId');
        $("#ddlParentFinance,#ddlRevenueTimeFrame,#ddlChildFinance").multiselect({
            multiple: false,
            noneSelectedText: "Please Select",
            selectedList: 1
        }).multiselectfilter({
        });*@
    }
    var _isNewRowAdd = false;
    var _newrowid = '';
    var _newParentId = '';
    var _parentRowId = '';
    var _row_parentId = '';
    function AddRow(cntrl) {
        // debugger;
        if (_isNewRowAdd == false) {
            var AllocatedBy = $('#ddlRevenueTimeFrame option:selected').text();
            if (AllocatedBy == 'Quarterly') {
                AllocatedBy = true;
            }
            else {
                AllocatedBy = false;
            }
            var row_id = $(cntrl).attr('row-id');

            //var rowId = myTreeGrid.getSelectedId();
            //var rowindex = myTreeGrid.getRowIndex(row_id.toString());

            var childrencount = myTreeGrid.hasChildren(row_id); // Get Current Row Children count.
            var insertrowindex = childrencount + 1;
            /*Start: Get ParentId and BudgetDetailId from RowId */
            var budgetDetailId = 0;
            if (row_id !== null && row_id !== 'undefined' && row_id !== '') {
                var arr = row_id.split('_');
                _newParentId = arr;
                //if (arr !== null && arr !== 'undefined' && arr.length > 0) {
                //    if (arr[1] != null && arr[1] != 'undefined') {
                //        _newParentId = budgetDetailId = arr[1];
                //    }
                //}
            }
            // Create RowId for newRecord.
            _newrowid = "new" + insertrowindex.toString() + "_0_" + _newParentId;  // RowId format: NameofItem_BudgetDetailId_ParentId.
            _isNewRowAdd = true;
            _parentRowId = row_id;
            _row_parentId = _row_parentId + "," + _newrowid + "~" + _newParentId + "~" + row_id; // Store NewRowId & ParentRowId in global variable This variable use to save data in OnEditCell event.
            $("#hdn_row_parentId").val(_row_parentId);
            /*End: Get ParentId and BudgetDetailId from RowId */
            if (AllocatedBy) {
                if (GlobalEditLevel == 'Budget') {
                    myTreeGrid.setColTypes("tree,ro,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron,ron");
                } else {
                    myTreeGrid.setColTypes("tree,ro,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron");
                }
                myTreeGrid.addRow(_newrowid, ["", "<div id='dv" + _newrowid + "' class='grid_add' onclick='AddRow(this)' row-id='" + _newrowid + "' />", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], -1, row_id);
            }
            else {
                if (GlobalEditLevel == 'Budget') {
                    myTreeGrid.setColTypes("tree,ro,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron,ron");
                } else {
                    myTreeGrid.setColTypes("tree,ro,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,edn,ron,ron,ron,ron,ron,ron");
                }
                myTreeGrid.addRow(_newrowid, ["", "<div id='dv" + _newrowid + "' class='grid_add' onclick='AddRow(this)' row-id='" + _newrowid + "' />", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"], -1, row_id);
            }
            myTreeGrid.openItem(row_id);
            var GridWidth = $("#gridbox").width();
            $("#gridbox").find("table").css("width", GridWidth);
            //myTreeGrid.enableValidation(true);
            var titleIndex = myTreeGrid.getColIndexById('title');
            //myTreeGrid.cells(_newrowid, titleIndex).setAttribute("validate", "NotEmpty");

            //myTreeGrid.setItemText(_newrowid, 'new text')
            //var sdateindex = myTreeGrid.getColIndexById('Tree');

            //if (childrencount == null || childrencount == 'undefined' || childrencount == '' || childrencount.toString() == "0") {
            //    //UpdateActionColumn(budgetDetailId);
            //}
            // debugger;
            var _newRowIndex = myTreeGrid.getRowIndex(_newrowid.toString());
            IsAddNew = true;
            //myTreeGrid.selectCell(myTreeGrid.getRowIndex(_newRowIndex), 0, false, false, true);
            myTreeGrid.selectRow(_newRowIndex);
            myTreeGrid.selectCell(_newRowIndex, 0, false, false, true, true);
            //myTreeGrid.cells(_newrowid, titleIndex).edit();
            //myTreeGrid.selectCell(_newRowIndex, titleIndex, false, true, true);
            event.cancelBubble = true;
        }
        //myTreeGrid.editCell();
    }


</script>