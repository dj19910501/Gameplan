@model RevenuePlanner.Models.DhtmlXGridRowModel
@using Newtonsoft.Json;
@{
    var _mainGridData = Model != null ? JsonConvert.SerializeObject(Model) : string.Empty;
    var BudgetId = ViewBag.BudgetId != null ? (Int32)ViewBag.BudgetId : 0;
    var IsBudgetCreateEdit = ViewBag.IsBudgetCreateEdit;
    var IsBudgetView = ViewBag.IsBudgetView;
    var IsForecastView = ViewBag.IsForecastView;
    var IsForecastCreateEdit = ViewBag.IsForecastCreateEditView;
}
<style>
    div.xhdr {
        width: 100.7% !important;
    }

    div.objbox {
        width: 100.7% !important;
    }

    div.objbox {
        height: 100% !important;
    }

    div.gridbox {
        height: 100% !important;
    }
</style>
<div id="gridbox" style="width:100%; height:500px; background-color:white;"></div>
@Html.Hidden("hdnBudgetId", BudgetId, new { id = "hdnBudgetId", name = "hdnBudgetId", value = BudgetId })
@Html.Hidden("hdnNewItemType", string.Empty, new { id = "hdnNewItemType", name = "hdnNewItemType", value = "" })
<script type="text/javascript">
    var RowIDs = {
        IDs: []
    }
    var myTreeGrid;
    var _isNewRowAdd = false;
    var _newrowid = '';
    var _newParentId = '';
    var _parentRowId = '';
    var _row_parentId = '';
    var IsBudgetCreateEdit = '@IsBudgetCreateEdit';
    var IsForecastCreateEdit = '@IsForecastCreateEdit';
    var ValidParentId = 0;
    var ValidColumnId = 0;
    var ValidRowId = 0;
    var IsValid = true;
    var gridWidth = $("#divGridView").width() - 3;
    $(document).ready(function () {
        ShowHideControls('MainGrid');
        //myGrid = new dhtmlXGridObject('gridbox');
        //myGrid.setImagePath("../../codebase/imgs/");
        //myGrid.setHeader("Sales, Book Title, Author");
        //myGrid.setInitWidths("70,250,*");
        //myGrid.setColAlign("right,left,left");
        //myGrid.setColTypes("dyn,ed,ro");
        //myGrid.setColSorting("int,str,str");
        //myGrid.init();
        //myGrid.parse(data, "json");

        // Add By Nishant Sheth
        // Desc :: handle for same name or empty string
        dhtmlxValidation.isNameValid = function (data) {
            
            var childitems = myTreeGrid.getSubItems(ValidParentId).split(',');
            var isrepeat = true;
            if (data.trim() == '' || data.trim() == null) {
                isrepeat = false;
                IsValid = false;
            } else {
                $.each(childitems, function () {

                    if (this.toString() != ValidRowId.toString()) {
                        var ColCurrentValue = myTreeGrid.cells(this, ValidColumnId).getValue();
                        if (data.toLowerCase().trim() == ColCurrentValue.toLowerCase().trim()) {
                            isrepeat = false;
                            IsValid = false;
                        }
                    }
                });
            }
            return isrepeat;
        };

        myTreeGrid = new dhtmlXGridObject('gridbox');
        myTreeGrid.setImagePath('@Url.Content("~/codebase/imgs/")');
        myTreeGrid.setImageSize(1, 1);
        //myTreeGrid.enableTreeCellEdit(false);
        myTreeGrid.setHeader("Task Name,,,Budget,Forecast,Planned,Actual,Line Items", null, ["text-align:center;border-right:0px solid #d4d4d4;", "border-left:0px solid #d4d4d4;",, "text-align:center;", "text-align:center", "text-align:center;", "text-align:center", "text-align:center;", "text-align:center"]);
        myTreeGrid.setInitWidths("200,100,50,100,100,100,100,100");
        myTreeGrid.setColAlign("left,center,center,center,center,center,center,center");
        myTreeGrid.setColTypes("tree,ro,ro,ron,ron,ron,ro,ro");
        //myTreeGrid.setNumberFormat("0,000.00", 2, ".", ",");
        myTreeGrid.enableValidation(true);
        myTreeGrid.setColValidators("NameValid,,,,,,,,");
        myTreeGrid.setColumnIds("title,action,addrow,budget,forecast,planned,actual,lineitems");
        //myTreeGrid.setColSorting("str,na,str,str,na,str");
        //myTreeGrid.setStyle("", "", "", "", "", "", "", "border-left:0px;", "");
        //myTreeGrid.setStyle("", "border:0px solid gray;", "", "");
        if (IsBudgetCreateEdit == "False" && IsForecastCreateEdit == "False") {
            myTreeGrid.setColumnsVisibility("false,false,true,false,false,false,false,false");
            $('#btnAddNewBudget').css("display", "none");
           // $('#AddSettings').css("display", "none");


        }
        else {
            myTreeGrid.setColumnsVisibility("false,false,false,false,false,false,false,false");

        }

        if (IsBudgetCreateEdit == "False") {
            $('#btnAddNewBudget').css("display", "none");

        }
        myTreeGrid.attachEvent("onEditCell", OnEditCell);
        //myTreeGrid.attachEvent("onXLE", function () {
        //    if (!myTreeGrid.getRowsNum())
        //        myTreeGrid.addRow(myTreeGrid.uid(), "no data");
        //})
        myTreeGrid.attachEvent("onOpenEnd", function () {
            var tableheight = $(".objbox").find("table").height();
            $("#gridbox").css("height", tableheight + 100);
            myTreeGrid.setSizes();
            $("#gridbox").find("table").css("width", gridWidth);
            return true;
        });

        myTreeGrid.attachEvent("onValidationError", function (id, ind, value) {
            
            IsValid = false;
            return true;
        });
        myTreeGrid.attachEvent("onValidationCorrect", function (id, index, value, rule) {
            IsValid = true;
        });
        myTreeGrid.init();
        

        //myTreeGrid.setStyle("", ["border-right:0px solid #d4d4d4;", , , , , , , , ], "", "");

        var _budgetIdVal = $("#hdnBudgetId").val();
        $("#hdn_BudgetId").val(_budgetIdVal);
        //myTreeGrid.setSkin("dhx_skyblue");
        //myTreeGrid.setStyle("", "background-color:#e3e3e3;color:black; font-weight:bold;", "", "");
        var mainGridData = "@_mainGridData";
        //mainGridData = "@HttpUtility.HtmlDecode(_mainGridData)"
        //mainGridData = $('<div/>').html(mainGridData).text(); // Decode Html content.
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        var GridData = (mainGridData.toString().replace(/&quot;/g, '"'));

        // GridData = JSON.parse(GridData);
        myTreeGrid.parse(GridData, "json");
        myTreeGrid.forEachRow(function (rowid) {
            var titleIndex = myTreeGrid.getColIndexById('title');
            //alert(titleIndex);
            myTreeGrid.setCellTextStyle(rowid, titleIndex, "border-right:0px solid #d4d4d4;");
        });
        myTreeGrid.expandAll();
        //myTreeGrid.parse(data2, "json");
        //myTreeGrid.selectRow(0, false, false, true);
        var tableheight = $(".objbox").find("table").height();
        $("#gridbox").css("height", tableheight + 100);
        myTreeGrid.setSizes();

        $("#gridbox").find('table').css('width', gridWidth);

        var rowcount = myTreeGrid.getRowsNum();
        if (rowcount == null || rowcount == 'undefined' || rowcount == 0) {
            $("#divGridView").hide();
            $("#dvNoData").show();
        }

      
        //myTreeGrid.attachEvent("onCheck", function (rId, cInd, state) {
        //    //debugger;

        //    var val = rId.split('_')[1];

        //    if (state == true) {
        //        RowIDs.IDs.push(val);
        //    }
        //    else {
        //        var index = RowIDs.IDs.indexOf(val);
        //        RowIDs.IDs.splice(index, 1);
        //    }
        //var ids = [];
        //    ids = myTreeGrid.getAllSubItems(rId).split(',');
        //    alert(ids.length);
        //    alert(ids);
        //for (var i = 0; i < ids.length; i++)
        //{

        //    myTreeGrid.cells(ids[i], cInd).setValue(state);
        //}

        //    var parentid = myTreeGrid.getParentId(rId);
        //    SetParentCheckbox(parentid, cInd);

        //if (parentid != 0)
        //{
        //    var ids1 = [];
        //    ids1 = myTreeGrid.getAllSubItems(parentid).split(',');

        //    for (var i = 0; i < ids1.length; i++) {
        //        if (!myTreeGrid.cells(ids1[i], cInd).getValue()) {
        //            break;
        //        }
        //    }
        //}

        //myTreeGrid.forEachRow(function (rowid) {
        //    var state = myTreeGrid.cells(rId, cInd).getValue();
        //    if (state == true)
        //    {
        //        RowIDs.IDs.push(rowid.split('_')[1]);
        //    }
        //});


        // });



    });
    function CheckboxClick(checkbox) {
        var controlid = $(checkbox).attr('id')
        if (AddNewrow == false & DeletIconID == controlid) {
            return false;
        }
        else {
        RowIDs = {
            IDs: []
        }
        var val = $(checkbox).attr('row-id').split('_')[1];
        var Name = $(checkbox).attr('name');
        $("#lipname").html(Name);
        $("#divDeletePopup").modal('show');
        RowIDs.IDs.push(val);
        $('#cancel-button_DeleteItem').on("click", function () {
            var index = RowIDs.IDs.indexOf(val);
            RowIDs.IDs.splice(index, 1);
            $('#divDeletePopup').modal("hide");

        });
        }
      
    }
   
    ////Added BY Komal Rawal for #1639
    //RowIDs = {
    //    IDs: []
        //   }
    //var CheckedSubitems = [];
    ////        var ids1 = [];
    //var ids = [];
    //function CheckboxClick(checkbox) {
    //    RowIDs = {
    //        IDs: []
    //    }
    //    var state = $(checkbox).attr("checked");

    //    ids = myTreeGrid.getAllSubItems($(checkbox).attr('row-id')).split(',');
    //    //if (ids.length > 1) {
    //    for (var i = 0; i < ids.length; i++) {
    //        var Checkbox = ids[i];
    //        if (state == "checked") {
    //            $('#cb' + Checkbox).attr("checked", "checked");
    //            if (ids[i].split('_')[1] != undefined) {
    //                RowIDs.IDs.push(ids[i].split('_')[1]);
    //            }
    //        }
    //        else {
    //            $('#cb' + Checkbox).removeAttr("checked");
    //        }

    //    }
    //    //   }

    //    var parentid = myTreeGrid.getParentId($(checkbox).attr('row-id'));
    //    if (parentid == 0) {
    //        if ($(checkbox).attr("checked") == "checked") {

    //            RowIDs.IDs.push($(checkbox).attr("id").split('_')[1]);
    //        }
    //        else {
    //            var index = RowIDs.IDs.indexOf($(checkbox).attr("id").split('_')[1]);
    //            RowIDs.IDs.splice(index, 1);

    //        }
    //    }
    //    SetParentCheckbox(parentid);

    //}

    //function SetParentCheckbox(parentid) {
    //    var flag = true;
    //    if (parentid != 0) {
    //        RowIDs = {
    //            IDs: []
    //        }
    //        CheckedSubitems = myTreeGrid.getAllSubItems(parentid).split(',');

    //        if (CheckedSubitems.length >= 1) {

    //            for (var i = 0; i < CheckedSubitems.length; i++) {
    //                if ($('#cb' + CheckedSubitems[i]).attr("checked") == "checked") {

    //                    flag == true
    //                    RowIDs.IDs.push(CheckedSubitems[i].split('_')[1]);
    //                }
    //                else {
    //                    var index = RowIDs.IDs.indexOf(CheckedSubitems[i].split('_')[1]);
    //                    if (index >= 0) {
    //                        RowIDs.IDs.splice(index, 1);
    //                    }
    //                    flag = false;
    //                }
    //            }

    //        }
    //        if (flag == true) {
    //            $('#cb' + parentid).attr("checked", "checked")
    //            RowIDs.IDs.push($('#cb' + parentid).attr("id").split('_')[1]);
    //        }
    //        else {
    //            $('#cb' + parentid).removeAttr("checked");
    //        }
    //        var parentid = myTreeGrid.getParentId($('#cb' + parentid).attr('row-id'));
    //        SetParentCheckbox(parentid);
    //    }
    //    return;
    //}

    ////End
    function AddRow(cntrl) {
        var controlid = $(cntrl).attr('id');
        if (AddNewrow == false && EditRowID == controlid) {
            return false;
        }
        else {

        DisplayPopUpMenu(cntrl);
        return false;
    }
    }

    function AddNewRowbyType(itemType, cntrl) {
        if (_isNewRowAdd == false) {
             $("#hdnNewItemType").val(itemType);
            var row_id = $(cntrl).attr('row-id');

            //var rowId = myTreeGrid.getSelectedId();
            //var rowindex = myTreeGrid.getRowIndex(row_id.toString());

            var childrencount = myTreeGrid.hasChildren(row_id); // Get Current Row Children count.
            var insertrowindex = childrencount + 1;
            /*Start: Get ParentId and BudgetDetailId from RowId */
            var budgetDetailId = 0;
            var isRootMostParent = IsRootMostParentId(row_id);
            if (row_id !== null && row_id !== 'undefined' && row_id !== '') {

                if (itemType.toLowerCase() == 'parallelitem' && !isRootMostParent) {
                    var curntRowParentId = myTreeGrid.getParentId(row_id);
                    var arr = curntRowParentId.split('_');
                    if (arr !== null && arr !== 'undefined' && arr.length > 0) {
                        if (arr[1] != null && arr[1] != 'undefined') {
                            _newParentId = budgetDetailId = arr[1];
                        }
                    }
                }
                else if (itemType.toLowerCase() == 'childitem') {
                var arr = row_id.split('_');
                if (arr !== null && arr !== 'undefined' && arr.length > 0) {
                    if (arr[1] != null && arr[1] != 'undefined') {
                        _newParentId = budgetDetailId = arr[1];
                    }
                }
            }
                else {
                    _newParentId = budgetDetailId = 0;
                }
            }
            // Create RowId for newRecord.
            _newrowid = "new" + insertrowindex.toString() + "_0_" + _newParentId;  // RowId format: NameofItem_BudgetDetailId_ParentId.
            _isNewRowAdd = true;
            _parentRowId = row_id;
            _row_parentId = _row_parentId + "," + _newrowid + "~" + _newParentId + "~" + row_id; // Store NewRowId & ParentRowId in global variable This variable use to save data in OnEditCell event.
            $("#hdn_row_parentId").val(_row_parentId);
            /*End: Get ParentId and BudgetDetailId from RowId */

            if (itemType.toLowerCase() == 'childitem') {
                myTreeGrid.addRow(_newrowid, ["New item", "Edit Forecast", "<div id='dv" + _newrowid + "' class='finance_grid_add' row-id='" + _newrowid + "' title='Add New Row' ></div><div id='cb" + _newrowid + "' row-id='" + _newrowid + "' onclick='CheckboxClick(this)' class='grid_Delete'></div>", "0", "0", "0", "0", "0"], -1, row_id);
            }
            else if (isRootMostParent) {
                myTreeGrid.addRow(_newrowid, ["New item", "Edit Forecast", "<div id='dv" + _newrowid + "' class='finance_grid_add' row-id='" + _newrowid + "' title='Add New Row' ></div><div id='cb" + _newrowid + "' row-id='" + _newrowid + "' onclick='CheckboxClick(this)' class='grid_Delete'></div>", "0", "0", "0", "0", "0"]);
            }
            else {
                // Insert record at Parallel Level.
                var curntRowParentId = myTreeGrid.getParentId(row_id);
                myTreeGrid.addRow(_newrowid, ["New item", "Edit Forecast", "<div id='dv" + _newrowid + "' class='finance_grid_add' row-id='" + _newrowid + "' title='Add New Row' ></div><div id='cb" + _newrowid + "' row-id='" + _newrowid + "' onclick='CheckboxClick(this)' class='grid_Delete'></div>", "0", "0", "0", "0", "0"], -1, curntRowParentId);
            }
            
            var titleIndex = myTreeGrid.getColIndexById('title');
            myTreeGrid.setCellTextStyle(_newrowid, titleIndex, "border-right:0px solid #d4d4d4;");
            myTreeGrid.openItem(row_id);
            $("#gridbox").find("table").css("width", gridWidth);
            //myTreeGrid.enableValidation(true);
            
            //myTreeGrid.cells(_newrowid, titleIndex).setAttribute("validate", "NotEmpty");

            //myTreeGrid.setItemText(_newrowid, 'new text')
            //var sdateindex = myTreeGrid.getColIndexById('Tree');

            //if (childrencount == null || childrencount == 'undefined' || childrencount == '' || childrencount.toString() == "0") {
            //    UpdateActionColumn(budgetDetailId);
            //}

            var _newRowIndex = myTreeGrid.getRowIndex(_newrowid.toString());
            myTreeGrid.selectRow(_newRowIndex);
            myTreeGrid.selectCell(_newRowIndex, 0, false, false, true, true);
            //myTreeGrid.cells(_newrowid, titleIndex).edit();
            //myTreeGrid.selectCell(_newRowIndex, titleIndex, false, true, true);
            event.cancelBubble = true;
        }
    }

    function OnEditCell(stage, id, index, newVal, oldVal) {

        ValidParentId = myTreeGrid.getParentId(id);
        ValidColumnId = index;
        ValidRowId = id;

        var selectIndex = myTreeGrid.getColIndexById('SelectBox');
        if (stage == 1) {
            AddNewrow = false;
            EditRowID = $("#dv" + id + "").attr('id');
            DeletIconID = $("#cb" + id + "").attr('id');
             
        }
        //$("#dv" + id + "").unbind();
        //$("#cb" + id + "").unbind();
        if (stage == 0 && index == selectIndex) return true;
        var _val = $("#hdn_row_parentId").val();
        var splitRowParentIds = '';
        var rowId = '', parentId = '', parentRowID = '';
        var itemIndex = -1;
        if (_row_parentId != null && _row_parentId.length > 0) {
            splitRowParentIds = _row_parentId.split(',');
            $.each(splitRowParentIds, function (key, val) {
                rowId = val.split('~')[0];
                parentId = val.split('~')[1];
                parentRowID = val.split('~')[2];
                itemIndex = key;
                if (rowId == id) {
                    return false;
                }
            });
        }

        if (rowId != id && stage.toString() == '0') {
            if (id != null && id != 'undefined' && id != '') {
                arr = id.split('_');
                if (arr.length > 0) {
                    var isEdit = arr[3];
                    if (isEdit.toString().toLowerCase() == 'false') {    // if user does not have create/Edit permission then return.
                        return false;
                    }
                }
            }
        }

        if (stage.toString() == '0' || stage.toString() == '1') {
            return true;
        }
        if (IsValid) {
        if (stage.toString() == '2') {

            //var _budgetIdVal = $('#ddlParentFinanceMain').val();
            var _budgetIdVal = $("#hdnBudgetId").val();
            if (newVal == null || newVal == '' || newVal == oldVal) {
                AddNewrow = true;
                return false;
            }
            else {
                if (rowId == id) {
                    var newitemType = $("#hdnNewItemType").val();
                    var isRootMostParentId = IsRootMostParentId(parentRowID);
                    var isNewBudget = false;
                    if (isRootMostParentId && newitemType.toLowerCase() == 'parallelitem') {
                        parentId = '0';
                        parentRowID = '';
                        isNewBudget = true;
                    }

                    SaveNewBudgetDetail(_budgetIdVal, newVal, parentId, parentRowID, isNewBudget);
                    RefreshBudgetDropdown(false);
                    //myTreeGrid.openItem(parentId);
                    $("#hdnNewItemType").val('');
                    _newrowid = "";
                    _isNewRowAdd = false;
                    _newParentId = 0;
                    _parentRowId = "";
                    return true;
                }
                else {
                    if (id != null && id != 'undefined' && id != '') {
                        arr = id.split('_');
                        if (arr.length > 0) {
                            var budgetDetailId = arr[1];
                            parentId = arr[2];
                            var isEdit = arr[3];
                            if (isEdit.toString().toLowerCase() == 'true') {    // if user has create/Edit permission then update.
                                UpdateBudgetDetail(_budgetIdVal, newVal, budgetDetailId, parentId, parentRowID);
                                RefreshBudgetDropdown(false);
                            }
                            else {
                                return false;
                            }
                        }
                    }
                }
            }
        }
            
            return true;
        }
        //}
        //else {
        //    return false;
        //}
        //alert(id);
        return true;
    };

    //function UpdateActionColumn(budgetDetailId) {
    //    var actionIndex = myTreeGrid.getColIndexById('action');
    //    var newAction = "<a href='#' onclick='EditBudget(" + budgetDetailId.toString() + ")'>Edit Budget</a>"
    //    myTreeGrid.cells(actionIndex).setValue(newAction);
    //}
    function SaveNewBudgetDetail(budgetId, budgetDetailName, parentId, parentRowID,isNewBudget) {
        //budgetId = 8;
        var mainTimeFrame = $('#ddlMainGridTimeFrame').val();
        var url = "@Url.Content("~/Finance/SaveNewBudgetDetail")";
        $("#divGridView").load(url + '?BudgetId=' + budgetId + '&BudgetDetailName=' + escape(budgetDetailName) + '&ParentId=' + parentId + '&mainTimeFrame=' + mainTimeFrame + '&isNewBudget=' + isNewBudget, function () {
            if (!isNewBudget) {
            myTreeGrid.openItem(parentRowID);
            }
        });
        AddNewrow = true;
    }
    function UpdateBudgetDetail(budgetId, budgetDetailName, budgetDetailId, parentId, parentRowID) {
        //budgetId = 8;
        var mainTimeFrame = $('#ddlMainGridTimeFrame').val();
        var url = "@Url.Content("~/Finance/UpdateBudgetDetail")";
        $("#divGridView").load(url + '?BudgetId=' + budgetId + '&BudgetDetailName=' + escape(budgetDetailName) + '&BudgetDetailId=' + budgetDetailId + '&ParentId=' + parentId + '&mainTimeFrame=' + mainTimeFrame, function () {
            myTreeGrid.openItem(parentRowID);
        });
    }
    function IsRootMostParentId(curntRowid) {
        var parentid = myTreeGrid.getParentId(curntRowid);
        var result = false;
        if (parentid == null || parentid == 'undefined' || parentid <= 0) {
            result = true;
        }
        return result;
    }
</script> 