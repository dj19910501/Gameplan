@model RevenuePlanner.Models.BoostImprovementTacticModel
@using RevenuePlanner.Helpers;
@{
    string MetricType_CR = Enums.MetricType.CR.ToString();
    string MetricType_SV = Enums.MetricType.SV.ToString();
    string MetricType_Size = Enums.MetricType.Size.ToString();
    string colorCode = "C6EBF3";

    if (!string.IsNullOrEmpty(Model.ColorCode))
    {
        colorCode = Model.ColorCode;
    }
    
}

<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom> @*Modified by Bhumika #2003 from "buttom" to "button"  *@

<style type="text/css">
    #errorMessageImprovmentTacticType
    {
        margin-bottom: 15px !important;
    }

    #spanMessageImprovmentTacticType {
    margin-left: 5px;
    }

    .DivLeftSection
    {
        width: 220px;
        float: left;
    }

    .DivLeftSection-withPadding
    {
        width: 220px;
        float: left;
        padding-left: 39px;
    }
</style>

<div id="errorMessageImprovmentTacticType" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error! </strong><span id="spanMessageImprovmentTacticType"></span>
</div>
@Html.HiddenFor(model => model.ImprovementTacticTypeId, new { id = "ImprovementTacticTypeId" })

@using (Html.BeginForm(new { @id = "frmSaveTactic" }))
{
    <div class="modal-popup-title" style="float:left;width:100%;">
        <span class="icon-flag bg-purple " style="background-color:#@colorCode !important;"></span>
        <h2 class="title-simple source-sans-prolight" style="float: left;margin-top:0;">
            <span>
                <span id="lblProgramTitle"  class="tipsyclassTitle" title="@HttpUtility.HtmlDecode(Model.Title)">Improvement Tactic Type</span>
            </span>
        </h2>
        @if(Model.ImprovementTacticTypeId > 0)
        {      
        <div class="delete-btn-tab" style="float: right;">
            <button class="delete-btn-gray" id="btndeleteImprovementTactic" style="margin-top: 0px;" type="button">Delete</button>
        </div>
        }
    </div>

    <div id="divTab">
        <div id="frm_tactics" name="frm_tactics">
            <div class="inspect-column-parent source-sans-proregular remove-bottom-border inspect-column-parent-reformatting inspect_attribute_parent">
                <div class="span6" id="inspect-modal-left-column1">
                    <h3 id="ImprovHeaderTitle" class="modal-popup-innertitle source-sans-proregular">Details</h3>
                    <div class="DivLeftSection">
                        <p>@Html.Raw("Improvement Tactic Type") <span class="required-asterisk">*</span></p>
                        @Html.TextBox("hdntitle", HttpUtility.HtmlDecode(Model.Title), new { @class = "span12 input-small truncate", title = Model.Title, placeholder = "Required", require = "true", maxlength = "100" })
                    </div>
                    <div class="DivLeftSection-withPadding">
                        <p>@Html.Raw("Cost")</p>
                        @Html.TextBoxFor(model => model.Cost, new { require = "true", id = "hdnCost", @class = "currency_dollar", maxlength = @RevenuePlanner.Helpers.Common.maxLengthDollar })
                    </div>
                    <p style="clear: both;">@Html.Raw("Description")</p>
                    @Html.TextArea("hdndesc", HttpUtility.HtmlDecode(Model.Description), new { @class = "impromentTacticType-span12 text-area-size", placeholder = "Optional" })
                    <div class="DivLeftSection">
                        <p>Status</p>
                        @Html.TextBoxFor(model => model.IsDeployed, new { @readonly = true, id = "t_status" })
                    </div>
                    <div class="DivLeftSection-withPadding">
                        <p class="clear-section">Deployed to Integration</p>
                        @if (Model.IsDeployedToIntegration)
                        {
                            <input id="t_integration_status" name="t_status" type="text" class="icon-check-blue" placeholder="Deployed to Integration" maxlength="18" readonly />
                        }
                        else
                        {
                            <input id="t_integration_status" name="t_status" type="text" class="icon-check-gray" placeholder="Not Deployed to Integration" maxlength="18" readonly />
                        }
                    </div>
                </div>
                <div class="ImprovementTacticType-span3" id="inspect-modal-left-column3" style="width: 44% !important; margin-left: 5%">
                    <h3 class="modal-popup-innertitle source-sans-proregular" id="ImprovHeaderWeight">Improvement Weight(1-5)</h3>
                    <div class="accordion" id="accordion-1">
                        <table id="tblCR_SV">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th style="width: 24px;"></th>
                                    <th title="Conversion" style="font-weight: normal;">Conversion Weight <span class="required-asterisk">*</span>
                                    </th>
                                    <th style="width: 15px;"></th>
                                    <th title="Velocity" style="font-weight: normal;">Velocity Weight <span class="required-asterisk">*</span></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.listMetrics.Where(m => m.MetricType == MetricType_CR || m.MetricType == MetricType_SV))
                                {
                                    <tr>
                                        <td title="@item.MetricName" style="width:82px;">
                                            <span class="truncate" title="@item.MetricName" style="vertical-align: super;">
                                                @Html.DisplayFor(model => item.MetricName)
                                            </span>
                                        </td>
                                        <td style="width: 10px;"></td>
                                        <td class="Improvement-Width-TacticType">
                                            @Html.TextBoxFor(model => item.ConversionValue, new { placeholder = "Required", require = "true", @class = "priceValue", maxlength = "1", id = @item.MetricID_CR })
                                        </td>
                                        <td style="width: 15px;"></td>
                                        <td class="Improvement-Width-TacticType">
                                            @Html.TextBoxFor(model => item.VelocityValue, new { placeholder = "Required", @class = "priceValue", require = "true", maxlength = "1", id = @item.MetricID_SV })

                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <table id="tblSize" style="width: 100%;">
                            <tbody>
                                @foreach (var item in Model.listMetricssize.Where(m => m.MetricType == MetricType_Size))
                                {
                                    <tr>
                                        <td title="@item.MetricName" style="width:82px;">
                                            <span class="truncate" title="@item.MetricName" style="vertical-align: super;">
                                                @Html.DisplayFor(model => item.MetricName)
                                            </span>
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(model => item.ConversionValue, new { placeholder = "Required", @class = "priceValue Improvement-Width-TacticType-ADS", require = "true", maxlength = "1", id = @item.MetricID_Size, @value = "0" })
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div style="width: 100%; clear: both; margin-bottom: 90px;" class="wraper-btns cf border-top-div ">
                <div class="span2 btn-save" style="width: 80px;">
                    <button id="save_tactic" class="btn btn-blue text-shadow-blue source-sans-proregular margin-top23" type="button">Save</button>
                </div>
                <div class="span2">
                    <button id="cancelImporvementTacticPopup" data-dismiss="modal" class="close-form btn-link source-sans-proregular" type="button">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">

    $(document).ready(function () {
        $("#successMessage").slideUp(10);
        $(".priceValue").keydown(function (e) { priceFormatKeydown(e); });
        $(".priceValue").change(function (e) { priceFormatChange(e) });

        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

        $('.close-form', this.$panel).click(function (e) {
            $("#slidepanel").css("display", "none");
            $("#slidepanel-container").empty();
        });

        $("#frm_tactics #t_integration_status").click(function () {
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Not Deployed to Integration");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");
            }
            else {
                $(this).val("Deployed to Integration");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
            }
        });

        var status = $("#frm_tactics #t_status").val();
        if (status != "True") {
            $("#frm_tactics #t_status").val("Not Active");
            $("#frm_tactics #t_status").addClass("icon-check-gray");
        }
        else {
            $("#frm_tactics #t_status").val("Active");
            $("#frm_tactics #t_status").addClass("icon-check-blue");
        }

        $("#frm_tactics #t_status").click(function () {
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Not Active");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");
            } else {
                $(this).val("Active");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
            }
        });

        $('form').find('input[type=text], select, textarea').each(function () {
            var iserror = false;
            $(this).change(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val() == '') {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
            if (iserror) {
                ShowError('@Common.objCached.ValidateForEmptyField');
                return false;
            }
        });

        $("#save_tactic").click(function () {
            var iserror = false;
            var val = 0;
            var cntFill = 0;
            var cntNotFill = 0;
            var wrongval = 0
            if ($("#hdntitle").val() == '') {
                $("#hdntitle").addClass("error");
                $('#accordion-1 input[type=text]').each(function () {
                    var val = $(this).val();
                    if (val > 0) {
                        cntFill = cntFill + 1;
                        if (val > 5) {
                            wrongval = wrongval + 1;
                            $(this).addClass("error");
                        }
                    }
                    else {
                        cntNotFill = cntNotFill + 1;
                    }
                });
                if (cntFill < 1) {
                    $('#accordion-1 input[type=text]').each(function () {
                        $(this).addClass("error");
                    });
                }
                ShowError("@Common.objCached.ValidateForEmptyField");
                iserror = true;
                return false;
            }
            var id = $("#ImprovementTacticTypeId").val();
            val = 0;
            cntFill = 0;
            cntNotFill = 0;
            wrongval = 0
            $('#accordion-1 input[type=text]').each(function () {
                var val = $(this).val();
                if (val > 0) {
                    cntFill = cntFill + 1;
                    if (val > 5) {
                        wrongval = wrongval + 1;
                        $(this).addClass("error");
                    }
                }
                else {
                    cntNotFill = cntNotFill + 1;
                }
            });
            if (cntFill < 1) {
                ShowError("@Common.objCached.ValidateForEmptyImprovementWeight");
                $('#accordion-1 input[type=text]').each(function () {
                    $(this).addClass("error");
                });
                iserror = true;
                return false;
            }
            if (wrongval != 0) {
                ShowError("@Common.objCached.ValidateForNumericDigitOneToFive");
                iserror = true;
                return false;
            }
            var status = false;
            if ($("#t_status").hasClass("icon-check-blue")) {
                status = true;
            }
            if (iserror) {
                return false;
            }

            var ids = '[';
            $('#tblCR_SV input[type=text]').each(function () {
                var val = $(this).val();
                var id = $(this).attr('id');
                var name = $(this).attr('name');
                console.log(name);
                var Stagetype = '';
                if (name == "item.ConversionValue") {
                    Stagetype = '@MetricType_CR';
                } else if (name == "item.VelocityValue") {
                    Stagetype = '@MetricType_SV';
                }
                if (val > 0) {
                    ids += '{"StageId":"' + id + '","StageType":"' + Stagetype + '","Value":"' + val + '"},';
                }
            });
            $('#tblSize input[type=text]').each(function () {
                var val = $(this).val();
                var id = $(this).attr('id');
                var Stagetype = '@MetricType_Size';
                if (val > 0) {
                    ids += '{"StageId":"' + id + '","StageType":"' + Stagetype + '","Value":"' + val + '"},';
                }
            });
            var isDeployedToIntegration = false;
            if ($("#t_integration_status").hasClass("icon-check-blue")) {
                isDeployedToIntegration = true;
            }
            var title = htmlEncode($("#hdntitle").val());
            var description = htmlEncode($("#hdndesc").val());
            $.ajax({
                type: 'post',
                url: '@Url.Content("~/Boost/saveImprovementTacticData")',
                data: 'improvementId=' + $("#ImprovementTacticTypeId").val() + '&improvementDetails=' + ids.substr(0, ids.length - 1) + ']' + '&status=' + status + '&cost=' + ReplaceCC($("#hdnCost").val()) + '&desc=' + escape(description)
                       + '&title=' + escape(title) + '&deployToIntegrationStatus=' + isDeployedToIntegration,
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.redirect) {
                            $("#modal-container-186470").modal('hide');
                            window.location.href = data.redirect;
                            return;
                        }
                        if (data.errormsg) {
                            ShowError(data.errormsg);
                            return false;
                        }
                    }
                }
            });
        });
        function ShowError(value) {
            $("#errorMessageImprovmentTacticType").slideDown(400);
            $("#spanMessageImprovmentTacticType").empty();
            $("#spanMessageImprovmentTacticType").text(value);
            return false;
        }
        TruncateMetricName();
});

    $("#btndeleteImprovementTactic").click(function () {
        if (confirm('Are you sure you want to delete this improvement tactic type?')) {
            var idTactic = $("#ImprovementTacticTypeId").val();
            $.ajax({
                type: 'GET',
                cache: false,
                dataType: "json",
                url: '@Url.Content("~/Boost/deleteImprovementTactic")',
                    data: { improvementId: idTactic },
                    success: function (data) {
                        if (typeof data.status != undefined && data.status != 'undefined') {
                            if (parseInt(data.status) == 0) {
                                $("#modal-container-186470").modal('hide');
                                window.location.href = data.redirect;
                                return;
                            }
                            else {
                                ShowError(data.errormsg);
                                return false;
                            }
                        }
                    }
                });
            }
            else {
                return false;
            }
     });

    @* Added By :- Sohel on 21/04/2014 for PL ticket #160 to display unwrapped text. *@
    function TruncateMetricName() {
        $("#tblCR_SV").find('.truncate').each(function () {
            var title = $(this).text().trim();
            var mainText = title;
            if (title.length >= 11) {
                title = title.substring(0, 11) + "...";
                $(this).prop('title', mainText);
            }
            $(this).text(title);
        });

        $("#tblSize").find('.truncate').each(function () {
            var title = $(this).text().trim();
            var mainText = title;
            if (title.length >= 11) {
                title = title.substring(0, 11) + "...";
                $(this).prop('title', mainText);
            }
            $(this).text(title);
        });
    }

    
    @* Added By :- Sohel on 20/05/2014 for PL ticket #457 to delete a improvement tactic *@
    function ShowError(value) {
        $("#errorMessageImprovmentTacticType").slideDown(400);
        $("#spanMessageImprovmentTacticType").empty();
        $("#spanMessageImprovmentTacticType").text(value);
    }

    $('.close').click(function () {
        $("#errorMsg").css("display", "none");
        $("#errorMessageImprovmentTacticType").slideUp(50);
        $("#spanMessageImprovmentTacticType").empty();
    });

    $('.close-x-big-icon').click(function () {
        $("#modal-container-186470").addClass("transition-close");
        $("#modal-container-186470").removeClass("transition_y");
        $('body').removeClass('bodyOverflow');
        addDefaultModalPopupBackgroungColor();
    });

    $('#cancelImporvementTacticPopup').click(function () {
        $("#modal-container-186470").addClass("transition-close");
        $("#modal-container-186470").removeClass("transition_y");
        $('body').removeClass('bodyOverflow');
        addDefaultModalPopupBackgroungColor();
    });

    
</script>
