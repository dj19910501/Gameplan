@model IEnumerable<RevenuePlanner.Models.BestInClassModel>
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@{
    ViewBag.Title = "Best In Class Metrics";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Boost;
    Layout = "~/Views/Shared/_Layout.cshtml";

    //added by uday for PL #501 removed old variables and added below new ones
    string StageType_CR = Enums.StageType.CR.ToString();
    string StageType_SV = Enums.StageType.SV.ToString();
    string StageType_Size = Enums.StageType.Size.ToString();
}

@section Sidebar {
    <div class="padding-content2">
        <h4 class="text-shadow-black source-sans-prolight">Boost Summary</h4>
    </div>
    <ul class="nav nav-list nav-gray">
        <li class="item">
            <a class="source-sans-probold inputs tactics" id="aTactic" href="#"><span></span>TACTICS</a>
        </li>
        <li class="item active">
            <a class="source-sans-probold organization" href="#"><span class="trophy"></span>BEST IN CLASS</a>
        </li>
    </ul>
}

<!--success message-->
<div id="successMessage" class="alert hide alert-success message-position">
    <a class="close">×</a>
    <strong>Success.</strong> <span id="spanMessageSuccess"></span>
</div>
<!--success message-->

<!--error message-->
<div id="errorMessage" class="alert hide alert-error message-position">
    <a class="close">×</a>
    <strong>Error!</strong> <span id="spanMessageError"></span>
</div>
<!--error message-->

<ul class="nav nav-tabs">
    <li class="source-sans-proregular">
        <h2 class="title-header">Best In Class Metrics</h2>
    </li>
</ul>
<div class="padding-content cf source-sans-proregular">
    <div class="row">
        <div class="span2 column-left">
            <div class="padding-right70">
                <label class="align-top">Add Best-in-Class values to be used when applying Boost calculations.</label>
            </div>
        </div>
        <div class="span10 best-inClass column-right">
            <table class="table table-striped table-hover table-header" id="tblCR_SV">
                <thead>
                    <tr>
                        <th title="Stage">Stage
                        </th>
                        <th title="Conversion (%)" class="text-align-right">Conversion (%)
                        </th>
                        <th title="Velocity (Days)" class="text-align-right">Velocity (Days)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Where(m => m.StageType != StageType_Size))
                    {
                        <tr class="bestInClassRow">
                            <td title="@item.StageName" class="title1">
                                @Html.DisplayFor(model => item.StageName)
                            </td>
                            <td>
                                <input id="@item.StageID_CR" class="backgroundC6EBF3 text-align-right width88px input-table priceValue inputCR" maxlength="@RevenuePlanner.Helpers.Common.maxLengthPercentageValue" value="@item.ConversionValue" />
                            </td>
                            <td>
                                <input id="@item.StageID_SV" class="backgroundC6EBF3 text-align-right width88px input-table priceValue inputSV" maxlength="@RevenuePlanner.Helpers.Common.maxLengthPercentageValue" value="@item.VelocityValue"/>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <br />
            <table class="table table-striped table-hover table-header2" id="tblSize">
                <thead>
                    <tr>
                        <th title=""></th>
                        <th title="Improvement (%)">Improvement (%)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Where(m => m.StageType == StageType_Size))
                    {
                        <tr class="bestInClassRow">
                            <td title="@item.StageName" class="title1">
                                @Html.DisplayFor(model => item.StageName)
                            </td>
                            <td>
                                <input id="@item.StageID_Size" class="backgroundC6EBF3 text-align-right width88px input-table priceValue inputSize" maxlength="@RevenuePlanner.Helpers.Common.maxLengthPercentageValue" value="@item.ConversionValue" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="cf inputs-aligned-horizontal">
                <div class="container-button">
                    <input id="btnSubmit" type="submit" value="Save" title="Save" class="btn btn-blue btn-large text-shadow-blue source-sans-proregular" />
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        $("#aTactic").click(function () {
            url = '@Url.Content("~/Boost/Index")';
                 window.location.href = url;
             });
        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");

        var callit = true;
        $("#btnSubmit").click(function () {
            if (callit) {
                CheckUserSession("#btnSubmit", true);
                if (reason == 'user') {
                    return false;
                }
            }
            var _BIC = [];

            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");

            //region added by uday for PL ticket #501
            $('#tblCR_SV').find('input').each(function () {
                var thisValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                var stageType = null;
                var thisId = $(this).attr('id');

                if ($(this).hasClass('inputCR')) {
                    stageType = 'CR';
                    _BIC.push({
                        StageID_CR: thisId,
                        StageID_SV: null,
                        StageID_Size: null,
                        StageName: null,
                        StageType: stageType,
                        ConversionValue: thisValue,
                        VelocityValue: null
                    });
                }
                else if ($(this).hasClass('inputSV')) {
                    stageType = 'SV';
                    _BIC.push({
                        StageID_CR: null,
                        StageID_SV: thisId,
                        StageID_Size: null,
                        StageName: null,
                        StageType: stageType,
                        ConversionValue: null,
                        VelocityValue: thisValue
                    });
                }
            });

            $('#tblSize').find('input').each(function () {
                var thisValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                var thisId = $(this).attr('id');
                var stageType = null;

                if ($(this).hasClass('inputSize')) {
                    stageType = 'Size';

                    _BIC.push({
                        StageID_CR: null,
                        StageID_SV: null,
                        StageID_Size: thisId,
                        StageName: null,
                        StageType: stageType,
                        ConversionValue: thisValue,
                        VelocityValue: null
                    });
                }
            });
            _BIC = JSON.stringify({ 'bic': _BIC });

            $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: '@Url.Content("~/Boost/SaveBIC/")',
                data: _BIC,
                success: function (data) {
                    callit = false;
                    if (data != 'undefined') {
                        if (data.msg != '') {
                            $("#successMessage").css("display", "block");
                            var topsize = $(document).scrollTop() + 41;
                            $("#modal-container-186470").css("top", topsize + "px");
                            $("#spanMessageSuccess").empty();
                            $("#spanMessageSuccess").text(data.msg);
                            $("#successMessage").slideDown(3000);
                            $("#successMessage").slideUp(1200);
                        }
                        else {
                            $("#errorMessage").css("display", "block");
                            $("#spanMessageError").empty();
                            $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.InvalidError");
                        }
                    }
                    else {
                        $("#errorMessage").css("display", "block");
                        $("#spanMessageError").empty();
                        $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.InvalidError");
                    }
                },
                error: function () {
                    callit = false;
                    $("#errorMessage").css("display", "block");
                    var topsize = $(document).scrollTop() + 41;
                    $("#modal-container-186470").css("top", topsize + "px");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });

        });

        $('.inputCR').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0, isDouble: true });

        $('.inputSize').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0, isDouble: true });

        $('.inputSV').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
       
        //function to add or remove class ERROR when inputs text are empty.
        $('input').blur(function () {
            if ($(this).attr('type') == 'text') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                } else {
                    $(this).removeClass("error");
                }
            }
        });
    });

</script>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
