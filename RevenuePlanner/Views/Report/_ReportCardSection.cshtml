@model RevenuePlanner.Models.CardSectionModel
@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@using Newtonsoft.Json;
@{
    var cardsectionList = Model.CardSectionListModel != null ? JsonConvert.SerializeObject(Model.CardSectionListModel) : string.Empty;

    // Add By Nishant Sheth For pagination dropdwon with Enums
    List<RevenuePlanner.Models.ViewByModel> ListPageSize = new List<RevenuePlanner.Models.ViewByModel>();
    foreach (var PerPage in Enums.PerPageSize)
    {
        ListPageSize.Add(new RevenuePlanner.Models.ViewByModel { Text = PerPage.Value, Value = PerPage.Value });
    }

    List<RevenuePlanner.Models.ViewByModel> ListSortBy = new List<RevenuePlanner.Models.ViewByModel>();
    foreach (var SortBy in Enums.SortByRevenueDrp)
    {
        ListSortBy.Add(new RevenuePlanner.Models.ViewByModel { Text = SortBy.Key, Value = SortBy.Value });
    }
    var TotalRecords = Model.TotalRecords;
    var CurrentPageNum = Model.CuurentPageNum;

                    // End By Nishant Sheth
}
<style>
    .carvdval-block
    {
        display: block;
    }
</style>
<div class="revenue-filter" id="div-revenue-filter">
    <div class="sorting" style="width: auto;">
        <div class="geography-dropdown">
            <h5>Sort By</h5>
            <div class="select-sortby">
                @Html.DropDownList("ddlSortby", new SelectList(ListSortBy.ToList(), "Value", "Text"), new { onchange = "javascript:SortByFunction();" })
            </div>
        </div>
        <div class="geography-dropdown">
            <h5>Items Per Page</h5>
            <div class="select-item">
                @Html.DropDownList("Itemsperpage", new SelectList(ListPageSize.ToList(), "Value", "Text"), new { onchange = "javascript:ItemsPerPagefunction();" })
            </div>
        </div>

    </div>

    <input type='hidden' id='current_page' />
    <input type='hidden' id='show_per_page' />
    <div class="search">
        <input id="txtSearch" />

        <button class="search-btn" onclick="SearchByTitle($('#txtSearch').val())" id="btnSearch">search</button>


    </div>
</div>
<div id="dvCardSectionData"></div>
<div class="card-pagination" id="div-card-pagination">
    <div class="paging" id="page_navigation" style="width: 100%">
    </div>
      <div id="NorecordfoundMsg" style="border-top:none; display:none;" class="NoDataFound">No results found.</div> @*PL #1399 dashrath prajapati*@
    @*<div id="errorMessage" class="alert alert-error hide message-position-small">
          <a class="close" id="iclose">×</a>
        <span id="NoRecFound"></span>
    </div>*@
</div>
<script type="text/javascript">

    //var BackParentLabel = '';
    //var BackChildLabel = '';
    //var BackId = '';
    //var IsBack = '';
    //var BackHeadTitle = "";

    var list = [];
    var listid = [];
    var SearchVal = [];
    var number_of_pages;
    var ParentLabel = '@ViewBag.ParentLabel';
    var childlabelType = '@ViewBag.childlabelType';
    // var RevIsnextprev = false;
    //var childId = '@ViewBag.childId';
    var optionmain = '@ViewBag.option';
    $(window).bind("load", function () {
        //alert('Nishantr');
    });
    $(document).ready(function () {

        @*BackParentLabel = '@TempData["BackParentLabel"]';
        BackChildLabel = '@TempData["BackChildLabel"]';
        BackId = '@TempData["BackId"]';*@

        var _carddata = "@cardsectionList";
        var _CardData = (_carddata.toString().replace(/&quot;/g, '"'));
        _CardData = JSON.parse(_CardData);
        var _cardhtml = '';
        var _masterParentLabel = '', _title = '', _Revact_proj = '', _Revgoal = '', _Revpercentange = '', _Costact_proj = '', _Costgoal = '', _Costpercentange = '', _ROIact_proj = '', _ROIgoal = '', _ROIpercentange = '';
        var _Revdata = '', _Costdata = '', _ROIdata = '', _lineChartData = '';
        var _HeaderValue = '', _revActual_Projected, _revProjected, _revGoalYTD, _revGoalYear, _revActualPercentage, _revActualPercentageIsnegative, _revProjectedPercentage, _revProjectedPercentageIsnegative;
        var _fieldId = '';
        var rev = "Revenue", cost = "Cost", roi = "ROI";
        var actproj = "_act_proj", goal = "_goal", percntg = "_percentage";
        var _Revact_projId = '', _RevgoalId = '', _RevPercntgId = '', _Costact_projId = '', _CostgoalId = '', _CostPercntgId = '', _ROIact_projId = '', _ROIgoalId = '', _ROIPercntgId = '';
        var _btnDetailsId = '', _btnCompareId = '', _chkCompareId = '', _linechartDivId = '';
        var _revIsNegative = '';
        // Add BY Nishant Sheth
        // Desc: For Card Section details button click argument

        var divid = 1;// add by nishant sheth for give div id
        // End By Nishant Sheth

        //alert(_CardData.length);
        $.each(_CardData, function (key, value) {
            _title = value.title;
            _masterParentLabel = value.MasterParentlabel;
            _Revdata = value.RevenueCardValues;
            _Costdata = value.CostCardValues;
            _ROIdata = value.ROICardValues;
            _lineChartData = value.LineChartData;
            _HeaderValue = value.RevenueHeaderModel;
            list.push(_lineChartData);

            _Revact_proj = _Revdata.Actual_Projected;
            _Revgoal = _Revdata.Goal;
            _Revpercentange = _Revdata.Percentage;
            _revIsNegative = _Revdata.IsNegative;

            _Costact_proj = _Costdata.Actual_Projected;
            _Costgoal = _Costdata.Goal;
            _Costpercentange = _Costdata.Percentage;

            _ROIact_proj = _ROIdata.Actual_Projected;
            _ROIgoal = _ROIdata.Goal;
            _ROIpercentange = _ROIdata.Percentage;

            _fieldId = value.FieldId;

            //// Start Header value
            //_revActual_Projected = _HeaderValue.Actual_Projected;
            //_revProjected = _HeaderValue.Projected;
            //_revGoalYTD = _HeaderValue.GoalYTD;
            //_revGoalYear = _HeaderValue.GoalYear;
            //_revActualPercentage = _HeaderValue.ActualPercentage;
            //_revActualPercentageIsnegative = _HeaderValue.ActualPercentageIsnegative;
            //_revProjectedPercentage = _HeaderValue.ProjectedPercentage;
            //_revProjectedPercentageIsnegative = _HeaderValue.ProjectedPercentageIsnegative;
            _revActual_Projected = '';
            _revProjected = '';
            _revGoalYTD = '';
            _revGoalYear = '';
            _revActualPercentage = '';
            _revActualPercentageIsnegative = '';
            _revProjectedPercentage = '';
            _revProjectedPercentageIsnegative = '';
            // End Header value
            // Configure Details & Compare buttonID and CompareCheckbox ID.
            _btnDetailsId = 'buttonDtls_' + _fieldId;
            _btnCompareId = "buttonCmpr_" + _fieldId;
            _chkCompareId = "chk_" + _fieldId;
            _linechartDivId = "dvline_" + _fieldId;
            listid.push(_linechartDivId);

            _Revact_projId = rev + actproj + "_" + _fieldId;
            _RevgoalId = rev + goal + "_" + _fieldId;
            _RevPercntgId = rev + percntg + "_" + _fieldId;

            _Costact_projId = cost + actproj + "_" + _fieldId;
            _CostgoalId = cost + goal + "_" + _fieldId;
            _CostPercntgId = cost + percntg + "_" + _fieldId;

            _ROIact_projId = roi + actproj + "_" + _fieldId;
            _ROIgoalId = roi + goal + "_" + _fieldId;
            _ROIPercntgId = roi + percntg + "_" + _fieldId;

            var _titleSub = '';
            if (_title.length > 41) {
                _titleSub = '...';
            }
            _cardhtml = _cardhtml + '<div class="region-content" revenueval="' + _Revact_proj + '" costval="' + _Costact_proj + '" roival="' + _ROIact_proj + '" id="carddiv_' + divid + '" title="' + _title + '">';
            _cardhtml = _cardhtml + '<div>';
            _cardhtml = _cardhtml + '<div class="report-btn-group">';
            _cardhtml = _cardhtml + '<div>';
            _cardhtml = _cardhtml + '<p class="revanue-p">' + String(_title).substr(0, 40) + '' + _titleSub + '</p>';
            $("#titletext").val(_title).html();
            var _name = htmlEncode(_title);
            if (childlabelType != '@Common.RevenueTactic') {

                _cardhtml = _cardhtml + '<button id="' + _btnDetailsId + '" class="btn btn-blue text-shadow-blue source-sans-proregular" name="' + _btnDetailsId + '" onclick=javascript:CardDetailsClick("' + String(_masterParentLabel) + '","' + String(ParentLabel) + '","' + String(childlabelType) + '","' + String(_fieldId) + '","' + String(optionmain) + '","' + escape(_name) + '","' + String(_revActual_Projected) + '","' + String(_revProjected) + '","' + String(_revGoalYTD) + '","' + String(_revGoalYear) + '","' + String(_revActualPercentage) + '","' + String(_revActualPercentageIsnegative) + '","' + String(_revProjectedPercentage) + '","' + String(_revProjectedPercentageIsnegative) + '")>Details</button>';
            }
            _cardhtml = _cardhtml + '</div>';
            _cardhtml = _cardhtml + '<div>';

            _cardhtml = _cardhtml + '</div>';
            _cardhtml = _cardhtml + '</div>';

            _cardhtml = _cardhtml + '<div class="region-data region-data-reveune">';

            //_cardhtml = _cardhtml + '<div class="dataR" style="min-width:' + tempdivdatawidth + 'px">';
            _cardhtml = _cardhtml + '<div class="dataR" style="width:10%">';
            _cardhtml = _cardhtml + '<span class="title">Revenue</span>';
            _cardhtml = _cardhtml + '<p class="value"> <span class="cardval carvdval-block" add-sep="false" orig-val="' + _Revact_proj + '" id="' + _Revact_projId + '">' + _Revact_proj + '</span></p>';
            _cardhtml = _cardhtml + '<span class="title">Goal : </span><span class="inner-sub-value"></span><span class="cardsub sub-value" add-sep="true" orig-val="' + _Revgoal + '" id="' + _RevgoalId + '">' + _Revgoal + '</span>';
            _cardhtml = _cardhtml + '<p><span class="percentageval" orig-val="' + _Revpercentange + '" id="' + _RevPercntgId + '">' + _Revpercentange + '</span></p>';
            //_cardhtml = _cardhtml + '<span class="percentageval" orig-val="' + _Revpercentange + '" id="' + _RevPercntgId + '">' + _Revpercentange + '</span>';
            _cardhtml = _cardhtml + '</div>';

            //_cardhtml = _cardhtml + '<div class="dataR" style="min-width:' + tempdivdatawidth + 'px">';
            _cardhtml = _cardhtml + '<div class="dataR" style="width:10%">';
            _cardhtml = _cardhtml + '<span class="title">Cost</span>';
            _cardhtml = _cardhtml + '<p class="value"> <span class="cardval carvdval-block" add-sep="false" orig-val="' + _Costact_proj + '" id="' + _Costact_projId + '">' + _Costact_proj + '</span></p>';
            _cardhtml = _cardhtml + '<span class="title">Projected : </span><span class="inner-sub-value"></span><span class="cardsub sub-value" add-sep="true" orig-val="' + _Costgoal + '" id="' + _CostgoalId + '">' + _Costgoal + '</span>';
            _cardhtml = _cardhtml + '<p><span class="percentageval" orig-val="' + _Costpercentange + '" id="' + _CostPercntgId + '">' + _Costpercentange + '</span></p>';
            //_cardhtml = _cardhtml + '<span class="percentageval" orig-val="' + _Costpercentange + '" id="' + _CostPercntgId + '">' + _Costpercentange + '</span>';
            _cardhtml = _cardhtml + '</div>';

            //_cardhtml = _cardhtml + '<div class="dataR" style="min-width:' + tempdivdatawidth + 'px">';
            _cardhtml = _cardhtml + '<div class="dataR" style="width:10%">';
            //_cardhtml = _cardhtml + '<div class="data">';
            _cardhtml = _cardhtml + '<span class="title">ROI</span>';
            _cardhtml = _cardhtml + '<p class="value"> <span class="cardval carvdval-block" orig-val="' + _ROIact_proj + '" id="' + _ROIact_projId + '">' + _ROIact_proj + '</span></p>';
            _cardhtml = _cardhtml + '<span class="title">Goal : </span><span class="inner-sub-value"></span><span class="cardsub sub-value" add-sep="true" orig-val="' + _ROIgoal + '" id="' + _ROIgoalId + '">' + _ROIgoal + '</span>';
            _cardhtml = _cardhtml + '<p><span class="percentageval" orig-val="' + _ROIpercentange + '" id="' + _ROIPercntgId + '">' + _ROIpercentange + '</span></p>';
            //_cardhtml = _cardhtml + '<span class="percentageval" orig-val="' + _ROIpercentange + '" id="' + _ROIPercntgId + '">' + _ROIpercentange + '</span>';
            _cardhtml = _cardhtml + '</div>';


            _cardhtml = _cardhtml + '<div id="' + _linechartDivId + '" style="height:100%; width:35%;float:left;">';
            //_cardhtml = _cardhtml + '<div id="' + _linechartDivId + '" style="height:100%; width:419px;float:left;">';
            _cardhtml = _cardhtml + '</div>';

            _cardhtml = _cardhtml + '</div>';
            _cardhtml = _cardhtml + '</div>';
            _cardhtml = _cardhtml + '</div>';
            divid++;
        });
        $("#dvCardSectionData").html(_cardhtml);

        formatCardSectionValues();
        formatCardPercentageValue();
        formatSetsubValues();
        loadlineChart(list, listid);
        $("#ddlSortby,#Itemsperpage").multiselect({
            multiple: false,
            noneSelectedText: "Please Select",
            selectedList: 1,
        }).multiselectfilter({});

        LoadPagination();
        CheckData();

    });

    function loadlineChart(_chartdata, chartId) {


        for (i = 0; i < _chartdata.length; i++) {

            var linechartDivId = "#" + chartId[i].toString();
            BindLineChart(_chartdata[i].categories, _chartdata[i].todayValue, _chartdata[i].isDisplay, _chartdata[i].series, linechartDivId, 150, true);
            // $(linechartDivId).css('width', '200px');
        }

    }
    function formatSetsubValues() {
        var _TypeCol = $(".cardsub");
        var _formatednumber = '';
        var _type = '';
        $.each(_TypeCol, function (key, _cntrl) {
            var _cntrlId = $(_cntrl).attr('id');
            var _Id = "#" + _cntrlId;
            var text = $(_Id).attr('orig-val');
            //_type = $(_Id).attr('add-sep');
            if (text != null && text != 'undefined' && text != 'NaN') {
                if (_Id.indexOf("ROI") > 0) {
                    _formatednumber = setBootstrapTooltip(_Id, text, 5, false);
                }
                else {
                    _formatednumber = setBootstrapTooltip(_Id, text, 5, true);
                }

                $(_Id).html(_formatednumber);
            }
            var value = $(_Id).text();
            //$(_Id).html("/" + value);

        });
    }

    function formatCardSectionValues() {

        var _TypeCol = $(".cardval");
        var _formatednumber = '';
        var _type = '';
        $.each(_TypeCol, function (key, _cntrl) {
            var _cntrlId = $(_cntrl).attr('id');
            var _Id = "#" + _cntrlId;
            var text = $(_Id).attr('orig-val');
            //_type = $(_Id).attr('add-sep');
            if (text != null && text != 'undefined' && text != 'NaN') {
                if (_Id.indexOf("ROI") > 0) {
                    _formatednumber = setBootstrapTooltip(_Id, text, 5, false);
                }
                else {
                    _formatednumber = setBootstrapTooltip(_Id, text, 5, true);
                }
                $(_Id).html(_formatednumber);
            }
        });
    }

    function formatCardPercentageValue() {
        var _TypeCol = $(".percentageval");

        $.each(_TypeCol, function (key, _cntrl) {
            var _cntrlId = $(_cntrl).attr('id');
            var _lblPercentage = "#" + _cntrlId;
            var _text = $(_lblPercentage).attr('orig-val');
            var _percentage = parseFloat(_text);
            if (_percentage == null || _percentage == 'undefined' || _percentage == '' || _percentage == 'NaN') {
                _formtPercentage = "--";
                $(_lblPercentage).removeClass("above").removeClass("below");

            }
            else {
                if (_percentage < 0) {
                    _formtPercentage = '-' + FormatNumber(Math.abs(parseFloat(_percentage)), true);
                    $(_lblPercentage).removeClass("above").addClass("below")
                }
                else {
                    _formtPercentage = '+' + FormatNumber(Math.abs(parseFloat(_percentage)), true);
                    $(_lblPercentage).removeClass("below").addClass("above");
                }
            }
            $(_lblPercentage).html(_formtPercentage);
        });
    }

    /// Add By Nishant Sheth
    /// Desc: For card details section
    function CardDetailsClick(masterlabel, parentlabel, Type, id, OptionMain, HeadTitleval, _revActual_Projected, _revProjected, _revGoalYTD, _revGoalYear, _revActualPercentage, _revActualPercentageIsnegative, _revProjectedPercentage, _revProjectedPercentageIsnegative) {
        var _BackFwdVar = {
            BackParentLabel: parentlabel,
            BackChildLabel: Type,
            BackId: id,
            HeadHireachy: decodeURIComponent(HeadTitleval)
        }
        BackFwdRevenueList.push(_BackFwdVar);

        var BtnBack = document.getElementById('BtnBack');
        BtnBack.style.display = "block";

        var marketingDiv = document.getElementById('div-mareketing-drp');
        marketingDiv.style.display = "none";

        var _pushValue = {
            ActualProjected: _revActual_Projected.toString(),
            //Goal: _revGoal.toString(),
            revProjected: _revProjected.toString(),
            //Percentage: _revPercentage.toString(),
            //IsNegative: _isNegativePercentage.toString().toLowerCase(),
            revGoalYTD: _revGoalYTD.toString(),
            revActualPercentage: _revActualPercentage.toString(),
            revProjectedPercentage: _revProjectedPercentage.toString(),
            revActualPercentageIsnegative: _revActualPercentageIsnegative.toString().toLowerCase(),
            revProjectedPercentageIsnegative: _revProjectedPercentageIsnegative.toString().toLowerCase()
        }
        tempRevenueHeader.push(_pushValue); // Push Card Values to Temp global variable declare at _Revenue.cshtml page. This global variable use when user click on Back button.


        var AllocatedBy = $('#ddlRevenueTimeFrame option:selected').text();
        var Qurt_Month = AllocatedBy;
        myApp.showPleaseWait();

        var _url = "@Url.Content("~/Report/GetRevenueToPlanByFilter/")" + "?ParentLabel=" + parentlabel + "&childlabelType=" + Type + "&childId=" + id + "&option=" + OptionMain + "&IsQuarterly=" + Qurt_Month + "&BackHeadTitle=" + HeadTitleval + "&isDetails=" + true;
        $("#dvRevenueToPlan").load(_url);

        //formatHeaderValues(_revActualProj, _revGoal, _revPercentage, _isNegativePercntg);
        //formatHeaderValues(_revActual_Projected, _revProjected, _revGoalYTD, _revGoalYear, _revActualPercentage, _revActualPercentageIsnegative, _revProjectedPercentage, _revProjectedPercentageIsnegative);

        if (masterlabel == '@RevenuePlanner.Helpers.Common.RevenueCampaign') {
            if (Type == '@RevenuePlanner.Helpers.Common.RevenueCampaign') {
                $("#ddlCampaignRevenueToPlan").css('display', 'none');
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');

                // $("#ddlProgramRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', '');

                //  $("#ddlTacticRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardProgramDropDown(id, Type);
            }
            else if (Type == '@RevenuePlanner.Helpers.Common.RevenueProgram') {
                $("#ddlCampaignRevenueToPlan").css('display', 'none');
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');

                //     $("#ddlProgramRevenueToPlan").css('display', 'none');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', 'none');

                //   $("#ddlTacticRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardTacticDropDown(id, Type);
            }
        }
        else if (masterlabel == '@Common.CampaignCustomTitle') {
            if (Type == '@RevenuePlanner.Helpers.Common.RevenueCampaign') {
                $("#CampaignChildDDL").css('display', '');
                $("#CustomFieldChildDDL").css('display', 'none');
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');

                // $("#ddlProgramRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', '');

                //  $("#ddlTacticRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardProgramDropDown(id, Type);
            }
            else if (Type == '@RevenuePlanner.Helpers.Common.RevenueProgram') {
                $("#CampaignChildDDL").css('display', '');
                $("#CustomFieldChildDDL").css('display', 'none');
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');

                //     $("#ddlProgramRevenueToPlan").css('display', 'none');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', 'none');

                //   $("#ddlTacticRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardTacticDropDown(id, Type);
            }
            else {
                $("#CampaignChildDDL").css('display', '');
                $("#CustomFieldChildDDL").css('display', 'none')
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', '');

                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', '');

                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardCampaignDropDown(id, Type);
            }
        }
        else if (masterlabel == '@Common.ProgramCustomTitle') {
            if (Type == '@RevenuePlanner.Helpers.Common.RevenueProgram') {
                $("#CampaignChildDDL").css('display', '');
                $("#CustomFieldChildDDL").css('display', 'none');
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');

                //     $("#ddlProgramRevenueToPlan").css('display', 'none');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', 'none');

                //   $("#ddlTacticRevenueToPlan").css('display', 'block');
                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardTacticDropDown(id, Type);
            }
            else {
                $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');
                $("#CampaignChildDDL").css('display', '');
                $("#CustomFieldChildDDL").css('display', 'none');
                $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', '');

                $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
                fillCardProgramDropDown(id, Type);
            }
        }
        else if (masterlabel == '@Common.TacticCustomTitle') {
            //  $("#ddlCampaignRevenueToPlan").css('display', 'none');
            $("#btnMultiselect_ddlCampaignRevenueToPlan").css('display', 'none');
            //CustomFieldChildDDL
            //  $("#ddlProgramRevenueToPlan").css('display', 'none');
            $("#btnMultiselect_ddlProgramRevenueToPlan").css('display', 'none');
            $("#CampaignChildDDL").css('display', '');
            $("#CustomFieldChildDDL").css('display', 'none')
            //  $("#ddlTacticRevenueToPlan").css('display', '');
            $("#btnMultiselect_ddlTacticRevenueToPlan").css('display', '');
            fillCardTacticDropDown(id, "");
        }
        //myApp.hidePleaseWait();
}

function fillCardCampaignDropDown(campaignId, type) {

    var id = '';
    var masteroptionid = masterCustomFieldOptionId;
    //campaignId = $('#ddlCampaignRevenueToPlan').val();
    if (campaignId > 0) {
        if (type == '') {
            masteroptionid = parseInt(campaignId);
        }
        else {
            id = campaignId.toString();
        }
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Content("~/Report/LoadCampaignDropDownDynamic/")',
        data: {
            marsterCustomField: marsterCustomField,
            masterCustomFieldOptionId: masteroptionid
        },
        success: function (data) {
            $("#ddlCampaignRevenueToPlan").empty();
            $("#ddlCampaignRevenueToPlan").append("<option value='0'>All Campaigns</option>");
            $.each(data, function (index, optionData) {
                $("#ddlCampaignRevenueToPlan").append("<option value='" + optionData.PlanCampaignId + "'>" + optionData.Title + "</option>");
            });
            if (parseInt(id) == 0) {

                $('#ddlCampaignRevenueToPlan').val('0');
            }
            marsterCustomField = marsterCustomField;
            masterCustomFieldOptionId = masteroptionid;
            fillCardProgramDropDown("0", type);
            $('#ddlCampaignRevenueToPlan').multiselect("refresh");
        },
        error: function () {

            $("#ddlCampaignRevenueToPlan").empty();
            $("#ddlCampaignRevenueToPlan").append("<option value='0'>All Programs</option>");
            fillCardProgramDropDown("0", type);
            $('#ddlCampaignRevenueToPlan').multiselect("refresh");
            GoToLogin();
        }
    });
}

function fillCardProgramDropDown(campaignId, type) {
    var id = '';
    var masteroptionid = masterCustomFieldOptionId;
    if (campaignId > 0) {
        if (type === undefined || type == null || type.length <= 0) {
            masteroptionid = parseInt(campaignId);
        }
        else {
            id = campaignId.toString();
        }
    }
    $.ajax({
        type: 'POST',
        url: '@Url.Content("~/Report/LoadProgramDropDownDynamic/")',
            data: {
                id: id,
                marsterCustomField: marsterCustomField,
                masterCustomFieldOptionId: masteroptionid
            },
            success: function (data) {
                $("#ddlProgramRevenueToPlan").empty();
                $("#ddlProgramRevenueToPlan").append("<option value='0'>All Programs</option>");
                $.each(data, function (index, optionData) {
                    $("#ddlProgramRevenueToPlan").append("<option value='" + optionData.PlanProgramId + "'>" + optionData.Title + "</option>");
                });
                marsterCustomField = marsterCustomField;
                masterCustomFieldOptionId = masteroptionid;
                fillCardTacticDropDown(campaignId, type);
                $('#ddlProgramRevenueToPlan').multiselect("refresh");
            },
            error: function () {

                $("#ddlProgramRevenueToPlan").empty();
                $("#ddlProgramRevenueToPlan").append("<option value='0'>All Programs</option>");
                fillCardTacticDropDown(campaignId, type);
                $('#ddlProgramRevenueToPlan').multiselect("refresh");
                GoToLogin();
            }
        });
    }

    function fillCardTacticDropDown(programId, Type) {
        var id = '';
        var masteroptionid = masterCustomFieldOptionId;
        if (programId > 0) {
            if (Type == "") {
                masteroptionid = parseInt(programId);
            }
            else {
                id = programId.toString();
            }
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Report/LoadTacticDropDownDynamic/")',
            data: {
                id: id,
                type: Type,
                marsterCustomField: marsterCustomField,
                masterCustomFieldOptionId: masteroptionid
            },
            success: function (data) {
                $("#ddlTacticRevenueToPlan").empty();
                $("#ddlTacticRevenueToPlan").append("<option value='0'>All Tactics</option>");
                $.each(data, function (index, optionData) {
                    $("#ddlTacticRevenueToPlan").append("<option value='" + optionData.PlanTacticId + "'>" + optionData.Title + "</option>");
                });
                $('#ddlTacticRevenueToPlan').multiselect("refresh");
                //alert('call function!');
                //LoadDataRevenueToPlanByCampaign();
                //LoadDataRevenueRealization();
                // myApp.hidePleaseWait();
            },
            error: function () {
                $("#ddlTacticRevenueToPlan").empty();
                $("#ddlTacticRevenueToPlan").append("<option value='0'>All Tactics</option>");
                $('#ddlTacticRevenueToPlan').multiselect("refresh");
                //alert('call function!');
                //LoadDataRevenueToPlanByCampaign();
                //LoadDataRevenueRealization();
                GoToLogin();
            }
        });
    }
    // End By Nishant Sheth

    /// Add By Nishant Sheth For Pagination and sorting: 03-Jul-2015

    function LoadPagination() {

        //how much items per page to show
        var show_per_page = $('#Itemsperpage :selected').text();
        // var show_per_page = 1;
        //getting the amount of elements inside content div
        //var number_of_items = $('#dvCardSectionData').children().size();
        var number_of_items = '@TotalRecords';
        //calculate the number of pages we are going to have
        number_of_pages = Math.ceil(number_of_items / show_per_page);
        var NumberOfArray = Math.ceil(number_of_pages / 6);
        var SeriresofNum = new Array();
        var x = 0;
        for (var i = 0; i < NumberOfArray; i++) {
            var ser = "";
            var count = 0;
            for (var j = x; j < (x + 5) ; j++) {
                ser += i + j + ",";
                count++;
            }
            ser += i + j;
            x += count;
            SeriresofNum.push(ser);
        }
        //var abc = SeriresofNum;


        Array.min = function (array) {
            return Math.min.apply(Math, array);
        };
        Array.max = function (array) {
            return Math.max.apply(Math, array);
        };
        //set the value of our hidden input fields
        $('#current_page').val('@CurrentPageNum');
        $('#show_per_page').val(show_per_page);
        var defaultPrev = 0;
        if ('@CurrentPageNum' != '0') {
            defaultPrev = parseInt('@CurrentPageNum') - 1;
        }
        var navigation_html = "";
        if ('@CurrentPageNum' == '0') {
            navigation_html = '<ul> <li disabled=true class="disabled"><a>«</a> </li>';
            navigation_html += '<li id="firstnum" class="page_link" onclick="javascript:go_to_page(0);" style="cursor: pointer;display:none;"><span>1</span></li>';
            navigation_html += '<li id="prevmore" class="page_link"  onclick="javascript:PrevNextDotButtons(' + defaultPrev + ',\'prev\')" style="cursor: pointer; display:none;"><span>...</span></li>';
            //PrevNextDotButtons(6, 'next');
        } else {

            navigation_html = '<ul> <li onclick="javascript:previous();" style="cursor: pointer;"><a href="javascript:previous();">«</a> </li>';
            for (var i = 0; i < NumberOfArray; i++) {
                var PageSeries = SeriresofNum[i].split(',');
                if (PageSeries.indexOf("@CurrentPageNum") > -1) {
                    var minimum = Array.min(PageSeries);
                    var maximum = Array.max(PageSeries);
                    if (minimum >= 6) {
                        //navigation_html += '<li id="prevmore" class="page_link" onclcick="javascript:go_to_page(' + parseInt(parseInt(minimum) - 6) + ');" style="cursor:pointer;"><a href="javascript:go_to_page(' + parseInt(parseInt(minimum) - 6) + ');"><span>...</span></a></li>';
                        navigation_html += '<li id="firstnum" class="page_link" onclick="javascript:go_to_page(0);" style="cursor: pointer;"><span>1</span></li>';
                        navigation_html += '<li id="prevmore" class="page_link"  onclick="javascript:PrevNextDotButtons(' + defaultPrev + ',\'prev\')" style="cursor: pointer;"><span>...</span></li>';

                    }
                    else {
                        navigation_html += '<li id="firstnum" class="page_link" onclick="javascript:go_to_page(0);" style="cursor: pointer;display:none;"><span>1</span></li>';
                        navigation_html += '<li id="prevmore" class="page_link"  onclick="javascript:PrevNextDotButtons(' + defaultPrev + ',\'prev\')" style="cursor: pointer; display:none;"><span>...</span></li>';
                        //PrevNextDotButtons(parseInt(maximum + 1), 'next');
                    }
                }
            }
        }
        //navigation_html += '<li id="prevmore">...</li>';
        var current_link = 0;
        while (number_of_pages > current_link) {
            navigation_html += '<li class="page_link" longdesc="' + current_link + '" style="cursor: pointer;" onclick="javascript:go_to_page(' + current_link + ')"><a href="javascript:go_to_page(' + current_link + ')" longdesc="' + current_link + '">' + (current_link + 1) + '</a> </li>';
            current_link++;
        }
        //navigation_html += '<li id="nextmore">...</li>';

        if (parseInt(number_of_pages - 1) == parseInt('@CurrentPageNum')) {
            navigation_html += '<li id="nextmore" class="page_link" onclick="javascript:PrevNextDotButtons(' + parseInt(parseInt(maximum) + 1) + ',\'next\');" style="cursor: pointer; display:none;"><span>...</span></li>';
            navigation_html += '<li id="lastnum" class="page_link" onclick="javascript:go_to_page(' + parseInt(parseInt(number_of_pages) - 1) + ');" style="cursor: pointer;display:none;"><span>' + number_of_pages + '</span></li>';
            navigation_html += '<li disabled=true class="disabled"> <a>»</a></li> </ul>';
            //PrevNextDotButtons(pageNumber, 'prev');
        } else {

            for (var i = 0; i < NumberOfArray; i++) {
                var PageSeries = SeriresofNum[i].split(',');
                if (PageSeries.indexOf("@CurrentPageNum") > -1) {
                    var minimum = Array.min(PageSeries);
                    var maximum = Array.max(PageSeries);
                    if ((i + 1) != NumberOfArray) {
                        //navigation_html += '<li id="nextmore" class="page_link" onclick="javascript:go_to_page(' + parseInt(parseInt(maximum) + 1) + ');" style="cursor: pointer;"><a href="javascript:go_to_page(' + parseInt(parseInt(maximum) + 1) + ');"><span>...</span></a></li>';
                        // For just Show next how many pages
                        navigation_html += '<li id="nextmore" class="page_link" onclick="javascript:PrevNextDotButtons(' + parseInt(parseInt(maximum) + 1) + ',\'next\');" style="cursor: pointer;"><span>...</span></li>';
                        navigation_html += '<li id="lastnum" class="page_link" onclick="javascript:go_to_page(' + parseInt(parseInt(number_of_pages) - 1) + ');" style="cursor: pointer;"><span>' + number_of_pages + '</span></li>';
                        //PrevNextMorePage(parseInt(pageNumber), 'next');
                    }
                    else {
                        navigation_html += '<li id="nextmore" class="page_link" onclick="javascript:PrevNextDotButtons(' + parseInt(parseInt(maximum) + 1) + ',\'next\');" style="cursor: pointer; display:none;"><span>...</span></li>';
                        navigation_html += '<li id="lastnum" class="page_link" onclick="javascript:go_to_page(' + parseInt(parseInt(number_of_pages) - 1) + ');" style="cursor: pointer;display:none;"><span>' + number_of_pages + '</span></li>';
                        //PrevNextDotButtons(pageNumber, 'prev');
                    }
                }
            }
            //navigation_html += '<li onclick="javascript:go_to_page(' + parseInt(number_of_pages) - 1 + ');" style="cursor: pointer;"> <a href="javascript:go_to_page(' + parseInt(number_of_pages) - 1 + ');" >»</a></li> </ul>';
            navigation_html += '<li onclick="javascript:next();" style="cursor: pointer;"><a href="javascript:next();"</a>»</li></u>';
        }
        if (number_of_items > 0) {
            $('#page_navigation').html(navigation_html);
        } else {
            $('#page_navigation').html('');
        }

        //add active_page class to the first page link
        // $('#page_navigation .page_link:first').addClass('active');
        if (typeof RevIsnextprev == 'undefined') {
            for (var i = 0; i <= number_of_pages; i++) {
                $('.page_link[longdesc=' + i + ']').css('display', 'none');
            }
            for (var j = 0; j <= 5; j++) {
                $('.page_link[longdesc=' + j + ']').css('display', 'block');
            }
        }
        else {
            @*for (var i = 0; i <= number_of_pages; i++) {
                $('.page_link[longdesc=' + i + ']').css('display', 'none');
            }
            for (var j = '@CurrentPageNum'; j <= parseInt('@CurrentPageNum') + 5; j++) {
                $('.page_link[longdesc=' + j + ']').css('display', 'block');
            }*@
            for (var i = 0; i <= number_of_pages; i++) {
                $('.page_link[longdesc=' + i + ']').css('display', 'none');
            }
            for (var i = 0; i < NumberOfArray; i++) {

                var PageSeries = SeriresofNum[i].split(',');
                if (PageSeries.indexOf("@CurrentPageNum") > -1) {
                    var minimum = Array.min(PageSeries);
                    var maximum = Array.max(PageSeries);
                    if ((i + 1) != NumberOfArray) {
                        for (var j = minimum; j <= maximum; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                    }
                    else {
                        for (var j = (number_of_pages - 6) ; j <= number_of_pages; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                    }
                    //if (i == 0) {
                    //    if (IsGotoPage == true) {
                    //        PrevNextDotButtons(0, 'prev');
                    //        PrevNextDotButtons(parseInt(maximum + 1), 'next');
                    //    }
                    //}
                    //else if (i == NumberOfArray) {
                    //    if (IsGotoPage == true) {
                    //        PrevNextDotButtons(parseInt(minimum - 1), 'prev');
                    //        PrevNextDotButtons(parseInt(number_of_pages), 'next');
                    //    }
                    //}
                    //else {
                    //    //PrevNextDotButtons(parseInt(minimum - 1), 'prev');
                    //    //PrevNextDotButtons(parseInt(maximum + 1), 'next');
                    //}


                    break;
                }
            }

            if (IsGotoPage == true) {
                $('html, body').animate({
                    scrollTop: $("#div-card-pagination").offset().top
                }, 1000);
            }
        }
        RevIsnextprev = false;
        IsGotoPage = false;
        $('.page_link[longdesc=' + '@CurrentPageNum' + ']').addClass('active').siblings('.active').removeClass('active');
        //hide all the elements inside content div
        //$('#dvCardSectionData').children().css('display', 'none');

        ////and show the first n (show_per_page) elements
        //$('#dvCardSectionData').children().slice(0, show_per_page).css('display', 'block');

    }

    function previous() {

        //alert('Previous');
        //var pageNumber = parseInt($('#current_page').val());
        var pageNumber = '@CurrentPageNum';
        //new_page = parseInt($('#current_page').val()) - 1;
        new_page = parseInt(pageNumber) - 1;
        //if there is an item before the current active link run the function
        if ($('.active').prev('.page_link').length == true) {
            if (number_of_pages >= 6 && (parseInt(pageNumber)) < number_of_pages && ((parseInt(pageNumber)) / 6) % 1 === 0) {
                RevIsnextprev = true;
                PrevNextMorePage(parseInt(pageNumber), 'prev');
            }
            go_to_page(new_page);
        }

    }

    function next() {
        //alert('Next');

        //var pageNumber = parseInt($('#current_page').val());
        var pageNumber = '@CurrentPageNum';
        //new_page = parseInt($('#current_page').val()) + 1;
        new_page = parseInt(pageNumber) + 1;
        //if there is an item after the current active link run the function
        if ($('.active').next('.page_link').length == true) {
            if (number_of_pages >= 6 && (parseInt(pageNumber) + 1) < number_of_pages && ((parseInt(pageNumber) + 1) / 6) % 1 === 0) {
                RevIsnextprev = true;
                PrevNextMorePage(parseInt(pageNumber), 'next');
            }
            go_to_page(new_page);
        }

    }
    function go_to_page(page_num) {

        var tempPage = page_num;
        if (parseInt(tempPage + 1) == number_of_pages) {
            PrevNextDotButtons(page_num, 'prev');
        }

        if (parseInt(tempPage) == 0) {
            PrevNextDotButtons(parseInt(tempPage + 6), 'next');
        }
        IsGotoPage = true;

        //get the number of items shown per page
        var show_per_page = parseInt($('#show_per_page').val());

        //get the element number where to start the slice from
        start_from = page_num * show_per_page;

        //get the element number where to end the slice
        end_on = start_from + show_per_page;

        //hide all children elements of content div, get specific items and show them
        //$('#dvCardSectionData').children().css('display', 'none').slice(start_from, end_on).css('display', 'block');

        /*get the page link that has longdesc attribute of the current page and add active_page class to it
        and remove that class from previously active page link*/
        $('.page_link[longdesc=' + page_num + ']').addClass('active').siblings('.active').removeClass('active');

        //update the current page input field
        $('#current_page').val(page_num);

        var ItemPerPage = $('#Itemsperpage :selected').text();
        var sortBy = $("#ddlSortby :selected").text();
        //myApp.showPleaseWait();
        //var SearchString = $('#txtSearch').val();
        var _url = "@Url.Content("~/Report/SearchSortPaginataionRevenue/")" + "?PageNo=" + page_num + "&PageSize=" + ItemPerPage + "&SearchString=" + String(SearchString).trim() + "&SortBy=" + sortBy + "&ParentLabel=" + ParentLabel + "&childlabelType=" + childlabelType + "&option=" + optionmain;
        $("#dvCardSectionData").load(_url);

        //myApp.hidePleaseWait();
        //LoadPagination();
        //$(window).scrollTop($('#dvRevenueCardSection').offset().top);
    }

    function ItemsPerPagefunction() {
        var ItemPerPage = $('#Itemsperpage :selected').text();
        var sortBy = $("#ddlSortby :selected").text();
        //myApp.showPleaseWait();
        //var SearchString = $('#txtSearch').val();
        var _url = "@Url.Content("~/Report/SearchSortPaginataionRevenue/")" + "?PageNo=0&PageSize=" + ItemPerPage + "&SearchString=" + String(SearchString).trim() + "&SortBy=" + sortBy + "&ParentLabel=" + ParentLabel + "&childlabelType=" + childlabelType + "&option=" + optionmain;
        $("#dvCardSectionData").load(_url);
        //myApp.hidePleaseWait();
        //LoadPagination();
    }
    function PrevNextMorePage(pageNumber, button) {

        var nxtnum = 0;
        var prenum = 0;
        var count = 0;
        if (button == 'next') {

            for (var i = 0; i <= pageNumber + 1; i++) {
                if (count == 7)
                { break; }
                $('.page_link[longdesc=' + (parseInt(pageNumber) + i) + ']').css('display', 'block');
                $('.page_link[longdesc=' + (parseInt(pageNumber) - i) + ']').css('display', 'none');

                count++;
            }

            $('.page_link[longdesc=' + (parseInt(pageNumber)) + ']').css('display', 'none');
            PrevNextDotButtons(pageNumber, 'next');

        }
        if (button == 'prev') {

            for (var i = 0; i <= pageNumber; i++) {

                if (count == 7)
                { break; }
                $('.page_link[longdesc=' + (pageNumber - i) + ']').css('display', 'block');
                $('.page_link[longdesc=' + (pageNumber + i) + ']').css('display', 'none');
                count++;
            }
            $('.page_link[longdesc=' + (pageNumber - 1) + ']').css('display', 'block');
            PrevNextDotButtons(pageNumber, 'prev');
            //if (parseInt(pageNumber) <= 6) {
            //    $("#prevmore").css("display", "none");
            //    $("#firstnum").css("display", "none");
            //}
            //document.getElementById("prevmore").removeAttribute("onclick");
            //$("#prevmore").attr("onclick", "javascript:PrevNextMorePage(" + parseInt(parseInt(pageNumber) - 6) + ",'prev');");
        }


    }

    function PrevNextDotButtons(pageNumber, button) {


        var show_per_page = $('#Itemsperpage :selected').text();
        // var show_per_page = 1;
        //getting the amount of elements inside content div
        //var number_of_items = $('#dvCardSectionData').children().size();
        var number_of_items = '@TotalRecords';
        //calculate the number of pages we are going to have
        number_of_pages = Math.ceil(number_of_items / show_per_page);
        var NumberOfArray = Math.ceil(number_of_pages / 6);
        var SeriresofNum = new Array();
        var x = 0;
        for (var i = 0; i < NumberOfArray; i++) {
            var ser = "";
            var count = 0;
            for (var j = x; j < (x + 5) ; j++) {
                ser += i + j + ",";
                count++;
            }
            ser += i + j;
            x += count;
            SeriresofNum.push(ser);
        }
        //var abc = SeriresofNum;


        Array.min = function (array) {
            return Math.min.apply(Math, array);
        };
        Array.max = function (array) {
            return Math.max.apply(Math, array);
        };

        for (var i = 0; i <= number_of_pages; i++) {
            $('.page_link[longdesc=' + i + ']').css('display', 'none');
        }

        if (button == 'next') {

            for (var i = 0; i < NumberOfArray; i++) {

                var PageSeries = SeriresofNum[i].split(',');
                if (PageSeries.indexOf("" + pageNumber + "") > -1) {
                    var minimum = Array.min(PageSeries);
                    var maximum = Array.max(PageSeries);
                    if ((i + 1) != NumberOfArray) {
                        for (var j = minimum; j <= maximum; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                        $("#nextmore").css("display", "block");
                        $("#lastnum").css("display", "block");

                        document.getElementById("nextmore").removeAttribute("onclick");
                        $("#nextmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(maximum) + 6) + ",'next');");

                        $("#prevmore").css("display", "block");
                        $("#firstnum").css("display", "block");

                        document.getElementById("prevmore").removeAttribute("onclick");
                        $("#prevmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(minimum) - 1) + ",'prev');");
                    }
                    else {
                        for (var j = (number_of_pages - 6) ; j <= number_of_pages; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                        $("#nextmore").css("display", "none");
                        $("#lastnum").css("display", "none");

                        $("#prevmore").css("display", "block");
                        $("#firstnum").css("display", "block");

                        document.getElementById("prevmore").removeAttribute("onclick");
                        $("#prevmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(minimum) - 1) + ",'prev');");
                    }

                    break;
                }
            }
        }

        if (button == 'prev') {

            for (var i = 0; i < NumberOfArray; i++) {

                var PageSeries = SeriresofNum[i].split(',');
                if (PageSeries.indexOf("" + pageNumber + "") > -1) {
                    var minimum = Array.min(PageSeries);
                    var maximum = Array.max(PageSeries);
                    if (i == 0) {

                        for (var j = minimum; j <= maximum; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                        $("#nextmore").css("display", "block");
                        $("#lastnum").css("display", "block");

                        document.getElementById("nextmore").removeAttribute("onclick");
                        $("#nextmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(maximum) + 6) + ",'next');");

                        $("#prevmore").css("display", "none");
                        $("#firstnum").css("display", "none");

                        document.getElementById("prevmore").removeAttribute("onclick");
                        $("#prevmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(minimum)) + ",'prev');");
                    }
                    else if ((i + 1) != NumberOfArray) {
                        for (var j = minimum; j <= maximum; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }

                        $("#nextmore").css("display", "block");
                        $("#lastnum").css("display", "block");

                        document.getElementById("nextmore").removeAttribute("onclick");
                        $("#nextmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(maximum) + 6) + ",'next');");

                        $("#prevmore").css("display", "block");
                        $("#firstnum").css("display", "block");

                        document.getElementById("prevmore").removeAttribute("onclick");
                        $("#prevmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(minimum) - 1) + ",'prev');");
                    }
                    else {

                        for (var j = (number_of_pages - 6) ; j <= number_of_pages; j++) {
                            if (j <= number_of_pages) {
                                $('.page_link[longdesc=' + j + ']').css('display', 'block');
                            }
                        }
                        $("#nextmore").css("display", "none");
                        $("#lastnum").css("display", "none");

                        $("#prevmore").css("display", "block");
                        $("#firstnum").css("display", "block");

                        document.getElementById("prevmore").removeAttribute("onclick");
                        $("#prevmore").attr("onclick", "javascript:PrevNextDotButtons(" + parseInt(parseInt(minimum) - 1) + ",'prev');");
                    }

                    break;
                }
            }
        }

    }
    function SortByROI(a, b) {
        var aName = a.roival;
        var bName = b.roival;
        //return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
        //return aName - bName;
        return bName - aName;
    }
    function SortByRevenue(a, b) {
        var aName = a.revenueval;
        var bName = b.revenueval;
        //return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
        //return aName - bName;
        return bName - aName;
    }
    function SortByCost(a, b) {
        var aName = a.costval;
        var bName = b.costval;
        //return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
        //return aName - bName;
        return bName - aName;
    }



    function SortCardSection(sortBy) {

        var arrayval = [];
        var a = $('#dvCardSectionData').children();

        $(a).each(function (index, element) {

            var _revenueval = $(this).attr("revenueval");
            var _costval = $(this).attr("costval");
            var _roival = $(this).attr("roival");
            var _id = $(this).attr("id");
            var _divhtml = $(this)[0].outerHTML;
            var _title = $(this).attr("title");
            arrayval.push({ revenueval: _revenueval, costval: _costval, roival: _roival, id: _id, divhtml: _divhtml, title: _title.toString().toLowerCase() });

        });
        var sortval;
        if (sortBy == 'revenueval') {
            sortval = arrayval.sort(SortByRevenue);
        }
        if (sortBy == 'costval') {
            sortval = arrayval.sort(SortByCost);
        }
        if (sortBy == 'roival') {
            sortval = arrayval.sort(SortByROI);
        }
        //    var sortval = SortingWithArray(arrayval, sortBy);
        var cardhtml = "";
        $(sortval).each(function () {

            var CardString = this.divhtml;
            cardhtml += CardString;
        });
        var divCardSection = $("#dvCardSectionData");
        divCardSection.html('');
        divCardSection.html(cardhtml);
        //LoadPagination();

    }
    function SortByCard(name) {

        var $divs = $("div.region-content");
        var numericallyOrderedDivs = $divs.sort(function (a, b) {
            return $(a).find("div[" + name + "]").val() > $(b).find("div[" + name + "]").val();
        });
        $("#dvCardSectionData").html('');
        $("#dvCardSectionData").html(numericallyOrderedDivs);
    }

    function SortByFunction() {
        //SortCardSection($("#ddlSortby :selected").val());
        var ItemPerPage = $('#Itemsperpage :selected').text();
        var sortBy = $("#ddlSortby :selected").text();
        //alert(sortBy);
        //myApp.showPleaseWait();
        var SearchString = $('#txtSearch').val();
       
        var _url = "@Url.Content("~/Report/SearchSortPaginataionRevenue/")" + "?PageNo=0&PageSize=" + ItemPerPage + "&SearchString=" + String(SearchString).trim() + "&SortBy=" + sortBy + "&ParentLabel=" + ParentLabel + "&childlabelType=" + childlabelType + "&option=" + optionmain;
        $("#dvCardSectionData").load(_url);
        //myApp.hidePleaseWait();
        //LoadPagination();
    }

    function SearchByTitle(TitleVal) {
        debugger;
        var ItemPerPage = $('#Itemsperpage :selected').text();
        var sortBy = $("#ddlSortby :selected").text();
        SearchString = $('#txtSearch').val();
        //myApp.showPleaseWait();
        @*var _url = "@Url.Content("~/Report/SearchSortPaginataionRevenue/")" + "?PageNo=0&PageSize=" + ItemPerPage + "&SearchString=" + String(SearchString).trim() + "&SortBy=" + sortBy + "&ParentLabel=" + ParentLabel + "&childlabelType=" + childlabelType + "&option=" + optionmain;*@
        var _url = "@Url.Content("~/Report/SearchSortPaginataionRevenue/")" + "?PageNo=0&PageSize=" + ItemPerPage + "&SearchString=" + encodeURIComponent(SearchString) + "&SortBy=" + sortBy + "&ParentLabel=" + ParentLabel + "&childlabelType=" + childlabelType + "&option=" + optionmain;
        $("#dvCardSectionData").load(_url);

        //myApp.hidePleaseWait();

    }
    //$('#txtSearch').keypress(function (e) {
    //    //alert('txtSearchKey');
    //    if (e.keyCode == 13) {
    //        //$("#btnSearch").focus();
    //        var SearchString = $('#txtSearch').val();
    //        SearchByTitle(SearchString);

    //    }
    //});
    /// End By Nishant Sheth
    //PL #1399 added by dashrath prajapati 
    function CheckData() {
        var totRec = '@Model.TotalRecords';
        if (totRec == '0') {
            NorecordfoundMsg
            $("#NorecordfoundMsg").css("display", "block");
        }
        else {
            $("#NorecordfoundMsg").css("display", "none");
        }
    }
    //END PL #1399 added by dashrath prajapati 
</script>
