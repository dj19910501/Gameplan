@model RevenuePlanner.Models.ReportModel
@using RevenuePlanner.Models;
@using RevenuePlanner.Helpers
@using Newtonsoft.Json;

@{
   
    
    var revenue_Projected_Goal = Model.RevenueHeaderModel != null ? Model.RevenueHeaderModel : new RevenuePlanner.Models.Projected_Goal();

    var conversion_datatableModel = Model.ConversionToPlanModel.ConversionToPlanDataTableModel != null ? JsonConvert.SerializeObject(Model.ConversionToPlanModel.ConversionToPlanDataTableModel) : string.Empty;
    var conversion_barchartModel = Model.ConversionToPlanModel.ConversionToPlanBarChartModel != null ? JsonConvert.SerializeObject(Model.ConversionToPlanModel.ConversionToPlanBarChartModel) : string.Empty;
    var Conversion_linechartModel = Model.ConversionToPlanModel.LineChartModel != null ? JsonConvert.SerializeObject(Model.ConversionToPlanModel.LineChartModel) : string.Empty;
    var _mqllabel = Enums.InspectStageValues[Enums.InspectStage.MQL.ToString()];

    var Conversion_cardsectionModel = Model.CardSectionModel != null ? Model.CardSectionModel : new RevenuePlanner.Models.CardSectionModel(); //card section

   
    // Add By Nishant Sheth For pagination dropdwon with Enums
    List<RevenuePlanner.Models.ViewByModel> ListPageSize = new List<RevenuePlanner.Models.ViewByModel>();
    foreach (var PerPage in Enums.PerPageSize)
    {
        ListPageSize.Add(new RevenuePlanner.Models.ViewByModel { Text = PerPage.Value, Value = PerPage.Value });
    }

    List<RevenuePlanner.Models.ViewByModel> ListSortBy = new List<RevenuePlanner.Models.ViewByModel>();
    foreach (var SortBy in Enums.SortByWaterFallDrp)
    {
        ListSortBy.Add(new RevenuePlanner.Models.ViewByModel { Text = SortBy.Key, Value = SortBy.Value });
    }
    // End By Nishant Sheth
}

<style type="text/css">
    .redLabel
    {
        color: #ff0000 !important;
    }

    .greenLabel
    {
        color: #009E26 !important;
    }

    .margintop_5
    {
        margin-top: 5px !important;
    }
   
</style>
<section class="report-overview-wraper conversion-wrapper">
    <div class="marketing-revenue-report">
        <div class="dropdown-marketing" style="width: 323px;">
            <h2 id="head-title"></h2>
            <div class="geography-dropdown" id="div-mareketing-drp">
                <h5>View By:</h5>
                <div class="revenue-summary-custom">
                    @Html.DropDownList("ddlParentConversionSummery", new SelectList((System.Collections.IEnumerable)ViewBag.parentConvertionSummery, "Value", "Text"))
                </div>
            </div>
            <input type="button" id="BtnBack" class="btn btn-blue text-shadow-blue source-sans-proregular" value="< Back" onclick="javascript:BtnBackClick();" /> @*Add By Nishant Sheth*@
        </div>
        <div class="projected disable-gray" style="margin-left: 9px;">
            <span>Actual</span>
            <span id="mqlActuals"></span>
            <span id="mqlActualPercentages"></span>
        </div>
       <div class="projected disable-gray" style="height: 88px"> @*#1420 added by dashrath Prajalapti*@
            <span>Goal</span> @*#1378 Added by dashrath Prajapati*@
            <p class="value source-sans-prolight" id="mqlProjecteds" style="font-size:26px;color: #908d88;  font-weight: bold;">$1.58M</p>
            @*<p class="ellipsis-block FormatingBlock">@Html.LabelForMQL("TQL")</p>*@
           <p class="ellipsis-block FormatingBlock">@_mqllabel</p> @*#1378 Added by dashrath Prajapati*@
        </div>
        <div class="time-frame">
            <div class="geography-dropdown">
                @*<h5>Time frame:</h5>*@
                <div class="revenue-summary-custom">
                    <span class="selectBox" id="ddlTimeFrameSelectBox" style="width: 158px; line-height: 1.1;">
                        @Html.DropDownList("ddlConversionTimeFrame", new SelectList((System.Collections.IEnumerable)ViewBag.ViewByAllocated, "Value", "Text", (string)ViewBag.SelectedTimeFrame), new { @class = "ddlStyleReport hide" })
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="revenue-to-plan report-revenue">
        <div class="geography-dropdown report-revenue-summary" style="line-height:34px;">
            <h5>Summary</h5>
            <div class="revenue-summary-custom dropdown-inline">
                <span>
                    @Html.DropDownList("ddlINQToPlan", new SelectList((System.Collections.IEnumerable)ViewBag.lstAllocated, "Value", "Text"))
                </span>
                <div id="CustomFieldChildDDL" style="display:none;" class="CustomDropdown" >
                    <span>
                        @Html.DropDownList("ddlTopChildConversionToPlan", new SelectList((System.Collections.IEnumerable)ViewBag.ChildTabListRevenueToPlan, "Value", "Text"))
                    </span>
                </div>
            </div>
            <div id="CampaignChildDDL" class="dropdown-inline">
                <span>
                    @Html.DropDownList("ddlCampaignConversionToPlan", new SelectList((System.Collections.IEnumerable)ViewBag.CampaignDropdownList, "PlanCampaignId", "Title"))
                </span>
                <span>
                    @Html.DropDownList("ddlProgramConversionToPlan", new SelectList((System.Collections.IEnumerable)ViewBag.ProgramDropdownList, "PlanProgramId", "Title"))
                </span>
                <span>
                    @Html.DropDownList("ddlTacticConversionToPlan", new SelectList((System.Collections.IEnumerable)ViewBag.TacticDropdownList, "PlanTacticId", "Title"))
                </span>
            </div>
        </div>
        @*<div class="revenue-to-plan-graph">
            <div class="graph-table" id="dvConvPlan">
                <div class="table-responsive">
                    <table class="graph-table">
                            <tbody id="ConversionToPlanDataTable"></tbody>
                    </table>
                </div>
            </div>
            </div>*@
        <div style="margin:20px;">
            <div id="dvConversionToPlan">
                @Html.Partial("_ConversionToPlan", Model.ConversionToPlanModel)
        </div>
            </div>

    </div>
    <div class="revenue-filter">
        <div class="sorting">
            <div class="geography-dropdown">
                <h5>Sort By</h5>
                <div class="select-sortby">
                    @Html.DropDownList("ddlSortby", new SelectList(ListSortBy.ToList(), "Value", "Text"))
                    @*<select name="custmDDL_Revenue" id="ddlSortby" class="ddlStyleReport hide" style="display: block;width:85px;">
                            <option value="revenueval">Revenue</option>
                            <option value="costval">Cost</option>
                            <option value="roival">ROI</option>
                        </select>*@
                    @*<button id="btnMultiselect_custmDDL_Revenue" type="button" class="ui-multiselect ui-widget ui-state-default ui-corner-all" aria-haspopup="true" title="Audience"><span>revenue</span><span class="ui-icon ui-icon-triangle-1-s"></span></button>*@
                </div>
            </div>
            <div class="geography-dropdown">
                <h5>Items Per Page</h5>
                <div class="select-item">
                    @Html.DropDownList("Itemsperpage", new SelectList(ListPageSize.ToList(), "Value", "Text"))
                    @*<select name="Itemsperpage" id="Itemsperpage" class="ddlStyleReport hide" style="display: block;width:40px;">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>*@
                    @*<select name="custmDDL_Revenue" id="custmDDL_Revenue" class="revCustomFieldDDL" chartdivid="dvtable-sparkline_Revenue" style="display: none;">
                        <option value="TacticCustom71">5</option>
                        </select>*@
                    @*<button id="btnMultiselect_custmDDL_Revenue" type="button" class="ui-multiselect ui-widget ui-state-default ui-corner-all" aria-haspopup="true" title="Audience"><span>1</span><span class="ui-icon ui-icon-triangle-1-s"></span></button>*@
                </div>
            </div>

        </div>
        <div class="paging" id="page_navigation">
            @*<ul>
                <li><a href="#">«</a></li>
                <li class="active"><a>1</a></li>
                <li><a href="#">2</a></li>
                <li><a href="#">3</a></li>
                <li><a href="#">4</a></li>
                <li><a href="#">5</a></li>
                <li><a href="#">6</a></li>
                <li><a href="#">...</a></li>
                <li>»</li>
                </ul>*@
        </div>
        <input type='hidden' id='current_page' />
        <input type='hidden' id='show_per_page' />
        <div class="search">
            <input id="txtSearch" />

            <button class="search-btn" onclick="SearchByTitle($('#txtSearch').val())" id="btnSearch">search</button>
        </div>

    </div>

    <div id="ConversionCardID">
        @Html.Partial("_ConversionCardSection", Conversion_cardsectionModel)
                </div>
</section>


<script type="text/javascript">
    var parentSummaryTab;
    var _childtopConversiontoPlanDDLId = "ddlTopChildConversionToPlan";
    var _parentValue;
    var _conversionlinechartHeight = 250;
    var programId = $('#ddlProgramConversionToPlan').val();
    var campaignId = $('#ddlCampaignConversionToPlan').val();
    var OptionMain = '';
    $(document).ready(function () {
        var BtnBack = document.getElementById('BtnBack');
        BtnBack.style.display = "none";

        OptionMain = '@ViewBag.Convoption';
        var HeadTitle = document.getElementById('head-title');
        HeadTitle.innerHTML = '@TempData["ConvHeadTitle"]';


        $("html, body").animate({ scrollTop: 0 }, 1000);//scroll up when page get from overview by click on detail button of convesrion section- Dashrath prajapati

      
        //
        //start combine chart of bar chart and line chart script


        _parentValue = $('#ddlParentConversionSummery').val();
        loadChildListData(_parentValue, _childtopConversiontoPlanDDLId);

        //BindConversionToPlanDataTable();//bind Conversion DataTable function
        //formatDataTableValues();
        //formatPercentageValue();

        $("#ddlParentConversionSummery,#ddlTopChildConversionToPlan,#ddlINQToPlan,#ddlCampaignConversionToPlan,#ddlProgramConversionToPlan,#ddlTacticConversionToPlan,#ddlSortby,#Itemsperpage").multiselect({
            multiple: false,
            noneSelectedText: "Please Select",
            selectedList: 1,
            CustomCampaignName: "@Common.CampaignCustomTitle",
            CustomProgramName: "@Common.ProgramCustomTitle",
            CustomTacticName: "@Common.TacticCustomTitle"
        }).multiselectfilter({
            CustomCampaignName: "@Common.CampaignCustomTitle",
            CustomProgramName: "@Common.ProgramCustomTitle",
            CustomTacticName: "@Common.TacticCustomTitle"
        });

        // Load header data
        LoadHeaderData();
        function LoadHeaderData() {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetReportHeader/")',
                data: {
                    option: OptionMain,////This variable globally declare in parent view "Index"
                    isRevenue: false
                },
                success: function (data) {
                    if (data != undefined) {
                        setLabel(data);
                    }
                }
            });
        }
        var _campaignLabel = '@Common.RevenueCampaign';

        $('#ddlParentConversionSummery').bind('change', function () {
            var _parentValue = $(this).val();

            if (_parentValue == _campaignLabel) {
                $("#CustomFieldChildDDL").css('display', 'none');
                $("#CampaignChildDDL").css('display', 'inline-block');

                /*Start: Refresh Campaign, Program, Tactic dropdowns*/
                $("#ddlCampaignConversionToPlan").val("0");
                $("#ddlProgramConversionToPlan").val("0");
                $("#ddlTacticConversionToPlan").val("0");
                $("#ddlCampaignConversionToPlan,#ddlProgramConversionToPlan,#ddlTacticConversionToPlan").multiselect({
                    multiple: false,
                    noneSelectedText: "Please Select",
                    selectedList: 1,
                    CustomCampaignName: "@Common.CampaignCustomTitle",
                    CustomProgramName: "@Common.ProgramCustomTitle",
                    CustomTacticName: "@Common.TacticCustomTitle"
                }).multiselectfilter({
                    CustomCampaignName: "@Common.CampaignCustomTitle",
                    CustomProgramName: "@Common.ProgramCustomTitle",
                    CustomTacticName: "@Common.TacticCustomTitle"
                });
                //$("#ddlCampaignRevenueToPlan").multiselect('refresh');
                /*End: Refresh Campaign, Program, Tactic dropdowns*/

            }
            else {
                $("#CustomFieldChildDDL").css('display', 'inline-block');
                $("#CampaignChildDDL").css('display', 'none');
            }

            loadChildListData(_parentValue, _childtopConversiontoPlanDDLId);
            var _childValue = '0';
            LoadDataConversionToPlanByCampaign();
            //ReloadConversionCardByCustomField();
        });


        // ddlParentConversionSummery
        //$('#ddlParentConversionSummery').change(function () {
           
        //});

        $('#ddlCampaignConversionToPlan').change(function () {
            $("#ddlProgramConversionToPlan").empty();
            $('#ddlTacticConversionToPlan').empty();
            fillProgramDropdown();
        });

        $('#ddlProgramConversionToPlan').change(function () {
            $('#ddlTacticConversionToPlan').empty();
            fillTacticDropdown();
        });

        $('#ddlTacticConversionToPlan').change(function () {
            //LoadDataRevenueToPlanByCampaign();
            LoadDataConversionToPlanByCampaign();
        });

        function fillProgramDropdown() {
            var id = '';
            campaignId = $('#ddlCampaignConversionToPlan').val();
            if (campaignId > 0) {
                id = campaignId.toString();
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/LoadProgramDropDown/")',
                data: {
                    id: id,
                    selectOption: OptionMain
                },
                success: function (data) {
                    $("#ddlProgramConversionToPlan").empty();
                    $("#ddlProgramConversionToPlan").append("<option value='0'>All Programs</option>");
                    $.each(data, function (index, optionData) {
                        $("#ddlProgramConversionToPlan").append("<option value='" + optionData.PlanProgramId + "'>" + optionData.Title + "</option>");
                    });
                    fillTacticDropdown();
                    $('#ddlProgramConversionToPlan').multiselect("refresh");
                },
                error: function () {
                    $("#ddlProgramConversionToPlan").empty();
                    $("#ddlProgramConversionToPlan").append("<option value='0'>All Programs</option>");
                    fillTacticDropdown();
                    $('#ddlProgramConversionToPlan').multiselect("refresh");
                    GoToLogin();
                }
            });
        }

        function fillTacticDropdown() {
            var id = '';
            var Type = '';
            programId = $('#ddlProgramConversionToPlan').val();
            if (programId > 0) {
                Type = '';
                id = programId.toString();
            }
            else if (campaignId > 0) {
                Type = "@RevenuePlanner.Helpers.Common.RevenueCampaign"
                    id = campaignId.toString();
                }

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/LoadTacticDropDown/")',
                data: {
                    id: id,
                    type: Type,
                    selectOption: OptionMain
                },
                success: function (data) {
                    $("#ddlTacticConversionToPlan").empty();
                    $("#ddlTacticConversionToPlan").append("<option value='0'>All Tactics</option>");
                    $.each(data, function (index, optionData) {
                        $("#ddlTacticConversionToPlan").append("<option value='" + optionData.PlanTacticId + "'>" + optionData.Title + "</option>");
                    });
                    $('#ddlTacticConversionToPlan').multiselect("refresh");
                    //alert('call function!');
                    LoadDataConversionToPlanByCampaign();
                    //LoadDataRevenueRealization();
                    myApp.hidePleaseWait();
                },
                error: function () {
                    $("#ddlTacticConversionToPlan").empty();
                    $("#ddlTacticConversionToPlan").append("<option value='0'>All Tactics</option>");
                    $('#ddlTacticConversionToPlan').multiselect("refresh");
                    //alert('call function!');
                    LoadDataConversionToPlanByCampaign();
                    //LoadDataRevenueRealization();
                    GoToLogin();
                }
            });

        }
        var ParentDrpVal = $("#ddlParentConversionSummery option:selected").val();
        var isParentChng = false;
        function LoadDataConversionToPlanByCampaign() {
            debugger;
            var _childValue = '0';
           
            var id = '';
            var Type = '';
            var tacticId = $("#ddlTacticConversionToPlan").val();
            var parentlabel = $("#ddlParentConversionSummery option:selected").val()
            var Code = $("#ddlINQToPlan").val();
            if (tacticId > 0) {
                id = tacticId;
                Type = "@RevenuePlanner.Helpers.Common.RevenueTactic"
            }
            else if (programId > 0) {
                Type = "@RevenuePlanner.Helpers.Common.RevenueProgram"
                id = programId.toString();
            }
            else if (campaignId > 0) {
                Type = "@RevenuePlanner.Helpers.Common.RevenueCampaign"
                id = campaignId.toString();
            }
            else {
                id = _childValue;
            }
            if (parentlabel != ParentDrpVal) {
                ParentDrpVal = parentlabel;
                isParentChng = true;
            }
            var DrpChange = 'CampaignDrp';
            if (isParentChng) {
                DrpChange = 'true';
            }
            // + "&DrpChange=" + (isParentChng == true) ? 'true' : 'CampaignDrp'
            var AllocatedByConv = $('#ddlTimeFrameSelectBox option:selected').text();
            var Qurt_MonthConv = AllocatedByConv;
            var _url = "@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")" + "?ParentLabel=" + parentlabel + "&childlabelType=" + Type + "&childId=" + id + "&option=" + OptionMain + "&IsQuarterly=" + Qurt_Month + "&code=" + Code + "&DrpChange=" + DrpChange;
            $("#dvConversionToPlan").load(_url);
            @*barchartData = JSON.stringify('@Model.ConversionToPlanModel.ConversionToPlanBarChartModel');
            _LineChartCombine = JSON.stringify('@Model.ConversionToPlanModel.LineChartModel');
            formatDataTableValues();
            formatPercentageValue();
            //loadBarChart();
            loadCombineChart();*@
            @*$.ajax({
        dataType: 'json',
        type: 'POST',
        url: '@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")',
            traditional: true,
            data: {
                ParentLabel: parentlabel,
                childlabelType: Type.toString(),
                childId: id.toString(),
                option: OptionMain,
                IsQuarterly: Qurt_Month,
                code: Code
            },
            success: function (data) {
                FilterData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanDataTableModel);
                barchartData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanBarChartModel);
                _LineChartCombine = JSON.stringify(data.ConversionToPlanModel.LineChartModel);
                _Isfilter = true;
                    //BindConversionToPlanDataTable()
                formatDataTableValues();
                formatPercentageValue();
                //loadBarChart();
                loadCombineChart();
                //loadcardsection();
            }
            });*@
           @* // $("#ConversionCardID").load(@Url.Action("LoadConversionCardSectionPartial", new { cardModel = _cardDat }));*@
        }


        function loadcardsection() {
            //TempData["CardData"] = revenue_cardsectionModel;
            var _url = "@Url.Content("~/Report/LoadConversionCardSectionPartial/")";
            $("#ConversionCardID").load(_url);
        }
        function ReloadConversionCardByCustomField() {
            var parentlabel = $("#ddlParentConversionSummery").val();
            var Code = $("#ddlINQToPlan").val();
            var Type = '';
            var id = '';
            //var code = Code;
            //id = _childvalue;

            var _url = "@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")" + "?ParentLabel=" + parentlabel + "&childlabelType=" + Type + "&childId=" + id + "&option=" + OptionMain + "&IsQuarterly=" + Qurt_Month + "&DrpChange=" + 'true';
            $("#ConversionCardID").load(_url);
   }

        function loadChildListData(parentOption, id) {

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetChildLabelData/")',
                data: {
                    ParentLabel: parentOption,
                    selectOption: OptionMain,////This variable globally declare in parent view "Index"
                    IsAllInclude: true
                },
                success: function (r) {
                    PopulateRevenueToPlanChildDDL(r, id);
                }
            });
        }

        function PopulateRevenueToPlanChildDDL(items, id) {
           
            var $dropdown = $("#" + id);
            $dropdown.empty();
            var $html = '';
            if (items.length > 0) {

                $.each(items, function (index, planobj) {

                    $html += '<option value="' + planobj.Value + '">' + planobj.Text + '</option>';

                });
                $('#btnMultiselect_' + id).attr('style', 'display:block;');
                if ($('#btnMultiselect_' + id).parent().parent().hasClass('margin-rigthminus20px')) {
                    $('#btnMultiselect_' + id).parent().parent().removeClass('margin-rigthminus20px');
                }
            }
            else {
                $('#btnMultiselect_' + id).attr('style', 'display:none;');
                $('#btnMultiselect_' + id).parent().parent().addClass('margin-rigthminus20px');
            }
            $dropdown.append($html);
            $("#multipleselect_" + id).find("input[type='search']").val('');
            $('#' + id).multiselect("refresh");
        }

        // bind header data
        function setLabel(data) {
           
            var _ConversionActual_Projected = '@revenue_Projected_Goal.Actual_Projected';
            var _ConversionPercentage = '@revenue_Projected_Goal.Percentage';
            setBootstrapTooltip("#mqlProjecteds", data.ProjectedMQLValue, 5, false);
            setBootstrapTooltip("#mqlActuals", _ConversionActual_Projected, 5, false);
            var mqlActualPercentage = 0, revenueTrendPercentage = 0, mqlTrendPercentage = 0;
            if (parseFloat(data.ProjectedMQLValue) > 0) {
                mqlActualPercentage = (((parseFloat(data.ActualMQLValue) - parseFloat(data.ProjectedMQLValue)) / parseFloat(data.ProjectedMQLValue)) * 100);
            }
            if (parseFloat(data.ProjectedRevenueValue) > 0) {
            }
            //setPercentage("#mqlActualPercentages", mqlActualPercentage);
            setPercentage("#mqlActualPercentages", _ConversionPercentage);
        }

        function setPercentage(id, value) {
         
            var absValue = FormatNumber(Math.abs(parseFloat(value)), true);
            var isNegative = value < 0;
            if (isNegative) {
                $(id).addClass("redLabel");
                $(id).removeClass("greenLabel");
                $(id).text("-" + absValue);
            }
            else {
                $(id).addClass("greenLabel");
                $(id).html("+" + absValue);
            }
        }

        $("#ddlTimeFrameSelectBox select").selectbox();

        $("#ddlConversionTimeFrame").change(function () {
            AllocatedBy = $("#ddlTimeFrameSelectBox option:selected").text()
            Qurt_Month = AllocatedBy;
            LoadConversionData();
        });


        var istrigger = false;
        $('#ddlTopChildConversionToPlan').change(function () {
            istrigger = true;
            var _childValue = $("#ddlTopChildConversionToPlan").val();
            //ReloadConversionToPlanByCustomField(_childValue);
            GetConversionToPlanByCustomFilter(_childValue);

        });
        //

        $("#ddlINQToPlan").change(function () {
            istrigger = true;
            var _childValue = $("#ddlINQToPlan").val();
            GetConversionToPlanByCode(_childValue);
            //ReloadConversionToPlanByCustomFieldTop(_childValue);
        });


        //for test method
        var FilterData;
        var barchartData;
        var _BarchartCombine;
        var _LineChartCombine;
        var _cardData;
        var _Isfilter = false;
        function GetConversionToPlanByCode(_Code) {
         
            var _childid = $("#ddlTopChildConversionToPlan").val();
            var tacticId = $("#ddlTacticConversionToPlan").val();
            var parentlabel = $("#ddlParentConversionSummery option:selected").val()
            var Type = '';
            var Code = '';
            Code = _Code;
            var id = '';
            id = _childid;
            //
            if (tacticId > 0) {
                id = tacticId;
                Type = "@RevenuePlanner.Helpers.Common.RevenueTactic"

            }
            else if (programId > 0) {
                Type = "@RevenuePlanner.Helpers.Common.RevenueProgram"
                id = programId.toString();

            }
            else if (campaignId > 0) {
                Type = "@RevenuePlanner.Helpers.Common.RevenueCampaign"
                    id = campaignId.toString();

                }
            debugger;
            var _url = "@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")" + "?ParentLabel=" + parentlabel + "&childlabelType=" + Type + "&childId=" + id + "&option=" + OptionMain + "&IsQuarterly=" + Qurt_Month + "&code=" + Code;
            $("#dvConversionToPlan").load(_url);
            @*barchartData = JSON.stringify('@Model.ConversionToPlanModel.ConversionToPlanBarChartModel');
            _LineChartCombine = JSON.stringify('@Model.ConversionToPlanModel.LineChartModel');
            formatDataTableValues();
            formatPercentageValue();
            //loadBarChart();
            loadCombineChart();*@
            @*$.ajax({

            dataType: 'json',
            type: 'POST',
            url: '@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")',
            traditional: true,
            data: {
                ParentLabel: parentlabel,
                childlabelType: Type.toString(),
                childId: id.toString(),
                option: OptionMain,
                IsQuarterly: Qurt_Month,
                code: Code
            },
            success: function (data) {
                FilterData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanDataTableModel);
                barchartData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanBarChartModel);
                _LineChartCombine = JSON.stringify(data.ConversionToPlanModel.LineChartModel)
                _Isfilter = true;
                    //BindConversionToPlanDataTable()
                formatDataTableValues();
                formatPercentageValue();
                //loadBarChart();
                loadCombineChart();
            }
            });*@
           
    }
        //up to here


        function GetConversionToPlanByCustomFilter(_childValue) {
        
            var code = $("#ddlINQToPlan").val();
            var parentlabel = $("#ddlParentConversionSummery option:selected").val()
            var Type = '';
            var id = '';
            id = _childValue;
            var AllocatedByConv = $('#ddlTimeFrameSelectBox option:selected').text();
            var Qurt_MonthConv = AllocatedByConv;
            var _url = "@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")" + "?ParentLabel=" + parentlabel + "&childlabelType=" + Type + "&childId=" + id + "&option=" + OptionMain + "&IsQuarterly=" + Qurt_Month + "&code=" + code;
            $("#dvConversionToPlan").load(_url);
            @*$.ajax({
                dataType: 'json',
                type: 'POST',
                url: '@Url.Content("~/Report/GetTopConversionToPlanByCustomFilter/")',
                traditional: true,
                data: {
                    ParentLabel: parentlabel,
                    childlabelType: Type.toString(),
                    childId: id.toString(),
                    option: OptionMain,
                    IsQuarterly: Qurt_Month,
                    code: code
                },
                success: function (data) {
                    FilterData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanDataTableModel);
                    barchartData = JSON.stringify(data.ConversionToPlanModel.ConversionToPlanBarChartModel)
                    _LineChartCombine = JSON.stringify(data.ConversionToPlanModel.LineChartModel)
                    _Isfilter = true;
                    //BindConversionToPlanDataTable()
                    formatDataTableValues();
                    formatPercentageValue();
                    loadCombineChart();
                }
            });*@
        }


        function loadCombineChart() {
            var _barchartdata = barchartData;
            var _BarChartdata = (_barchartdata.toString().replace(/&quot;/g, '"'));
            _BarChartdata = JSON.parse(_BarChartdata);


            var _linechartdata = _LineChartCombine;
            var _LineChartdata = (_linechartdata.toString().replace(/&quot;/g, '"'));
            _LineChartdata = JSON.parse(_LineChartdata);

            //BindRevenueCombinationChartData(_BarChartdata.categories, _BarChartdata.series, barCombinechartDivId, _LineChartdata.series, _LineChartdata.todayValue, _LineChartdata.pointLabelWidth);

        }

        //Start:- Method for bind ConversionDataTabel Script
        @*function BindConversionToPlanDataTable() {
            if (_Isfilter) {
                var _dataTableModel = FilterData;
            }
            else {
                var _dataTableModel = '@conversion_datatableModel';
            }
           
        _dataTableModel = (_dataTableModel.toString().replace(/&quot;/g, '"'));
        _dataTableModel = JSON.parse(_dataTableModel);
       


        var isQuarterly = _dataTableModel.IsQuarterly;
        var _rowcount = 8;
        var _tbody = '<tr>';
        var _categories = _dataTableModel.Categories;
        var _catCount = _dataTableModel.Categories.length;
        var _lblTimeFrame = _dataTableModel.timeframeOption;
        var _subDataModel = _dataTableModel.SubDataModel;
        var _performanceList = _subDataModel.PerformanceList;
        var _totalRevenueList = _subDataModel.RevenueList;
        var _curnttimeframe = '';
        _tbody = _tbody + ' <th>&nbsp;</th> '
        for (var _cat = 0; _cat < _catCount; _cat++) {
            _curnttimeframe = _categories[_cat] + ' ' + _lblTimeFrame;
            _tbody = _tbody + ' <th class="nobold">' + _curnttimeframe + '</th>';
        }
        _tbody = _tbody + ' </tr>';

        var _actualList = _dataTableModel.ActualList;
        var _projectedList = _dataTableModel.ProjectedList;
        var _goalList = _dataTableModel.GoalList;
        var _rowLabel = '', _actual = '0', _projected = '0', _goal = '0', _Performance = '0', _Cost = '0', _ROI = '0', _TotalRevenue = '0', _cntrlId = '';

        _tbody = _tbody + ' <tr> ';
        _rowLabel = 'Actual';
        _tbody = _tbody + ' <td>' + _rowLabel + '</td> ';

        for (var _cat = 0; _cat < _catCount; _cat++) {
            _cntrlId = _rowLabel + '_' + _cat.toString();
            _tbody = _tbody + ' <td> <span class="currencyval" orig-val="' + _actualList[_cat] + '" id="' + _cntrlId + '">' + _actualList[_cat] + '</span> </td> ';
        }
        _tbody = _tbody + ' </tr>';

        _tbody = _tbody + ' <tr> ';
        _rowLabel = 'Projected';
        _tbody = _tbody + ' <td>' + _rowLabel + '</td> ';
        for (var _cat = 0; _cat < _catCount; _cat++) {
            _cntrlId = _rowLabel + '_' + _cat.toString();
            _tbody = _tbody + ' <td> <span class="currencyval" orig-val="' + _projectedList[_cat] + '" id="' + _cntrlId + '">' + _projectedList[_cat] + '</span> </td> ';
        }
        _tbody = _tbody + ' </tr>';

        _tbody = _tbody + ' <tr> ';
        _rowLabel = 'Goal';
        _tbody = _tbody + ' <td>' + _rowLabel + '</td> ';
        for (var _cat = 0; _cat < _catCount; _cat++) {
            _cntrlId = _rowLabel + '_' + _cat.toString();
            _tbody = _tbody + ' <td> <span class="currencyval" orig-val="' + _goalList[_cat] + '" id="' + _cntrlId + '">' + _goalList[_cat] + '</span> </td> ';
        }
        _tbody = _tbody + ' </tr>';

        _tbody = _tbody + ' <tr > ';
        _rowLabel = 'Performance';
        _tbody = _tbody + ' <td>' + _rowLabel + '</td> ';
        for (var _cat = 0; _cat < _catCount; _cat++) {
            _cntrlId = _rowLabel + '_' + _cat.toString();
            _tbody = _tbody + ' <td> <span class="performanceval" orig-val="' + _performanceList[_cat] + '" id="' + _cntrlId + '">' + _performanceList[_cat] + '</span> </td> ';
        }
        _tbody = _tbody + ' </tr>';

        _tbody = _tbody + ' <tr> ';
        _rowLabel = 'Total';
        var _label = 'Total_Revenue';
        _tbody = _tbody + ' <td>' + _rowLabel + '</td> ';
        for (var _cat = 0; _cat < _catCount; _cat++) {
            //_tbody = _tbody + ' <td>' +_actualList[_cat]+ '</td> ';
            _cntrlId = _label + '_' + _cat.toString();
            _tbody = _tbody + ' <td> <span class="currencyval" orig-val="' + _totalRevenueList[_cat] + '" id="' + _cntrlId + '">' + _totalRevenueList[_cat] + '</span> </td> ';
        }
        _tbody = _tbody + ' </tr>';

        $("#ConversionToPlanDataTable").html(_tbody);
        }*@
        //End Script

        ////Start:- Combination Chart Script
        //function BindRevenueCombinationChartData(_categories, _Barseries, _ChartDivId, _linechartseries, _plotlineVal, _pointLabelWidth) {
        //    Highcharts.setOptions({
        //        lang: {
        //            numericSymbols: ["k", "M", "B", "T", "P", "E"]
        //        }
        //    });
        //    var options = {
        //        chart: {
        //            //type: 'column'
        //            height: 280,
        //            spacingTop: 30
        //            //width: 400
        //        },
        //        colors: ['#B04499', '#999999', '#006837'],
        //        title: {
        //            text: ''
        //        },
        //        legend: {
        //            layout: 'vertical',
        //            align: 'left',
        //            verticalAlign: 'top',
        //            floating: true,
        //            x: 60,
        //            y: 45
        //        },
        //        xAxis: {
        //            categories: _categories,
        //            tickWidth: 0,
        //            labels: {
        //                enabled: false
        //            },
        //            plotLines: [{
        //                color: 'black', // Color value
        //                dashStyle: 'longdash', // Style of the plot line. Default to solid
        //                value: _plotlineVal, // Value of where the line will appear
        //                width: 2, // Width of the line    
        //                label: {
        //                    text: 'Today',
        //                    align: 'middle',
        //                    verticalAlign: 'top',
        //                    rotation: 0,
        //                    x: -15,
        //                    y: -2
        //                }
        //            }]
        //            //plotBands: [{
        //            //    color: '#ebebeb',
        //            //    from: _plotBandFrom,
        //            //    to: _plotBandTo
        //            //}]
        //        },
        //        yAxis: {
        //            gridLineWidth: 0,
        //            labels: {
        //                enabled: true,
        //                align: 'left',
        //                x: 7,
        //                y: 2
        //            },
        //            title: {
        //                enabled: false,
        //                text: 'Values'
        //            },
        //            lineWidth: 1,
        //            tickPosition: 'inside',
        //            tickLength: 5,
        //            tickWidth: 2
        //        },
        //        credits: {
        //            enabled: false
        //        },
        //        tooltip: {
        //            valueDecimals: 2,
        //        },
        //        plotOptions: {
        //            series: {
        //                //pointWidth: 20,

        //                //groupPadding: 0,
        //                //borderWidth: 0,
        //                //shadow: false
        //            },
        //            column: {
        //                //grouping: false,
        //                shadow: false,
        //                borderWidth: 0,
        //                //pointPadding: 5,
        //                pointWidth: _pointLabelWidth
        //                //groupPadding: 0
        //            }
        //        },
        //        series: []
        //    }
        //    var serLength = _Barseries.length;

        //    for (var i = 0; i < serLength ; i++) {
        //        options.series.push(eval(_Barseries[i]));
        //    }
        //    var _linechartseriesLength = _linechartseries.length;
        //    for (var i = 0; i < _linechartseriesLength ; i++) {
        //        options.series.push(eval(_linechartseries[i]));

        //        //if (_series[i].type != null && _series[i].type != 'undefined') {
        //        //    var datum = options.series[i];
        //        //    datum.tooltip = {
        //        //        shared: true,
        //        //        useHTML: true,
        //        //        headerFormat: '<table>',
        //        //        pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td>' +
        //        //            '<td style="text-align: right"><b>{point.y}</b></td></tr> <tr><td style="color: {series.color}">{series.name}: </td>' +
        //        //    '<td style="text-align: right"><b>{point.y}</b></td></tr>',
        //        //        footerFormat: '</table>'
        //        //    };
        //        //    //if (_catLength == 4) {
        //        //    //    datum.marker = {
        //        //    //        symbol: 'line',
        //        //    //        lineWidth: 2,
        //        //    //        radius: 26,
        //        //    //        lineColor: '#F0BE29'
        //        //    //    };
        //        //    //}
        //        //}
        //    }

        //    //Highcharts.Renderer.prototype.symbols.line = function (x, y, width, height) {
        //    //    return ['M', x, y + height / 2, 'L', x + width, y + width / 2];
        //    //};
        //    $(_ChartDivId).highcharts(options);
        //}
        ////End:- Combination Chart Script

    });
</script>
