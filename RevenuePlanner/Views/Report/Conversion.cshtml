@using RevenuePlanner.Helpers
@{
    List<RevenuePlanner.Models.ViewByModel> ChildEmptyList = new List<RevenuePlanner.Models.ViewByModel>();
}
<div class="block-summary">
<ul class="nav nav-tabs" id="ParentULConversionSummary">
    <li class="source-sans-proregular">
        <h2 class="title-header">Conversion Summary</h2>
    </li>
</ul>
 <div class="summary-btns">
        <p>View By</p>
            <span class="margin-left20px">
             @Html.DropDownList("ddlParentConversionSummery", new SelectList((System.Collections.IEnumerable)ViewBag.parentConvertionSummery, "Value", "Text", Common.RevenueVertical.ToString()))
         </span>
         
    </div>
    </div>
@*<ul class="nav nav-tabs nav-bars-table" id="ChildULConversionSummary">
</ul>*@

<div id="DivHtmlContent" class="padding-content cf source-sans-proregular">
    <table id="table_reports" class="table">
        <thead>
            <tr>
                <th></th>
                @if (RevenuePlanner.Helpers.Sessions.BusinessUnitId == Guid.Empty)
                {
                    <th class="width275" id="ActivityName">Business Unit</th>
                }
                else
                {
                    @*Modified by Dharmraj for custom label, #738 Custom label for audience tab *@
                    <th class="width275" id="ActivityName">@Html.CustomLabelFor(Enums.CustomLabelCode.Audience)</th>
                }
                <th class="width83">New @Html.LabelForINQ("INQ")</th>
                @* Comment line as per Pl Ticket 356. *@
                @*<th class="width83">@Html.LabelForINQ("INQ")→@Html.LabelForMQL("MQL")</th>*@
                <th class="width83">@Html.LabelForMQL("MQL")</th>
                <th class="width83">@Html.LabelForCW("CW")</th>
                <th class="width83">ADS</th>
                <th class="width83 light-blue-row">Revenue</th>
            </tr>
        </thead>
        <tbody>
            <!--tr elements are added dinamically with javascript (view script.js file)-->
        </tbody>
    </table>
    <div class="block-summary">
    <ul class="nav nav-tabs" id="ParentULMQLConversion">
        <!-- ParentULRevenueSummary -->
        <li class="source-sans-proregular">
            <h4 class="title-header">@Html.LabelForMQL("MQL") Conversion Plan</h4>
        </li>
    </ul>

      <div class="summary-btns">
        <p>View By</p>
           <span class="margin-left20px">
             @Html.DropDownList("ddlParentConversionPlan", new SelectList((System.Collections.IEnumerable)ViewBag.parentConvertionSummery, "Value", "Text", Common.RevenueAudience.ToString()))
         </span>
          <span class="margin-left20px">
             @Html.DropDownList("ddlChildConversionPlan",new SelectList((System.Collections.IEnumerable)ChildEmptyList, "Value", "Text"))
         </span>
    </div>
        </div>

    <ul class="nav nav-tabs nav-bars-table" id="ChildULMQLConversion" style="clear:both;"></ul>
    <!-- ChildULRevenueSummary -->

    <table id="table_reports5" class="table table-striped2">
        <thead>
            <tr class="border-top-bottom">
                <th class="width100px large-border-bottom"></th>
                @foreach (string s in (List<string>)ViewBag.MonthTitle)
                {
                    <th class="width44 border-top-bottom">@s</th>
                }

            </tr>
        </thead>
        <tbody>
            <!--tr elements are added dinamically with javascript-->
        </tbody>
    </table>
     <div class="block-summary">
    <ul class="nav nav-tabs" @* id="sub_nav_tabs" *@ id="MQLPerformance">
        <li class="source-sans-proregular">
            <h4 class="title-header">@Html.LabelForMQL("MQL") Performance</h4>
        </li>
    </ul>
     <div class="summary-btns">
        <p>View By</p>
            <span class="margin-left20px">
             @Html.DropDownList("ddlParentConversionPerformance", new SelectList((System.Collections.IEnumerable)ViewBag.parentConvertionPerformance, "Value", "Text", Common.Actuals.ToString()))
         </span>
        
    </div>
         </div>
    <div class="report-gray-container">
        <div class="report-chart-group">
            <div class="report-chart" id="chartDiv1Parent">
                <label>Business Unit</label>
                <div id="chartDiv1" class="report-chart4"></div>
            </div>
            <div class="report-chart" id="chartDiv2Parent">
                <label>Geography</label>
                <div id="chartDiv2" class="report-chart5"></div>
            </div>
            <div class="report-chart" id="chartDiv3Parent">
                <label>Vertical</label>
                <div id="chartDiv3" class="report-chart6"></div>
            </div>
        </div>
    </div>
    <input type="hidden" id="chartDataMQLPerformance" value="" />
</div>

<script type="text/javascript">
    //var selectOption = "@ViewBag.SelectOption"
    var TempreportTableInfo2; var Tempdataset;
    var tempreportDataPrevious; var tempDataSetPrevious;
    var ddlChildConversionPlanId = 'ddlChildConversionPlan';
    var parentSummaryTab;
    $(document).ready(function () {

        $('.summary-btns').find('select').each(function () {
            $(this).multiselect({
                multiple: false,
                noneSelectedText: "Please Select",
                selectedList: 1,
                CustomName: "Custom"
            }).multiselectfilter();
        });

        parentSummaryTab = $('#ddlParentConversionSummery').val();
       

        $('#ddlParentConversionPlan').bind('change', function () {
            var selectedOption = $(this).val();
            loadChildListData(selectedOption, ddlChildConversionPlanId);
          
            LoadData();
        });

        $('#ddlParentConversionSummery').bind('change', function () {
            parentSummaryTab = $(this).val();
            LoadConversionSummaryData();
        });
        $('#ddlChildConversionPlan').bind('change', function () {
            LoadData();
        });
        
        $('#ddlParentConversionPerformance').bind('change', function () {
            LoadPerformanceData();
        });

        loadChildListData($('#ddlParentConversionPlan').val(), ddlChildConversionPlanId);
        
        


        function loadChildListData(parentOption, id) {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetChildLabelData/")',
                data: {
                    ParentLabel: parentOption,
                    selectOption: OptionMain////This variable globally declare in parent view "Index"
                },
                success: function (r) {
                    PopulateConversionChildDDL(r, id);
                }
            });
        }

        function PopulateConversionChildDDL(items, id) {
            var $dropdown = $("#" + id);
            $dropdown.empty();
            var $html = '';
            if (items.length > 0) {

                $.each(items, function (index, planobj) {

                    $html += '<option value="' + planobj.id + '">' + planobj.title + '</option>';

                });
            }
            $dropdown.append($html);
            $("#multipleselect_" + id).find("input[type='search']").val('');
            $('#' + id).multiselect("refresh");
        }


        LoadHeaderData();
        function LoadHeaderData() {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetReportHeader/")',
                data: {
                    option: OptionMain,////This variable globally declare in parent view "Index"
                    isRevenue: false
                },
                success: function (data) {
                    if (data != undefined) {
                        setLabel(data);
                    }
                }
            });
        }

        function setLabel(data) {
            //setLabelToolTip("#revenueTrend", data.TrendRevenue, 5, true);
            setLabelToolTip("#mqlProjected", data.ProjectedMQLValue, 5, false);
            setLabelToolTip("#mqlActual", data.ActualMQLValue, 5, false);
            // setLabelToolTip("#mqlTrend", data.TrendMQL, 5, false);
            var mqlActualPercentage = 0, revenueTrendPercentage = 0, mqlTrendPercentage = 0;
            if (parseFloat(data.ProjectedMQLValue) > 0) {
                mqlActualPercentage = (((parseFloat(data.ActualMQLValue) - parseFloat(data.ProjectedMQLValue)) / parseFloat(data.ProjectedMQLValue)) * 100);
                // mqlTrendPercentage = (((parseFloat(data.TrendMQL) - parseFloat(data.ProjectedMQLValue)) / parseFloat(data.ProjectedMQLValue)) * 100);
            }
            if (parseFloat(data.ProjectedRevenueValue) > 0) {
                // revenueTrendPercentage = (((parseFloat(data.TrendRevenue) - parseFloat(data.ProjectedRevenueValue)) / parseFloat(data.ProjectedRevenueValue)) * 100);
            }
            // setPercentage("#mqlTrendPercentage", mqlTrendPercentage);
            setPercentage("#mqlActualPercentage", mqlActualPercentage);
            // setPercentage("#revenueTrendPercentage", revenueTrendPercentage);
        }

        function setPercentage(id, value) {
            var absValue = FormatNumber(Math.abs(parseFloat(value)), true);
            var isNegative = value < 0;
            if (isNegative) {
                $(id).addClass("red-value");
                $(id).removeClass("green-value");
                //Start Manoj Limbachiy Date: 05Feb2014 Bug 153:Extra % on Waterfall Conversion Report 
                $(id).text("-" + absValue);
                //End Manoj Limbachiy Date: 05Feb2014 Bug 153:Extra % on Waterfall Conversion Report 
            }
            else {
                $(id).removeClass("red-value");
                $(id).addClass("green-value");
                //Start Manoj Limbachiy Date: 05Feb2014 Bug 153:Extra % on Waterfall Conversion Report 
                $(id).text("+" + absValue);
                //End Manoj Limbachiy Date: 05Feb2014 Bug 153:Extra % on Waterfall Conversion Report 
            }

        }

        LoadConversionSummaryData(); // this will load default data for conversion summary

        function LoadConversionSummaryData() {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetConversionSummary/")',
                data: {
                    ParentConversionSummaryTab: parentSummaryTab,
                    selectOption: OptionMain////This variable globally declare in parent view "Index"
                },
                dataType: "json",
                async: false,
                type: 'post',
                cache: false,
                success: function (r) {
                    var reportTableInfo = r;
                    fillReportTable(reportTableInfo);
                }
            });
        }

        //--------------- functions related to child tab for conversion summary report ends here ------------------//

        //------------------ Functions related to load the child tabs for MQL conversion plan --------------------//
        var ColINQProjected = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColINQActual = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColINQDifference = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColMQLProjected = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColMQLActual = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColMQLDifference = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var ColTotalMQL = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        
        
        LoadData();
        
        function LoadData() {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/GetMQLConversionPlanData/")',
                data: {
                    ParentTab: $('#ddlParentConversionPlan').val(),
                    Id: $('#ddlChildConversionPlan').val(),
                    selectOption: OptionMain////This variable globally declare in parent view "Index"
                },
                dataType: "json",
                async: false,
                type: 'post',
                cache: false,
                success: function (r) {
                    var reportTableInfo2 = r;
                    fillReportTable2(reportTableInfo2);
                }
            });
        }


        //--------------- functions related to child tab for MQL performance report ends here ------------------//



        //fill reports table with data from json - For Conversion summary report
        function fillReportTable(reportTableInfo) {
            $('#table_reports > tbody > tr').empty();
            if (typeof reportTableInfo != 'undefined') {
                if (reportTableInfo.data.length) {
                    var totalRow = reportTableInfo.data.length;
                    var sumINQ = 0, sumMQl = 0, sumCW = 0, sumProjectedCW = 0, sumProjectedRevenue = 0, sumActualRevenue = 0, sumActualADS = 0, sumProjectedADS = 0;
                    for (i in reportTableInfo.data) {
                        sumINQ += parseFloat(reportTableInfo.data[i].INQ);
                        sumMQl += parseFloat(reportTableInfo.data[i].MQL);
                        sumCW += parseFloat(reportTableInfo.data[i].ActualCW);
                        sumProjectedCW += parseFloat(reportTableInfo.data[i].ProjectedCW);
                        sumActualRevenue += parseFloat(reportTableInfo.data[i].ActualRevenue);
                        sumActualADS += parseFloat(reportTableInfo.data[i].ActualADS);
                        sumProjectedRevenue += parseFloat(reportTableInfo.data[i].ProjectedRevenue);
                        sumProjectedADS += parseFloat(reportTableInfo.data[i].ProjectedADS);
                        addRowReport(reportTableInfo.data[i].Title, reportTableInfo.data[i].INQ, reportTableInfo.data[i].MQL, reportTableInfo.data[i].ActualCW, reportTableInfo.data[i].ActualRevenue, reportTableInfo.data[i].ActualADS, reportTableInfo.data[i].ProjectedRevenue, reportTableInfo.data[i].ProjectedADS);
                    }
                    var $tableReports = $('#table_reports > tbody');
                    $tableReports.append('<tr><td class="report-gray-row"></td>' +
                                       '<td class="border-r report-gray-row">Blended Average</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumINQ / totalRow) + '</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumMQl / totalRow) + '</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumCW / totalRow) + '</td>' +
                                       '<td class="border-r report-gray-row"><div class="div-line">' + FormatNumber(sumActualADS / totalRow, false) + '</div><div>' + FormatNumber(sumProjectedADS / totalRow, false) + '</div></td>' +
                                       '<td class="border-r light-blue-row" ><div class="div-line small-bold-text">' + FormatNumber(sumActualRevenue / totalRow, false) + '</div><div class="small-bold-text">' + FormatNumber(sumProjectedRevenue / totalRow, false) + '</div></td>' +
                                       '</tr>');

                    var actualADSTotal = 0, projectedADSTotal = 0;
                    if (sumCW > 0) {
                        actualADSTotal = sumActualRevenue / sumCW;
                    }
                    if (sumProjectedCW > 0) {
                        projectedADSTotal = sumProjectedRevenue / sumProjectedCW;
                    }
                    $tableReports.append('<tr><td class="report-gray-row"></td>' +
                                       '<td class="border-r report-gray-row">Total</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumINQ) + '</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumMQl) + '</td>' +
                                       '<td class="border-r report-gray-row large-bold-text">' + FormatWithRoundValue(sumCW) + '</td>' +
                                       '<td class="border-r report-gray-row"><div class="div-line">' + FormatNumber(actualADSTotal, false) + '</div><div>' + FormatNumber(projectedADSTotal, false) + '</div></td>' +
                                       '<td class="border-r light-blue-row" ><div class="div-line small-bold-text">' + FormatNumber(sumActualRevenue, false) + '</div><div class="small-bold-text">' + FormatNumber(sumProjectedRevenue, false) + '</div></td>' +
                                       '</tr>');

                } else {
                    $('#table_reports > tbody').append('<tr><td colspan="8" class="gray">No saved reports to display.</td></tr>');
                }
            }
        }

        //add row in reports table - for Conversion Summary report, this function will be called from FillReportTable
        function addRowReport(_title, _Inq, _mql, _actualcw, _actualRevenue, _actualADS, _projectedRevenue, _projectedADS) {
            var $tableReports = $('#table_reports > tbody');

            if ($tableReports.find("tr td.gray").html() == "No saved reports to display.") {
                $tableReports.find("tr").remove();
            }
            $tableReports.append('<tr><td></td>' +
                                '<td class="border-r">' + _title + '</td>' +
                                '<td class="border-r large-bold-text">' + FormatWithRoundValue(_Inq) + '</td>' +
                                // Comment line as per Pl Ticket 356.
                                //'<td class="border-r"><div class="div-line">' + FormatWithRoundValue(_inqMql[0].val) + '</div><div>' + FormatWithRoundValue(_inqMql[1].val) + '</div></td>' +
                                '<td class="border-r large-bold-text">' + FormatWithRoundValue(_mql) + '</td>' +
                                '<td class="border-r large-bold-text">' + FormatWithRoundValue(_actualcw) + '</td>' +
                                '<td class="border-r"><div class="div-line">' + FormatNumber(_actualADS, false) + '</div><div>' + FormatNumber(_projectedADS, false) + '</div></td>' +
                                '<td class="border-r light-blue-row"><div class="div-line small-bold-text">' + FormatNumber(_actualRevenue, false) + '</div><div class="small-bold-text">' + FormatNumber(_projectedRevenue, false) + '</div></td>' +
                                '</tr>');


        }

        //fill reports table with data from json - For MQL Conversion Plan data
        function fillReportTable2(json_reportTableInfo2) {
            $('#table_reports5 > tbody').empty();
            if (typeof json_reportTableInfo2 != 'undefined') {
                if (json_reportTableInfo2.length) {
                    for (var k = 0; k <= 12; k++) {
                        ColINQProjected[k] = 0;
                        ColINQActual[k] = 0;
                        ColINQDifference[k] = 0;
                        ColMQLProjected[k] = 0;
                        ColMQLActual[k] = 0;
                        ColMQLDifference[k] = 0;
                        ColTotalMQL[k] = 0;
                    }
                    for (j in json_reportTableInfo2) {
                        if (typeof json_reportTableInfo2[j] != 'undefined') {
                            addRowReport2("@Html.LabelForINQ("INQ") Projected", json_reportTableInfo2[j].INQGoal, 1, json_reportTableInfo2[j].monthList);
                            addRowReport2("@Html.LabelForINQ("INQ") Actual", json_reportTableInfo2[j].INQActual, 2, json_reportTableInfo2[j].monthList);
                            addRowReport2("Difference", [], 3, json_reportTableInfo2[j].monthList);
                            addRowReport2("@Html.LabelForMQL("MQL") Projected", json_reportTableInfo2[j].MQLGoal, 4, json_reportTableInfo2[j].monthList);
                            addRowReport2("@Html.LabelForMQL("MQL") Actual", json_reportTableInfo2[j].MQLActual, 5, json_reportTableInfo2[j].monthList);
                            addRowReport2("Difference", [], 6, json_reportTableInfo2[j].monthList);
                            addRowReport2("Total @Html.LabelForMQL("MQL")", [], 7, json_reportTableInfo2[j].monthList);
                        }
                    }
                } else {
                    $('#table_reports5 > tbody').append('<tr><td colspan="8" class="gray">No saved reports to display.</td></tr>');
                }
            }
        }

        //add row in reports table - for MQL Conversion Plan report, this function will be called from fillReportTable2
        function addRowReport2(_title, _Goal, _type, _monthList) {
            var $tableReports2 = $('#table_reports5 > tbody');

            if ($tableReports2.find("tr td.gray").html() == "No saved reports to display.") {
                $tableReports2.find("tr").remove();
            }

            var arrtProjectP = [];
            var arrtProjectV = [];
            var isProjected = false;
            if (_Goal.length > 0) {
                isProjected = true;
                for (a in _Goal) {
                    arrtProjectP.push(_Goal[a].PKey);
                    arrtProjectV.push(_Goal[a].PSum);
                }
            }
            if (_type == 1 || _type == 2 || _type == 4 || _type == 5) {
                var htmlappend = '';
                htmlappend = '<tr>' +
                             '<td>' + _title + '</td>';
                var k = 1;
                for (mrl in _monthList) {
                    var period = _monthList[mrl];
                    var Value = "-";
                    var sumvalue = 0;
                    if (isProjected) {
                        var indexp = $.inArray(period, arrtProjectP);
                        if (indexp >= 0) {
                            sumvalue = parseFloat(arrtProjectV[indexp]);
                            Value = FormatINQMQL(sumvalue, false);
                        }
                    }

                    if (_type == 1) {
                        ColINQProjected[k] = sumvalue;
                    }
                    else if (_type == 2) {
                        ColINQActual[k] = sumvalue;
                    }
                    else if (_type == 4) {
                        ColMQLProjected[k] = sumvalue;
                    }
                    else if (_type == 5) {
                        ColMQLActual[k] = sumvalue;
                    }

                    if (k == 1) {
                        if (_type == 5) {
                            ColTotalMQL[k] = sumvalue;
                        }
                    }
                    else {
                        if (_type == 5) {
                            ColTotalMQL[k] = ColTotalMQL[k - 1] + sumvalue;
                        }
                    }
                    htmlappend += '<td>' + Value + '</td>';
                    k++;
                }
                htmlappend += '</tr>';
                $tableReports2.append(htmlappend);
            }
            if (_type == 3 || _type == 6) {
                var htmlappend = '';
                htmlappend = '<tr>' +
                             '<td>' + _title + '</td>';
                var k = 1;
                for (mrl in _monthList) {
                    var value = 0;
                    if (_type == 3) {
                        var pvalue = parseFloat(ColINQProjected[k]);
                        var avalue = parseFloat(ColINQActual[k]);
                        if (pvalue != 0) {
                            value = ((avalue - pvalue) / pvalue) * 100;
                        }
                        else if (avalue != 0) {
                            value = 100;
                        }
                    }
                    else if (_type == 6) {
                        var pvalue = parseFloat(ColMQLProjected[k]);
                        var avalue = parseFloat(ColMQLActual[k]);
                        if (pvalue != 0) {
                            value = ((avalue - pvalue) / pvalue) * 100;
                        }
                        else if (avalue != 0) {
                            value = 100;
                        }
                    }

                    if (value < 0) {
                        htmlappend += '<td class="td-class-arrow red-value"><span class="red-arrow-down-icon"></span><span>' + FormatNumber(Math.abs(value), true) + '</span></td>';
                    }
                    else if (value > 0) {
                        htmlappend += '<td class="td-class-arrow green-value"><span class="green-arrow-up-icon"></span><span>' + FormatNumber(Math.abs(value), true) + '</span></td>';
                    }
                    else {
                        htmlappend += '<td class="td-class-arrow"><span>' + FormatNumber(Math.abs(value), true) + '</span></td>';
                    }
                    k++;
                }
                htmlappend += '</tr>';
                $tableReports2.append(htmlappend);
            }
            if (_type == 7) {
                //ColTotalMQL
                var htmlappend = '';
                htmlappend = '<tr>' +
                             '<td class="total-row">' + _title + '</td>';
                var k = 1;
                for (mrl in _monthList) {
                    var period = _monthList[mrl];
                    htmlappend += '<td class="total-row">' + FormatINQMQL(ColTotalMQL[k], false) + '</td>';
                    k++;
                }
                htmlappend += '</tr>';
                $tableReports2.append(htmlappend);
            }
        }

        LoadPerformanceData(); //default tab loading

        // Function to load MQL performance report
        function LoadPerformanceData() {
            $.ajax(
                 {
                     type: "GET",
                     cache: false,
                     url: '@Url.Action("GetMQLPerformance", "Report")',
                     data: {
                         filter: $('#ddlParentConversionPerformance').val(),
                         selectOption: OptionMain////This variable globally declare in parent view "Index"
                     },
                     dataType: "json",
                     success: function (data) {
                         // console.log(data);
                         dataset1 = null;
                         dataset2 = null;
                         dataset3 = null;
                         var chartDataMQLPerformance = {
                             ChartBusinessUnit: data.ChartBusinessUnit,
                             ChartGeography: data.ChartGeography,
                             ChartVertical: data.ChartVertical
                         }

                         $('#chartDataMQLPerformance').val(JSON.stringify(chartDataMQLPerformance));

                         dataset1 = data.ChartBusinessUnit;
                         dataset2 = data.ChartGeography;
                         dataset3 = data.ChartVertical;
                         //dataset = data.chartData;
                         //fill data on reports table
                         FillChartSourcePerformanceBusinessUnit();
                         FillChartSourcePerformanceGeography();
                         FillChartSourcePerformanceVertical();
                     }
                 });
             }

        function FillChartSourcePerformanceBusinessUnit() {
            $('#chartDiv1Parent').find('#chartDiv1').remove();
            $('#chartDiv1Parent').append('<div id="chartDiv1" class="report-chart4"></div>');

            var xAxisConfig = GetAxisConfiguration(dataset1)

            /* bar chart for Business Unit */
            var barChart1 = new dhtmlXChart({
                view: "barH",
                container: "chartDiv1",
                value: "#Value#",
                tooltip: "#Value#",
                radius: 0,
                border: false,
                color: "#ColorCode#",
                width: 25,
                xAxis: {
                    start: 0,
                    step: xAxisConfig.stepValue,
                    end: xAxisConfig.endValue,
                    lines: false,
                },
                yAxis: {
                    template: "#Title#",
                    lines: false,
                },
                padding: {
                    left: 75
                }
            });

            barChart1.parse(dataset1, "json");

            // added by dharmraj for ticket #447 : Alignment is not proper for charts
            $("#chartDiv1 .dhx_canvas_text.dhx_axis_item_y").each(function (index, element) {
                $(element).attr('title', element.innerHTML);
            });

            // added by dharmraj for ticket #348
            $("#chartDiv1 .dhx_canvas_text.dhx_axis_item_x").each(function (index, element) {
                var newText = GetAbberiviatedValue(element.innerHTML.toString());

                if (newText.indexOf('.') > 0) {
                    var arr = newText.toString().split('.');
                    newText = arr[0] + arr[1].substr(arr[1].length - 1, 1);

                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
                else {
                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
            });
        }

        function FillChartSourcePerformanceGeography() {
            $('#chartDiv2Parent').find('#chartDiv2').remove();
            $('#chartDiv2Parent').append('<div id="chartDiv2" class="report-chart5"></div>');

            var xAxisConfig = GetAxisConfiguration(dataset2)

            /* bar chart for Geography */
            var barChart2 = new dhtmlXChart({
                view: "barH",
                container: "chartDiv2",
                value: "#Value#",
                tooltip: "#Value#",
                radius: 0,
                border: false,
                color: "#ColorCode#",
                width: 25,
                xAxis: {
                    start: 0,
                    step: xAxisConfig.stepValue,
                    end: xAxisConfig.endValue,
                    lines: false,
                },
                yAxis: {
                    template: "#Title#",
                    lines: false,
                },
                padding: {
                    left: 75
                }
            });

            barChart2.parse(dataset2, "json");

            // added by dharmraj for ticket #447 : Alignment is not proper for charts
            $("#chartDiv2 .dhx_canvas_text.dhx_axis_item_y").each(function (index, element) {
                $(element).attr('title', element.innerHTML);
            });

            // added by dharmraj for ticket #348
            $("#chartDiv2 .dhx_canvas_text.dhx_axis_item_x").each(function (index, element) {
                var newText = GetAbberiviatedValue(element.innerHTML.toString());

                if (newText.indexOf('.') > 0) {
                    var arr = newText.toString().split('.');
                    newText = arr[0] + arr[1].substr(arr[1].length - 1, 1);

                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
                else {
                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
            });
        }
        function FillChartSourcePerformanceVertical() {
            $('#chartDiv3Parent').find('#chartDiv3').remove();
            $('#chartDiv3Parent').append('<div id="chartDiv3" class="report-chart6"></div>');

            var xAxisConfig = GetAxisConfiguration(dataset3)

            /*bar chart for Veritcal */
            var barChart3 = new dhtmlXChart({
                view: "barH",
                container: "chartDiv3",
                value: "#Value#",
                tooltip: "#Value#",
                radius: 0,
                border: false,
                width: 25,
                color: "#ColorCode#",
                xAxis: {
                    start: 0,
                    step: xAxisConfig.stepValue,
                    end: xAxisConfig.endValue,
                    lines: false,
                },
                yAxis: {
                    template: "#Title#",
                    lines: false,
                },
                padding: {
                    left: 85
                }
            });

            barChart3.parse(dataset3, "json");

            // added by dharmraj for ticket #447 : Alignment is not proper for charts
            $("#chartDiv3 .dhx_canvas_text.dhx_axis_item_y").each(function (index, element) {
                $(element).attr('title', element.innerHTML);
            });

            // added by dharmraj for ticket #348
            $("#chartDiv3 .dhx_canvas_text.dhx_axis_item_x").each(function (index, element) {
                var newText = GetAbberiviatedValue(element.innerHTML.toString());

                if (newText.indexOf('.') > 0) {
                    var arr = newText.toString().split('.');
                    newText = arr[0] + arr[1].substr(arr[1].length - 1, 1);

                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
                else {
                    $(element).attr('title', newText);
                    $(element).html(newText);
                }
            });
        }

        /*remove grid from charts*/
        $('canvas').each(function () {
            if ($(this).attr('canvas_id') == "undefined")
                $(this).remove();
            if ($(this).attr('canvas_id') == "axis_y")
                $(this).remove();
            if ($(this).attr('canvas_id') == "axis_x")
                $(this).remove();
            if ($(this).attr('canvas_id') == "0")
                $(this).addClass("prueba");
        });
    });
</script>