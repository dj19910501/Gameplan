@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@{
    string SelectedYear = ViewBag.SelectedYear;
    var ViewPlanSelectedValue = (List<SelectListItem>)ViewBag.ViewPlan;
    var ViewYearList = (List<SelectListItem>)ViewBag.ViewYear;
    // Start - Added by Arpita Soni on 01/19/2015 for Ticket #1148 
    var ViewCustomFields = (List<RevenuePlanner.Models.CustomField>)ViewBag.ViewCustomFields;
    var ViewCustomFieldOptions = (List<RevenuePlanner.Models.CustomFieldOption>)ViewBag.ViewCustomFieldOptions;
    // End - Added by Arpita Soni on 01/19/2015 for Ticket #1148 
    
    string _monthly = Enums.ViewByAllocated.Monthly.ToString();
    string _quarterly =  Enums.ViewByAllocated.Quarterly.ToString();
    ViewBag.Title = "Summary";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="@Url.Content("~/Scripts/dhtmlxchart.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/js/jquery.slimscroll.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/js/slimScrollHorizontal.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/js/jquery.mCustomScrollbar.concat.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/js/jquery.actual.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/js/highcharts.js")"></script>
<link href="@Url.Content("~/Content/css/dhtmlxchart.css")" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="@Url.Content("~/Content/css/jquery.mCustomScrollbar.css")" type="text/css" />
<style type="text/css">
    .simpleSelectBox .sbHolder {
        width: 10% !important;
    }

    .h3budget {
        padding-top: 0px !important;
    }

    .ui-multiselect {
    max-width:120px !important;
    }
    .chkbxfilter {
        float: right;
        margin: 7px -3px 0 0 !important;
    }
    
    .singleselect li {
        cursor:pointer;
    }
    .margin_top20 {
        margin-top:20px;
    }
    #ulLeftPane li {
        cursor:pointer;
    }

</style>

@section Sidebar
{
    <div class="padding-content padding-bottom0">
        <h4 class="text-shadow-black source-sans-prolight">Reports</h4>
        <div class="wraper-btns cf">
            
                @if ((bool)ViewBag.TacticActualsAddEdit) // Added by Sohel Pathan on 27/06/2014 for PL ticket #537 to implement user permission Logic
                {  // Modified by Arpita Soni on 01/01/2015 for ticket #1085 to move Share Report button left side
                    <div class="span6" id="divAddActual">
                        <button id="BtnAddActual" class="btn btn-blue text-shadow-blue source-sans-proregular" type="button" onclick="window.location.href='@Url.Action("AddActual", "Home")'">Add Actuals</button>
                    </div>
                }
            
            <div class="span6">
                <button class="btn btn-blue text-shadow-blue source-sans-proregular" type="button" id="BtnShareReport">Share Report</button>
            </div>
        </div>
    </div>
     <!-- Sidebar Block Starts -->
    <div id="sidebar" class="span2 sidebar">
        <div class="WelcomeMessageBorder"></div>
        <div class="sidebar-section scroll-section">
            <div style="width: 100%;">
                <div class="width50 float-left ">
                    <span class="filter-header">Filters</span>
                </div>
                <div class="width50 float-left">
                    <button class="btn btn-blue text-shadow-blue source-sans-proregular squares-icon" type="button" id="updatedata" name="updatedata" >
                        Update Results
                    </button>
                </div>
            </div>
            <div style="clear: both;"></div>
            
            <div id="accordion-Year" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 id="aYear" class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-Year" href="#accordion-element-Year"><span class="sidebarliwidth" id="spYearText">Year</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-Year" class="accordion-body collapse">
                        <ul class="scroll-list singleselect" id="ulSelectedYear">
                         @{
                             string ddlYearId,YearText;
                             ddlYearId = YearText = string.Empty;
                             foreach (SelectListItem item in ViewYearList)
                             {
                                 ddlYearId = "liYear" + item.Value;
                                 YearText = item.Text;
                                 
                                 if (item.Value == SelectedYear)
                                 {
                                    <li class="accordion-inner close-list" title="@YearText" id="@ddlYearId" onclick="OnYearChange(this);" yearValue ="@item.Value"><span class="sidebarliwidth">@YearText</span></li>
                                 }
                                 else
                                 {
                                     <li class="accordion-inner" title="@YearText" id="@ddlYearId" onclick="OnYearChange(this);" yearValue ="@item.Value"><span class="sidebarliwidth">@YearText</span></li>
                                 }
                             }
                          }
    </ul>
                        <div class="list-tab">
                          @if (ViewYearList == null)
                          {
                          <div id="NoYearFound" class="NoDataFoundFilter">No Year Found</div>
                          }
                        </div>
                    </div>
                </div>
            </div>

            <div id="accordion-quart" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 id="aTimeFrame" class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-quart" href="#accordion-element-quart"><span class="sidebarliwidth" id="spTimeFrameText">Monthly</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-quart" class="accordion-body collapse">
                        <ul class="scroll-list singleselect" id="ulSelectedQuart">
                            @*<li class="accordion-inner close-list" title="Monthly" id="liMonthly" timeframe-val="@_monthly"><span class="sidebarliwidth">@_monthly</span><input type="radio" name="quarter" class="chkbxfilter" checked="checked"  id="Monthly" /></li>
                            <li class="accordion-inner" title="Quarterly" id="liQuarterly" timeframe-val="@_quarterly"><span class="sidebarliwidth">@_quarterly</span><input type="radio" name="quarter" class="chkbxfilter" id="Quarterly" /></li>*@
                            @*<li class="accordion-inner close-list" title="Monthly" id="@ddlYearId" onclick="OnTimeFrameChange(this);" yearValue ="@item.Value"><span class="sidebarliwidth">@YearText</span></li>*@
                            <li class="accordion-inner close-list" title="Monthly" id="liMonthly" timeframe-val="@_monthly" onclick="OnTimeFrameChange(this);"><span class="sidebarliwidth">@_monthly</span></li>
                            <li class="accordion-inner" title="Quarterly" id="liQuarterly" timeframe-val="@_quarterly" onclick="OnTimeFrameChange(this);"><span class="sidebarliwidth">@_quarterly</span></li>
                        </ul>
                        <div class="list-tab">
                        </div>
                    </div>
                </div>
            </div>

            <div id="accordion-2" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-2" href="#accordion-element-Plan">Plan<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-Plan" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulSelectedPlans">
                         @{
                             string ddlId = string.Empty;
                             foreach (SelectListItem item in ViewPlanSelectedValue)
                             {
                                 ddlId = "liPlan" + item.Value;
                                 if (item.Selected)
                                 {
                                    <li class="accordion-inner close-list" title="@item.Text" id="@ddlId"><span class="sidebarliwidth">@item.Text</span><input type="checkbox" class="chkbxfilter" checked="checked" planTitle="@item.Text" id="@item.Value" onchange="OnPlanchange(this);"></input></li>
                                 }
                                 else
                                 {
                                     <li class="accordion-inner" title="@item.Text" id="@ddlId"><span class="sidebarliwidth">@item.Text</span><input type="checkbox" class="chkbxfilter" planTitle="@item.Text" id="@item.Value" onchange="OnPlanchange(this);"></input></li>
                                 }

                             }
                          }
                        </ul>
                        <div class="list-tab">
                           @if (ViewPlanSelectedValue != null)
                           {
                            <ul id="PlanAllModule">
                                <li><a onclick="BulkPlanOperation(true)">select all</a></li>
                                <li>|</li>
                                <li><a onclick="BulkPlanOperation(false)">deselect all</a></li>
                            </ul>
                           }
                           else
                           {
                            <div id="NoPlanFound" class="NoDataFoundFilter">No Plan Found</div>
                           }
                        </div>
                    </div>
                </div>
            </div>
             

           
            @{
                string acordionId, acordionParentId, acordionElementId, acordionElementHref,liCustom,ulCustom,allCustom,noCustom;
                acordionId = acordionParentId = acordionElementId = acordionElementHref =liCustom =ulCustom = allCustom = noCustom =string.Empty;
                List<SelectListItem> lstCutomFieldOptions = new List<SelectListItem>();
                List<CustomFieldOption> tblCustomFieldOption = ViewCustomFieldOptions;
                foreach (CustomField custField in ViewCustomFields)
                {
                    lstCutomFieldOptions = tblCustomFieldOption.Where(_option => custField.CustomFieldId == _option.CustomFieldId).OrderBy(custfieldoptions => custfieldoptions.Value).ToList().Select(custfieldoptions => new SelectListItem { Text = custfieldoptions.Value, Value = custfieldoptions.CustomFieldOptionId.ToString(), Selected = true }).ToList();
                    acordionId = "accordion" + custField.CustomFieldId;
                    acordionParentId = "#" + acordionId;
                    acordionElementId = "accordion-element-Plan" + custField.CustomFieldId;
                    acordionElementHref = "#" + acordionElementId;
                    ulCustom = "ul" + custField.CustomFieldId;
                    allCustom = "all" + custField.CustomFieldId;
                    noCustom = "no" + custField.CustomFieldId;
                    <div id="@acordionId" class="dropdown-section accordion">
                        <div class="accordion-group">
                           <div class="accordion-heading">
                               <h2 class="accordion-toggle" data-toggle="collapse" data-parent="@acordionParentId" href="@acordionElementHref"><span class="sidebar_label tipsyclassTitle">@custField.Name</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                           </div>
                           <div id="@acordionElementId" class="accordion-body collapse">
                               <ul class="scroll-list" id="@ulCustom">
                                @{
                                   foreach (SelectListItem item in (System.Collections.IEnumerable)lstCutomFieldOptions)
                                   {
                                       liCustom = "liCustom" + item.Value;
                                       <li class="accordion-inner" title="@item.Text" id="@liCustom"><span class="sidebarliwidth">@item.Text</span><input type="checkbox" cutomTitle="@item.Text" class="chkbxfilter" id="@item.Value" onchange="OnMultiselectchange(this);"></input></li>
                                   }
                                 }
                               </ul>
                               <div class="list-tab">
                                  @if (lstCutomFieldOptions != null && lstCutomFieldOptions.Count > 0)
                                  {
                                   <ul id="@allCustom">
                                       <li><a onclick="BulkCustomFieldOperation(true,'@ulCustom')">select all</a></li>
                                       <li>|</li>
                                       <li><a onclick="BulkCustomFieldOperation(false,'@ulCustom')">deselect all</a></li>
                                   </ul>
                                  }
                                  else
                                  {
                                   <div id="@noCustom" class="NoDataFoundFilter">No Plan Found</div>
                                  }
                               </div>
                           </div>
                       </div>
                   </div>
                }
             }

           @* Added By komal Rawal*@
            <div id="accordion-Owner" class="dropdown-section accordion" > 
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-Owner" href="#accordion-element-Owner">Owner<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
        </div>
                    <div id="accordion-element-Owner" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulSelectedOwner">
                        </ul>
                        <div class="list-tab">
                            <ul id="ulOwnerAllModule">
                                <li><a onclick="BulkOwnerOperation(true)">select all</a></li>
                                <li>|</li>
                                <li><a onclick="BulkOwnerOperation(false)">deselect all</a></li>
                            </ul>
                            <div id="NoOwnerFound" class="NoDataFoundFilter">No Owner Found</div>
    </div>
                    </div>
                </div>
            </div>

              <div id="accordion-TacticType" class="dropdown-section accordion" >
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-TacticType" href="#accordion-element-TacticType">Tactic Type<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-TacticType" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulTacticType">
                            
                        </ul>
                        <div class="list-tab">
                              <ul id="TacticTypeAllModule">
                                    <li><a onclick="BulkTTOperation(true)">select all</a></li>
                                    <li>|</li>
                                    <li><a onclick="BulkTTOperation(false)">deselect all</a></li>
                                </ul>
                                <div id="NoTTFound" class="NoDataFoundFilter">No Tactic Type Found</div>
                             
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    
   
    <!--End sidebar-->
}

<div class="report-heder-tab">
   <ul id="ulLeftPane">
       <li class="active" id="liSummary"><a class="overview"><span></span>OVERVIEW</a></li>
       <li id="liRevenue"><a class="revenue" ><span></span>REVENUE</a></li>
       <li id="liConversion"><a class="conversion" ><span></span>CONVERSION</a></li>
       <li id="liBudgetreport"><a class="budget" ><span></span>BUDGET</a></li>
   </ul>
</div>

<div id="budgetHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3 class="source-sans-proregular h3budget h3padding ">You've spent <span id="SpanTotalSpend"></span> out of <span id="SpanTotalBudgeted"></span>.</h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare monthContainerBudget">
        <h3 class="source-sans-proregular" id="monthCompareTitle"></h3>
        <div class="budgetCompareInner" id="monthContainer">
    </div>
        <div style="clear: both;"></div>
    </div>
</div>

<div id="revenueHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3><span>Marketing Revenue</span>
            <br />
        </h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare">
        <div id="RevenueActualDiv" class="header-right-blocks">
        <p class="source-sans-probold">Actual</p>
            <p class="value source-sans-prolight" style="font-size: 30px;" id="revenueActual"></p>
        <h5 id="revenueActualPercentage"></h5>
    </div>
        <div id="RevenueProjectedDiv" class="header-right-blocks block-last">
        <p class="source-sans-probold">Projected</p>
            <p class="value source-sans-prolight" id="revenueProjected" style="font-size: 30px;"></p>
        <p class="ellipsis-block FormatingBlock">Revenue</p>

    </div>
    </div>
</div>

<div id="conversionHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3><span>Waterfall Conversion</span>
            <br />
        </h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare">
        <div  id="mqlActualDiv" class="header-right-blocks">
            <p class="source-sans-probold">Actual</p>
            <p class="value source-sans-prolight" id="mqlActual" style="font-size: 30px;"></p>
            <h5 id="mqlActualPercentage"></h5>
        </div>
        <div id="mqlProjectedDiv" class="header-right-blocks block-last"> 
            <p class="source-sans-probold">Projected</p>
            <p class="value source-sans-prolight" id="mqlProjected" style="font-size: 30px;"></p>
            <p class="ellipsis-block FormatingBlock">@Html.LabelForMQL("MQL")</p>

        </div>
    </div>
</div>

<div id="divMainReportPart" class="margin_top20">
</div>
<div id="DivShareReport">
</div>
<script type="text/javascript">
    //Added By komal Rawal

    var filters = {
        OwnerIds: [],
        TacticTypeids: []
    };
   
    function GetOwnerListForFilter(Planids, ifexists) {
        $('#ulSelectedOwner').html('');
        if (!ifexists) {
            filters.OwnerIds = [];
        }
        $.ajax({
            beforeSend: function (x) {
                myApp.hidePleaseWait();
            },
            type: "GET",
            async: false,
            cache: false,
            url: '@Url.Action("GetOwnerListForFilter", "Report")',
                data: {
                    PlanId: Planids.toString(),
                    leftPaneOption : leftPaneOption
                   
                },
                dataType: "json",
                success: function (data) {
                   
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    else {
                        if (data.isSuccess == true) {
                            if (data.AllowedOwner != 'undefined' && data.AllowedOwner != null) {
                                OwnerCount = data.AllowedOwner.length;
                                if (OwnerCount > 0) {
                                    $("#ulOwnerAllModule").css("display", "block");
                                    $("#NoOwnerFound").hide();
                                    $.each(data.AllowedOwner, function (i, OwnerItem) {
                                        var checked = "";
                                        var checkedclass = "";
                                        if (ifexists &&  filters.OwnerIds.indexOf(OwnerItem.OwnerId)>= 0) {
                                            checked = "checked";
                                            checkedclass = "close-list";
                                        }

                                        $('#ulSelectedOwner').append('<li class="accordion-inner ' + checkedclass + '" title="' + OwnerItem.Title + '" id="liOwner' + OwnerItem.OwnerId + '"><span class="sidebarliwidth">' + OwnerItem.Title + '</span><input type="checkbox" class="chkbxfilter" OwnerTitle="' + OwnerItem.Title + '" onchange="toggleOwner(this)" id="' + OwnerItem.OwnerId + '"' + checked + '></input></li>');
                                    });
                                }
                                else {
                                    $("#ulOwnerAllModule").css("display", "none");
                                    $("#NoOwnerFound").show();
                                }
                            }
                            else {
                                $("#ulOwnerAllModule").css("display", "none");
                                $("#NoOwnerFound").show();
                            }
                        }
                    }
                }
            });
    }


    function BulkOwnerOperation(selection) {
        filters.OwnerIds = [];
        if (selection) {
            $("#ulSelectedOwner li").each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
                filters.OwnerIds.push(chkid);
            });
        }
        else {
            $("#ulSelectedOwner li").each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }
    }


    function toggleOwner(obj) {
        var id = $(obj).attr('id');
        if ($(obj).is(':checked')) {
            $("#liOwner" + id).addClass("close-list");
        }
        else {
            $("#liOwner" + id).removeClass("close-list");
        }
        filters.OwnerIds = [];
        $("#ulSelectedOwner li input[type=checkbox]").each(function () {
            var chkid = $(this).attr("id");
            if ($(this).is(':checked')) {
                filters.OwnerIds.push(chkid);
            }
        });
    }

    function GetTacticTypelist(Planids, ifexists) {
     
        $('#ulTacticType').html('');
        if (!ifexists) {
            filters.TacticTypeids = [];
        }
        $.ajax({
            beforeSend: function (x) {
                myApp.hidePleaseWait();
            },
            type: "GET",
            async: false,
            cache: false,
            url: '@Url.Action("GetTacticTypeListForFilter", "Report")',
            data: {
                PlanId: Planids.toString(),
                leftPaneOption: leftPaneOption
                },
              dataType: "json",
              success: function (data) {
                  if (data.returnURL != 'undefined' && data.returnURL == '#') {
                      window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    else {
                        if (data.isSuccess == true) {
                            if (data.TacticTypelist != 'undefined' && data.TacticTypelist != null) {
                                TactictypeCount = data.TacticTypelist.length;
                                if (TactictypeCount > 0) {
                                    $("#TacticTypeAllModule").css("display", "block");
                                    $("#NoTTFound").hide();
                                    $.each(data.TacticTypelist, function (i, TactictypeItem) {
                                        var checked = "";
                                        var checkedclass = "";
                                        if (ifexists && filters.TacticTypeids.indexOf(TactictypeItem.TacticTypeId.toString()) >= 0) {
                                            checked = "checked";
                                            checkedclass = "close-list";
                                        }
                                        $('#ulTacticType').append('<li class="accordion-inner ' + checkedclass + '" title="' + TactictypeItem.Title + '" id="liTT' + TactictypeItem.TacticTypeId + '"><span class="sidebarliwidth">' + TactictypeItem.Title + '</span><input type="checkbox" class="chkbxfilter" TacticTypeTitle="' + TactictypeItem.Title + '" onchange="toggleTacticType(this)" id="' + TactictypeItem.TacticTypeId + '"'+ checked +'></input></li>');
                                    });
                                }
                                else {
                                    $("#TacticTypeAllModule").css("display", "none");
                                    $("#NoTTFound").show();
                                }
                            }
                            else {
                                $("#TacticTypeAllModule").css("display", "none");
                                $("#NoTTFound").show();
                            }
                        }
                    }
                }
          });

    }

    function BulkTTOperation(selection) {
        filters.TacticTypeids = [];
        if (selection) {
            $("#ulTacticType li").each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
                filters.TacticTypeids.push(chkid);

            });
        }
        else {
            $("#ulTacticType li").each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }

    }

    function toggleTacticType(obj) {
        var id = $(obj).attr('id');
        if ($(obj).is(':checked')) {
            $("#liTT" + id).addClass("close-list");
        }
        else {
            $("#liTT" + id).removeClass("close-list");
        }

        filters.TacticTypeids = [];
        $("#ulTacticType li input[type=checkbox]").each(function () {
            var chkid = $(this).attr("id");
            if ($(this).is(':checked')) {
                filters.TacticTypeids.push(chkid);
            }
        });
    }

    //End
    var SelectedBUId, SelectedPlanId;
    var IsCallFromYearDropdown = true;
    var OptionMain = '';
    var isAllowClick = true;
    var multiselectPlanId = "ulSelectedPlans";
    var leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
    var Qurt_Month = '';

    $(document).ready(function () {

        $("#ddlYearSpan select").selectbox();
        $('.sbHolder').click(function () {
            $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
                $(this).multiselect("close");//"Close" is function in multiselect.js which close the multiselect menu 
            });
        });
        ///Start Modified by Mitesh Vaishnav for PL ticket #727
        $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
            $(this).multiselect({ noneSelectedText: $(this).attr('noneselectedvalue') }).multiselectfilter();
        });

        $(".sbSelector").css("color", "#6D6D6D");
        $(".sbToggle").css("border-top-color", "#6D6D6D");

        OptionMain = getYearSelectedValue(true);

        Qurt_Month = getQuarterMonthlySelectedValue();

        // Load Multiselect Dropdown list i.e. Bind with new design
        LoadYearDropdown();
        loadBasedOnPlan();
        PlanIds = GetFilterIdForPlan(multiselectPlanId);
        GetOwnerListForFilter(PlanIds,false);
        GetTacticTypelist(PlanIds,false);
        $("#DivShareReport").hide();
        GetFilterIdForPlan(multiselectPlanId);
        function toggleChevron(e) {
            $(e.target)
				.prev('.accordion-heading')
				.find("i.indicator")
				.toggleClass('glyphicon-chevron-down glyphicon-chevron-up');
            }
        $('.accordion').on('hidden.bs.collapse', toggleChevron);
        $('.accordion').on('shown.bs.collapse', toggleChevron);
        NumberFormatterTipsyTitle(".tipsyclassTitle", 27);
    });

    // <--- End document.ready Event --->
    function OnPlanchange(_plancheckbox) {
        var _checked = $(_plancheckbox).attr('checked');
        var _val = $(_plancheckbox).attr('id');
        var _planliId = "liPlan" + _val;
        OnCheckboxChange(_planliId, _checked);
    }

    function OnMultiselectchange(_checkbox) {
        var _checked = $(_checkbox).attr('checked');
        var _val = $(_checkbox).attr('id');
        var _parentliId = "liCustom" + _val;
        OnCheckboxChange(_parentliId, _checked);
    }

    function OnCheckboxChange(_parentliId, _checked) {
        if (_checked != null && _checked != 'undefined' && _checked === 'checked') {
            $("#" + _parentliId).addClass('close-list');
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
           
                GetOwnerListForFilter(PlanIds,false);
            
            GetTacticTypelist(PlanIds,false);
        }
        else {
            $("#" + _parentliId).removeClass('close-list');
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
            GetOwnerListForFilter(PlanIds,false);
            GetTacticTypelist(PlanIds,false);
        }
    }

    //// Load Check value in multiselect dropdown - common for all dropdown
    function LoadCheckBoxValue(multiselectId, filterid) {
        var finalValue = "";
        var isAll = true;
        $('#multipleselect_' + multiselectId).find("input[type='checkbox']").each(function () {
            if (this.checked) {
                finalValue += $(this).parent().find('span').eq(0).html() + ",  ";
            }
            else {
                isAll = false;
            }
        });
        finalValue = finalValue.slice(0, -3);
        if (finalValue == '') {
            finalValue = 'None';
        }
        if (isAll) {
            finalValue = 'All';
        }
        $(filterid).html(finalValue);
    }

    //function SetSelectedFilterText(multiselect_ul_Id, filterid) {
    //    var finalValue = "";
    //    var isAll = true;
    //    $('#' + multiselect_ul_Id).find("input[type='checkbox']").each(function () {
    //        if (this.checked) {
    //            finalValue += $(this).parent().find('span').eq(0).html() + ",  ";
    //        }
    //        else {
    //            isAll = false;
    //        }
    //    });
    //    finalValue = finalValue.slice(0, -3);
    //    if (finalValue == '') {
    //        finalValue = 'None';
    //    }
    //    if (isAll) {
    //        finalValue = 'All';
    //    }
    //    $(filterid).html(finalValue);
    //}

    //// Load Plan data based on selected year
    function LoadPlanData() {
        var strYear = OptionMain;
        if (OptionMain == 'thisquarter') {
            strYear = new Date().getFullYear();
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Report/GetBudgetPlanBasedOnYear/")',
                data: {
                    Year: strYear
                },
            success: function (data) {
                $('#' + multiselectPlanId).html('');
                if (data != 'undefined' && data != null) {
                    PlanCount = data.length;
                    if (PlanCount > 0) {
                        $("#PlanAllModule").css("display", "block");
                        $("#NoPlanFound").hide();
                        $.each(data, function (index, item) {
                            $('#' + multiselectPlanId).append('<li class="accordion-inner" title="' + item.Text + '" id="liPlan' + item.Value + '"><span class="sidebarliwidth">' + item.Text + '</span><input type="checkbox" class="chkbxfilter" planTitle="' + item.Text + '" onchange="OnMultiselectchange(this)" id="' + item.Value + '"></input></li>');
            });
                    }
                    else {
                        $("#PlanAllModule").css("display", "none");
                        $("#NoPlanFound").show();
                    }
                }
                else {
                    $("#PlanAllModule").css("display", "none");
                    $("#NoPlanFound").show();
                }

                PlanIds = GetFilterIdForPlan(multiselectPlanId);
                GetTacticTypelist(PlanIds,false);
                GetOwnerListForFilter(PlanIds,false);
            }
        });
    }

    function BulkPlanOperation(selection) {
        var ulPlanli = "#" + multiselectPlanId +" li";
        if (selection) {
            $(ulPlanli).each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
            });
        }
        else {
            $(ulPlanli).each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }

        PlanIds = GetFilterIdForPlan(multiselectPlanId);
        GetOwnerListForFilter(PlanIds,false);
        GetTacticTypelist(PlanIds,false);
    }

    function BulkCustomFieldOperation(selection,ulCutomFieldId) {
        var ul_lis = "#" + ulCutomFieldId + " li";
        if (selection) {
            $(ul_lis).each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
            });
        }
        else {
            $(ul_lis).each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }
        }

        //// Remove actiave class from left sidebar menu li
        function RemoveAllActiveItem() {
            $('#ulLeftPane li').each(function () {
                if ($(this).hasClass('active')) {
                    $(this).removeClass('active');
                }
            });
        }

    //// Modified by Arpita Soni for Ticket #1148 on 01/23/2015
    ///Added by Mitesh Vaishnav for PL ticket #846
    ///If running tab is budgeting than show specific filters
    function ShowFilters() {

            @foreach (var custField in ViewCustomFields)
            {
                string btnmultiselectid = string.Concat("#btnMultiselect_ddlView", custField.CustomFieldId);
                string lblid = string.Concat("lbl", custField.CustomFieldId);
                string detailid = string.Concat(custField.CustomFieldId, "detail");
                    @: $('@btnmultiselectid').css('display', 'initial');
                                                @: $('@lblid').css('display', 'initial');
                                                @: $('@detailid').css('display', 'initial');
                }
    }

    //// Load Summary view using ajax - partial view
    function LoadSummary() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $('#divMainReportPart').empty();
        $('#conversionHeader').css('display', 'none');
        $('#revenueHeader').css('display', 'none');
        $("#BtnShareReport").show();
        $('#accordion-quart').css('display', 'block');
       @* var url = '@Url.Content("~/Report/GetSummaryData/")';
        $('#divMainReportPart').load(url , function () {*@
        var url = '@Url.Content("~/Report/GetOverviewData/")';
        $('#divMainReportPart').load(url + '?timeframeOption=' + OptionMain + '&isQuarterly=' + Qurt_Month, function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });

    }

    //// Load Revenue view section
    function LoadRevenueView() {
        $('#conversionHeader').css('display', 'none');
        $('#revenueHeader').css('display', 'block');
    }

    //// Load Conversion view section
    function LoadConversionView() {
        $('#conversionHeader').css('display', 'block');
        $('#revenueHeader').css('display', 'none');
    }

    //// Call function based on option
    function loadBasedOnPlan() {
        var isActualVisible = "@ViewBag.TacticActualsAddEdit"
            if (isActualVisible.toString().toLowerCase() == 'true') {
                if (SelectedPlanId == 0) {
                    $("#BtnAddActual").attr("disabled", "disabled");
                }
                else {
                    $("#BtnAddActual").removeAttr("disabled");
                }
            }

            if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                LoadSummary();
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                LoadRevenueData();
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()') {
                LoadConversionData();
            }
    }

    //// Load Revenue Data
    function LoadRevenueData() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $("#BtnShareReport").show();
        $('#divMainReportPart').empty();
        $('#accordion-quart').css('display', 'none');
        
    var url = '@Url.Content("~/Report/GetRevenueData/")';
        $('#divMainReportPart').load(url + '?timeFrameOption=' + OptionMain , function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });
    }

    //// Load Conversion Data
    function LoadConversionData() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $("#BtnShareReport").show();
        $('#divMainReportPart').empty();
        $('#accordion-quart').css('display', 'none');
        var url = '@Url.Content("~/Report/GetConversionData/")';
        $('#divMainReportPart').load(url + '?timeFrameOption=' + OptionMain , function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });
    }

        //// Load Budget View
        function LoadBudgetView() {
            $("#BtnShareReport").hide(); //Added by Arpita Soni on 01/08/2015 for ticket #1108
            $('#budgetHeader').css('display', 'block');
            $('#conversionHeader').css('display', 'none');
            $('#revenueHeader').css('display', 'none');
            $('#UlPlanHeader').css('display', 'none');
            $('#formSideFilter').css('display', 'none');
            $('#accordion-quart').css('display', 'none');
            var url = '@Url.Content("~/Report/GetBudget/")';
            $('#divMainReportPart').load(url, function () {
                isAllowClick = true;
            });
        }

        //// Get Plan Ids from multiselect list
    function GetFilterIdForPlan(ulPlanId) {
            var finalValue = "";
            var isShowAddActual = 0;
        $('#' + ulPlanId).find("input[type='checkbox']").each(function () {
                if (this.checked) {
                    isShowAddActual++;
                var splitvalue = $(this).attr('id').split("_");
                    finalValue += splitvalue[0] + ",";
                }
            });

            finalValue = finalValue.slice(0, -1);
            if (finalValue == '') {
                finalValue = '';
            }
            //if (isShowAddActual == 1) {
            //    $("#divAddActual").css("display", "block");
            //}
            //else {
            //    $("#divAddActual").css("display", "none");
            //}

            return finalValue;

        }

        //// Get id from multiselect
    function GetCustomFilterIds(ulCustomId) {
            var finalValue = "";
        $('#' + ulCustomId).find("input[type='checkbox']").each(function () {
                if (this.checked) {
                finalValue += $(this).attr('id') + ",";
                }
            });

            finalValue = finalValue.slice(0, -1);
            if (finalValue == '') {
                finalValue = '';
            }
            return finalValue;
        }

        //// Load Budget Data
        function LoadBudgetData() {
            if (isByAllocated) {
                myApp.showPleaseWait();
                $('#divTabData').load('@Url.Action("GetReportBudgetData", "Report")' + '?Year=' + OptionMain + '&AllocatedBy=' + AllocatedBy + '&Tab=' + Tab + '&SortingId=' + SortingId, function () {
                    myApp.hidePleaseWait();
                });

            }
        }

        //// Load Share report section
        function ShowShareReport() {
            var url = '@Url.Content("~/Report/ShowShareReport/")';
        $("#DivShareReport").empty()
                                   .load(url.concat('?reportType=') + leftPaneOption)
                                   .show();
    }

    //// on select simple selector dropdown close multiselect dropdown
    $(".sbSelector").click(function () {
        $(".ui-multiselect-menu").each(function () {
            $(this).css("display", "none");
        });
    });

        //// handle update button event
        $('#updatedata').click(function () {
            var arrOptionIds = new Array();
            //// close multiselect
            $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
                $(this).multiselect("close");//"Close" is function in multiselect.js which close the multiselect menu 
            });

            OptionMain = getYearSelectedValue(true);

            Qurt_Month = getQuarterMonthlySelectedValue();
            
        @foreach (var custField in ViewCustomFields)
        {
            string multiselectid = string.Concat("ul", custField.CustomFieldId);
            @: var filterIds = GetCustomFilterIds('@multiselectid');
            @: var arrFilterId = filterIds.split(',');
            @: if(arrFilterId != "")
            @: {
            @: for (var i = 0; i < arrFilterId.length; i++) {
            @: arrOptionIds.push({ CustomFieldId: '@custField.CustomFieldId', OptionId: arrFilterId[i] });
            @:}
            @:}
        }
            
            //// get selected value from multiselect 
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
        //Mofied By Komal Rawal
        var arrPlanIds = new Array();
        arrPlanIds = PlanIds.split(',');
        var GetSelectedPlanNo = arrPlanIds.length;
        if (GetSelectedPlanNo > 1) {
            $("#divAddActual").hide();

            }
            else
            {
            $("#divAddActual").show();

        }
        //End
            
            SortingId = '';
            $.ajax({
                dataType: 'json',
                type: 'POST',
                url: '@Url.Content("~/Report/SetReportData/")',
                traditional:true,
                data: {
                    planIds: PlanIds,
                    OwnerIDs: (filters.OwnerIds).toString(),
                    TactictypeIDs:(filters.TacticTypeids).toString(),
                    customIds: JSON.stringify(arrOptionIds),
                },
                success: function (data) {
                    if (data.status) {
                        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                        LoadSummary();
                    }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                        LoadRevenueData();
                    }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()') {
                        LoadConversionData();
                    }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
                        LoadBudgetView();
                    }
        }


            }
        });
    });

function OnYearChange(_yearli) {
    $(_yearli).siblings().each(function () {
        $(this).removeClass('close-list');
    });
    $(_yearli).addClass('close-list');
    OptionMain = $(_yearli).attr('yearValue');
    if (IsCallFromYearDropdown) {
        LoadPlanData();
    }
    var _yearText = $(_yearli).attr('title');
    $("#spYearText").html(_yearText);
    $("#aYear").click();
}

function OnTimeFrameChange(_quartmonthli) {
    $(_quartmonthli).siblings().each(function () {
        $(this).removeClass('close-list');
    });
    $(_quartmonthli).addClass('close-list');
    Qurt_Month = $(_quartmonthli).attr('timeframe-val');

    var _timeframeText = $(_quartmonthli).attr('title');
    $("#spTimeFrameText").html(_timeframeText);
    $("#aTimeFrame").click();
}

function LoadYearDropdown() {
    var isClick = false;
    var ul_lis = "#ulSelectedYear li";
    $(ul_lis).each(function (i) {
        var _yearValue = $(this).attr('yearValue');

        /* Hide 'thisquarter' item from dropdown for Summary & Budget tab.*/
        if (_yearValue == 'thisquarter') {
            if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                isClick = true;
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                isClick = false;
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()') {
                isClick = false;
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
                isClick = true;
            }

    if (isClick == true) {
        $(this).css('display', 'none');
    }
    else {
        $(this).css('display', 'block');
    }
}
    });
    var selectedValue = getYearSelectedValue(false);
    $(ul_lis).each(function (i) {
        if (isClick == true && selectedValue == 'thisquarter') {
            var _currentliValue = $(this).attr('yearValue');
            if (_currentliValue == '@RevenuePlanner.Helpers.Common.GetCurrentYear()') {
                IsCallFromYearDropdown = false;
                $(this).click();
                IsCallFromYearDropdown = true;
            }
        }
    });
}

function getYearSelectedValue(isYearDetail) {
    var _selecteditem = '';
    $('#ulSelectedYear li').each(function () {
        if ($(this).hasClass('close-list')) {
            _selecteditem = $(this);
        }
    });
    var _selectedYear = $(_selecteditem[0]).attr('yearValue');
    if (isYearDetail) {
        var _YearText=$(_selecteditem).find('span').eq(0).html();
        $("#spYearText").html(_YearText);
    }

    return _selectedYear;
}

function getQuarterMonthlySelectedValue() {
    var _selecteditem = '';
    $('#ulSelectedQuart li').each(function () {
        if ($(this).hasClass('close-list')) {
            _selecteditem = $(this);
        }
    });
    var _selected = $(_selecteditem[0]).attr('timeframe-val');

    //var _YearText = $(_selecteditem).find('span').eq(0).html();
    //$("#spYearText").html(_YearText);

    return _selected;
}

//// summary click event
$('#liSummary').click(function () {
    if (isAllowClick) {
        document.title = "Summary";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
            GetOwnerListForFilter(PlanIds,true);
            GetTacticTypelist(PlanIds,true);
        }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        loadBasedOnPlan();
    }
});

//// revenue click event
$('#liRevenue').click(function () {
    if (isAllowClick) {
        document.title = "Revenue";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()';
           GetOwnerListForFilter(PlanIds,true);
           GetTacticTypelist(PlanIds,true);
       }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        LoadRevenueView();
        loadBasedOnPlan();
    }
    });

//// conversion click event
$('#liConversion').click(function () {
    if (isAllowClick) {
        document.title = "Conversion";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()';
           GetOwnerListForFilter(PlanIds,true);
           GetTacticTypelist(PlanIds,true);
       }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        LoadConversionView();
        loadBasedOnPlan();
    }
    });

//// budget click event
    $('#liBudgetreport').click(function () {
    if (isAllowClick) {
        document.title = "Budget";
        isAllowClick = false;
        if (leftPaneOption != '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()';
             GetOwnerListForFilter(PlanIds,true);
             GetTacticTypelist(PlanIds,true);
         }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()';
                LoadYearDropdown(leftPaneOption);
                RemoveAllActiveItem();
                $(this).addClass('active');
                LoadBudgetView();
            }
        });

        //// share report event
        $("#BtnShareReport").click(function () {
            ShowShareReport();
        });

        ///Added by Mitesh Vaishnav for generate multiselect dropdownlist with no filter or no custom border
        function GenerateCustomizeMultiselect(id, isFilterApply, isCustomBorderApply, isMultiple) {
            var custom = "";
            if (isCustomBorderApply) {
                custom = '@Common.CustomTitle';
            }

            if (isFilterApply) {
                $("#" + id).multiselect({
                    multiple: isMultiple,
                    CustomName: custom,
                    selectedList: 1
                }).multiselectfilter();
            }
            else {
                $("#" + id).multiselect({
                    multiple: isMultiple,
                    selectedList: 1,
                    CustomName: custom
                });
            }
        }

    // Start:- Linchart script 
    function BindLineChart(_categories, _plotlineVal, _isshowPlotLine, _series, _linechartDivId, _chartwidth, _chartHeight) {
        var options = {
            chart: {
                height: _chartHeight,
                width: _chartwidth,
                spacingTop: 50
            },
            colors: ['#B04499', '#999999'],
            legend: {
                align: 'top',
                verticalAlign: 'top',
                layout: 'horizontal',
                x: 60,
                y: -40
            },
            title: {
                text: ''
            },
            xAxis: {
                categories: _categories,
                lineColor: 'black',
                lineWidth: 2,
                tickColor: 'black',
                tickWidth: 2,
                plotLines: _isshowPlotLine.toLowerCase() == "true" ? [{
                    color: 'black', // Color value
                    dashStyle: 'longdash', // Style of the plot line. Default to solid
                    value: _plotlineVal, // Value of where the line will appear
                    width: 2, // Width of the line    
                    label: {
                        text: 'Today',
                        align: 'middle',
                        verticalAlign: 'top',
                        rotation: 0,
                        x: -15,
                        y: -10
                    }
                }] : [],
                tickPosition: 'inside',
                labels: {
                    color: '#2d2d2d',
                    style: {
                        "fontWeight": "bold"
                    }
                }
            },
            yAxis: {
                lineColor: 'black',
                gridLineWidth: 0,
                minorGridLineWidth: 0,
                lineWidth: 2,
                tickPosition: 'inside',
                tickLength: 5,
                tickWidth: 2,
                tickColor: 'black',
                tickAmount: 5,
                labels: {
                    color: '#2d2d2d',
                    style: {
                        "fontWeight": "bold"
                    }
                },
                title: {
                    text: ''
                }
            },
            series: []
        }

        var serLength = _series.length;
        for (var i = 0; i < serLength ; i++) {
            options.series.push(eval(_series[i]));
        }
        $(_linechartDivId).highcharts(options);
    }
    // End:- Linchart script 
</script>
