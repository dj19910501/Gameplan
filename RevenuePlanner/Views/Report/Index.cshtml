@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@{
    string SelectedYear = ViewBag.SelectedYear;
    //var ViewPlanSelectedValue = (List<SelectListItem>)ViewBag.ViewPlan;
    List<RevenuePlanner.Models.PlanListModel> planList = ViewBag.ViewPlan;
    var ViewYearList = (List<SelectListItem>)ViewBag.ViewYear;
    // Start - Added by Arpita Soni on 01/19/2015 for Ticket #1148 
    var ViewCustomFields = (List<RevenuePlanner.Models.CustomField>)ViewBag.ViewCustomFields;
    var ViewCustomFieldOptions = (List<RevenuePlanner.Models.CustomFieldOption>)ViewBag.ViewCustomFieldOptions;
    // End - Added by Arpita Soni on 01/19/2015 for Ticket #1148 
    string FilterName = Sessions.FilterPresetName;
    string _monthly = Enums.ViewByAllocated.Monthly.ToString();
    string _quarterly =  Enums.ViewByAllocated.Quarterly.ToString();
    ViewBag.Title = "Summary";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var PageTitle = "Reports";
}
@Html.Hidden("PageTitle", PageTitle)
@Html.Hidden("FilterName", FilterName)
@Scripts.Render("~/bundles/GetJSReport")
<link rel="stylesheet" href="@Url.Content("~/Content/css/jquery.mCustomScrollbar.css")" type="text/css" />
<style type="text/css">
    .simpleSelectBox .sbHolder {
        width: 10% !important;
    }

    .h3budget {
        padding-top: 0px !important;
    }

    .ui-multiselect {
    max-width:120px !important;
    }
    .chkbxfilter {
        float: right;
        margin: 7px -3px 0 0 !important;
    }
    
    .singleselect li {
        cursor:pointer;
    }
    .margin_top20 {
        margin-top:20px;
    }
    #ulLeftPane li {
        cursor:pointer;
    }
    .table-striped2 table td:nth-child(2),td:nth-child(3),td:nth-child(4){ text-align:center !important;}
    .ddlQuarter .selectBox .sbSelector{
        font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
        /*font-size: 14px;*/
        color: #6d6d6d !important;
    }
    .budgeting-linechart {
    padding: 0 75px;
    text-align: center;
}
    .nobold {
        font-weight:inherit !important;
    }    
</style>

@section Sidebar
{
@*modified by Rahul Shah for Pl #1837*@
<div class="save-filter">
    <!--error message-->
    <div id="errorMessageMainSidebar" class="alert hide alert-error">
        <a class="close">×</a>
        <strong></strong><span id="spanErrorMessageRole"></span>
    </div>

    <!--error message-->

    <div id="successMessageLoadPreset" class="alert hide alert-success">
        <a class="close">×</a>
        <div id="cSuccess"><span id="spanSuccessMessageRole"></span></div>
    </div>
    <div id="content_SaveFilters" class="sidebar-preset scroll-section" style="height: 456.85px; display:none">
        <h2>Save As Preset</h2>
        <label for="Preset">Please enter a name for preset</label>
        <input type="text" id="txtPresetName" />
        <input type="button" class="btn btn-blue text-shadow-blue source-sans-proregular" title="Proceed" value="Proceed" id="btnSaveProceed" onclick="javascript: SavePreset()" />
        <input type="button" class="btn btn-link" title="Cancel" value="Cancel" id="btnSaveCancel" onclick="javascript: CancelSavePreset()" />
    </div>
    <div id="DefaultFilters" style="display:none"></div>
</div>
    <div class="padding-content padding-bottom0" id="btnreportSection">
        <h4 class="text-shadow-black source-sans-prolight">Reports</h4>
        <div class="wraper-btns cf">
            
                @if ((bool)ViewBag.TacticActualsAddEdit) // Added by Sohel Pathan on 27/06/2014 for PL ticket #537 to implement user permission Logic
                {  // Modified by Arpita Soni on 01/01/2015 for ticket #1085 to move Share Report button left side
                    <div class="span6" id="divAddActual">
                        <button id="BtnAddActual" class="btn btn-blue text-shadow-blue source-sans-proregular" type="button">Add Actuals</button>
                    </div>
                }
            
            <div class="span6">
                <button class="btn btn-blue text-shadow-blue source-sans-proregular" type="button" id="BtnShareReport">Share Report</button>
            </div>
        </div>
    </div>
@*modified by Rahul Shah for Pl #1837*@
     <!-- Sidebar Block Starts -->
    <div id="Filtersidebar" class="span2 sidebar">
        <div class="WelcomeMessageBorder"></div>

        <div class="wraper-btns cf update-result">
            <button class="btn btn-blue text-shadow-blue source-sans-proregular squares-icon update-btn text-center" type="button" id="updatedata" name="updatedata">
                        Update Results
                    </button>
                </div>
        <!--success message-->
        <div class="error-msg-filter">
            <div id="successMessageSidebar" class="alert hide alert-success">
                <a class="close">×</a>
                <div id="cSuccess"><span id="spanSuccessMessageRole"></span></div>
            </div>
        </div>
        <!--error message-->
        <div class="sidebar-section scroll-section">
            <div class="float-left filter-preset">
                <div class="width50 float-left filter-title ">
                    <span class="filter-header">Filters</span>
                </div>
                <div class="dropdown" style="float:right;">
                    <button id="dropdownMenu1" class="btn btn-default dropdown-toggle" aria-expanded="true" data-toggle="dropdown" type="button">
                        <i class="fa fa-bars"></i>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1" role="menu">
                        <li onclick="SaveAsPreset()" role="presentation">
                            <a id="saveaslink" tabindex="-1" role="menuitem">Save current filters</a>
                        </li>
                        <li onclick="LoadPreset()" role="presentation">
                            <a tabindex="-1" role="menuitem">Load saved filters</a>
                        </li>
                        <li onclick="ClearAllPreset()" role="presentation">
                            <a tabindex="-1" role="menuitem">Clear all</a>
                        </li>
                    </ul>
                </div>

            </div>

            <div style="clear: both;"></div>
            
            <div id="accordion-Year" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 id="aYear" class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-Year" href="#accordion-element-Year"><span class="sidebarliwidth" id="spYearText">Year</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-Year" class="accordion-body collapse">
                        <ul class="scroll-list singleselect" id="ulSelectedYear">
                         @{
                             string ddlYearId,YearText;
                             ddlYearId = YearText = string.Empty;
                             foreach (SelectListItem item in ViewYearList)
                             {
                                 ddlYearId = "liYear" + item.Value;
                                 YearText = item.Text;
                                 
                                 if (item.Value == SelectedYear)
                                 {
                                     //Modified By Nishant Sheth
                                     // Desc:: #1842 Multiple year selection for multiple year support base on #1821
                                    <li class="accordion-inner" title="@YearText" id="@ddlYearId"  yearValue ="@item.Value"><span class="sidebarliwidth">@YearText</span>
                                        <input type="checkbox" class="chkbxfilter" checked="checked" id="@ddlYearId" onchange="OnYearChange(this);" yearvalue="@item.Value"></input></li>
                                 }
                                 else
                                 {
                                     <li class="accordion-inner" title="@YearText" id="@ddlYearId"  yearValue ="@item.Value"><span class="sidebarliwidth">@YearText</span>
                                         <input type="checkbox" class="chkbxfilter" id="@ddlYearId" onchange="OnYearChange(this);" yearvalue="@item.Value"></input>
                                    </li>
                                 }
                             }
                          }
    </ul>
                        <div class="list-tab">
                          @if (ViewYearList == null)
                          {
                          <div id="NoYearFound" class="NoDataFoundFilter">No Year Found</div>
                          }
                        </div>
                    </div>
                </div>
            </div>

           @* <div id="accordion-quart" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 id="aTimeFrame" class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-quart" href="#accordion-element-quart"><span class="sidebarliwidth" id="spTimeFrameText">Monthly</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-quart" class="accordion-body collapse">
                        <ul class="scroll-list singleselect" id="ulSelectedQuart">
                            <li class="accordion-inner close-list" title="Monthly" id="liMonthly" timeframe-val="@_monthly" onclick="OnTimeFrameChange(this);"><span class="sidebarliwidth">@_monthly</span></li>
                            <li class="accordion-inner" title="Quarterly" id="liQuarterly" timeframe-val="@_quarterly" onclick="OnTimeFrameChange(this);"><span class="sidebarliwidth">@_quarterly</span></li>
                        </ul>
                        <div class="list-tab">
                        </div>
                    </div>
                </div>
            </div>*@

            <div id="accordion-2" class="dropdown-section accordion">
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-2" href="#accordion-element-Plan">Plan<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-Plan" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulSelectedPlans">
                         @{
                             string ddlId = string.Empty;
                             foreach (var item in planList)
                             {
                                 ddlId = "liPlan" + "_" + item.PlanId;
                                 if (item.Checked == "checked")
                                 {
                                     <li class="accordion-inner close-list" title="@item.Title" id="@ddlId"><span class="sidebarliwidth">@item.Title</span><input type="checkbox" class="chkbxfilter" checked="checked" planTitle="@item.Title" id="@item.PlanId" onchange="OnPlanchange(this);"></input></li>
                                 }
                                 else
                                 {
                                    <li class="accordion-inner" title="@item.Title" id="@ddlId"><span class="sidebarliwidth">@item.Title</span><input type="checkbox" class="chkbxfilter" planTitle="@item.Title" id="@item.PlanId" onchange="OnPlanchange(this);"></input></li>
                                 }

                             }
                          }
                        </ul>
                        <div class="list-tab">
                           @if (planList != null)
                           {
                            <ul id="PlanAllModule">
                                <li><a onclick="BulkPlanOperation(true)">select all</a></li>
                                <li>|</li>
                                <li><a onclick="BulkPlanOperation(false)">deselect all</a></li>
                            </ul>
                               <div id="NoPlanFound" class="NoDataFoundFilter" style="display:none;">No Plan Found</div>
                           }
                           else
                           {
                            <div id="NoPlanFound" class="NoDataFoundFilter">No Plan Found</div>
                           }
                        </div>
                    </div>
                </div>
            </div>
             

           <div id="divCustomFieldsFilter">
            @{
                string acordionId, acordionParentId, acordionElementId, acordionElementHref, liCustom, ulCustom, allCustom, noCustom, cutomoptioninputid;
                acordionId = acordionParentId = acordionElementId = acordionElementHref =liCustom =ulCustom = allCustom = noCustom =string.Empty;
                List<SelectListItem> lstCutomFieldOptions = new List<SelectListItem>();
                List<CustomFieldOption> tblCustomFieldOption = ViewCustomFieldOptions;
                foreach (CustomField custField in ViewCustomFields)
                {
                    lstCutomFieldOptions = tblCustomFieldOption.Where(_option => custField.CustomFieldId == _option.CustomFieldId).OrderBy(custfieldoptions => custfieldoptions.Value).ToList().Select(custfieldoptions => new SelectListItem { Text = custfieldoptions.Value, Value = custfieldoptions.CustomFieldOptionId.ToString(), Selected = true }).ToList();
                    acordionId = "accordion" + custField.CustomFieldId;
                    acordionParentId = "#" + acordionId;
                    acordionElementId = "accordion-element-Plan" + custField.CustomFieldId;
                    acordionElementHref = "#" + acordionElementId;
                    ulCustom = "ul" + custField.CustomFieldId;
                    allCustom = "all" + custField.CustomFieldId;
                    noCustom = "no" + custField.CustomFieldId;
                    <div id="@acordionId" class="dropdown-section accordion">
                        <div class="accordion-group">
                           <div class="accordion-heading">
                               <h2 class="accordion-toggle" data-toggle="collapse" data-parent="@acordionParentId" href="@acordionElementHref"><span class="sidebar_label tipsyclassTitle">@custField.Name</span><i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                           </div>
                           <div id="@acordionElementId" class="accordion-body collapse">
                               <ul class="scroll-list" id="@ulCustom">
                                @{
                    foreach (SelectListItem item in (System.Collections.IEnumerable)lstCutomFieldOptions)
                    {
                        liCustom = "liCustom" + item.Value;
                        cutomoptioninputid = custField.CustomFieldId + "_" + item.Value;
                        <li class="accordion-inner" title="@item.Text" id="@liCustom"><span class="sidebarliwidth">@item.Text</span><input type="checkbox" cutomtitle="@item.Text" class="chkbxfilter" id="@cutomoptioninputid" onchange="OnMultiselectchange(this);"></input></li>
                    }
                                }
                               </ul>
                               <div class="list-tab">
                                  @if (lstCutomFieldOptions != null && lstCutomFieldOptions.Count > 0)
                                  {
                                   <ul id="@allCustom">
                                       <li><a onclick="BulkCustomFieldOperation(true,'@ulCustom')">select all</a></li>
                                       <li>|</li>
                                       <li><a onclick="BulkCustomFieldOperation(false,'@ulCustom')">deselect all</a></li>
                                   </ul>
                                  }
                                  else
                                  {
                                   <div id="@noCustom" class="NoDataFoundFilter">No Plan Found</div>
                                  }
                               </div>
                           </div>
                       </div>
                   </div>
                }
             }
        </div>
           @* Added By komal Rawal*@
            <div id="accordion-Owner" class="dropdown-section accordion" > 
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-Owner" href="#accordion-element-Owner">Owner<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
        </div>
                    <div id="accordion-element-Owner" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulSelectedOwner">
                        </ul>
                        <div class="list-tab">
                            <ul id="ulOwnerAllModule">
                                <li><a onclick="BulkOwnerOperation(true)">select all</a></li>
                                <li>|</li>
                                <li><a onclick="BulkOwnerOperation(false)">deselect all</a></li>
                            </ul>
                            <div id="NoOwnerFound" class="NoDataFoundFilter">No Owner Found</div>
    </div>
                    </div>
                </div>
            </div>

              <div id="accordion-TacticType" class="dropdown-section accordion" >
                <div class="accordion-group">
                    <div class="accordion-heading">
                        <h2 class="accordion-toggle" data-toggle="collapse" data-parent="#accordion-TacticType" href="#accordion-element-TacticType">Tactic Type<i class="indicator glyphicon glyphicon-chevron-down pull-right"></i></h2>
                    </div>
                    <div id="accordion-element-TacticType" class="accordion-body collapse">
                        <ul class="scroll-list" id="ulTacticType">
                            
                        </ul>
                        <div class="list-tab">
                              <ul id="TacticTypeAllModule">
                                    <li><a onclick="BulkTTOperation(true)">select all</a></li>
                                    <li>|</li>
                                    <li><a onclick="BulkTTOperation(false)">deselect all</a></li>
                                </ul>
                                <div id="NoTTFound" class="NoDataFoundFilter">No Tactic Type Found</div>
                             
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    
   
    <!--End sidebar-->
}

<div class="report-heder-tab">
   <ul id="ulLeftPane">
       <li class="active" id="liSummary"><a class="overview"><span></span>OVERVIEW</a></li>
       <li id="liRevenue"><a class="revenue" ><span></span>REVENUE</a></li>
       @*<li id="liConversion"><a class="conversion" ><span></span>CONVERSION</a></li>*@
       <li id="liConversion"><a class="conversion" ><span></span>WATERFALL</a></li> @*--title changed by dashrath prajapati*@
       <li id="liBudgetreport"><a class="budget" ><span></span>FINANCE</a></li> @*PL#1545 Dashrath Prajapati*@
   </ul>
</div>

@*Added By komal Rawal for #1296*@
<div style="height:40px" id="ddlsection" class="ddlQuarter">
     <div style="float: right;margin-top:20px; margin-right:15px;">
      <span class="selectBox" id="ddlAllocatedBySelectBox" style="width: 158px;line-height:1.1;">
                    @Html.DropDownList("ddlAllocate", new SelectList((System.Collections.IEnumerable)ViewBag.ViewByAllocated, "Value", "Text", @RevenuePlanner.Helpers.Enums.PlanAllocatedBy.quarters.ToString()), new { @class = "ddlStyleReport hide" })
               </span>
     </div>
</div>

<div id="budgetHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3 class="source-sans-proregular h3budget h3padding ">You've spent <span id="SpanTotalSpend"></span> out of <span id="SpanTotalBudgeted"></span>.</h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare monthContainerBudget">
        <h3 class="source-sans-proregular" id="monthCompareTitle"></h3>
        <div class="budgetCompareInner" id="monthContainer">
    </div>
        <div style="clear: both;"></div>
    </div>
</div>

<div id="revenueHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3><span>Marketing Revenue</span>
            <br />
        </h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare">
        <div id="RevenueActualDiv" class="header-right-blocks">
        <p class="source-sans-probold">Actual</p>
            <p class="value source-sans-prolight" style="font-size: 30px;" id="revenueActual"></p>
        <h5 id="revenueActualPercentage"></h5>
    </div>
        <div id="RevenueProjectedDiv" class="header-right-blocks block-last">
        <p class="source-sans-probold">Goal</p>
            <p class="value source-sans-prolight" id="revenueProjected" style="font-size: 30px;"></p>
        <p class="ellipsis-block FormatingBlock">Revenue</p>

    </div>
    </div>
</div>

<div id="conversionHeader" class="budgetColums budgetReporting" style="display: none">
    <div class="plannedCost">
        <h3><span>Waterfall Conversion</span>
            <br />
        </h3>
        <div style="clear: both;"></div>
    </div>
    <div class="budgetCompare">
        <div  id="mqlActualDiv" class="header-right-blocks">
            <p class="source-sans-probold">Actual</p>
            <p class="value source-sans-prolight" id="mqlActual" style="font-size: 30px;"></p>
            <h5 id="mqlActualPercentage"></h5>
        </div>
        <div id="mqlProjectedDiv" class="header-right-blocks block-last"> 
            <p class="source-sans-probold">Goal</p>
            <p class="value source-sans-prolight" id="mqlProjected" style="font-size: 30px;"></p>
            <p class="ellipsis-block FormatingBlock">@Html.LabelForMQL("MQL")</p>

        </div>
    </div>
</div>

<div id="divMainReportPart" class="margin_top20">
</div>
<div id="DivShareReport">
</div>
<script type="text/javascript">
    var IsCardDetailsClick = false; // for #1489
    //Added By komal Rawal

    //Added for #1296
    $("#ddlAllocatedBySelectBox select").selectbox(); 

    $("#ddlAllocate").change(function () {

        AllocatedBy = $('#ddlAllocate option:selected').text();

        Qurt_Month = AllocatedBy;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
            LoadSummary();
        }
        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
            LoadRevenueData();
        }
        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Conversion.ToString()') {
            LoadConversionData();
        }
        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            LoadBudgetView();
        }
    });


//End 

   
    var filters = {
        OwnerIds: [],
        TacticTypeids: [],
        customFieldIds: [],
        PlanIDs: [],
        SelectedPlans: [],
        PlanTitles: [],
        StatusIDs: []
    };
   
    function GetOwnerListForFilter(Planids, ifexists) {
        var type = '@PlanGanttTypes.Tactic.ToString()';
        var asyncval = false;
        if (ifexists != undefined && ifexists != 'undefined' && ifexists != '' && ifexists != null) {
            asyncval = ifexists;
        }
    $('#ulSelectedOwner').html('');
    if (!ifexists) {
        filters.OwnerIds = [];
    }
    $.ajax({
        beforeSend: function (x) {
            myApp.hidePleaseWait();
        },
        type: "GET",
        cache: false,
        async: asyncval,
        @* url: '@Url.Action("GetOwnerListForFilter", "Report")',*@
        url: '@Url.Action("GetOwnerListForFilter", "Home")',
            data: {
                PlanId: Planids.toString(),
                ViewBy: type,
                ActiveMenu: '@RevenuePlanner.Helpers.Enums.ActiveMenu.Home'
                   
            },
            dataType: "json",
            success: function (data) {
                   
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    else {
                        if (data.isSuccess == true) {
                            if (data.AllowedOwner != 'undefined' && data.AllowedOwner != null) {
                                OwnerCount = data.AllowedOwner.length;
                                if (OwnerCount > 0) {
                                    var IsOwnerPresent = false;
                                    var checked = "";
                                    var checkedclass = "";
                                    $("#ulOwnerAllModule").css("display", "block");
                                    $("#NoOwnerFound").hide();
                                    $.each(data.AllowedOwner, function (i, OwnerItem) {
                                        var checked = "";
                                        var checkedclass = "";
                                        var LoggedInOwner = data.LoggedInUser.OwnerId;
                                        if (OwnerItem.OwnerId == LoggedInOwner) {
                                            IsOwnerPresent = true;
                                            checked = "checked"
                                            checkedclass = "close-list"
                                        }
                                        //var checked = "";
                                        //var checkedclass = "";
                                        //Modify by Rahul Shah on 28/10/2015 for PL #1438
                                        //if (ifexists &&  filters.OwnerIds.indexOf(OwnerItem.OwnerId)>= 0) {
                                           // checked = "checked";
                                           // checkedclass = "close-list";
                                        //}

                                        $('#ulSelectedOwner').append('<li class="accordion-inner ' + checkedclass + '" title="' + OwnerItem.Title + '" id="liOwner' + OwnerItem.OwnerId + '"><span class="sidebarliwidth">' + OwnerItem.Title + '</span><input type="checkbox" class="chkbxfilter" OwnerTitle="' + OwnerItem.Title + '" onchange="toggleOwner(this)" id="' + OwnerItem.OwnerId + '"' + checked + '></input></li>');
                                    });
                                    if (IsOwnerPresent == false) {

                                        // Modified By Nishant Sheth
                                        // Desc:: To resolve the #1790 observation
                                        checked = "checked"
                                        checkedclass = "close-list"
                                        $('#ulSelectedOwner').append('<li class="accordion-inner ' + checkedclass + '" title="' + data.LoggedInUser.Title + '" id="liOwner' + data.LoggedInUser.OwnerId + '"><span class="sidebarliwidth">' + data.LoggedInUser.Title + '</span><input type="checkbox" class="chkbxfilter" OwnerTitle="' + data.LoggedInUser.Title + '" onchange="toggleOwner(this)" id="' + data.LoggedInUser.OwnerId + '"' + checked + '></input></li>');
                                    }
                                }
                                else {
                                    $("#ulOwnerAllModule").css("display", "none");
                                    $("#NoOwnerFound").show();
                                }
                            }
                            else {
                                $("#ulOwnerAllModule").css("display", "none");
                                $("#NoOwnerFound").show();
                            }
                        }
                    }
                }
        });
        }


        function BulkOwnerOperation(selection) {
            filters.OwnerIds = [];
            if (selection) {
                $("#ulSelectedOwner li").each(function (i) {
                    $(this).addClass("close-list");
                    var chkid = $(this).find("input[type=checkbox]").attr("id");
                    $("#" + chkid).attr("checked", "checked");
                    filters.OwnerIds.push(chkid);
                });
            }
            else {
                $("#ulSelectedOwner li").each(function (i) {
                    $(this).removeClass("close-list");
                    var chkid = $(this).find("input[type=checkbox]").attr("id");
                    $("#" + chkid).removeAttr("checked");
                });
            }
        }


        function toggleOwner(obj) {
            var id = $(obj).attr('id');
            if ($(obj).is(':checked')) {
                $("#liOwner" + id).addClass("close-list");
            }
            else {
                $("#liOwner" + id).removeClass("close-list");
            }
            filters.OwnerIds = [];
            $("#ulSelectedOwner li input[type=checkbox]").each(function () {
                var chkid = $(this).attr("id");
                if ($(this).is(':checked')) {
                    filters.OwnerIds.push(chkid);
                }
            });
        }

        function GetTacticTypelist(Planids, ifexists) {
            var asyncval = false;
            if (ifexists != undefined && ifexists != 'undefined' && ifexists != '' && ifexists != null) {
                asyncval = ifexists;
            }

            $('#ulTacticType').html('');
            if (!ifexists) {
                filters.TacticTypeids = [];
            }
            $.ajax({
                beforeSend: function (x) {
                    myApp.hidePleaseWait();
                },
                type: "GET",
                cache: false,
                async: asyncval,
                @* url: '@Url.Action("GetTacticTypeListForFilter", "Report")',*@
                url: '@Url.Action("GetTacticTypeListForFilter", "Home")',
            data: {
                PlanId: Planids.toString()
            },
            dataType: "json",
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                  }
                  else {
                      if (data.isSuccess == true) {
                          if (data.TacticTypelist != 'undefined' && data.TacticTypelist != null) {
                              TactictypeCount = data.TacticTypelist.length;
                              if (TactictypeCount > 0) {
                                  $("#TacticTypeAllModule").css("display", "block");
                                  $("#NoTTFound").hide();
                                  $.each(data.TacticTypelist, function (i, TactictypeItem) {
                                      var checked = "";
                                      var checkedclass = "";
                                      //Modify by Rahul Shah on 28/10/2015 for PL #1438
                                     
                                          //checked = "checked";
                                          //checkedclass = "close-list";
                                      //}
                                      $('#ulTacticType').append('<li class="accordion-inner ' + checkedclass + '" title="' + TactictypeItem.Title + '" id="liTT' + TactictypeItem.TacticTypeId + '"><span class="sidebarliwidth">' + TactictypeItem.Title + '</span><input type="checkbox" class="chkbxfilter" TacticTypeTitle="' + TactictypeItem.Title + '" onchange="toggleTacticType(this)" id="CbTT' + TactictypeItem.TacticTypeId + '"' + checked + '></input></li>');
                                  });
                              }
                              else {
                                  $("#TacticTypeAllModule").css("display", "none");
                                  $("#NoTTFound").show();
                              }
                          }
                          else {
                              $("#TacticTypeAllModule").css("display", "none");
                              $("#NoTTFound").show();
                          }
                      }
                  }
              }
        });

      }
     // var TacticDeselectAll = false;
      function BulkTTOperation(selection) {
          filters.TacticTypeids = [];
          if (selection) {
              $("#ulTacticType li").each(function (i) {
                  $(this).addClass("close-list");
                  var chkid = $(this).find("input[type=checkbox]").attr("id");
                  $("#" + chkid).attr("checked", "checked");
                  filters.TacticTypeids.push(chkid.replace("CbTT", ""));

              });
          }
          else {
            //  TacticDeselectAll = true;
              $("#ulTacticType li").each(function (i) {
                  $(this).removeClass("close-list");
                  var chkid = $(this).find("input[type=checkbox]").attr("id");
                  $("#" + chkid).removeAttr("checked");
              });
          }

      }

      function toggleTacticType(obj) {
          var id = $(obj).attr('id').toString().replace("CbTT", "");
          if ($(obj).is(':checked')) {
              $("#liTT" + id).addClass("close-list");
          }
          else {
              $("#liTT" + id).removeClass("close-list");
          }

          filters.TacticTypeids = [];
          $("#ulTacticType li input[type=checkbox]").each(function () {
              var chkid = $(this).attr("id");
              if ($(this).is(':checked')) {
                  filters.TacticTypeids.push(chkid.replace("CbTT", ""));
              }
          });
      }

      //End
      var SelectedBUId, SelectedPlanId;
      var IsCallFromYearDropdown = true;
      var OptionMain = '';
      var isAllowClick = true;
      var multiselectPlanId = "ulSelectedPlans";
      var leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
    var Qurt_Month = '@Enums.ViewByAllocated.Quarterly.ToString()';

    $(document).ready(function () {
        myApp.showPleaseWait();// add by nishant sheth
        $("#ddlYearSpan select").selectbox();
        $('.sbHolder').click(function () {
            $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
                $(this).multiselect("close");//"Close" is function in multiselect.js which close the multiselect menu 
            });
        });
        ///Start Modified by Mitesh Vaishnav for PL ticket #727
        $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
            $(this).multiselect({ noneSelectedText: $(this).attr('noneselectedvalue') }).multiselectfilter();
        });

        $(".sbSelector").css("color", "#6D6D6D");
        $(".sbToggle").css("border-top-color", "#6D6D6D");

        OptionMain = getYearSelectedValue(true);

        // Qurt_Month = getQuarterMonthlySelectedValue();

        // Load Multiselect Dropdown list i.e. Bind with new design
        LoadYearDropdown();
        loadBasedOnPlan();
        PlanIds = GetFilterIdForPlan(multiselectPlanId);
        GetOwnerListForFilter(PlanIds,false);
        GetTacticTypelist(PlanIds, false);
        GetLastSetofViews($('#FilterName').val());
        GetselectionFilter();
        $("#DivShareReport").hide();
        GetFilterIdForPlan(multiselectPlanId);
        function toggleChevron(e) {
            $(e.target)
				.prev('.accordion-heading')
				.find("i.indicator")
				.toggleClass('glyphicon-chevron-down glyphicon-chevron-up');
        }
        $('.accordion').on('hidden.bs.collapse', toggleChevron);
        $('.accordion').on('shown.bs.collapse', toggleChevron);
        NumberFormatterTipsyTitle(".tipsyclassTitle", 27);
    });

    function GetLastSetofViews(presetName) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("LastSetOfViews", "Home")',
            data: { PresetName: presetName },
            dataType: "json",
            async: false,
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else {
                    if (data.Customfields.length != 0 && data.Customfields.length != undefined) {
                        for (i = 0 ; i < data.Customfields.length; i++) {
                            if (data.Customfields[i].ID.split('_').length > 1) {
                                var CustomFieldId = data.Customfields[i].ID.split('_')[1];
                                var CustomFieldValues = data.Customfields[i].Value;
                                $('#divCustomFieldsFilter').find("input[type=checkbox]").each(function () {
                                    var chkid = $(this).attr("id");
                                    var chkfieldid = $(this).attr("id").split('_')[0];
                                    var chkOptionid = $(this).attr("id").split('_')[1];
                                    if (chkfieldid == CustomFieldId) {
                                        if (CustomFieldValues.indexOf(chkOptionid) != -1) {
                                            $(this).attr('checked', 'checked');
                                            filters.customFieldIds.push(chkid);
                                            $(this).parent().addClass("close-list");
                                        }
                                        else {
                                            $(this).removeAttr('checked');
                                        }

                                    }
                                });
                            }
                        }
                    }


                    if (data.OwnerNames.length != 0 && data.OwnerNames.length != undefined) {
                       
                        filters.OwnerIds = [];
                        $("#ulSelectedOwner li input[type=checkbox]").removeAttr('checked');
                        $("#ulSelectedOwner li ").removeClass("close-list");
                        for (i = 0 ; i < data.OwnerNames.length; i++) {
                          
                            $("#ulSelectedOwner li input[type=checkbox]").each(function () {
                              
                                var Value = $(this).attr("id");
                                if (Value == data.OwnerNames[i]) {
                                  
                                    filters.OwnerIds.push(Value);
                                    $(this).attr('checked', 'checked');
                                    $(this).parent().addClass("close-list");
                                }
                            });
                        }
                    }

                    if (data.TTList != null) {
                        if (data.TTList.length != 0 && data.TTList.length != undefined) {
                            filters.TacticTypeids = [];
                            $("#ulTacticType li input[type=checkbox]").removeAttr('checked');
                            $("#ulTacticType li ").removeClass("close-list");
                            for (i = 0 ; i < data.TTList.length; i++) {

                                $("#ulTacticType li input[type=checkbox]").each(function () {

                                    var Value = $(this).attr("id").replace("CbTT", "");
                                    if (Value == data.TTList[i]) {
                                        filters.TacticTypeids.push(Value);
                                        $(this).attr('checked', 'checked');
                                        $(this).parent().addClass("close-list");
                                    }
                                });
                            }
                        }
                    }
                    else
                    {
                        $("#ulTacticType li").each(function (i) {
                            $(this).removeClass("close-list");
                            var chkid = $(this).find("input[type=checkbox]").attr("id");
                            $("#" + chkid).removeAttr("checked");
                        });

                    }

                }
            }
        });

    }

    function SaveLastSetofViews(ViewName) {
        filters.customFieldIds = [];

        $('#divCustomFieldsFilter').find("input[type=checkbox]").each(function () {
            if ($(this).attr('checked') == 'checked') {
                var chkid = $(this).attr("id");
                if (chkid != undefined && chkid != 'undefined') {
                    filters.customFieldIds.push(chkid);
                }
            }
        });
        filters.SelectedPlans = [];
        $('#ulSelectedPlans').find("input[type=checkbox]").each(function () {
            if ($(this).attr('checked') == 'checked') {
                var chkid = $(this).attr("id");
                var chkplanid = chkid.split('_');
                if (chkid != undefined && chkid != 'undefined') {
                    filters.SelectedPlans.push(chkplanid[0]);
                }
            }
        });
        if (filters.SelectedPlans.length == 1) {
            CurrentPlanId = filters.SelectedPlans[0].toString();
            $("#CurrentPlanId").val(filters.SelectedPlans[0].toString());

        }
    
        //Commented By Komal Rawal for ticket 1802
       // var ulTacticType = $("#ulTacticType li");

        //if (ulTacticType.length == filters.TacticTypeids.length) {
        //    filters.TacticTypeids = [];
        //}
        //if (TacticDeselectAll) {
        //    filters.TacticTypeids.push(0);
        //}
        var Planid = filters.SelectedPlans;
        var CustomFieldId = filters.customFieldIds;
        var OwnerIds = filters.OwnerIds;
        var TacticTypeids = filters.TacticTypeids;
        var GetSelectedPlanNo = filters.SelectedPlans.length;

        $.ajax({
            type: "GET",
            cache: false,
            async: false,
            url: '@Url.Action("SaveLastSetofViews", "Home")',
            data: {
                PlanId: Planid.toString(),
                customFieldIds: CustomFieldId.toString(),
                ownerIds: OwnerIds.toString(),
                TacticTypeid: TacticTypeids.toString(),
                StatusIds: "Report",
                ViewName: ViewName
            },
            dataType: "json",
            success: function (data) {
                if (data.isSuccess == true) {


                    if (data.ViewName != null && data.ViewName != "" && data.ViewName != undefined) {
                        $("#content_SaveFilters").css("display", "none");
                        $("#btnreportSection").css("display", "block");
                        $("#Filtersidebar").css("display", "block");
                        $("#errorMessageMainSidebar").css("display", "none");
                        $('div[id=successMessageSidebar]').each(function () {
                            if ($(this).parent().is(':visible')) {
                                $(this).show();
                                $(this).find("span[id=spanSuccessMessageRole]").text('@Common.objCached.SavePresetSuccess');
                               // $(this).slideDown(600);
                                $(this).slideDown(600).delay(3000).slideUp(600);
                            }
                        });

                        $("#txtPresetName").val('');
                    }
                }
                else {
                    $("#successMessageSidebar").css("display", "none");
                    $('div[id=errorMessageMainSidebar]').each(function () {
                        if ($(this).parent().is(':visible')) {
                            $(this).show();
                            $(this).find("span[id=spanErrorMessageRole]").text(data.msg);
                           // $(this).slideDown(600);
                            $(this).slideDown(600).delay(3000).slideUp(600);
                        }
                    });

                }
            }

        })

    }

    function GetselectionFilter() {

        var yy = $(this);
        var arrOptionIds = new Array();
        //// close multiselect
        $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
            $(this).multiselect("close");//"Close" is function in multiselect.js which close the multiselect menu 
        });

        OptionMain = getYearSelectedValue(true);

        @foreach (var custField in ViewCustomFields)
        {
            string multiselectid = string.Concat("ul", custField.CustomFieldId);
           @: var filterIds = GetCustomFilterIds('@multiselectid');
           @: var arrFilterId = filterIds.split(',');
           @: if (arrFilterId != "")
           @: {
           @: for (var i = 0; i < arrFilterId.length; i++) {
           @: arrOptionIds.push({ CustomFieldId: '@custField.CustomFieldId', OptionId: arrFilterId[i] });
           @:}
           @:}

            }

        //// get selected value from multiselect 
        PlanIds = GetFilterIdForPlan(multiselectPlanId);
        //Mofied By Komal Rawal
        var arrPlanIds = new Array();
        arrPlanIds = PlanIds.split(',');
        var GetSelectedPlanNo = arrPlanIds.length;
        if (GetSelectedPlanNo > 1) {
            $("#divAddActual").hide();

        }
        else {
            $("#divAddActual").show();

        }
        //End

        SortingId = '';
        $.ajax({
            dataType: 'json',
            type: 'POST',
            url: '@Url.Content("~/Report/SetReportData/")',
            traditional: true,
            data: {
                planIds: PlanIds,
                OwnerIDs: (filters.OwnerIds).toString(),
                TactictypeIDs: (filters.TacticTypeids).toString(),
                customIds: JSON.stringify(arrOptionIds),
            },
            success: function (data) {
                if (data.status) {
                    if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                            LoadSummary();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                            LoadRevenueData();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()') {
                            LoadConversionData();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
                            LoadBudgetView();
                        }
            }

                    //SaveLastSetofViews();
                }
        });
}
    // <--- End document.ready Event --->
    function OnPlanchange(_plancheckbox) {
        var _checked = $(_plancheckbox).attr('checked');
        var _val = $(_plancheckbox).attr('id');
        //Modified by komal rawal to solve plan filter selection problem in reports.
        var _planliId = "liPlan" + "_" + _val;
        OnCheckboxChangeForPlan(_planliId, _checked);
    }

    function OnMultiselectchange(_checkbox) {
        var _checked = $(_checkbox).attr('checked');
        var _val = $(_checkbox).attr('id');
        //Modified by komal rawal to solve Custom filter selection problem in reports.
        var _parentliId = "liCustom" + _val.split("_")[1];
        OnCheckboxChange(_parentliId, _checked);
    }
    function OnCheckboxChangeForPlan(_parentliId, _checked) {
        if (_checked != null && _checked != 'undefined' && _checked === 'checked') {
            $("#" + _parentliId).addClass('close-list');
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
            GetOwnerListForFilter(PlanIds, false);
            GetTacticTypelist(PlanIds, false);
        }
        else {
            $("#" + _parentliId).removeClass('close-list');
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
            GetOwnerListForFilter(PlanIds, false);
            GetTacticTypelist(PlanIds, false);
        }
    }

    function OnCheckboxChange(_parentliId, _checked) {
        if (_checked != null && _checked != 'undefined' && _checked === 'checked') {
            $("#" + _parentliId).addClass('close-list');
        }
        else {
            $("#" + _parentliId).removeClass('close-list');
        }
    }

    //// Load Check value in multiselect dropdown - common for all dropdown
    function LoadCheckBoxValue(multiselectId, filterid) {
        var finalValue = "";
        var isAll = true;
        $('#multipleselect_' + multiselectId).find("input[type='checkbox']").each(function () {
            if (this.checked) {
                finalValue += $(this).parent().find('span').eq(0).html() + ",  ";
            }
            else {
                isAll = false;
            }
        });
        finalValue = finalValue.slice(0, -3);
        if (finalValue == '') {
            finalValue = 'None';
        }
        if (isAll) {
            finalValue = 'All';
        }
        $(filterid).html(finalValue);
    }

    //function SetSelectedFilterText(multiselect_ul_Id, filterid) {
    //    var finalValue = "";
    //    var isAll = true;
    //    $('#' + multiselect_ul_Id).find("input[type='checkbox']").each(function () {
    //        if (this.checked) {
    //            finalValue += $(this).parent().find('span').eq(0).html() + ",  ";
    //        }
    //        else {
    //            isAll = false;
    //        }
    //    });
    //    finalValue = finalValue.slice(0, -3);
    //    if (finalValue == '') {
    //        finalValue = 'None';
    //    }
    //    if (isAll) {
    //        finalValue = 'All';
    //    }
    //    $(filterid).html(finalValue);
    //}

    //// Load Plan data based on selected year
    var _item;
    function LoadPlanData() {
        var strYear = OptionMain;
        if (OptionMain == 'thisquarter') {
            strYear = new Date().getFullYear();
        }
        $.ajax({
            beforeSend: function (x) {
                myApp.hidePleaseWait();
            },
            type: 'POST',
            url: '@Url.Content("~/Report/GetBudgetPlanBasedOnYear/")',
            data: {
                Year: strYear
            },
            success: function (data) {
                $('#' + multiselectPlanId).html('');
                if (data != 'undefined' && data != null) {
                    PlanCount = data.length;
                    if (PlanCount > 0) {
                        $("#PlanAllModule").css("display", "block");
                        $("#NoPlanFound").hide();
                        $.each(data, function (index, item) {
                            _item = item.Value.replace(/'/g, "&#39;"); //PL #1556 Reports: Clustered Plan Names - Dashrath Prajapati
                            $('#' + multiselectPlanId).append('<li class="accordion-inner" title="' + _item + '" id="liPlan' + item.Value + '"><span class="sidebarliwidth">' + item.Text + '</span><input type="checkbox" class="chkbxfilter" planTitle="' + _item + '" onchange="OnPlanchange(this)" id="' + _item + '"></input></li>');
                        });
                    }
                    else {
                        $("#PlanAllModule").css("display", "none");
                        $("#NoPlanFound").show();
                    }
                }
                else {
                    $("#PlanAllModule").css("display", "none");
                    $("#NoPlanFound").show();
                }

                PlanIds = GetFilterIdForPlan(multiselectPlanId);
                GetTacticTypelist(PlanIds,false);
                GetOwnerListForFilter(PlanIds,false);
            }
        });
    }

    function BulkPlanOperation(selection) {
        var ulPlanli = "#" + multiselectPlanId +" li";
        if (selection) {
            $(ulPlanli).each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
            });
        }
        else {
            $(ulPlanli).each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }

        PlanIds = GetFilterIdForPlan(multiselectPlanId);
        GetOwnerListForFilter(PlanIds,false);
        GetTacticTypelist(PlanIds,false);
    }

    function BulkCustomFieldOperation(selection,ulCutomFieldId) {
        var ul_lis = "#" + ulCutomFieldId + " li";
        if (selection) {
            $(ul_lis).each(function (i) {
                $(this).addClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).attr("checked", "checked");
            });
        }
        else {
            $(ul_lis).each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });
        }
    }

    //// Remove actiave class from left sidebar menu li
    function RemoveAllActiveItem() {
        $('#ulLeftPane li').each(function () {
            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
            }
        });
    }

    //// Modified by Arpita Soni for Ticket #1148 on 01/23/2015
    ///Added by Mitesh Vaishnav for PL ticket #846
    ///If running tab is budgeting than show specific filters
    function ShowFilters() {

            @foreach (var custField in ViewCustomFields)
            {
                string btnmultiselectid = string.Concat("#btnMultiselect_ddlView", custField.CustomFieldId);
                string lblid = string.Concat("lbl", custField.CustomFieldId);
                string detailid = string.Concat(custField.CustomFieldId, "detail");
                    @: $('@btnmultiselectid').css('display', 'initial');
                                                        @: $('@lblid').css('display', 'initial');
                                                        @: $('@detailid').css('display', 'initial');
                }
    }

    //// Load Summary view using ajax - partial view
    function LoadSummary() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $('#divMainReportPart').empty();
        $('#conversionHeader').css('display', 'none');
        $('#revenueHeader').css('display', 'none');
        $("#BtnShareReport").show();
        $('#accordion-quart').css('display', 'block');
        @* var url = '@Url.Content("~/Report/GetSummaryData/")';
        $('#divMainReportPart').load(url , function () {*@

        if (Qurt_Month == "Monthly") {
            $("#ddlAllocate option[value='months']").attr("selected", "selected");
            $("#ddlAllocate option[value='quarters']").attr("selected", false);
        }
        else {
            $("#ddlAllocate option[value='quarters']").attr("selected", "selected");
            $("#ddlAllocate option[value='months']").attr("selected", false);
        }
        $('.sbSelector').text(Qurt_Month);

        var url = '@Url.Content("~/Report/GetOverviewData/")';
        $('#divMainReportPart').load(url + '?timeframeOption=' + OptionMain + '&isQuarterly=' + Qurt_Month, function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });

    }

    //// Load Revenue view section
    function LoadRevenueView() {
        $('#conversionHeader').css('display', 'none');
        $('#revenueHeader').css('display', 'none');
    }

    //// Load Conversion view section
    function LoadConversionView() {
        $('#conversionHeader').css('display', 'block');
        $('#revenueHeader').css('display', 'none');
    }
    $("#BtnAddActual").click(function () {
        //Button of add actual only display when single plan selected 
        var planIdForAddActual = GetFilterIdForPlan(multiselectPlanId);
        var url = '@Url.Action("AddActual", "Plan")' + '?PlanId=' + planIdForAddActual;
         window.location.href = url;
     });
    //// Call function based on option
    function loadBasedOnPlan() {
        
        var isActualVisible = "@ViewBag.TacticActualsAddEdit"
        if (isActualVisible.toString().toLowerCase() == 'true') {
            if (SelectedPlanId == 0) {
                $("#BtnAddActual").attr("disabled", "disabled");
            }
            else {
                $("#BtnAddActual").removeAttr("disabled");
            }
        }

        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                LoadSummary();
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                LoadRevenueData();
            }
                //PL 1562 Dashrath Prajpati
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()') {
                LoadConversionData();
            }
    }

    //// Load Revenue Data
    function LoadRevenueData() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $("#BtnShareReport").show();
        $('#divMainReportPart').empty();
        $('#accordion-quart').css('display', 'none');
        
        @*var url = '@Url.Content("~/Report/GetRevenueData/")';
        $('#divMainReportPart').load(url + '?timeFrameOption=' + OptionMain , function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });*@

        var url = '@Url.Content("~/Report/GetRevenueData/")';
        $('#divMainReportPart').load(url + '?option=' + OptionMain + '&isQuarterly=' + Qurt_Month, function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });
    }

    //// Load Conversion Data
    function LoadConversionData() {
        $('#budgetHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'block');
        $('#formSideFilter').css('display', 'block');
        $("#BtnShareReport").show();
        //$('#divMainReportPart').empty();
        $('#accordion-quart').css('display', 'none');
        $('#conversionHeader').css('display', 'none'); //added by dashrath prajapati for new design of conversion partial page
        $('#revenueHeader').css('display', 'none'); //added by dashrath prajapati for new design of conversion partial page

      @*  var url = '@Url.Content("~/Report/GetConversionData/")';*@
        //$('#divMainReportPart').load(url + '?timeFrameOption=' + OptionMain , function () {
        //    isAllowClick = true;
        //    myApp.hidePleaseWait();
        //});

        var url = '@Url.Content("~/Report/GetWaterFallData/")';
        $('#divMainReportPart').load(url + '?timeFrameOption=' + OptionMain + '&isQuarterly=' + Qurt_Month, function () {
            isAllowClick = true;
            myApp.hidePleaseWait();
        });
    }

    //// Load Budget View
    function LoadBudgetView() {
        $("#BtnShareReport").hide(); //Added by Arpita Soni on 01/08/2015 for ticket #1108
        $('#budgetHeader').css('display', 'block');
        $('#conversionHeader').css('display', 'none');
        $('#revenueHeader').css('display', 'none');
        $('#UlPlanHeader').css('display', 'none');
        $('#formSideFilter').css('display', 'none');
        $('#accordion-quart').css('display', 'none');
        var url = '@Url.Content("~/Report/GetBudget/")';
            $('#divMainReportPart').load(url, function () {
                isAllowClick = true;
            });
        }

        //// Get Plan Ids from multiselect list
        function GetFilterIdForPlan(ulPlanId) {
      //  myApp.showPleaseWait();// add by nishant sheth // Comment by bhavesh
            var finalValue = "";
            var isShowAddActual = 0;
            $('#' + ulPlanId).find("input[type='checkbox']").each(function () {
                if (this.checked) {
                    isShowAddActual++;
                    var splitvalue = $(this).attr('id').split("_");
                    finalValue += splitvalue[0] + ",";
                }
            });

            finalValue = finalValue.slice(0, -1);
            if (finalValue == '') {
                finalValue = '';
            }
            //if (isShowAddActual == 1) {
            //    $("#divAddActual").css("display", "block");
            //}
            //else {
            //    $("#divAddActual").css("display", "none");
            //}

            return finalValue;

        }

        //// Get id from multiselect
        function GetCustomFilterIds(ulCustomId) {
            var finalValue = "";
            $('#' + ulCustomId).find("input[type='checkbox']").each(function () {
                if (this.checked) {
                    finalValue += $(this).attr('id') + ",";
                }
            });

            finalValue = finalValue.slice(0, -1);
            if (finalValue == '') {
                finalValue = '';
            }
            return finalValue;
        }

        //// Load Budget Data
        function LoadBudgetData() {
            if (isByAllocated) {
                myApp.showPleaseWait();
                $('#divTabData').load('@Url.Action("GetReportBudgetData", "Report")' + '?Year=' + OptionMain + '&AllocatedBy=' + AllocatedBy + '&Tab=' + Tab + '&SortingId=' + SortingId, function () {
                    myApp.hidePleaseWait();
                });

            }
        }

        //// Load Share report section
        function ShowShareReport() {
            var url = '@Url.Content("~/Report/ShowShareReport/")';
            $("#DivShareReport").empty()
                                       .load(url.concat('?reportType=') + leftPaneOption)
                                       .show();
        }

        //// on select simple selector dropdown close multiselect dropdown
        $(".sbSelector").click(function () {
            $(".ui-multiselect-menu").each(function () {
                $(this).css("display", "none");
            });
        });

        //// handle update button event

        var SavePresetValue = false;
        $('#updatedata').click(function () {

            var arrOptionIds = new Array();
            //// close multiselect
            $(".budgetReportFilter-area").find(".multiselection-select").each(function () {
                $(this).multiselect("close");//"Close" is function in multiselect.js which close the multiselect menu 
            });

            OptionMain = getYearSelectedValue(true);

            //  Qurt_Month = getQuarterMonthlySelectedValue();

        @foreach (var custField in ViewCustomFields)
        {
            string multiselectid = string.Concat("ul", custField.CustomFieldId);
           @: var filterIds = GetCustomFilterIds('@multiselectid');
           @: var arrFilterId = filterIds.split(',');
           @: if(arrFilterId != "")
           @: {
           @: for (var i = 0; i < arrFilterId.length; i++) {
           @: arrOptionIds.push({ CustomFieldId: '@custField.CustomFieldId', OptionId: arrFilterId[i] });
           @:}
           @:}
        }

            //// get selected value from multiselect 
            PlanIds = GetFilterIdForPlan(multiselectPlanId);
            //Mofied By Komal Rawal
            var arrPlanIds = new Array();
            arrPlanIds = PlanIds.split(',');
            var GetSelectedPlanNo = arrPlanIds.length;
            if (GetSelectedPlanNo > 1) {
                $("#divAddActual").hide();

            }
            else {
                $("#divAddActual").show();

            }
            //End

            SortingId = '';
            $.ajax({
                dataType: 'json',
                type: 'POST',
                url: '@Url.Content("~/Report/SetReportData/")',
                traditional: true,
                data: {
                    planIds: PlanIds,
                    OwnerIDs: (filters.OwnerIds).toString(),
                    TactictypeIDs: (filters.TacticTypeids).toString(),
                    customIds: JSON.stringify(arrOptionIds),
                },
                success: function (data) {
                    if (data.status) {
                        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                            LoadSummary();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                            LoadRevenueData();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()') {
                            LoadConversionData();
                        }
                        else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
                            LoadBudgetView();
                        }
            }

                   
                }
            });
           
            if (SavePresetValue == false) {
                    SaveLastSetofViews();
                }
            SavePresetValue = false;
        });

function OnYearChange(_yearli) {
    $(_yearli).siblings().each(function () {
        $(this).removeClass('close-list');
    });
        //$(_yearli).addClass('close-list');
        // Add By Nishant Sheth
        // Desc :: #1842 multiple year selection base on #1821
    var listCheckbox = $("#ulSelectedYear").find("input[type=checkbox]");
    var years = "";
    $.each(listCheckbox, function () {
        if ($(this).attr("checked")) {
            years += $(this).attr('yearValue') + ",";
        }
    });
    years = years.slice(0, -1);
        //OptionMain = $(_yearli).attr('yearValue');
    OptionMain = years;
    if (IsCallFromYearDropdown) {
        LoadPlanData();
    }
    //var _yearText = $(_yearli).attr('title');
    //$("#spYearText").html(_yearText);
    //$("#aYear").click();
}

//function OnTimeFrameChange(_quartmonthli) {
//    $(_quartmonthli).siblings().each(function () {
//        $(this).removeClass('close-list');
//    });
//    $(_quartmonthli).addClass('close-list');
//    Qurt_Month = $(_quartmonthli).attr('timeframe-val');

//    var _timeframeText = $(_quartmonthli).attr('title');
//    $("#spTimeFrameText").html(_timeframeText);
//    $("#aTimeFrame").click();
//}

function LoadYearDropdown() {
    var isClick = false;
    var ul_lis = "#ulSelectedYear li";
    $(ul_lis).each(function (i) {
        var _yearValue = $(this).attr('yearValue');

        /* Hide 'thisquarter' item from dropdown for Summary & Budget tab.*/
        if (_yearValue == 'thisquarter') {
            if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()') {
                isClick = true;
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()') {
                isClick = false;
            }
                //PL 1562 Dashrath Prajpati
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()') {
                isClick = false;
            }
            else if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
                isClick = true;
            }

    if (isClick == true) {
        $(this).css('display', 'none');
    }
    else {
        $(this).css('display', 'block');
    }
}
    });
    var selectedValue = getYearSelectedValue(false);
    $(ul_lis).each(function (i) {
        if (isClick == true && selectedValue == 'thisquarter') {
            var _currentliValue = $(this).attr('yearValue');
            if (_currentliValue == '@RevenuePlanner.Helpers.Common.GetCurrentYear()') {
                IsCallFromYearDropdown = false;
                $(this).click();
                IsCallFromYearDropdown = true;
            }
        }
    });
}

function getYearSelectedValue(isYearDetail) {
    //var _selecteditem = '';
    //$('#ulSelectedYear li').each(function () {
    //    if ($(this).hasClass('close-list')) {
    //        _selecteditem = $(this);
    //    }
    //});
    // Add By Nishant Sheth
    // Desc :: #1842 multiple year selection base on #1821
    var listCheckbox = $("#ulSelectedYear").find("input[type=checkbox]");
    var years = "";
    $.each(listCheckbox, function () {
        if ($(this).attr("checked")) {
            years += $(this).attr('yearValue') + ",";
        }
    });
    years = years.slice(0, -1);
    // End By Nishant Sheth
    //var _selectedYear = $(_selecteditem[0]).attr('yearValue');
    //if (isYearDetail) {
    //    var _YearText = $(_selecteditem).find('span').eq(0).html();
    //    $("#spYearText").html(_YearText);
    //}

    return years;
}

function getQuarterMonthlySelectedValue() {
    var _selecteditem = '';
    $('#ulSelectedQuart li').each(function () {
        if ($(this).hasClass('close-list')) {
            _selecteditem = $(this);
        }
    });
    var _selected = $(_selecteditem[0]).attr('timeframe-val');

    //var _YearText = $(_selecteditem).find('span').eq(0).html();
    //$("#spYearText").html(_YearText);

    return _selected;
}

//// summary click event
$('#liSummary').click(function () {
    if (isAllowClick) {
        document.title = "Summary";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
            GetOwnerListForFilter(PlanIds, true);
            GetTacticTypelist(PlanIds, true);
        }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Summary.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        $('#ddlsection').show(); //Modified for #1296
        loadBasedOnPlan();
    }
});

//// revenue click event
$('#liRevenue').click(function () {
    if (isAllowClick) {
        document.title = "Revenue";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()';
            GetOwnerListForFilter(PlanIds, true);
            GetTacticTypelist(PlanIds, true);
        }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Revenue.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        $('#ddlsection').hide(); //Modified for #1296
        LoadRevenueView();
        loadBasedOnPlan();
    }
});

//// conversion click event
$('#liConversion').click(function () {
    if (isAllowClick) {
        document.title = "Waterfall";
        isAllowClick = false;
        if (leftPaneOption == '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()';
            GetOwnerListForFilter(PlanIds, true);
            GetTacticTypelist(PlanIds, true);
        }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Waterfall.ToString()';  //PL 1562 Dashrath Prajpati
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        $('#ddlsection').hide(); //Modified for #1296
        LoadConversionView();
        loadBasedOnPlan();
    }
});

//// budget click event
$('#liBudgetreport').click(function () {
    if (isAllowClick) {
        document.title = "Finance"; //PL#1545 Dashrath Prajapati
        isAllowClick = false;
        if (leftPaneOption != '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()') {
            leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()';
            GetOwnerListForFilter(PlanIds, true);
            GetTacticTypelist(PlanIds, true);
        }
        leftPaneOption = '@RevenuePlanner.Helpers.Enums.ReportType.Budget.ToString()';
        LoadYearDropdown(leftPaneOption);
        RemoveAllActiveItem();
        $(this).addClass('active');
        $('#ddlsection').hide(); //Modified for #1296
        LoadBudgetView();
    }
    });

//// share report event
$("#BtnShareReport").click(function () {
    ShowShareReport();
});

        // Start:- Linchart script 
        function BindLineChart(_categories, _plotlineVal, _isshowPlotLine, _series, _linechartDivId, _chartHeight, _plotOptions) {
            Highcharts.setOptions({
                lang: {
                    numericSymbols: ["k", "M", "B", "T", "P", "E"]
                }
            });
            var options = {
                chart: {
                    height: _chartHeight,
                    //width: _chartwidth,
                    spacingTop: 50
                },
                colors: ['#B04499', '#999999'],
                legend: {
                    align: 'top',
                    verticalAlign: 'top',
                    layout: 'horizontal',
                    x: 60,
                    y: -40
                },
                title: {
                    text: ''
                },
                xAxis: {
                    categories: _categories,
                    lineColor: 'black',
                    lineWidth: 2,
                    tickColor: 'black',
                    tickWidth: 2,
                    plotLines: _isshowPlotLine.toLowerCase() == "true" ? [{
                        color: 'black', // Color value
                        dashStyle: 'longdash', // Style of the plot line. Default to solid
                        value: _plotlineVal, // Value of where the line will appear
                        width: 2, // Width of the line    
                        label: {
                            text: 'Today',
                            align: 'middle',
                            verticalAlign: 'top',
                            rotation: 0,
                            x: -15,
                            y: -2
                        }
                    }] : [],
                    tickPosition: 'inside',
                    tickmarkPlacement: 'on',
                    labels: {
                        color: '#2d2d2d',
                        style: {
                            "fontWeight": "bold"
                        }
                    }
                },
                yAxis: {
                    lineColor: 'black',
                    gridLineWidth: 0,
                    minorGridLineWidth: 0,
                    lineWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 5,
                    tickWidth: 2,
                    tickColor: 'black',
                    tickAmount: 5,
                    labels: {
                        color: '#2d2d2d',
                        style: {
                            "fontWeight": "bold"
                        }
                    },
                    title: {
                        text: ''
                    }
                },
                tooltip: {
                    valueDecimals: 1,
                },
                plotOptions: _plotOptions ? {
                    series: {
                        marker: {
                            enabled: true
                        }
                    }
                } :
                {
                    series: {  
                        marker: {
                            enabled: true //PL #1490 Add circular markers on the graphs - Dashrath Prajapati
                        }
                    }
                },
                series: []
            }

            var serLength = _series.length;
            for (var i = 0; i < serLength ; i++) {
                options.series.push(eval(_series[i]));
            }
            $(_linechartDivId).highcharts(options);
        }
        // End:- Linchart script 

        // Start:- Linchart script 
        function BindLineChartRevenue(_categories, _plotlineVal, _isshowPlotLine, _series, _linechartDivId, _chartHeight, _plotOptions) {
            Highcharts.setOptions({
                lang: {
                    numericSymbols: ["k", "M", "B", "T", "P", "E"]
                }
            });
            var options = {
                chart: {
                    height: _chartHeight,
                    //width: _chartwidth,
                    spacingTop: 50
                },
                colors: ['#B04499', '#999999'],
                legend: {
                    align: 'left',
                    verticalAlign: 'top',
                    layout: 'vertical',
                    x: 60,
                    y: -40
                },
                title: {
                    text: ''
                },
                xAxis: {
                    categories: _categories,
                    lineColor: 'black',
                    lineWidth: 2,
                    tickColor: 'black',
                    tickWidth: 2,
                    plotLines: _isshowPlotLine.toLowerCase() == "true" ? [{
                        color: 'black', // Color value
                        dashStyle: 'longdash', // Style of the plot line. Default to solid
                        value: _plotlineVal, // Value of where the line will appear
                        width: 2, // Width of the line    
                        label: {
                            text: 'Today',
                            align: 'middle',
                            verticalAlign: 'top',
                            rotation: 0,
                            x: -15,
                            y: -2
                        }
                    }] : [],
                    tickPosition: 'inside',
                    tickmarkPlacement: 'on',
                    labels: {
                        color: '#2d2d2d',
                        style: {
                            "fontWeight": "bold"
                        }
                    }
                },
                yAxis: {
                    lineColor: 'black',
                    gridLineWidth: 0,
                    minorGridLineWidth: 0,
                    lineWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 5,
                    tickWidth: 2,
                    tickColor: 'black',
                    tickAmount: 5,
                    labels: {
                        color: '#2d2d2d',
                        style: {
                            "fontWeight": "bold"
                        }
                    },
                    title: {
                        text: ''
                    }
                },
                tooltip: {
                    valueDecimals: 1,
                },
                plotOptions: _plotOptions ? {
                    series: {
                        marker: {
                            enabled: true
                        }
                    }
                } :
                {
                    series: {
                        marker: {
                            enabled: false
                        }
                    }
                },
                series: []
            }

            var serLength = _series.length;
            for (var i = 0; i < serLength ; i++) {
                options.series.push(eval(_series[i]));
            }
            $(_linechartDivId).highcharts(options);
        }
        // End:- Linchart script 

        //Start:- BarLineChart Script
        function BindBarChartData(_categories, _series, _linechartDivId, _title) {
            Highcharts.setOptions({
                lang: {
                    numericSymbols: ["k", "M", "B", "T", "P", "E"]
                }
            });
            var options = {
                chart: {
                    //height: _height,
                    //width: _width,
                    type: 'bar'
                },
                title: {
                    text: ''
                    //style: {
                    //    color: '#333',
                    //    fontFamily: 'source_sans_proregular',
                    //    fontSize: '22px',
                    //    fontWeight: 'normal'
                    //}
                },
                xAxis: {
                    lineWidth: 0,
                    categories: _categories,
                    gridLineWidth: 0,
                    tickWidth: 0
                },
                yAxis: {
                    gridLineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    title: {
                        enabled: false
                    }
                },
                colors: ['#CCCCCC', '#2384b8'],
                legend: {
                    //reversed: true,
                    align: 'center',
                    verticalAlign: 'top',
                    itemDistance: 50,
                    symbolPadding: 10,
                },
                plotOptions: {
                    series: {
                        //stacking: 'normal',
                        //pointWidth: 40,
                        //pointPadding: 0.1
                    },
                    scatter: {
                        marker: {
                            symbol: 'line',
                            lineWidth: 3,
                            radius: 12,
                            lineColor: '#F0BE29'
                        }
                    },
                    bar: {
                        grouping: false,
                        shadow: false,
                        borderWidth: 0
                    }
                },
                tooltip: {
                    valuePrefix: '$'
                },
                series: []
            }

            var serLength = _series.length;
            var _catLength = _categories.length;
            for (var i = 0; i < serLength ; i++) {
                //alert(eval(_series[i]));
                options.series.push(eval(_series[i]));
                if (_series[i].type != null && _series[i].type != 'undefined' && _series[i].type == 'scatter') {
                    var datum = options.series[i];
                    datum.tooltip = {
                        shared: true,
                        useHTML: true,
                        headerFormat: '<table>',
                        pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td>' +
                            '<td style="text-align: right"><b>{point.y}</b></td></tr>',
                        footerFormat: '</table>'
                    };
                    //if (_catLength == 4) {
                    //    datum.marker = {
                    //        symbol: 'line',
                    //        lineWidth: 2,
                    //        radius: 26,
                    //        lineColor: '#F0BE29'
                    //    };
                    //}

                }
            }

            Highcharts.Renderer.prototype.symbols.line = function (x, y, width, height) {
                return ['M', x, y + height / 2, 'L', x + width, y + width / 2];
            }
            $(_linechartDivId).highcharts(options);

        }

        function BindRevenueBarChartData(_categories, _series, _linechartDivId) {
            Highcharts.setOptions({
                lang: {
                    numericSymbols: ["k", "M", "B", "T", "P", "E"]
                }
            });
            var options = {
                chart: {
                    type: 'column'
                    //height: _height,
                    //width: 400
                },
                colors: ['#B04499', '#999999'],
                title: {
                    text: ''
                },
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    verticalAlign: 'top',
                    floating: true,
                    x: 30,
                    y: 45
                },
                xAxis: {
                    categories: _categories,
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    }
                },
                yAxis: {
                    gridLineWidth: 0,
                    labels: {
                        enabled: false
                    },
                    title: {
                        enabled: false
                    }
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    valueDecimals: 2,
                },
                plotOptions: {
                    series: {
                        //pointWidth: 20,

                        //groupPadding: 0,
                        //borderWidth: 0,
                        //shadow: false
                    },
                    column: {
                        //grouping: false,
                        shadow: false,
                        borderWidth: 0,
                        pointPadding: 0,
                        pointWidth: 20
                        //groupPadding: 0
                    }
                },
                series: []
            }

            var serLength = _series.length;
            // var _catLength = _categories.length;

            for (var i = 0; i < serLength ; i++) {
                //alert(eval(_series[i]));
                options.series.push(eval(_series[i]));
                //if (_series[i].type != null && _series[i].type != 'undefined' && _series[i].type == 'scatter') {
                //    var datum = options.series[i];
                //    datum.tooltip = {
                //        shared: true,
                //        useHTML: true,
                //        headerFormat: '<table>',
                //        pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td>' +
                //            '<td style="text-align: right"><b>{point.y}</b></td></tr>',
                //        footerFormat: '</table>'
                //    };
                //    if (_catLength == 4) {
                //        datum.marker = {
                //            symbol: 'line',
                //            lineWidth: 2,
                //            radius: 26,
                //            lineColor: '#F0BE29'
                //        };
                //    }

                //}
            }

            //Highcharts.Renderer.prototype.symbols.line = function (x, y, width, height) {
            //    return ['M', x, y + height / 2, 'L', x + width, y + width / 2];
            //};
            $(_linechartDivId).highcharts(options);

        }
    //End:- BarLineChart Script

    //Start:- Combination Chart Script
        function BindRevenueCombinationChartData(_categories, _Barseries, _ChartDivId, _linechartseries, _plotlineVal, _pointLabelWidth,_isshowPlotLine,_actulValue) {
            Highcharts.setOptions({
                lang: {
                    numericSymbols: ["k", "M", "B", "T", "P", "E"]
                }
            });
            var options = {
                chart: {
                    //type: 'column'
                    height: 280,
                    spacingTop: 30
                    //width: 400
                },
                colors: ['#B04499', '#999999', '#006837'],
                title: {
                    text: ''
                },
                legend: {
                    layout: 'vertical',
                    align: 'left',
                    verticalAlign: 'top',
                    floating: true,
                    x: 60,
                    y: 45
                },
                xAxis: {
                    categories: _categories,
                    tickWidth: 0,
                    labels: {
                        enabled: false
                    },
                    plotLines:_isshowPlotLine.toLowerCase() == "true" ? [{  //PL #1394 Revenue to Plan: Today Line for Past & Future Plans : Dashrath Prajapati
                        color: 'black', // Color value
                        dashStyle: 'longdash', // Style of the plot line. Default to solid
                        value: _plotlineVal, // Value of where the line will appear
                        width: 2, // Width of the line    
                        label: {
                            text: 'Today',
                            align: 'middle',
                            verticalAlign: 'top',
                            rotation: 0,
                            x: -15,
                            y: -2
                        }
                    }] : []
                    //plotBands: [{
                    //    color: '#ebebeb',
                    //    from: _plotBandFrom,
                    //    to: _plotBandTo
                    //}]
                },
                yAxis: {
                    gridLineWidth: 0,
                    labels: {
                        enabled: true,
                        align: 'left',
                        x: 7,
                        y:2
                    },
                    title: {
                        enabled: false,
                        text:'Values'
                    },
                    lineWidth: 1,
                    tickPosition: 'inside',
                    tickLength: 5,
                    tickWidth: 2
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    valueDecimals: 2,
                },
                plotOptions: {
                    series: {
                        //pointWidth: 20,

                        //groupPadding: 0,
                        //borderWidth: 0,
                        //shadow: false
                    },
                    column: {
                        //grouping: false,
                        shadow: false,
                        borderWidth: 0,
                        //pointPadding: 5,
                        pointWidth: _pointLabelWidth
                        //groupPadding: 0
                    }
                },
                series: []
            }
            var serLength = _Barseries.length;
            var _arractul = [];//add actual list -dashrath
            var _arractulbar = [];//add actual bar list -dashrath
            for (var i = 0; i < serLength ; i++) {
                options.series.push(eval(_Barseries[i]));

                if (_Barseries[i].name == "Actual") {
                    _arractulbar.push(_Barseries[i].data);
                }
            }
            var _linechartseriesLength = _linechartseries.length;
            for (var i = 0; i < _linechartseriesLength ; i++) {
                options.series.push(eval(_linechartseries[i]));

                //start #1437 change actual tootlip on waterfall and revenue :- Dashrath Prajapati.

                if (_linechartseries[i].name == "Actual") {
                    _arractul.push(_linechartseries[i].data);
                }
                //if (_series[i].type != null && _series[i].type != 'undefined') {
                //    var datum = options.series[i];
                //    datum.tooltip = {
                //        shared: true,
                //        useHTML: true,
                //        headerFormat: '<table>',
                //        pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td>' +
                //            '<td style="text-align: right"><b>{point.y}</b></td></tr> <tr><td style="color: {series.color}">{series.name}: </td>' +
                //    '<td style="text-align: right"><b>{point.y}</b></td></tr>',
                //        footerFormat: '</table>'
                //    };
                //    //if (_catLength == 4) {
                //    //    datum.marker = {
                //    //        symbol: 'line',
                //    //        lineWidth: 2,
                //    //        radius: 26,
                //    //        lineColor: '#F0BE29'
                //    //    };
                //    //}
                //}
            }
            //getting same value in projected and actual 
            var sameVal;
            var index;
            var total = 0;
            var ii = 1;
            var arrActual = _arractul;

            var _arrActual = arrActual.toString();
            var Actualarray = _arrActual.split(',');
            var _Actualarray = Actualarray.reverse();

            for (var i = 0; i < _Actualarray.length; i++) {
                if (ii == 1) {
                    if (_Actualarray[i].toString() != "") {
                        sameVal = _Actualarray[i].toString();
                        ii++;
                    }
                }
            }

            _Actualarray.reverse();
            index = $.inArray(sameVal, _Actualarray);
            if (_Actualarray.length <= 5) {
                for (var i = 0; i <= index - 1; i++) {
                    total += _actulValue[i];
                }
            }
            else {
                for (var i = 0; i <= index - 2; i++) {
                    total += _actulValue[i];
                }
            }
            _Actualarray.splice(index, 1, total.toString());

            var __Actualarraybar = _arractulbar.toString();
            var _ActualValuebar = __Actualarraybar.split(',')
            options.tooltip = {
                formatter: function () {
                    var symbol = '●';
                    var series = this.point.series.chart.series[0];
                    switch (this.point.graphic.symbolName) {
                        case 'circle':
                            symbol = '●';
                            break;
                        case 'diamond':
                            symbol = '♦';
                            break;
                        case 'square':
                            symbol = '■';
                            break;
                        case 'triangle':
                            symbol = '▲';
                            break;
                        case 'triangle-down':
                            symbol = '▼';
                            break;
                    }

                    if (this.point.series.name == "Actual") {
                        if (this.point.series.type == "line") {
                            var _point = this.point.series.data.indexOf(this.point);
                            var _val = _Actualarray[_point];
                            return this.key + '<br/><span style="color:' + this.series.color + '">' + symbol + '</span>' + this.point.series.name + ':' + '<b>' + Highcharts.numberFormat(_val) + '</b>';
                        }
                        if (this.point.series.type == "column") {
                            var _point = this.point.series.data.indexOf(this.point);
                            var _val = _ActualValuebar[_point];
                            return this.key + '<br/><span style="color:' + this.series.color + '">' + symbol + '</span>' + this.point.series.name + ':' + '<b>' + Highcharts.numberFormat(_val) + '</b>';
                        }
                    }
                    else {
                        return this.key + '<br/><span style="color:' + this.series.color + '">' + symbol + '</span>' + this.point.series.name + ':' + '<b>' + Highcharts.numberFormat(this.y) + '</b>';
                    }
                }
            };
            //end #1437
            //Highcharts.Renderer.prototype.symbols.line = function (x, y, width, height) {
            //    return ['M', x, y + height / 2, 'L', x + width, y + width / 2];
            //};
            $(_ChartDivId).highcharts(options);
        }
    //End:- Combination Chart Script

        function SaveAsPreset() {

            var IsAnyPlanSelected = $('#ulSelectedPlans').find("li").hasClass("close-list");
            var IsAnyCustomFieldSelected = $('#divCustomFieldsFilter').find("li").hasClass("close-list");
            var IsAnyTTSelected = $('#ulTacticType').find("li").hasClass("close-list");
            var IsAnyStatusSelected = $('#ulStatus').find("li").hasClass("close-list");
            var IsAnyOwnerSelected = $('#ulSelectedOwner').find("li").hasClass("close-list");
            if (!IsAnyCustomFieldSelected && !IsAnyPlanSelected && !IsAnyTTSelected && !IsAnyStatusSelected && !IsAnyOwnerSelected) {
                alert('Please select atleast one filter');
                return false;
            }
            else {
                $("#content_SaveFilters").css("display", "block");
                $("#btnreportSection").css("display", "none");
                $("#Filtersidebar").css("display", "none");


            }

        }

        function ClearAllPreset() {
            BulkPlanOperation(false);
            BulkTTOperation(false);
            BulkStatusOperation(false);
            $('#divCustomFieldsFilter').find("li").each(function (i) {
                $(this).removeClass("close-list");
                var chkid = $(this).find("input[type=checkbox]").attr("id");
                $("#" + chkid).removeAttr("checked");
            });


        }

        function LoadPreset() {

            var isLoadPreset = true;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("LastSetOfViews", "Home")',
                data: {
                    isLoadPreset: isLoadPreset,
                },
                //dataType: "json",
                async: false,
                success: function (data) {
                    if (data != null) {
                        $('#DefaultFilters').css('display', 'block');
                        $('#DefaultFilters').html(data);

                    }
                    else {
                        $('#DefaultFilters').css('display', 'none');
                    }


                }

            });
            $("#successMessageSidebar").css("display", "none");
            $("#DefaultFilters").css("display", "block");
            $("#btnreportSection").css("display", "none");
            $("#Filtersidebar").css("display", "none");
            //  $("#displaydata").css("display", "none");

        }

        function SavePreset() {

            var ViewName = $("#txtPresetName").val();
            if (ViewName == null || ViewName == "") {
                $("#successMessageSidebar").css("display", "none");
                $('div[id=errorMessageMainSidebar]').each(function () {
                    if ($(this).parent().is(':visible')) {
                        $(this).show();
                        $(this).find("span[id=spanErrorMessageRole]").text('@Common.objCached.ProvidePresetName');
                      //  $(this).slideDown(600);
                        $(this).slideDown(600).delay(3000).slideUp(600);
                    }
                });
            }
            else {
                SavePresetValue = true;
                SaveLastSetofViews(ViewName);
                $('#updatedata').click();

              
            }


        }

        function CancelSavePreset() {
        $("#errorMessageMainSidebar").css("display", "none");
        $("#successMessageSidebar").css("display", "none");
        $("#successMessageLoadPreset").css("display", "none");
            $("#content_SaveFilters").css("display", "none");
            $("#DefaultFilters").css("display", "none");
            $("#btnreportSection").css("display", "block");
            $("#Filtersidebar").css("display", "block");
        }


</script>
