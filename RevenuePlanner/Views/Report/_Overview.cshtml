@model RevenuePlanner.Models.ReportOverviewModel
@using Newtonsoft.Json;
@{
    var linechartdata = Model.revenueOverviewModel != null ? JsonConvert.SerializeObject(Model.revenueOverviewModel.linechartdata) : string.Empty;
    var revenue_Projected_Goal = Model.revenueOverviewModel != null ? Model.revenueOverviewModel.projected_goal : new RevenuePlanner.Models.Projected_Goal();
    var SparkLineChartData = Model.revenueOverviewModel != null ? Model.revenueOverviewModel.SparkLineChartsData : new List<RevenuePlanner.Models.sparkLineCharts>();
    var ConversionOverviewModel = Model.conversionOverviewModel != null ? Model.conversionOverviewModel : new RevenuePlanner.Models.ConversionOverviewModel();
    var FinancialOverviewModel = Model.financialOverviewModel != null ? Model.financialOverviewModel : new RevenuePlanner.Models.FinancialOverviewModel();
    bool isPlanExistToShowReport = Convert.ToBoolean(ViewBag.IsPlanExistToShowReport);
    var _actual_Projected = (dynamic)null;
    var _goal = (dynamic)null;
    var _percentage = (dynamic)null;
    var isnegativePercentage = (dynamic)null;
    if (revenue_Projected_Goal != null)
    {
    _actual_Projected = revenue_Projected_Goal.Actual_Projected != null ? revenue_Projected_Goal.Actual_Projected : null;
    _goal = revenue_Projected_Goal.Goal != null ? revenue_Projected_Goal.Goal : null;
    _percentage = revenue_Projected_Goal.Percentage != null ? revenue_Projected_Goal.Percentage : null;
    isnegativePercentage = revenue_Projected_Goal.IsnegativePercentage != null ? revenue_Projected_Goal.IsnegativePercentage : false;
    }
}

<style type="text/css">
#table-sparkline {
	margin: 0 auto;
    border-collapse: collapse;
}
th {
    font-weight: bold;
    text-align: left;
}
td,tbody th {
    padding: 5px;
    border-top: 1px solid silver;
    height: 20px;
}


.highcharts-tooltip>span {
	background: white;
	border: 1px solid silver;
	border-radius: 3px;
	box-shadow: 1px 1px 2px #888;
	padding: 8px;
}
.dvsparkline div {
    float:right;
}
    .lastraw {
        font-size: 15px;
        font-weight: bold;
        line-height: 25px;
        text-align: left;
    }
    .nobold {
        font-weight:inherit !important;
    }
    .redLabel {
    color:#ff0000 !important;
    }
    .greenLabel {
    color:#009E26 !important;
    }
    .hideReport {
    display:none !important;
    }
   .sbHolder {
    z-index: 1499;
    }
   .nobold {
        font-weight:inherit !important;
    }
</style>
@Html.Hidden("hdnIsPlanExistToShowReport", isPlanExistToShowReport)
<div class="report-index-wrapper">
    <div id="DivNoPlanToShowReport" style="border-top:none; display:none;" class="NoDataFound">No data found for selected active filters.</div>
    @if(isPlanExistToShowReport)
    {
    <div class="revenue-wrapper" id="divRevenue" style="display:none;">
        <div class="report-revenue">
            <div class="report-btn-group">
                <p class="revanue-p">Revenue</p>
                <button name="btnRevenueDetails" class="btn btn-blue text-shadow-blue source-sans-proregular" id="btnRevenueDetails" onclick="onRevenueDetailsClick();">Details</button>
                <a name="" class="btn source-sans-proregular report-grey-btn hideReport" id=""><span>
                    <img src="~/Content/images/export.png" /></span>Export</a>
                <button  class="btn btn-blue  text-shadow-blue source-sans-proregular report-blue-btn hideReport" ><span>
                    <img src="~/Content/images/round-plus.png" /></span>Add Widget</button>
            </div>
            <div class="revenue-graph">
                <div class="row">
                    <div class="revenue-graph-info noborder">
                        <p class="yearcounter margintop10per" id="lblRevProjectedYear">@revenue_Projected_Goal.year</p>
                        <p class="smalltext" id="lblActual_Projected">Actual/Projected Vs Goal</p>
                        <p class="amountcounterhead" id="lblRevActual_Projected">@revenue_Projected_Goal.Actual_Projected</p>
                        <p class="smallamountcounterhead" id="lblRevGoal">@revenue_Projected_Goal.Goal</p>
                        <p class="statustexthead" id="lblRevPercentage">@revenue_Projected_Goal.Percentage</p>
                    </div>
                    <div class="r-graph" style="height:260px;">
                        <div id="RevenueLineChart" style="height:100%;">
                        </div>
                    </div>
                </div>
                <div class="row noborder">
                    <div class="reveanue-table" id="RevenueSparklinecharts">
                        @Html.Partial("_SparkLineChart",SparkLineChartData)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="revenue-wrapper" id="divConversion" style="display:none;">
        <div class="report-revenue">
           <div id="conversionPartial">
               @Html.Partial("_conversionOverview",ConversionOverviewModel)
           </div>
        </div>
    </div>
<div class="revenue-wrapper" id="divBudgeting" style="display:block;">
        <div class="report-revenue">
           <div id="financialPartial">
               @Html.Partial("_financialOverview",FinancialOverviewModel)
               </div>
            </div>
    </div>
<div class="container-fluid all-height" id="modalMainContainer">
    <div class="row-fluid calc-height">
        <div class="container-fluid">
            <div class="row-fluid ">
                <div class="span12">
                    <div id="modal-container-186470" class="modal-inspect-review hide fade modal-full-view" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none; position: fixed;">
                        <div style="margin: 80px auto !important">
                            <div id="divPartial">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="divBackground" class="modal-backdrop fade in" style="display: none; z-index: 2502 !important;"></div>
    }
</div>


<script type="text/javascript">
    var _defautlChartHeight = 275, _defautlChartWidth = 600;
    $(function () {
        myApp.showPleaseWait();// add by nishant sheth
        ShowHideReport();
        var _isplan = "@isPlanExistToShowReport";
        if (_isplan.toLowerCase() == 'true') 
        {
        var strUrl = "@Url.Content("~/Report/GetRevenueLineChartData")";
        var _sparklineurl = "@Url.Content("~/Report/GetRevenueSparkLineChartData")";

        // Start:- Revenue_Projected_Goal Overview script 

            var _actual_Projected = "@_actual_Projected";
            var _goal = "@_goal";
            var _percentage = "@_percentage";
            var isnegativePercentage = "@isnegativePercentage";

        var _formtActualProjected = "0", _formtGoal = "0", _formtPercentage = "0";

        if (_goal == null || _goal == 'undefined' || _goal == '')
            _formtGoal = "0";
        else {
            _formtGoal = FormatNumber(Math.abs(parseFloat(_goal)), false);
            setBootstrapTooltip("#lblRevGoal", _goal, 5, true);
        }

        _formtGoal = "/" + _formtGoal;
        if (_actual_Projected == null || _actual_Projected == 'undefined' || _actual_Projected == '')
            _formtActualProjected = "0";
        else {
            _formtActualProjected = FormatNumber(Math.abs(parseFloat(_actual_Projected)), false);
            setBootstrapTooltip("#lblRevActual_Projected", _actual_Projected, 5, true);
        }
        if (_percentage == null || _percentage == 'undefined' || _percentage == '' || _percentage == 'NaN' || _percentage == '-NaN') {
            _formtPercentage = "0";
            $("#lblRevPercentage").removeClass("greenLabel").removeClass("redLabel");
        }
        else {
            if (isnegativePercentage.toLowerCase() == 'true') {
                _formtPercentage = FormatNumber(Math.abs(parseFloat(_percentage)), true) + " " + "@RevenuePlanner.Helpers.Common.BelowPlan.ToString()";
                $("#lblRevPercentage").removeClass("greenLabel").addClass("redLabel");
            }
            else {
                _formtPercentage = FormatNumber(Math.abs(parseFloat(_percentage)), true) + " " + "@RevenuePlanner.Helpers.Common.AbovePlan.ToString()";
                $("#lblRevPercentage").removeClass("redLabel").addClass("greenLabel");
            }
        }

        $("#lblRevActual_Projected").html(_formtActualProjected);
        $("#lblRevGoal").html(_formtGoal);
        $("#lblRevPercentage").html(_formtPercentage);
        // End:- Revenue_Projected_Goal Overview script 

        // Start:- Revenue_LineChart script 
        var _lineardata = "@linechartdata";
        var chartdata = (_lineardata.toString().replace(/&quot;/g, '"'));
        chartdata = JSON.parse(chartdata);
        //alert(chartdata.toString());
        //$.each(chartdata.series, function (i, val) {
        //    $.each(val, function (key, _val) {
        //        alert("key:" + key + "Value:" + _val);
        //    });
        //});
        var linechartDivId = "#RevenueLineChart";
        
        BindLineChart(chartdata.categories, chartdata.todayValue, chartdata.isDisplay, chartdata.series, linechartDivId, 260, false);

        // End:- Revenue_LineChart script 
        $('#MQLLineChart').highcharts().reflow();
        $('#CWLineChart').highcharts().reflow();
        // Start:- Revenue_SparkLineChart script 
        
        BindSparkLineChart();
        doChunk();
        $('.revenue-summary-custom').find('select').each(function () {
            //if ($(this).attr('id') != ddlChildRevenueSummeryId && $(this).attr('id') != ddlChildRevenueToPlanId) {
            $(this).multiselect({
                multiple: false,
                noneSelectedText: "Please Select",
                selectedList: 1,
                CustomCampaignName: "@RevenuePlanner.Helpers.Common.CampaignCustomTitle",
                CustomProgramName: "@RevenuePlanner.Helpers.Common.ProgramCustomTitle",
                CustomTacticName: "@RevenuePlanner.Helpers.Common.TacticCustomTitle"
            }).multiselectfilter({
                CustomCampaignName: "@RevenuePlanner.Helpers.Common.CampaignCustomTitle",
                CustomProgramName: "@RevenuePlanner.Helpers.Common.ProgramCustomTitle",
                CustomTacticName: "@RevenuePlanner.Helpers.Common.TacticCustomTitle"
            });
            //}
        });
        // End:- Revenue_SparkLineChart script 
        }
    });

    function onRevenueDetailsClick() {
        //$('#liRevenue').click();
        $('.menu-content li').removeClass('active');
        $('.revenue').addClass('active');
        RevenueDash();
    }

    // Start:- Revenue_SparkLineChart script 

    function BindSparkLineChart() {
    /**
     * Create a constructor for sparklines that takes some sensible defaults and merges in the individual
     * chart options. This function is also available from the jQuery plugin as $(element).highcharts('SparkLine').
     */
        Highcharts.SparkLine = function (options, callback) {
            var defaultOptions = {
                chart: {
                    renderTo: (options.chart && options.chart.renderTo) || this,
                    backgroundColor: null,
                    borderWidth: 0,
                    type: 'area',
                    margin: [2, 0, 2, 0],
                    width: 120,
                    height: 20,
                    style: {
                        overflow: 'visible'
                    },
                    skipClone: true
                },
                title: {
                    text: ''
                },
                credits: {
                    enabled: false
                },
                //colors: ['#c7e9f4'],
                xAxis: {
                    labels: {
                        enabled: false
                    },
                    title: {
                        text: null
                    },
                    startOnTick: false,
                    endOnTick: false,
                    tickPositions: []
                },
                yAxis: {
                    endOnTick: false,
                    startOnTick: false,
                    labels: {
                        enabled: false
                    },
                    title: {
                        text: null
                    },
                    tickPositions: [0]
                },
                legend: {
                    enabled: false
                },
                tooltip: {
                    backgroundColor: null,
                    borderWidth: 0,
                    shadow: false,
                    useHTML: true,
                    hideDelay: 0,
                    shared: true,
                    padding: 0,
                    valueDecimals: 1,
                    positioner: function (w, h, point) {
                        return { x: point.plotX - w / 2, y: point.plotY - h };
                    }
                },
                plotOptions: {
                    series: {
                        animation: false,
                        lineWidth: 1,
                        shadow: false,
                        states: {
                            hover: {
                                lineWidth: 1
                            }
                        },
                        marker: {
                            radius: 1,
                            states: {
                                hover: {
                                    radius: 2
                                }
                            }
                        }, color: '#c7e9f4',
                        borderWidth: 0
                        //,fillOpacity: 0.25
                    },
                    column: {
                        negativeColor: '#910000',
                        borderColor: 'silver'
                    }
                }
            };
            options = Highcharts.merge(defaultOptions, options);

            return new Highcharts.Chart(options, callback);
        };
    }

    // Creating 153 sparkline charts is quite fast in modern browsers, but IE8 and mobile
    // can take some seconds, so we split the input into chunks and apply them in timeouts
    // in order avoid locking up the browser process and allow interaction.
    function doChunk() {
        var start = +new Date(),
            $tds = $("td[data-sparkline]"),
            fullLen = $tds.length,
            n = 0;
        var time = +new Date(),
            i,
            len = $tds.length,
            $td,
            stringdata,
            arr,
            data,
            chart;

        for (i = 0; i < len; i += 1) {
            $td = $($tds[i]);
            stringdata = $td.data('sparkline');
            arr = stringdata.split('; ');
            data = $.map(arr[0].split(', '), parseFloat);
            chart = {};

            if (arr[1]) {
                chart.type = arr[1];
            }
            $td.highcharts('SparkLine', {
                series: [{
                    data: data,
                    pointStart: 1
                }],
                tooltip: {
                    headerFormat: '<span style="font-size: 10px">' + $td.parent().find('th').html() + ', Q{point.x}:</span><br/>',
                    pointFormat: '<b>{point.y}</b>',
                    valuePrefix: $td.parent().find('th').attr('tooltip-prefix'),
                    valueSuffix: $td.parent().find('th').attr('tooltip-suffix')
                },
                chart: chart
            });

            n += 1;

            // If the process takes too much time, run a timeout to allow interaction with the browser
            if (new Date() - time > 500) {
                $tds.splice(0, i + 1);
                setTimeout(doChunk, 0);
                break;
            }

            // Print a feedback on the performance
            //if (n === fullLen) {
            //    $('#result').html('Generated ' + fullLen + ' sparklines in ' + (new Date() - start) + ' ms');
            //}
        }
    }

    // End:- Revenue_SparkLineChart script 

    function ShowHideReport() {
        var _isplan = $('#hdnIsPlanExistToShowReport').val().toLowerCase();
        if (_isplan == 'true') {
            $('#DivNoPlanToShowReport').css('display', 'none');
            $('#divRevenue').css('display', 'block');
            $('#divConversion').css('display', 'block');
            $('#divBudgeting').css('display', 'block');
            $('#ddlsection').css('display', 'block');
        }
        else {
            $('#DivNoPlanToShowReport').css('display', 'block');
            $('#divRevenue').css('display', 'none');
            $('#divConversion').css('display', 'none');
            $('#divBudgeting').css('display', 'none');
            $('#ddlsection').css('display', 'none');
        }
    }
</script>
