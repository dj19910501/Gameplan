@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
    var InspectMode = ViewBag.InspectMode != null ? (string)ViewBag.InspectMode : string.Empty;
}
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>
@{
    var tacticMaster = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    var PlanProgrameId = (ViewBag.PlanProgrameId != null) ? ViewBag.PlanProgrameId : 0;
    var IsResubmitableStatus = false;
    var TacticTitle = "";
    var PlanTacticId=0;
    var Status = "";
    var ColorCode = "";
    string RequestedModule = (ViewBag.RedirectType != "") ? ViewBag.RedirectType : "";
    if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
    {
        tacticMaster = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
        PlanProgrameId = tacticMaster.PlanProgramId;
        IsResubmitableStatus = (bool)Common.CheckAfterApprovedStatus(tacticMaster.Status);
        TacticTitle = tacticMaster.TacticTitle;
        PlanTacticId = tacticMaster.PlanTacticId;
        Status = tacticMaster.Status;
        ColorCode = tacticMaster.ColorCode;
    }

    bool IsPlanEditable = false;
    if (ViewBag.IsPlanEditable != null)
    {
        IsPlanEditable = (bool)ViewBag.IsPlanEditable;
    }
}
@Html.Hidden("hdnPlanTacticId", PlanTacticId, new { id = "hdnPlanTacticId" })
@Html.Hidden("hdnTacticStatus", Status, new { id = "hdnTacticStatus" })
@Html.Hidden("hdnIsResubmitableStatus", IsResubmitableStatus, new { id = "hdnIsResubmitableStatus" })
@Html.Hidden("hdnRequestedModule", RequestedModule, new { id = "hdnRequestedModule" })
<div id="successMessageImprovementTactic" class="alert hide alert-success message-position-small">
    <a class="close">×</a>
    <strong>Success.</strong>
    <span id="spanSuccMessageImprovementTactic"></span>
</div>

<div id="errorMessageImprovementTactic" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong>
    <span id="spanErrMessageImprovementTactic"></span>
</div>
<form>
    <div class="modal-popup-title">
        <span class="icon-flag bg-purple flagcolor" style="background-color:#@ColorCode !important;"></span>
        <h2 class="title-simple source-sans-prolight">
            @Html.TextBox("txtTitle", HttpUtility.HtmlDecode(TacticTitle), new { placeholder = "Required", require = "true", maxlength = "255", @class = "span12 input-small truncate font20 light-blue-background", style = "width: 95%; height: 28px;", title = HttpUtility.HtmlDecode(TacticTitle) })
            @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle1" })
            <span class="tipsyclassTitle" id="spnImprovementTacticTitle" title="@HttpUtility.HtmlDecode(TacticTitle)">@HttpUtility.HtmlDecode(TacticTitle)</span>
            @if (IsPlanEditable && !(InspectMode == Enums.InspectPopupMode.Edit.ToString()) && !(InspectMode == Enums.InspectPopupMode.Add.ToString()))
            {               
                <a id="lnkEdit" class="edit-icon-white btn-blue btn-large" style="cursor: pointer;"></a>
            }
        </h2>
    </div>
</form>
@if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
{
    <div class="modal-popup-summary">
        <h3 class="modal-popup-innertitle source-sans-proregular">Summary</h3>
        <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight">
            I'm running 
            <span id="tactic-type" class="source-sans-prosemibold color5693B3">@tacticMaster.TacticTypeTitle</span>
            improvement tactic called 
            <span id="tactic-name" class="source-sans-prosemibold color5693B3">@HttpUtility.HtmlDecode(TacticTitle)</span>
            with an effective date starting
            <span id="start-date" class="source-sans-prosemibold color5693B3">@tacticMaster.StartDate.ToString(Common.DateFormateForInspectPopupDescription)</span>
            .
        
        <p class="modal-status">Status: 

            @if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
               <span id="status" class="source-sans-prosemibold statussubmitted"> @tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                 <span id="status" class="source-sans-prosemibold statusrejected"> @tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
                 <span id="status" class="source-sans-prosemibold statusapproved"> @tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                 <span id="status" class="source-sans-prosemibold statuscreated"> @tacticMaster.Status</span>
            }
        </p>
        </div>
    </div>
}

<div>

    <ul class="nav nav-tabs new-margin" id="InspectTab">
        <li class="active pull-left" id="liSetup">
            <a >Setup</a>
        </li>
        <li class="pull-left" id="liReview">
            <a >Review</a>
        </li>
        <li class="pull-left" id="liImpact">
            <a>Impact</a>
        </li>
         <li class="pull-right">
              <h3 class="modal-popup-innertitle source-sans-proregular">Details</h3>          
        </li>
    </ul>
    <div id="divTab">
    </div>
</div>

<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabActual = "Impact";
    var divTab = "#divTab";

    $(document).ready(function () {
          CloseIconClick();
          NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
          var InspectValue = $("#hdnInspectPopup").val();
          var planTacticId = $("#hdnPlanTacticId").val();
          // Call Remove Tabclass
          RemoveTabClass();

          $("#li" + InspectValue).removeClass("pull-left");
          $("#li" + InspectValue).addClass("active pull-left");
          var tabtext = ($("#li" + InspectValue).children('a').text());
          $('#div' + tabtext).css({ display: "block" });

          loadReview(planTacticId, tabtext);

          if ('@InspectMode' == '@Enums.InspectPopupMode.Edit.ToString()' || '@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {
              $('#txtTitle').css('display', 'inline');
              $('#spnImprovementTacticTitle').css('display', 'none');
          }
          else {
              $('#txtTitle').css('display', 'none');
              $('#spnImprovementTacticTitle').css('display', 'inline');
          }

          // Click on Tab Partialview Refresh Based On Selected Tab
          $("#liSetup,#liReview,#liImpact").on("click", function () {
              RemoveTabClass();
              $(this).removeClass("pull-left");
              $(this).addClass("active pull-left");
              HideAllMessages();
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
              var tabtext = ($(this).children('a').text());
              var planTacticId = $("#hdnPlanTacticId").val();
              loadReview(planTacticId, tabtext);

          });

          // Close event for Error Message & Success Message Close button 
          $(".alert").find(".close").on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).closest(".alert").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
          });

         
      });

    function RemoveTabClass() {
        $('#InspectTab').children().each(function () {
            if ($(this).hasClass('active pull-left')) {
                $(this).removeClass("active pull-left");
                $(this).addClass("pull-left");
            }
        });
    }

    function loadReview(id, tabValue) {
        $.ajaxSetup({ cache: false });
        var url;
        if (tabValue == TabSetup) {
            url = '@Url.Content("~/Home/LoadImprovementSetup/")';
            if ('@InspectMode' == '@Enums.InspectPopupMode.Edit.ToString()' || '@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {
                $('#txtTitle').css('display', 'inline');
                $('#spnImprovementTacticTitle').css('display', 'none');
            }
            else {
                $('#txtTitle').css('display', 'none');
                $('#spnImprovementTacticTitle').css('display', 'inline');
            }
        }
        else if (tabValue == TabReview) {
              url = '@Url.Content("~/Home/LoadImprovementReview/")';
            $('#txtTitle').css('display', 'none');
            $('#spnImprovementTacticTitle').css('display', 'inline');
        }
        else if (tabValue == TabActual) {
            url = '@Url.Content("~/Home/LoadImprovementImpact/")';
            $('#txtTitle').css('display', 'none');
            $('#spnImprovementTacticTitle').css('display', 'inline');
        }

        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });

          $("#divTab").empty();

          if ('@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {
            $("#divTab").load(url + '?id=' + '@PlanProgrameId' + '&InspectPopupMode=' + '@InspectMode');
        }
        else {
            $("#divTab").load(url + '?id=' + id + '&InspectPopupMode=' + '@InspectMode');
        }
    }

    $('#lnkEdit').click(function () {
        HideAllMessages();
        var url = '@Url.Content("~/Home/LoadInspectPopup")';
        $("#divPartial").empty();
        $("#divPartial").load(url + '?id=' + @PlanTacticId + '&Section=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.ImprovementTactic).ToLower()" + '&TabValue=' + "Setup" + '&InspectPopupMode=' + "@Enums.InspectPopupMode.Edit.ToString()" + '&RequestedModule=' + '@RequestedModule');
    });       

    function HideAllMessages()
    {
        $("#successMessageImprovementTactic").css("display", "none");
        $("#spanSuccMessageImprovementTactic").empty();
        $("#errorMessageImprovementTactic").css("display", "none");
        $("#spanErrMessageImprovementTactic").empty();
        $("#successMessage").css("display", "none");
        $("#spanMessageSuccess").empty();
        $("#errorMessage").css("display", "none");
        $("#spanMessageError").empty();
    }

</script>
