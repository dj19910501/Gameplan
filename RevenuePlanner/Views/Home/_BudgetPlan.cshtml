@model RevenuePlanner.Models.InspectModel
@using RevenuePlanner.Helpers
@{
    var InspectMode = ViewBag.InspectMode != null ? (string)ViewBag.InspectMode : string.Empty;
    var planDetails = (RevenuePlanner.Models.InspectModel)ViewBag.PlanDetails;
    string AllocatedBy = planDetails != null ? planDetails.AllocatedBy : "";
    bool IsBudgetAllocated = false;
    if (!AllocatedBy.Equals(Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.defaults.ToString()].ToString(), StringComparison.OrdinalIgnoreCase))
    {
        IsBudgetAllocated = true;
    }
    var TotalAllocatedCampaignBudget = ViewBag.TotalAllocatedCampaignBudget != null ? (double)ViewBag.TotalAllocatedCampaignBudget : 0;
}
@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.PlanId)
    @Html.HiddenFor(model => model.Title)
    @Html.Hidden("hdnIsBudgetAllocated",IsBudgetAllocated)
    
        <div style="width: 30%; float: left;">
            <label class="padding-left4">Plan Budget</label>
            @if (InspectMode == Enums.InspectPopupMode.ReadOnly.ToString())
            {
                @Html.TextBox("txtPlanBudget", planDetails.Budget, new { id="txtPlanBudget", @class = "margin-top3px currency_dollar", style = "background:#F2F2F2;", @readonly = "true", title = planDetails.Budget })
            }
            else if (InspectMode == Enums.InspectPopupMode.Edit.ToString())
            {
                @Html.TextBox("txtPlanBudget", planDetails.Budget, new { id = "txtPlanBudget", @class = "margin-top3px currency_dollar", style = "", title = planDetails.Budget, require = "true", })
            }
        </div>
        <div class="InspectPopupBudgetSection">
            @if (!AllocatedBy.Equals(Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.defaults.ToString()].ToString(), StringComparison.OrdinalIgnoreCase))
            {
	            <div class="budget-section">
                    <div class="budget-head clearfix">
                        <p>Budget Allocation</p>
                    </div>
                    <div class="budget-collapse">
                        <div class="white-bg-InspectPopup-Budget">
                            @HtmlHelpers.GenerateBudgetAllocationControl(AllocatedBy)
                            <div class="budget-month">
                                <span class="month">@Common.UnallocatedBudgetLabelText</span>
                                <span class="unallocated-span"><input id="lblUnallocatedBudget" class="unallocated-text" readonly="true" /></span>
                            </div>
                            <div class="SepraterStacticis"></div>
                            <div class="budget-result source-sans-prolight">
                                <p class="font-size16">
                                    Allocated Campaign Budget (this @(AllocatedBy.Equals(Enums.PlanAllocatedByList[Enums.PlanAllocatedBy.months.ToString()].ToString(), StringComparison.OrdinalIgnoreCase) ? "Month" : "Quarter")): 
                                    @if (InspectMode == Enums.InspectPopupMode.Edit.ToString())
                                    {
                                                <span id="lblAllocatedCampaignsBudget" class="source-sans-proregular"></span>
                                    }
                                </p>
                                <p class="font-size16">
                                    Total Allocated:
                                                <span id="lblTotalAllocated" class="source-sans-proregular"></span>
                                </p>
                                <p class="font-size16">
                                    Total Budgeted:
                                                <span id="lblTotalBudget" class="source-sans-proregular">@planDetails.Budget</span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="InspectPopup-DefaultBudget">@Common.objCached.DefaultPlanAllocationMessage</div>
            }
        </div>
    
    if (InspectMode == Enums.InspectPopupMode.Edit.ToString())
    {
        <div class="wraper-btns cf border-top-div" style="width: 100%; padding-right:2%; clear: both;">
            <div style="width: 80px" class="span2 btn-save">
                <button id="btnEditSave" class="btn btn-blue text-shadow-blue source-sans-proregular margin-top23" type="button">Save</button>
            </div>
            <div class="span2">
                <button id="btnEditCancel" class="close-form btn-link source-sans-proregular" type="button" style="float: left; margin-top: 30px;">Cancel</button>
            </div>
        </div>
    }                        
    <span class="flag-icon"></span>
}

<script type="text/javascript">
    var SavePlanFlag = true;
    var requestedModule = $("#hdnRequestedModule").val();
    $(document).ready(function () {
        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        $('.priceValueAllowNull').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0, isAllowNull: true });

        if ($("#hdnIsBudgetAllocated").val() == "True" && $("#lblTotalBudget").html() != '') {
            $("#lblTotalBudget").html(FormatCommasBudget($("#lblTotalBudget").html(), false, true));
        }
        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        //$("#txtPlanBudget").val(FormatCommasBudget($("#txtPlanBudget").val(), false, true));
        $("#txtPlanBudget").attr('title', $("#txtPlanBudget").val());

        if ($("#hdnIsBudgetAllocated").val() == "True") {
            fillBudgetAllocationData();
        }

        if ('@InspectMode' == '@Enums.InspectPopupMode.ReadOnly.ToString()')
        {
            $(".budget-section input").not('.unallocated-text').each(function () {
                $(this).prop('readonly', true);
                $(this).parent().removeClass('light-blue-background');
                $(this).parent().addClass('unallocated-span');
                $(this).addClass('unallocated-text-BudgetPopUp');
                $(this).prop('disabled', 'disabled');
            });
        }

        //// Set ui for unallocated input
        $(".budget-month").last().addClass('source-sans-prolight');
        $(".budget-month").last().find('input').prop('readonly', true);
        $(".budget-month").last().find('input').prop('disabled', 'disabled');
    });

    function fillBudgetAllocationData() {
        var hdnPlanId = $("#hdnPlanId").val();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Plan/GetBudgetAllocationPlanData/")',
            data: {
                id: hdnPlanId
            },
            success: function (data) {
                var r = data.budgetData;
                if (typeof r != 'undefined') {
                    if (r.length) {
                        for (i in r) {
                            var budgetValue = r[i].budgetValue == '' ? '0' : r[i].budgetValue;
                            var campaignMonthlyBudget = r[i].campaignMonthlyBudget == '' ? '0' : r[i].campaignMonthlyBudget;
                            $("#" + r[i].periodTitle).val(FormatCommas(r[i].budgetValue.toString(), false));
                            $("#" + r[i].periodTitle).attr('ov', r[i].budgetValue == '' ? '0' : r[i].budgetValue);
                            $("#" + r[i].periodTitle).attr('cmb', r[i].campaignMonthlyBudget);
                            $("#" + r[i].periodTitle).attr("myValue", $("#" + r[i].periodTitle).val());
                            if (parseInt(campaignMonthlyBudget) > budgetValue) {
                                $(this).addClass('low-budgeted');
                                $("#lblAllocatedCampaignsBudget").addClass('error-text');
                            }
                            else {
                                $(this).removeClass('low-budgeted');
                                $("#lblAllocatedCampaignsBudget").removeClass('error-text');
                            }
                        }
                    }
                }

                var TotalallocationValue = 0;
                var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
                for (var i = 0; i < lstAllocInputs.length; i++) {
                    TotalallocationValue += parseInt($(lstAllocInputs[i]).val() == '' ? 0 : ReplaceCC($(lstAllocInputs[i]).val()));
                }
                if (TotalallocationValue.toString() != '') {
                    $("#lblTotalAllocated").html(FormatCommasBudget(TotalallocationValue.toString(), false, true));
                }
                calculateUnallocatedBudget();
                $("#Y1").focus();
            },
            error: function () {
                ShowError('');
                return false;
            }
        });
    }

    function calculateUnallocatedBudget() {
        var CampaignBudgetValue = $("#txtPlanBudget").val().trim().replace(/,/g, '').replace('$', '');
        var CampaignAllocatedBudgetValue = $("#lblTotalAllocated").html().trim().replace(/,/g, '').replace('$', '');
        var unallocatedBudget = parseInt(CampaignBudgetValue) - parseInt(CampaignAllocatedBudgetValue);
        $("#lblUnallocatedBudget").val(FormatCommasBudget(unallocatedBudget.toString(), false, true).replace('$', ''));
        if (unallocatedBudget < 0) {
            $("#lblUnallocatedBudget").addClass('error-text');
            $("#lblTotalAllocated").addClass('error-text');

        }
        else {
            $("#lblUnallocatedBudget").removeClass('error-text');
            $("#lblTotalAllocated").removeClass('error-text');
        }
    }

    function returnToReadOnlyMode(id) {
        var url = '@Url.Content("~/Home/LoadInspectPopup")';
        $("#divPartial").empty();
        $("#divPartial").load(url + '?id=' + id + '&Section=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Plan).ToLower()" + '&TabValue=' + "Budget" + '&InspectPopupMode=' + "@Enums.InspectPopupMode.ReadOnly.ToString()" + '&RequestedModule=' + requestedModule);
    }

    $('.budget-section').find('input').not('.unallocated-text').each(function () {
        $(this).keyup(function () {
            if ($(this).val().trim() != '') {
                var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                if (currentValue.match('^(0|[1-9][0-9]*)$')) {
                    var OldBudgetValue = parseInt($(this).attr("ov"));
                    var differenceVal = OldBudgetValue - parseInt(currentValue);
                    $(this).attr("ov", currentValue);

                    var CampaignBudgetValue = parseInt($(this).attr("cmb"));
                    if (parseInt(currentValue) < CampaignBudgetValue) {
                        $(this).addClass('low-budgeted');
                        $("#lblAllocatedCampaignsBudget").addClass('error-text');
                    }
                    else {
                        $(this).removeClass('low-budgeted');
                        $("#lblAllocatedCampaignsBudget").removeClass('error-text');
                    }

                    var TotalallocationValue = 0;
                    var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
                    for (var i = 0; i < lstAllocInputs.length; i++) {
                        TotalallocationValue += parseInt($(lstAllocInputs[i]).val() == '' ? 0 : ReplaceCC($(lstAllocInputs[i]).val()));
                    }
                    $("#lblTotalAllocated").html(FormatCommasBudget(TotalallocationValue.toString(), false, true));
                    calculateUnallocatedBudget();
                }
            }
        });
    });

    $('.budget-section').find('input').not('.unallocated-text').each(function () {
        $(this).focus(function () {
            $('.budget-section').find('input').not('.unallocated-text').parent().removeClass('border000000');
            $(this).parent().addClass('border000000');

            var AllocatedCampaignsBudget = parseInt($(this).attr("cmb"));
            var currentValue = parseInt($(this).attr("ov"));

            if (currentValue < AllocatedCampaignsBudget) {
                $(this).addClass('low-budgeted');
                $("#lblAllocatedCampaignsBudget").addClass('error-text');
            }
            else {
                $(this).removeClass('low-budgeted');
                $("#lblAllocatedCampaignsBudget").removeClass('error-text');
            }

            $("#lblAllocatedCampaignsBudget").html(FormatCommasBudget(AllocatedCampaignsBudget.toString(), false, true));

        });
    });

    $("#btnEditSave").click(function () {
        var iserror = false;
        $('form').find('input[type=text], select').each(function () {
            if ($(this).attr('require') == 'true') {
                if ($(this).val().toString().trim() == '' || (this.id.toString() == 'txtPlanBudget' && $(this).val() == '$0')) {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            }
        });

        //sbSelector
        $('form').find('.sbSelector').each(function () {
            if ($(this).parent().prev().attr('require') == 'true') {
                if ($(this).text() == 'Please Select') {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            }
        });
        
        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
        }
        else {
            $("#errorMessage").css("display", "none");
            var TotalAllocatedCampaignBudget = '@TotalAllocatedCampaignBudget';
            var totalBudget = parseInt(ReplaceCC($("#txtPlanBudget").val()));
            if (TotalAllocatedCampaignBudget > totalBudget) {
                $('#divErrLessBudget').css("display", "block");
                iserror = true;
            }
            else {
                $("#divErrLessBudget").css("display", "none");
            }
        }

        if (!iserror) {
            if ($("#hdnIsBudgetAllocated").val() == "True") {
                var lstAllocInputs = $(".budget-section input.error-text").not('.unallocated-text');
                if (lstAllocInputs.length > 0) {
                    var errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotAllocateMorehanBudgeted for ";
                    var inputLength = lstAllocInputs.length;
                    var removeLength = 0;
                    for (var i = 0; i < lstAllocInputs.length; i++) {
                        if (inputLength == 1) {
                            errorMsg += ($(lstAllocInputs[i]).parent().prev().html());
                        }
                        else if (inputLength == 2) {
                            errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                            removeLength = 4;
                        }
                        else if (inputLength > 2) {
                            if (i == inputLength - 2) {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                removeLength = 4;
                            }
                            else {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ', ');
                                removeLength = 2;
                            }
                        }
                    }

                    errorMsg = errorMsg.substring(0, errorMsg.length - removeLength);
                    errorMsg += '.';

                    ShowBudgetError(errorMsg);
                    return false;
                }
                
                if ($("#lblTotalAllocated").hasClass('error-text')) {
                    errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotAllocateMorehanBudgeted";
                    ShowBudgetError(errorMsg);
                    return false;
                }

                if (parseInt(ReplaceCC($("#lblUnallocatedBudget").val())) < 0) {
                    errorMsg = "@RevenuePlanner.Helpers.Common.objCached.CannotSetBudgetLessthanAllocated";
                    ShowBudgetError(errorMsg);
                    return false;
                }

                if (SavePlanFlag) {
                    var lstAllocInputs = $(".budget-section input.low-budgeted").not('.unallocated-text');
                    if (lstAllocInputs.length > 0) {
                        var errorMsg = "@RevenuePlanner.Helpers.Common.objCached.ErrMsgLessCampaignBudget ";
                        var removeLength = 0;
                        var inputLength = lstAllocInputs.length;
                        for (var i = 0; i < lstAllocInputs.length; i++) {
                            if (inputLength == 1) {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html());
                            }
                            else if (inputLength == 2) {
                                errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                removeLength = 4;
                            }
                            else if (inputLength > 2) {
                                if (i == inputLength - 2) {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ' and ');
                                    removeLength = 4;
                                }
                                else {
                                    errorMsg += ($(lstAllocInputs[i]).parent().prev().html() + ', ');
                                    removeLength = 2;
                                }
                            }
                        }
                        errorMsg = errorMsg.substring(0, errorMsg.length - removeLength);
                        errorMsg += '. <br />If you want to continue, hit Save below.';
                        ShowBudgetError(errorMsg);
                        SavePlanFlag = false;
                        return false;
                    }
                }

            }
            
            var allocationValue = [];
            var lstAllocInputs = $(".budget-section input").not('.unallocated-text');
            for (var i = 0; i < lstAllocInputs.length; i++) {
                allocationValue.push(ReplaceCC($(lstAllocInputs[i]).val()));
            }

            $("#txtTitle").value = htmlEncode($('#txtTitle').val());
            $('#Title').val($('#txtTitle').val());
            $("#txtPlanBudget").val(ReplaceCC($("#txtPlanBudget").val()));
            $("#txtPlanBudget").attr('title', $("#txtPlanBudget").val());
            var formData = $("form").serialize();
            var RedirectType = "";
            var planBudget = $("#txtPlanBudget").val();
            var uId = $(window).attr('name');
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Home/SavePlanDetails")',
                //data: formData + '&RedirectType=' + RedirectType + '&UserId=' + uId,
                data: formData + '&BudgetInputValues=' + allocationValue.toString() + '&planBudget=' + planBudget + '&RedirectType=' + RedirectType + '&UserId=' + uId,
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.succmsg != "") {
                            if (data.redirect != "") {
                                @*if ('@CalledFromBudget' != '') {
                                    var strURL = '@Url.Content("~/Plan/Budgeting")';
                                    window.location.href = strURL + '?type=' + '@CalledFromBudget';
                                }
                                else {
                                    window.location.href = data.redirect;
                                }*@

                            }
                            else {
                                $("#successMessage").css("display", "block");
                                $("#spanMessageSuccess").empty();
                                $("#spanMessageSuccess").text(data.succmsg);
                                returnToReadOnlyMode(data.id);
                                RefreshCurrentTab(requestedModule, 0, 0, 0);
                                isDataModified = true;
                            }
                            return;
                        }
                        if (data.errormsg != "") {
                            $("#txtTitle").value = htmlDecode($('#txtTitle').val());
                            ShowError(data.errormsg);
                            return false;
                        }
                    }
                }
            });
        }
    });

    function ShowBudgetError(value) {
        $("#divBudgetError").slideDown(400);
        $("#BudgetErrorMessage").empty();
        $("#BudgetErrorMessage").html(value);
        HideError();
    }

    $(".alert").find(".close").on("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
        SavePlanFlag = true;
        $(this).closest(".alert").slideUp(400);
    });

    function HideError(value) {
        $("#spanErrMessagePlan").empty();
        $("#errorMessagePlan").slideUp(1);
    }

    $('#btnEditCancel').click(function () {
        var hdnPlanId = $("#hdnPlanId").val();
        returnToReadOnlyMode(hdnPlanId);
    });
</script>