@using RevenuePlanner.Helpers
@{
    var tacticActual = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    bool IsTacticEditable = (bool)ViewBag.IsTacticEditable;
    var lineItemList = ViewBag.LineItemList as List<RevenuePlanner.Models.Plan_Campaign_Program_Tactic_LineItem>;
    string planLineItemIds = string.Empty;
}
<style type="text/css">
    .disabled-row >th {
        background-color:#EEE!important;
    }

</style>
<div id="panel-656352" class="content-panel-tab">
    <div class="cf" id="divActualInner">
        <div>
            <span>Note that imported values override user-generated values.</span>
        </div>
        <div id="months_container" class="container-table" style="float: left;">
            <table class="table table-striped mystats table-style " id="tblActual">
                <thead>
                    <tr class="text-align-right height42">
                        <th class="font908D88 actual-popup-tile">Tile</th>
                        <th class="border-r font908D88 padding-left55 text-align-right">Jan</th>
                        <th class="font908D88 padding-left55 text-align-right">Feb</th>
                        <th class="border-r font908D88 padding-left55 text-align-right">Mar</th>
                        <th class="font908D88 padding-left55 text-align-right">Apr</th>
                        <th class="font908D88 padding-left55 text-align-right">May</th>
                        <th class="border-r font908D88 padding-left55 text-align-right">Jun</th>
                        <th class="font908D88 padding-left55 text-align-right">Jul</th>
                        <th class="border-r font908D88 padding-left55 text-align-right">Aug</th>
                        <th class="font908D88 padding-left55 text-align-right">Sept</th>
                        <th class="font908D88 padding-left55 text-align-right">Oct</th>
                        <th class="border-r font908D88 padding-left55 text-align-right">Nov</th>
                        <th class="font908D88 padding-left55 text-align-right">Dec</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (string s in @ViewBag.StageTitle)
                    {
                        string idtr = "tr" + @s;
                        <tr class="height42" id="@idtr">
                            @{
                        string stageLable = s;
                        if (!string.IsNullOrEmpty(s))
                        {
                            if (s.ToLower() == Common.StageCodeINQ)
                            {
                                stageLable = Html.LabelForINQ(s);
                            }
                            else if (s.ToLower() == Common.StageCodeMQL)
                            {
                                stageLable = Html.LabelForMQL(s);
                            }
                            else if (s.ToLower() == Common.StageCodeCW)
                            {
                                stageLable = Html.LabelForCW(s);
                            }
                            else if (s == Enums.InspectStageValues[Enums.InspectStage.ProjectedStageValue.ToString()].ToString())
                            {
                                stageLable = ViewBag.TacticStageTitle;
                            }
                        }
                            }
                            <th class="font3F3F3F actual-popup-tile" title="@stageLable">@stageLable</th>
                            @for (int j = 1; j <= 12; j++)
                            {
                                string ids = s + "-Y" + j;
                                string maxL = RevenuePlanner.Helpers.Common.maxLengthPriceValue;
                                string classes = "backgroundC6EBF3 text-align-right width75px input-table priceValue";
                                if (s == "Revenue")
                                {
                                    classes = "backgroundC6EBF3 text-align-right width75px currency_dollar input-table";
                                    maxL = RevenuePlanner.Helpers.Common.maxLengthDollar;
                                }
                                <th class="border-r font3F3F3F ">
                                    <input id="@ids" class="@classes" placeholder="- - -" maxlength="@maxL"></th>
@* @Html.TextBox(s + "-Y" + j, null, new { @class = "backgroundC6EBF3 width75px input-table error" })
                     </th>*@
                            }
                        </tr>
                    }
                    <tr class="height42" id="trCost">
                        <th class="font3F3F3F actual-popup-tile">Cost</th>
                        @for (int j = 1; j <= 12; j++)
                        {
                            string costIds = "Cost-Y" + j;
                            var costPeriod="Y"+j.ToString();
                            string maxL = RevenuePlanner.Helpers.Common.maxLengthPriceValue;
                             if (lineItemList.Count <= 0)
                             {
                            <th class="border-r font3F3F3F ">
                                    <input id="@costIds" class= "backgroundC6EBF3 text-align-right width75px currency_dollar input-table" placeholder="- - -" maxlength="@maxL">
                            </th>
                             }
                             else
                             {
                                 <th class="border-r font3F3F3F " id="@costIds">
                                     
                                     
                            </th>
                             }
                        }
                    </tr>
                    @if (lineItemList.Count > 0)
                    {
                        foreach (var item in lineItemList)
                        {
                            planLineItemIds += item.PlanLineItemId + ",";
                            string rawId="trLine"+item.PlanLineItemId;
                             <tr class="height42 lines" id="@rawId">
                        <th class="font3F3F3F actual-popup-tile">@item.Title</th>
                                 @for (int j = 1; j <= 12; j++)
                        {
                            string lineItemIds = @item.PlanLineItemId+"-Y" + j;
                            string maxL = RevenuePlanner.Helpers.Common.maxLengthPriceValue;
                            
                            <th class="border-r font3F3F3F ">
                                    <input id="@lineItemIds" class= "backgroundC6EBF3 text-align-right width75px currency_dollar input-table" placeholder="- - -" maxlength="@maxL">
                            </th>
                            
                        }
                                 </tr>
                        }
                        planLineItemIds = planLineItemIds.Remove(planLineItemIds.Length - 1, 1);
                    }
                    <tr class="height42">
                        <th class="font3F3F3F actual-popup-tile">ROI</th>
                        <th class="border-r font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="border-r font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="border-r font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="border-r font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                        <th class="border-r font3F3F3F"></th>
                        <th class="font3F3F3F"></th>
                    </tr>
                </tbody>

            </table>
        </div>
        <div class="pull-left" style="float: left; width: 270px;">
            <table class="table table-striped mystats table-style shadow-table">
                <thead>
                    <tr class="height42">
                        <th class="font908D88 padding-left55">Projected</th>
                        <th class="border-r font908D88 text-align-right">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var s in ViewBag.StageTitle)
                    {
                        if (s == Enums.InspectStageValues[Enums.InspectStage.ProjectedStageValue.ToString()].ToString())
                        {
                            <tr class="height42">
                                <th id="inqP" class="text-align-right  projected font908D88 ActualsFormater">@tacticActual.ProjectedStageValue</th>
                                <th id="lblTotalProjectedStageValue" class="border-r font3F3F3F text-align-right ActualsFormater">@tacticActual.ProjectedStageValueActual
                                </th>
                            </tr>
                        }
                        else if (s.ToLower() == Common.StageCodeMQL)
                        {
                            <tr class="height42">
                                <th id="mqlP" class="text-align-right  projected font908D88 ActualsFormater">@tacticActual.MQLs</th>
                                <th id="lblTotalMQL" class="border-r font3F3F3F text-align-right ActualsFormater ">@tacticActual.MQLsActual</th>
                            </tr>
                        }
                    }

                    <tr class="height42">
                        <th id="cwP" class="text-align-right  projected font908D88 ActualsFormater">@tacticActual.CWs</th>
                        <th id="lblTotalCW" class="border-r font3F3F3F text-align-right ActualsFormater">@tacticActual.CWsActual</th>
                    </tr>
                    <tr class="height42">
                        <th id="rP" class="text-align-right projected font908D88 ActualsFormater">@tacticActual.Revenues</th>
                        <th id="lblTotalRevenue" class="border-r font3F3F3F text-align-right ActualsFormater">@tacticActual.RevenuesActual</th>
                    </tr>
                    <tr class="height42">
                        <th id="cP" class="text-align-right projected font908D88 ActualsFormater">@tacticActual.Cost</th>
                        <th class="border-r font3F3F3F text-align-right" id="lblTotalCost">0
                            @*<input id="lblTotalCost" class="backgroundC6EBF3 font3F3F3F text-align-right width75px currency_dollar" placeholder="- - -" maxlength="@RevenuePlanner.Helpers.Common.maxLengthDollar" value="@tacticActual.CostActual"></th>*@
                    </tr>
                     @if (lineItemList.Count > 0)
                    {
                        
                        foreach (var item in lineItemList)
                        {
                            string projectedId="lblProjected-"+item.PlanLineItemId;
                            string totalId = "lblTotal-" + item.PlanLineItemId;
                             <tr class="height42">
                        <th id="@projectedId" class="text-align-right height22 projected padding-bottom9 font908D88 ActualsFormater">@item.Cost</th>
                        <th id="@totalId" class="border-r font3F3F3F text-align-right ActualsFormater"></th>
                    </tr>
                        }
                    }
                    <tr class="height42">
                        <th id="roiP" class="text-align-right height22 projected padding-bottom9 font908D88 ActualsFormater">@tacticActual.ROI</th>
                        <th id="roiT" class="border-r font3F3F3F text-align-right ActualsFormater">@tacticActual.ROIActual</th>
                    </tr>
                   
                </tbody>
            </table>

        </div>

        <div class="cf ">
            <div class="btn-container without-border-top pull-left">
                @* <button class="btn btn-blue text-shadow-blue source-sans-proregular share-tactic-icon button-inspect-result-modal pull-right" type="button"><span class="flag-icon"></span>Share Tactic</button>*@
                @if (IsTacticEditable)
                {
                <button id="btnUploadResult" class="btn btn-blue text-shadow-blue source-sans-proregular button-inspect-result-modal pull-right margin-right20 padding-side30" type="button">Update Actuals</button>
                }
            </div>
            <div class="pull-left">
                <label id="last-updated" class="pull-left last-updated">@ViewBag.UpdatedBy</label>
                <label id="last-synced" class="pull-left">@ViewBag.LastSync</label>
            </div>
        </div>
    </div>
</div>
<!--end content-panel-tab-->

<script type="text/javascript">
    $(document).ready(function () {
        var TacticActual;
        var planTacticId = $("#hdnPlanTacticId").val();
        function ActualTab() {
            html = '<div class="bold padding-top16 font-size18">Tactic should be "Approved" for adding actuals.</div>';
            return html;
        }

        var hdnTacticStatus = $("#hdnTacticStatus").val();
        var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
        var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
        var Declinestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Decline.ToString()].ToString()";
        var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
        if (hdnTacticStatus != Approvedstatus && hdnTacticStatus != Declinestatus && hdnTacticStatus != InProgressstatus && hdnTacticStatus != Completestatus) {
            $("#divActualInner").empty();
            $("#divActualInner").append(ActualTab());
        }
        else {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Home/GetActualTacticData/")',
                data: {
                    id: planTacticId
                },
                success: function (r) {
                    TacticActual = r.actualData;
                    if (r.IsLineItemForTactic) {
                        $("#trCost").addClass("disabled-row");
                        LineItemActual = r.ActualCostAllocationData;
                        fillLineItemValue();
                    }
                    fillTacticActualTable();
                    getLoadActual();
                    AssignDefaultValue(); // added by dharmraj, #547

                    //Fetch all the row values from the tables
                    $('.ActualsFormater').each(function () {
                        //Added By : Kalpesh Sharma
                        //PL #508 Set Currency formatter for label & tool tip.
                        SetLabelFormaterWithTipsy($(this));
                    });

                },
                error: function () {
                    $("#errorMessage").css("display", "block");
                    /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                    var topsize = $(document).scrollTop() + 41;
                    $("#modal-container-186470").css("top", topsize + "px");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });
        }

        $(".modal-backdrop.in").unbind('click');
        $(".modal-backdrop.in").bind('click', function () {
            displayConfirmCommon();
        });
        /*Added by Mitesh Vaishnav for PL ticket #695
        If tactic has line item than this function will be called and its fill line item data*/
        function fillLineItemValue() {
            if (typeof LineItemActual != 'undefined') {
                for (i in LineItemActual) {
                    $("#" + LineItemActual[i].PlanLineItemId + "-" + LineItemActual[i].Period).val(LineItemActual[i].Value);
                    $("#" + LineItemActual[i].PlanLineItemId + "-" + LineItemActual[i].Period).attr('ov', LineItemActual[i].Value);
                   
                   //Calculation for sum of month wise total cost
                    if ($("#Cost-" + LineItemActual[i].Period).text().trim()!='') {
                        var costForMonth =parseFloat($("#Cost-" + LineItemActual[i].Period).text());
                        $("#Cost-" + LineItemActual[i].Period).text(costForMonth + parseFloat(LineItemActual[i].Value));
                    }
                    else {
                        $("#Cost-" + LineItemActual[i].Period).text(parseFloat(LineItemActual[i].Value));
                    }
                    
                }
                 //Calculation for sum of total line item's cost
                if ('@planLineItemIds' != '') {
                    var ids = '@planLineItemIds'.split(',');
                    if (ids.length > 0) {
                        var totalLineCost = 0;
                        for (i in ids) {
                            for (var j = 1; j <= 12; j++) {

                            }
                            $("#trLine" + ids[i].toString()).find('input').each(function () {
                                if ($(this).val().trim() != '') {
                                    var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                                    if (currentValue.match('^(0|[1-9][0-9]*)$')) {
                                        totalLineCost += parseFloat(currentValue);
                                    }
                                }
                            });
                            document.getElementById("lblTotal-" + ids[i].toString()).innerHTML = totalLineCost;

                            document.getElementById("lblTotal-" + ids[i].toString()).innerHTML = FormatCurrency(document.getElementById("lblTotal-" + ids[i].toString()).innerHTML, false);
                        }
                    }
                }
            }
        }
        //when line item's input value will be changed,It will affect to total cost and month wise cost
        $('.lines').find('input').each(function () {
            $(this).keyup(function () {
                
                if ($(this).val().trim() != '') {
                    var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                    if (currentValue.match('^(0|[1-9][0-9]*)$')) {
                        
                        /*Start - Actual cost total month wise*/
                        var arr = $(this).attr('id').split('-')
                        var totalcost = 0;
                        var oldMonthTotalCost = 0;
                        if ($("#Cost-" + arr[1]).text().trim() != '') {
                            oldMonthTotalCost = parseFloat($("#Cost-" + arr[1]).text());
                        }
                        var oldValue = 0;
                        if ($(this).attr('ov') != '' && typeof $(this).attr('ov') != 'undefined') {
                            oldValue =parseFloat($(this).attr('ov'));
                        }
                        totalcost = (oldMonthTotalCost + parseFloat(currentValue)) - oldValue;
                        $("#Cost-" + arr[1]).text(totalcost.toString());
                        /*End - Actual cost total month wise*/
                        /*start Actual cost Total lineItem wise*/
                        var oldLineItemTotal = 0;
                        var TotalLineItemValue = 0;
                       
                        if ($("#lblTotal-" + arr[0]).text().trim() != '') {
                            oldLineItemTotal = parseFloat($("#lblTotal-" + arr[0]).text().trim().replace(/,/g, '').replace('$', ''));
                        }
                        TotalLineItemValue = (oldLineItemTotal + parseFloat(currentValue)) - oldValue;
                        $("#lblTotal-" + arr[0]).text(FormatCurrency(TotalLineItemValue.toString(),false));
                        /*End Actual cost Total lineItem wise*/
                        $(this).attr('ov', currentValue);

                    }
                }

            });
        });
        /*End Added by Mitesh Vaishnav for PL ticket #695*/
        function fillTacticActualTable() {
            if (typeof TacticActual != 'undefined') {
                if (TacticActual.length) {
                    for (i in TacticActual) {
                        $("#" + TacticActual[i].stageTitle + "-" + TacticActual[i].period).val(TacticActual[i].actualValue);
                    }
                }
            }
        }
        function getLoadActual() {
            $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
            $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

            document.getElementById('inqP').innerHTML = FormatCommas(document.getElementById('inqP').innerHTML, false);
            document.getElementById('lblTotalProjectedStageValue').innerHTML = FormatCommas(document.getElementById('lblTotalProjectedStageValue').innerHTML, false);

            if (document.getElementById('mqlP') != null)
            document.getElementById('mqlP').innerHTML = FormatCommas(document.getElementById('mqlP').innerHTML, false);

            if (document.getElementById('lblTotalMQL') != null)
            document.getElementById('lblTotalMQL').innerHTML = FormatCommas(document.getElementById('lblTotalMQL').innerHTML, false);

            document.getElementById('cwP').innerHTML = FormatCommas(document.getElementById('cwP').innerHTML, true);
            document.getElementById('lblTotalCW').innerHTML = FormatCommas(document.getElementById('lblTotalCW').innerHTML, false);

            document.getElementById('rP').innerHTML = FormatCurrency(document.getElementById('rP').innerHTML, true);
            document.getElementById('lblTotalRevenue').innerHTML = FormatCurrency(document.getElementById('lblTotalRevenue').innerHTML, false);

            document.getElementById('cP').innerHTML = FormatCurrency(document.getElementById('cP').innerHTML, false);
            document.getElementById('lblTotalCost').innerHTML = FormatCurrency(document.getElementById('lblTotalCost').innerHTML, false);

            var pcost = parseFloat(ReplaceCC(document.getElementById('cP').innerHTML));
            if (pcost != 0 && !isNaN(pcost)) {
                var prevenue = parseFloat(ReplaceCC($("#rP").text()));
                var roip = (prevenue - pcost) / pcost;
                $("#roiP").text(roip.toFixed(2));
            }

            //$('#mqlP').val(FormatCommas($('#mqlP').val(), false));
            //$('#cwP').val(FormatCommas($('#cwP').val(), false));
            //$('#rP').val(FormatCurrency($('#rP').val(), false));
            //$('#rT').val(FormatCurrency($('#rT').val(), false));


            //$('#months_container').parent().css("padding-right", "40px");
            $('#months_container').parent().css("width", "870px");
            $('#months_container').parent().css("height", "275px");
            $('#months_container').css("width", "600px");
            $('#months_container').css("overflow-x", "scroll");
            //$(function () {
            //    $('#months_container').slimScrollHorizontal({
            //        height: '300px',
            //        width: '650px',
            //        alwaysVisible: false,
            //        start: 'left',
            //        position: 'bottom',
            //        wheelStep: 10
            //    }).css({ paddingBottom: '10px' });
            //});
            //$('#months_container').slimScrollHorizontal().bind('slimscroll', function (e, pos) {
            //    console.log(e);
            //    $('#months_container').parent().css("width", "650px");
            //    $('#months_container').parent().addClass("pull-left");
            //    $('#months_container').css("width", "650px");
            //    if (pos != 'right')
            //        $('.table-up').addClass("shadow-table");
            //    else
            //        $('.table-up').removeClass("shadow-table");
            //});
            $('.priceValue').each(function () {
                var txtvalue = $(this).val();
                $(this).attr('title', txtvalue);//uday 2-7-2014 //added by uday for internal point 2-7-2014
            });

            $('.currency_dollar').each(function () {
                var txtvalue = $(this).val();
                $(this).attr('title', txtvalue);//uday 3-7-2014 //added by uday for internal point 2-7-2014
            });
        }

        $('#tblActual').find('input').each(function () {
            if (!$(this).parent().parent().hasClass('lines'))
            $(this).keyup(function () {
                if ($(this).val().trim() != '') {
                    var currentValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                    if (currentValue.match('^(0|[1-9][0-9]*)$')) {
                        //  $(this).removeClass("error");
                        var arr = (this).id.split('-');
                        var ida = "lblTotal" + arr[0];
                        var totalvalue = 0;
                        $('#tr' + arr[0]).find('input').each(function () {
                            var cvalue = parseFloat($(this).val().trim().replace(/,/g, '').replace('$', ''));
                            if (!isNaN(cvalue)) {
                                totalvalue = cvalue + parseFloat(totalvalue);
                            }
                        });
                        if (arr[0] == 'Revenue') {
                            document.getElementById(ida).innerHTML = totalvalue;
                            document.getElementById(ida).innerHTML = FormatCurrency(document.getElementById(ida).innerHTML, false);
                        }
                        else {
                            document.getElementById(ida).innerHTML = totalvalue;
                            document.getElementById(ida).innerHTML = FormatCommas(document.getElementById(ida).innerHTML, false);
                        }

                        calculateRIO();
                    }
                    else {
                        //$(this).addClass("error");
                    }

                }
                else {
                    //$(this).removeClass("error");
                }
            });
        });

        function ReplaceCC(text) {
            return text.trim().replace(/,/g, '').replace('$', '');
        }
        //$('#lblTotalCost').bind('change', calculateRIO);
        //$('#lblTotalCost').bind('keyup', calculateRIO);

        // Modified by dharmraj for implement new formula to calculate ROI, #533
        function calculateRIO() {
            var pcost = parseFloat(ReplaceCC($("#cp").text()));
            if (pcost != 0 && !isNaN(pcost)) {
                var prevenue = parseFloat(ReplaceCC($("#rP").text()));
                var roip = (prevenue - pcost) / pcost;
                $("#roiP").text(roip.toFixed(2));
            }

            //pcost = parseFloat(ReplaceCC($("#lblTotalCost").val()));
            //if (pcost != 0 && !isNaN(pcost)) {
            //    var prevenue = parseFloat(ReplaceCC($("#lblTotalRevenue").text()));
            //    var roiT = (prevenue - pcost) / pcost;
            //    $("#roiT").text(roiT.toFixed(2));
            //}
        }

        $("#btnUploadResult").click(function () {
            var _tactic = [];
            var _LineItems = [];
            var isError = false;
            var isData = false;
            var isLineItem = false;
            //var totalINQActual = (document.getElementById('lblTotalINQ').innerHTML).trim().replace(/,/g, '').replace('$', '');
            var totalProjectedStageValueActual = (document.getElementById('lblTotalProjectedStageValue').innerHTML).trim().replace(/,/g, '').replace('$', '');

            var totalMQLActual;
            if (document.getElementById('lblTotalMQL') != null)
                totalMQLActual = (document.getElementById('lblTotalMQL').innerHTML).trim().replace(/,/g, '').replace('$', '');

            var totalCWActual = (document.getElementById('lblTotalCW').innerHTML).trim().replace(/,/g, '').replace('$', '');
            var totalRevenueActual = (document.getElementById('lblTotalRevenue').innerHTML).trim().replace(/,/g, '').replace('$', '');
            var totalCostActual = $('#lblTotalCost').val().trim().replace(/,/g, '').replace('$', '');
            var totalROI = (document.getElementById('roiP').innerHTML).trim().replace(/,/g, '').replace('$', '');
            var totalROIActual = (document.getElementById('roiT').innerHTML).trim().replace(/,/g, '').replace('$', '');
            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");
            $('#tblActual').find('input').each(function () {

                if ($(this).val().trim() != '') {
                    if ($(this).val().trim().replace(/,/g, '').replace('$', '').match('^(0|[1-9][0-9]*)$')) {
                        $(this).removeClass("error");
                    }
                    else {
                        $(this).addClass("error");
                        isError = true;
                    }

                    var arr = (this).id.split('-');
                    var thisValue = $(this).val().trim().replace(/,/g, '').replace('$', '');
                    if (thisValue != 0) {
                            if (!$(this).parent().parent().hasClass('lines')) {

                        _tactic.push({
                            PlanTacticId: planTacticId,
                            StageTitle: arr[0],
                            Period: arr[1],
                            ActualValue: thisValue,
                            TotalProjectedStageValueActual: totalProjectedStageValueActual,
                            TotalMQLActual: totalMQLActual,
                            TotalCWActual: totalCWActual,
                            TotalRevenueActual: totalRevenueActual,
                            TotalCostActual: totalCostActual,
                            ROI: totalROI,
                            ROIActual: totalROIActual,
                            IsActual: true,
                            StageId: parseInt('@ViewBag.TacticStageId')
                        });
                        isData = true;

                            }
                            else {
                                _LineItems.push({
                                    PlanLineItemId: arr[0],
                                    Period: arr[1],
                                    Value: thisValue
                                });
                                isLineItem = true;
                            }
                        }
                        
                }
                else {
                    $(this).removeClass("error");
                }
                
            });
            if (isError) {
                $("#errorMessage").css("display", "block");
                /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                var topsize = $(document).scrollTop() + 41;
                $("#modal-container-186470").css("top", topsize + "px");
                $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.ValidateForValidField");
                return false;
            }
            if (parseFloat(totalMQLActual) > parseFloat(totalProjectedStageValueActual)) {
                var msg = "@RevenuePlanner.Helpers.Common.objCached.ValidationForMqlGreaterThanINQ"
                var msgdisplay = msg.replace('{0}', totalMQLActual).replace('{1}', '@ViewBag.TacticStageTitle').replace('{3}', '@ViewBag.TacticStageTitle').replace('{2}', totalProjectedStageValueActual);
                $("#spanMessageError").text(msgdisplay);
                $("#errorMessage").css("display", "block");
                var topsize = $(document).scrollTop() + 41;
                $("#modal-container-186470").css("top", topsize + "px");
                return false;
            }
            if (!isData) {
                _tactic.push({
                    PlanTacticId: planTacticId,
                    StageTitle: 0,
                    Period: 0,
                    ActualValue: 0,
                    TotalProjectedStageValueActual: totalProjectedStageValueActual,
                    TotalMQLActual: totalMQLActual,
                    TotalCWActual: totalCWActual,
                    TotalRevenueActual: totalRevenueActual,
                    TotalCostActual: totalCostActual,
                    ROI: totalROI,
                    ROIActual: totalROIActual,
                    IsActual: false,
                    StageId: parseInt('@ViewBag.TacticStageId')
                });
            }
            $("#errorMessage").css("display", "none");
            $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: '@Url.Content("~/Home/UploadResult/")',
                data: JSON.stringify({ tacticactual:_tactic,lineItemActual:_LineItems}),
                success: function (data) {
                    if (data != 'undefined') {
                        if (data.id != 0) {
                            $("#successMessage").css("display", "block");
                            var topsize = $(document).scrollTop() + 41;
                            $("#modal-container-186470").css("top", topsize + "px");
                            $("#spanMessageSuccess").empty();
                            $("#spanMessageSuccess").text(data.msg);
                            loadInspectPopup(data.id, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", data.TabValue);
                        }
                        else {
                            $("#errorMessage").css("display", "block");
                            $("#spanMessageError").empty();
                            $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.InvalidError");
                        }
                    }
                },
                error: function () {
                    $("#errorMessage").css("display", "block");
                    /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                    var topsize = $(document).scrollTop() + 41;
                    $("#modal-container-186470").css("top", topsize + "px");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });


        });

    });
</script>
