@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
}
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@Html.Display(popupvalue)
<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>
@{
    var programMaster = (RevenuePlanner.Models.InspectModel)ViewBag.ProgramDetail;
    bool IsPlanEditable = (bool)ViewBag.IsPlanEditable;
    //bool IsPlanOwner = (bool)ViewBag.InspectPopUpIsOwner;
}
@Html.Hidden("hdnPlanProgramId", programMaster.PlanProgramId, new { id = "hdnPlanProgramId" })
@Html.Hidden("hdnProgramStatus", programMaster.Status, new { id = "hdnProgramStatus" })
@Html.Hidden("hdnProgramOpt", "View", new { id = "hdnProgramOpt" })

<style type="text/css">
    #successMessageViewProgram, #errorMessageEditProgram
    {
        margin-bottom: 15px !important;
    }

</style>

<div id="successMessageViewProgram" class="alert hide alert-success message-position-small">
    <a class="close">×</a>
    <span id="spanSuccessMessageViewProgram"></span>
</div>

<div id="errorMessageEditProgram" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <span id="spanMessageEditProgram"></span>
</div>
<form>
    <div class="modal-popup-title">
        <span class="icon-flag bg-purple" style="background-color:#@programMaster.ColorCode !important;"></span>
        <h2 class="title-simple source-sans-prolight">
            <span>
                <span id="lblProgramTitle"  class="tipsyclassTitle" title="@Html.Raw(programMaster.ProgramTitle)">@Html.Raw(programMaster.ProgramTitle)</span>
                @if (IsPlanEditable)//Remove PlanOwner Condition because of Consistency in all view
                {
                    @Html.ActionLink(" ", "Assortment", "Plan", new { campaignId = programMaster.PlanCampaignId, programId = programMaster.PlanProgramId, tacticId = 0, EditObject = "Program", ismsg = "" }, new { @id = "EditProgram", @class = "edit-icon-white btn-blue btn-large" })
                }
            </span>
            @Html.TextBox("txtProgramTitle", HttpUtility.HtmlDecode(programMaster.ProgramTitle), new { placeholder = "Program names goes here", require = "true", maxlength = "255", @class = "span12 input-small truncate", @style = "width: 95%; height: 28px;display:none", title = programMaster.ProgramTitle })
            @Html.TextBox("txtTitle1", "", new { @style = "display:none", id="txtTitle" })
        </h2>

    </div>
</form>
<div class="modal-popup-summary">
    <h3 class="modal-popup-innertitle source-sans-proregular">Summary</h3>
    <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight">
        I'm running a program called 
            <span id="tactic-name" class="source-sans-prosemibold color5693B3">@programMaster.ProgramTitle</span>
        from
            <span id="start-date" class="source-sans-prosemibold color5693B3">@programMaster.StartDate.ToString(Common.DateFormateForInspectPopupDescription)</span>
        to
            <span id="end-date" class="source-sans-prosemibold color5693B3">@programMaster.EndDate.ToString(Common.DateFormateForInspectPopupDescription)</span>. 
        <p class="modal-status">
            Status: 

            @if (programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statussubmitted">@programMaster.Status</span>
            }
            else if (programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statusrejected">@programMaster.Status</span>
            }
            else if (programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statusapproved">@programMaster.Status</span>
            }
            else if (programMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statuscreated">@programMaster.Status</span>
            }
        </p>
    </div>
</div>

<div>

    <ul class="nav nav-tabs new-margin" id="InspectTab">
        <li class="active pull-left" id="liSetup">
            <a>Setup</a>
        </li>
        <li class="pull-left" id="liReview">
            <a>Review</a>
        </li>
        <li class="pull-left" id="liBudget">
            <a>Budget</a>
        </li>
        <li class="pull-right">
            <h3 class="modal-popup-innertitle source-sans-proregular">Details</h3>
        </li>
    </ul>

    <div id="divTab">
    </div>
</div>

<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabBudget = "Budget";

    var divTab = "#divTab";

    $(document).ready(
      function () {
          CloseIconClick();
          NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
          var InspectValue = $("#hdnInspectPopup").val();
          var planProgramId = $("#hdnPlanProgramId").val();
          // Call Remove Tabclass
          RemoveTabClass();

          $("#li" + InspectValue).removeClass("pull-left");
          $("#li" + InspectValue).addClass("active pull-left");
          var tabtext = ($("#li" + InspectValue).children('a').text());
          $('#div' + tabtext).css({ display: "block" });

          loadReview(planProgramId, tabtext);

          // Click on Tab Partialview Refresh Based On Selected Tab
          $("#liSetup,#liReview,#liBudget").on("click", function () {
              $("#successMessageViewProgram").slideUp(50);
              RemoveTabClass();
              $(this).removeClass("pull-left");
              $(this).addClass("active pull-left");
              $("#errorMessage").css("display", "none");
              $("#successMessage").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
              var tabtext = ($(this).children('a').text());
              var planTacticId = $("#hdnPlanTacticId").val();
              loadReview(planProgramId, tabtext);

          });

          $("#EditProgram").on("click", function () {
              var url;
              $("#successMessageViewProgram").slideUp(50);
              $("#errorMessageEditProgram").slideUp(50);
              $("#hdnProgramOpt").val("Edit");
              var InspectValue = $("#hdnInspectPopup").val();
              var tabtext = ($("#li" + InspectValue).children('a').text());
              $("#txtProgramTitle").val($('#lblProgramTitle').html());
              if (tabtext == "Setup") {
                  url = '@Url.Content("~/Home/LoadSetupProgramEdit/")';
                  $("#divTab").empty();
                  $("#divTab").load(url + '?id=' + planProgramId);
              }
              else if (tabtext == "Budget") {
                  url = '@Url.Content("~/Home/LoadSetupProgramBudget/")';
                      $("#divTab").empty();
                      $("#divTab").load(url + '?id=' + planProgramId);
                  }

              $("#EditProgram").css("display", "none");
              $('#txtProgramTitle').css('display', 'block');
              $('#lblProgramTitle').css('display', 'none');

              return false;
          });

          // Close event for Error Message & Success Message Close button 
          $(".alert").find(".close").on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).closest(".alert").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
          });


          $(".edit-icon-white .btn-blue btn-large").on("click", function () {
              var tabtext = ($(this).children('a').text());
              var planTacticId = $("#hdnPlanTacticId").val();
              loadReview(planProgramId, tabtext);
              return false;
          });


      });

      function RemoveTabClass() {
          $('#InspectTab').children().each(function () {
              if ($(this).hasClass('active pull-left')) {
                  $(this).removeClass("active pull-left");
                  $(this).addClass("pull-left");
              }
          });
      }

      function loadReview(id, tabValue) {
          $("#hdnInspectPopup").val(tabValue);
          $.ajaxSetup({ cache: false });
          var url;
          var ProgramOpt = $("#hdnProgramOpt").val();
          if (tabValue == TabSetup) {
              if (ProgramOpt == "Edit") {
                  url = '@Url.Content("~/Home/LoadSetupProgramEdit/")';
              }
              else {
                  url = '@Url.Content("~/Home/LoadSetupProgram/")';
              }
          }
          if (tabValue == TabReview) {
              url = '@Url.Content("~/Home/LoadReviewProgram/")';
        }

        if (tabValue == TabBudget) {
            url = '@Url.Content("~/Home/LoadSetupProgramBudget/")';
          }

          RemoveTabClass();
          $("#li" + tabValue).removeClass("pull-left");
          $("#li" + tabValue).addClass("active pull-left");
          $('#div' + tabValue).css({ display: "block" });

          $("#divTab").empty();

          $("#divTab").load(url + '?id=' + id);
      }


</script>
