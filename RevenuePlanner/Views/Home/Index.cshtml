@using RevenuePlanner.Helpers
@{
    ViewBag.Title = ViewBag.ActiveMenu;
    Layout = "~/Views/Shared/_Layout.cshtml";
    //ViewBag.Title = ViewBag.ActiveMenu;
    int CurrentPlanId = Sessions.PlanId;/*changed by Nirav for plan consistency on 14 apr 2014*/
    var ShowInspectPopup = ViewBag.ShowInspectPopup; //nullable  value
    int showInspectForPlanTacticId = 0;
    int showInspectForPlanCampaignId = 0;
    int showInspectForPlanProgramId = 0;
    int ShowInspectForPlanLineItemId = 0;
    if (ShowInspectPopup != null && ShowInspectPopup)
    {
        showInspectForPlanTacticId = ViewBag.ShowInspectForPlanTacticId;
        showInspectForPlanCampaignId = ViewBag.ShowInspectForPlanCampaignId; // variable added to show campagin popup from email url link click when email sent to user when comapign shared
        showInspectForPlanProgramId = ViewBag.ShowInspectForPlanProgramId; // variable added to show program popup from email url link click when email sent to user when program shared
        ShowInspectForPlanLineItemId = ViewBag.ShowInspectForPlanLineItemId; // variable added to show Plan LineItem popup from Finance page when user click on View button of LineItem Grid
    }
    string activeMenu = Convert.ToString(ViewBag.ActiveMenu);
    bool IsPlanCreateAuthorized = (bool)ViewBag.IsPlanCreateAuthorized;
    bool IsTacticActualsAddEditAuthorized = (bool)ViewBag.IsTacticActualsAddEditAuthorized;
    bool IsPlanEditable = (bool)ViewBag.IsPlanEditable;
    bool IsPlanPublished = (bool)ViewBag.IsPublished;
    var Successmsgduplicate = (string)ViewBag.SuccessMessageDuplicatePlan;
    var errormsgduplicate = (string)ViewBag.ErrorMessageDuplicatePlan;
    var IsGridView = (bool)ViewBag.GridView;
    bool IsBudgetView = (bool)ViewBag.BudgetView;
    string RequestedModule = ViewBag.RedirectType != null ? ViewBag.RedirectType : "";
    var CalledFromBudget = (!string.IsNullOrEmpty(RequestedModule) ? (RequestedModule == Enums.InspectPopupRequestedModules.Budgeting.ToString() ? "Budegting" : "") : "");
    bool NoPlanCreated = (bool)Sessions.IsNoPlanCreated;
    int CurrentRequestPlanID = ViewBag.currentPlanId;
    int SelectedTacticid = ViewBag.SelectedTacticID;
}
@Html.Hidden("hdnshowInspectForPlanTacticId", showInspectForPlanTacticId)
@Html.Hidden("hdnshowInspectForPlanCampaignId", showInspectForPlanCampaignId)
@Html.Hidden("hdnshowInspectForPlanProgramId", showInspectForPlanProgramId)
@Html.Hidden("hdnSelectedPlanIds", 0, new { id = "hdnSelectedPlanIds" })
@Html.Hidden("hdnShowInspectForPlanLineItemId", ShowInspectForPlanLineItemId)
@Html.Hidden("CurrentPlanId", CurrentPlanId)
<!-- Stylesheet Only For Homepage -->
@section FilterEx{
    <link href="~/Content/css/styleIndexPage_min_03.css" rel="stylesheet" />
}

@* Sidebar Section Start *@
@section Sidebar{
<div id="divFilter"></div>
}


@*add new*@
@Html.Hidden("IsGridView", IsGridView)
@Html.Hidden("IsPlanEditable", IsPlanCreateAuthorized)
@*end*@


<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid2_min.css")" rel="stylesheet" type="text/css" />
<div id="gridExport" style="background-color:white;width:100%;display:none;"></div>
<div class="cf full-width-header" id="planHeader">
    <div class="sidebar-toogle">
        <a href="#" class="sidebar-filter-icon"><i class="fa fa-filter" aria-hidden="true" title="Show/Hide Filters"></i></a>
    </div>
    @Html.Partial("~/Views/Shared/_Planhud.cshtml")
    <div class="planheader-left">
        <div class="plan-header-grid">
            <div class="request-icon-block">
                <a href="#" class="new-btn-plan-left" id="btngrid" title="Grid View">
                    <i class="fa fa-table"></i>
                </a>
                <a class="new-btn-plan-middle" href="#" id="btngridcalendar" title="Calendar View">
                    <i class="fa fa-calendar"></i>
                </a>
                <a id="btnbudget" title="Budget & Cost" class="new-btn-plan-right" href="#">
                    <i class="fa fa-money"></i>
                </a>
            </div>
            <div class="ix-icon-block">
                <a id="ImportBtn" class="new-btn-plan-left" href="#" style="display:none" onclick="showModal();">@* P-icon-active class removed by Bhumika *@
                    <i class="fa fa-download" title="Import"></i><span>Import</span>
                </a>
                <a href="#" id="" class="new-btn-plan-right dropdown-toggle " data-toggle="dropdown">
                    <i class="fa fa-upload" title="Export"></i><span>Export</span>
                </a>
                <ul id="" class="dropdown-menu export-dd">
                    <li title=""><a href="#" id="ExportCSV" onclick="ExportToExcel()">.CSV</a></li>
                    <li title=""><a href="#" id="ExportXls" onclick="ExportToExcel()" style="display:none">.XLS</a></li>
                    <li title=""><a href="#" id="ExportPDf" onclick="CallPDF()" style="display:none">.PDF</a></li>
                </ul>
            </div>

            <!-- -->
            <div id="divupcomingact" class="viewby-wrap" style="display:none">
                <label id="lblUpcoming_Activies1" for="Time_Frame:">Time Frame:</label>
                <span style="width: 100px;" id="ddlUpComingActivitesSelectBox" class="selectBox">
                    <select name="ddlUpComingActivites" id="ddlUpComingActivites" class="hide" sb="85765995" style="display: none;"></select>
                </span>
            </div>
            <div class="viewby-wrap">
                <label id="lblViewBy1" for="View_By:">View By:</label>
                <select name="ddlTabViewBy" id="ddlTabViewBy" class="hide" sb="83202234" style="display: none;"></select>
            </div>
            <!-- -->
        </div>
    </div>
</div>
@* ================= Header section End ==================  *@
@* ================= Grid box start here ================= *@
<div class="task-tbl clearfix">
    <!-- Searchbox is here Apply on all 3table grid, calendar and budget -->
    <div id="exp-serach" class="clearfix" style="display:none">
        <div class="input-group-btn">
            <button id="searchCriteria" onclick="OpenDropdown(true)" type="button" class="btn btn-blue dropdown-toggle" data-toggle="dropdown" value="ActivityName">A</button>
            <div class="dropdown-menu">
                <ul role="menu" aria-labelledby="dropdownmenu" class="searchDropdown">
                    <li><a tabindex="-1" href="#">Activity Name</a></li>
                    <li><a tabindex="-1" href="#">External Name</a></li>
                </ul>
            </div>
        </div>
        <input id="txtGlobalSearch" type="text" class="form-control" aria-label="Text input with dropdown button" placeholder="Search">
        <span class="ExpIcon" id="ExpSearch" data-toggle="tooltip" title="Search"><i class="fa fa-search"></i></span>
        <span class="ExpIcon" id="ExpClose" style="display:none"><i class="fa fa-times-circle-o" aria-hidden="true"></i></span>
    </div>
    @* ===== Close button to change View Start ======= *@
    @*<div class="changeView-wrap">
        <a class="changeView" id="ChangeView" style="display:none"><i class="fa fa-times-circle" aria-hidden="true" title="Go Back to Grid"></i></a>
    </div>*@
    @* ===== Close button to change View End ======= *@
    <!-- -->
    <div id="GridGanttContent" style="display:none"></div>
    <div id="divgridview">
        @Html.Partial("~/Views/Plan/_HomeGrid.cshtml")
    </div> 
    <div class="market-activity-main">
        <div class="btn-dropdwn" style="display: none;" id="popupType">
        </div>
    </div>
</div>   
@*Inspect Popup Div*@

<div class="container-fluid all-height" id="modalMainContainer" style="display:none">
    <div class="row-fluid calc-height content-wrapper-main">
        <div class="container-fluid">
            <div class="row-fluid ">
                <div class="span12">
                    <div id="modal-container-186470" class="modal-inspect-review hide fade modal-full-view" role="dialog" aria-labelledby="myModalLabel" aria- hidden="true" style="display: none; position: fixed; overflow: hidden;" data-backdrop="static" data-keyboard="false">
                        <div class="partial_wrapper new-wrapper">
                            <div id="successMessage" class="alert alert-success messagewidth">
                                <a class="close">×</a>
                                <strong>Success.</strong> <span id="spanMessageSuccess"></span>
                            </div>
                            <div id="errorMessage" class="alert alert-error hide messagewidth">
                                <a class="close">×</a>
                                <strong>Error!</strong> <span id="spanMessageError">@Common.objCached.ValidateForEmptyField</span>
                            </div>
                            <div id="divPartial" class="partial_wrapper">
                            </div>
                        </div>
                    </div>
                    <div id="divResubmission"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal addview-popup hide" id="CreateNewView" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close closeCreateNewView" data-dismiss="modal" aria-label="Close" id="btnClose"><span aria-hidden="true">&times;</span></button>
                <h5 class="modal-title  source-sans-proregular" id="myModalLabel">Manage Your Column View </h5>
            </div>
            <div class="modal-body">

                <div id="successMessage1" class="alert alert-success hide">
                    <a class="close closemessage">×</a>
                    <strong>Success.</strong> <span id="spanMessageSuccess1"></span>
                </div>
                <div id="errorMessage1" class="alert alert-error hide">
                    <a class="close closemessage">×</a>
                    <strong>Error!</strong> <span id="spanMessageError1"></span>
                </div>
                <div id="warningMessage1" class="alert msgWarning hide">
                    <a class="close closemessage">×</a>
                    <strong>Warning!</strong> <span id="spanMessageWarning1"></span>
                </div>
                <div class="modal-content-grid">
                    <div id="dvAttributeSelection"></div>
                </div>

            </div>
        </div>
    </div>
</div>
<div id="dvCopyEntity"></div>
<div id="loader" style="display: none;">
    <i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
    <span class="sr-only">Loading...</span>
</div>  
@*<div class="footer">
    <span class="source-sans-proregular">Copyright &copy; @System.DateTime.Now.Year.ToString() Hive9, Inc. All rights reserved.<a href="http://www.hive9.com/ssa-sla" target="_blank">Terms of Use</a></span>
</div>*@
@Html.Partial("~/Views/Plan/_PlanGridVariable.cshtml")
@Html.Partial("~/Views/Home/_CalExportPDFHeaderHtml.cshtml")
<div class="honeycombbox" style="display:none" id="divhoneycombbox">@Html.Partial("_HoneyComb")</div>
<script src="~/Scripts/js/Home/HomeGrid_Min.js"></script>
@Scripts.Render("~/bundles/Home_BudgetJs")

    <script type="text/javascript">
    var HomeGrid;
    var SelectedTacticId = '@SelectedTacticid';
    var isCopyTacticHomeGrid = 0;
    var isEditTacticHomeGrid = 0;
    if (SelectedTacticId != 0)
    {
        isEditTacticHomeGrid = SelectedTacticId;
    }
    var selectedTaskID = "";
    var scrollstate = 0;
    var Ownerlist = JSON.parse('@Html.Raw(Json.Encode(@ViewBag.OwnerList))'); // added by devanshi

    //insertation start by kausha 21/09/2016 #2638/2592 Export to excel
    var imgPath = "";
    imgPath = '@Url.Content("~/codebase/imgs/")';
    //insertation end by kausha 21/09/2016 #2638/2592 Export to excel
    ///Assign Enum and Server Side value to Variable
    var RequestedModule = '@RequestedModule';
    var CalledFromBudget = '@CalledFromBudget';
    var urlContent = '@Url.Content("~/")';
    var urlServiceUnavailibility = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
    var secTactic = '@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()';
    var secProgram = '@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Program).ToLower()';
    var secCampaign = '@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Campaign).ToLower()';
    var secLineItem = '@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()';
    var reaIndex = '@Enums.InspectPopupRequestedModules.Index.ToString()';
    var secPlan = '@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Plan).ToLower()';
    var secHome = '@Enums.ActiveMenu.Home.ToString().ToLower()'
    var inspectEdit = '@Enums.InspectPopupMode.Edit.ToString()';
    var inspectAdd = '@Enums.InspectPopupMode.Add.ToString()';
    var inspectRequestIndex = '@Enums.InspectPopupRequestedModules.Index.ToString()';
    var glblsrchExternalName = '@Enums.GlobalSearch.ExternalName.ToString().ToUpper()';
    var glblsrchActivityName = '@Enums.GlobalSearch.ActivityName.ToString().ToUpper()';
    var planCloneType = '@Enums.DuplicationModule.Plan';
    var campaignCloneType = '@Enums.DuplicationModule.Campaign';
    var programCloneType = '@Enums.DuplicationModule.Program';
    var tacticCloneType = '@Enums.DuplicationModule.Tactic';
    var lineItemCloneType = '@Enums.DuplicationModule.LineItem';
    var AssetTypeAsset = '@Enums.AssetType.Asset.ToString()';
    var ROIPackage = '@Enums.DictPlanGanttTypes[Convert.ToString(PlanGanttTypes.ROIPackage)]';
    var ValidateForEmptyField = '@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField';
    var PackageUpdated = '@RevenuePlanner.Helpers.Common.objCached.PackageUpdated';
    var PackageCreated = '@RevenuePlanner.Helpers.Common.objCached.PackageCreated';
    var OnlyTacticsToCreatePackage = '@RevenuePlanner.Helpers.Common.objCached.OnlyTacticsToCreatePackage';
    var SinglePlanTacticForPackage = '@RevenuePlanner.Helpers.Common.objCached.SinglePlanTacticForPackage';
    var AtLeastOneAssetValidation = '@RevenuePlanner.Helpers.Common.objCached.AtLeastOneAssetValidation';
    var MoreThanOneAssetValidation = '@RevenuePlanner.Helpers.Common.objCached.MoreThanOneAssetValidation';
    var DeselectAssetFromPackage = '@RevenuePlanner.Helpers.Common.objCached.DeselectAssetFromPackage';
    var UnpackageSuccessful = '@RevenuePlanner.Helpers.Common.objCached.UnpackageSuccessful';
    var activeMenu = '@ViewBag.ActiveMenu.ToString()';
    var IsManageDropdown = false;
    var NoPlanCreated = '@NoPlanCreated';
    ///////
    var IsManageviewClick = false;
    var IsBudgetGrid = false;
    var isCalendarView = false;

    var TaskNameColIndex = 0;
    var ExportSelectedIds = {
        TaskID: [],
        Title: [],
        ColorCode: [],
        OwnerName: [],
        TacticType: [],
        PlanFlag: [],
        CsvId: [],
        ROITacticType: [],
        CalendarEntityType: [],
        AnchorTacticId: [],
    };
    //To Handle roi package/unpackage
    var AnchorTaskIdsList = {
        Id: [],
        Value: []
    };

    var AddRemovePackageItems = {
        RemoveId: [],
        AddItemId: [],
    };
    //End
    var IsPackageView = false;
    var PreventUnPackageClick = true;
    var IsUpdate = false;
    var filters = {
        parentCustomFieldsIds: [],
        customFieldIds: [],
        PlanIDs: [],
        SelectedPlans: [],
        PlanTitles: [],
        OwnerIds: [],
        TacticTypeids: [],
        tempTacticTypeIds: [],
        tempOwnerIds: [],
        StatusIds: [],
        SelectedYears: []

    };
    var isDataModified = false;
    var isCopyTactic = 0;
    var isEditTactic = 0;

    //Start: To identify the current Active Tab from Plan Grid, Calendar & Budget.
    var calendarTab = '@Enums.ActivePlanTab.Calendar.ToString()';
    var gridTab = '@Enums.ActivePlanTab.Grid.ToString()';
    var budgetTab = '@Enums.ActivePlanTab.Budget.ToString()';
    var isFirstTimeOnGrid = true;
        //End

    var IsNewPlan = false;
    var IndexLink = '@Url.Content("~/Home/Index")';

    //for Hidding tooltip -ticket 2414
    var $doc = $(document);

    $doc.click(function () {
        $(".tooltip").hide();
    });

    $("#ddlTabViewBy").multiselect({
        multiple: false,
        noneSelectedText: "Please Select",
        selectedList: 1,
        CustomCampaignName: "@Common.CampaignCustomTitle",
        CustomProgramName: "@Common.ProgramCustomTitle",
        CustomTacticName: "@Common.TacticCustomTitle",

        classes: 'custom-right-pos', // Added by Sohel Pathan on 11/11/2014 for PL ticket #934, NOTE : Please don't change class name, it is used in js.
        IsTacticSection: "TACTIC SECTION"
    }).multiselectfilter({
        CustomCampaignName: "@Common.CampaignCustomTitle",
        CustomProgramName: "@Common.ProgramCustomTitle",
        CustomTacticName: "@Common.TacticCustomTitle"
    });

    $('.sidebar-toogle a').click(function() {
        $("#sidebar").toggleClass("slideLeft");
        $("#content_wraper").toggleClass("slideLeft");
    });

    // Added by Bhumika to resize Grid and calendar when sidebar hide - Code copied from Index-original.cshtml
    $('.sidebar-toogle a').toggle(
        function() {
            ///new code
            var ganttwidth;
            var totalWidth;
            if ($('#IsGridView').val().toLowerCase() == "true" || IsBudgetGrid) {
                var ganttwidth = $("#gridbox").width();
                var totalWidth = ganttwidth + 230;
                ResizeGrid(totalWidth);
            } else {
                ganttwidth = $("#gantt_here").width();
                totalWidth = ganttwidth - 230;
                gantt._render_tasks_scales(totalWidth);
                gantt.refreshData();
            }
            $('#gantt_hor_scroll').attr('style', 'Width: 1453px;');

            $(".gantt_last_cell").dblclick(function(e) {
                e.stopPropagation();
            });

            $(".gantt_last_cell").click(function(e) {
                e.stopPropagation();
            });


            var $doc = $(document);
            $doc.click(function() {
                $('#popupType').css('display', 'none');
            });

            $(document).mouseup(function(e) {
                $('#popupType').css("display", "none");
            });
            $(".gantt_ver_scroll").scroll(function() {
                $('#popupType').css('display', 'none');
            });

            $('.gantt_hor_scroll').hide();

        }, function() {
            var ganttwidth;
            var totalWidth;
            if ($('#IsGridView').val().toLowerCase() == "true" || IsBudgetGrid) {
                var ganttwidth = $("#gridbox").width();
                var totalWidth = ganttwidth + 230;
                ResizeGrid(totalWidth);
            } else {
                ganttwidth = $("#gantt_here").width();
                totalWidth = ganttwidth - 230;
                gantt._render_tasks_scales(totalWidth);
                gantt.refreshData();
            }

            $('#gantt_hor_scroll').attr('style', 'Width: 1483px;');

            $(".gantt_last_cell").dblclick(function(e) {
                e.stopPropagation();
            });

            $(".gantt_last_cell").click(function(e) {
                e.stopPropagation();
            });
            var $doc = $(document);
            $doc.click(function() {
                $('#popupType').css('display', 'none');
            });

            $(document).mouseup(function(e) {
                $('#popupType').css("display", "none");
            });
            $(".gantt_ver_scroll").scroll(function() {
                $('#popupType').css('display', 'none');
            });

            $('.gantt_hor_scroll').hide();

        });


    $(document).ready(function() {

        BindHomeGrid();
        var Successmsgduplicate = '@Successmsgduplicate';
        var Errormsgduplicate = '@errormsgduplicate';
        if (Successmsgduplicate != "") {
            ShowMessage(false, Successmsgduplicate, 3000);
        }
        if (Errormsgduplicate != "") {
            ShowMessage(true, Errormsgduplicate, 400);
        }
        $('.plan').addClass('active'); //Select Plans menu after login for ticket - 2570
        ///Added by Dhvani to open inpsect popup for alert URL -- PL #2534
        //START CODE
        if ('@ShowInspectPopup'.toLowerCase() == 'true') {
            if ($("#hdnshowInspectForPlanTacticId").val() != 0)
                ShowInspectForPlanTacticId();
            else if ($("#hdnshowInspectForPlanCampaignId").val() != 0)
                ShowInspectForPlanCampaignId();
            else if ($("#hdnshowInspectForPlanProgramId").val() != 0)
                ShowInspectForPlanProgramId();
            else if ($("#hdnShowInspectForPlanLineItemId").val() != 0)
                ShowInspectForPlanLineItemId();
            else
                ShowInspectForPlanId();
        } else {
            var currentUrlQueryString = window.location.search.toString().toLowerCase();
            var isNotificationEmailShareLink = false;
            if (currentUrlQueryString.indexOf('plancampaignid') > 0 || currentUrlQueryString.indexOf('planprogramid') > 0 || currentUrlQueryString.indexOf('plantacticid') > 0) {
                isNotificationEmailShareLink = true;
            }
            if ($('#cErrorInspectPopup').html() == '' && isNotificationEmailShareLink == true) {
                $('#cErrorInspectPopup').html('<strong>Error! </strong> ' + '@ViewBag.ShowInspectPopupErrorMessage');
                $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");
                $('#errorMessageInspectPopup').slideDown(3000);
            } else {
                $("#content_wraper").removeClass("span10 padding-top40").addClass("span10 all-height");
                $('#errorMessageInspectPopup').slideUp(400);
            }
        }
        //END

        $(".selectBox select").selectbox();
        $("#ddlTabViewBy").multiselect();
        LoadFilter(gridTab); // Set PlanGrid as Active tab after user logged in to application on first time.
        $("#ddlUpComingActivites").change(function() {
            RefershPlanHeaderCalc();
            if (IsBudgetGrid) {
                LoadBudgetGrid();
            } else if ($('#IsGridView').val().toLowerCase() == "false") {
                BindPlanCalendar();
            }
        });
        $("#ddlUpComingActivitesSelectBox").click(function() {
            $('#ddlTabViewBy').multiselect("close");
        });
        SetTooltip();

        function toggleChevron(e) {
            $(e.target)
                .prev('.accordion-heading')
                .find("i.indicator")
                .toggleClass('fa-angle-down fa-angle-up');
        }

        $('.accordion').on('hidden.bs.collapse', toggleChevron);
        $('.accordion').on('shown.bs.collapse', toggleChevron);
    });

    function LoadFilter(currentActiveTab, fastmode) {
        var PlanID = '@CurrentRequestPlanID';
        var strURL = '@Url.Content("~/Filter/Index/")';
        if (PlanID == 0) {
            PlanID = 'null'
        }

        var dataRequest;
        if (fastmode) {
            // do not reload filters in "fastmode"
            dataRequest = $.when();
        } else {
            dataRequest = $.ajax({
                url: strURL,
                type: 'post',
                dataType: 'html',
                async: isFirstTimeOnGrid,
                data: {
                    activeMenu: '@Enums.ActiveMenu.Home',
                    currentPlanId: PlanID,
                }
            }).then(function(data) {
                if (data != 'undefined' && data != null) {
                    $('#divFilter').html(data);
                    filters.PlanIDs = GetPlanIds();
                    GetTacticTypelist(filters.PlanIDs);
                    GetOwnerListForFilter(filters.PlanIDs);
                    GetLastSetofViews($('#FilterPresetName').val());
                }
            });
        }

        return dataRequest.then(function() {
            var gridDataPromise;
            if (currentActiveTab == gridTab && !isFirstTimeOnGrid) {
                gridDataPromise = StartRetrieveGridData();
            }
            else if (currentActiveTab == budgetTab) {
                gridDataPromise = GetBudgetGridData();
            }
            BindUpcomingActivites(filters.PlanIDs);
            BindViewSelections(urlContent + 'Home/GetViewBylistData');
            RefershPlanHeaderCalc();
            GetMultiplePlanNames();
            GetGoalValues('@Url.Action("GetGoalValues", "Home")', filters.PlanIDs);
            if (currentActiveTab == budgetTab) {
                IsBudgetGrid = true;
                $('#gridbox').empty();
                $('#exp-serach').css('display', 'none');
                LoadBudgetGrid(gridDataPromise);
            } else if (currentActiveTab == gridTab && !isFirstTimeOnGrid) {
                LoadPlanGrid(gridDataPromise);
            } else if (currentActiveTab == calendarTab) {
                BindPlanCalendar();
            }
        });
    }

    function OpenCreateNew(IsGridView) {
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/ColumnView/GetAttributeList_ColumnView/")',
            data: { IsGrid: IsGridView },
            success: function(data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else {
                    $("#dvAttributeSelection").html(data);

                }
                $('#ddlTabViewBy').multiselect("close");

                $('#CreateNewView').show();
                $('.modal-body').scrollTop(0);
                $('#warningMessage1').hide();
            }
        });
        HomeGrid.saveOpenStates("plangridState");

        IsManageviewClick = true;
        return true;
    }
    $(".closeCreateNewView").click(function () {
        $('#CreateNewView').hide();
    });
</script>

@section nlFormContent{
    <link rel="stylesheet" href="@Url.Content("~/Content/css/NaturalLanguageForm/default_min.css")" type="text/css" />
    <link rel="stylesheet" href="@Url.Content("~/Content/css/NaturalLanguageForm/component_min.css")" type="text/css" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/js/NaturalLanguageForm/modernizr.custom.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/js/NaturalLanguageForm/nlform_min.js")"></script>
}

<script type="text/javascript">
    gridname = "home";
    var tacticTypefieldOptionList, lineItemTypefieldOptionList;
    var IslineItemDelete = false;
    var GridDataHomeGrid;
    var colSplitId = 0;
    var GridHiddenId = 0;
    var ActivitypeHidden = 0;
    var MachineNameHidden = 0;
    var TaskNameColIndex = 0;
    var PlannedCostColIndex = 0;
    var AssetTypeColIndex = 0;
    var TypeColIndex = 0;
    var OwnerColIndex = 0;
    var TargetStageGoalColIndex = 0;
    var MQLColIndex = 0;
    var RevenueColIndex = 0;
    var StartDateColIndex = 0;
    var EndDateColIndex = 0;

    $(document).ready(function() {
        //BindHomeGrid();
        $('.nav').addClass('no-bottom-border');
        $('.task-tbl div.gridbox').css('height', $(window).height() - 450);
        if ($('.honeycombbox-icon-gantt-Active').length == 0) {
            $(".honeycombbox").hide();
        } else {
            $("#totalEntity").text(ExportSelectedIds.TaskID.length);
            $(".honeycombbox").show();
        }

        $('#cancel-button_Movetactic').on("click", function() {
            $('#divMovetacticPopup').modal("hide");

        });
        $('#proceed-button_Movetactic').on("click", function() {
            SaveMoveTactic();
            $('#divMovetacticPopup').modal("hide");
        });
    });


    //$(document).ajaxComplete(function () {
    //    HomeGrid.setSizes();
    //});

    //var GridDataHomeGrid;

    function GetGridData(filters, viewBy) {
        return $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/GetHomeGridDataJSON/")', //urlContent + 'Plan/GetHomeGridDataJSON/',
            async: true,
            data: {
                planIds: filters.PlanIDs.toString(),
                ownerIds: filters.OwnerIds.toString(),
                TacticTypeid: filters.TacticTypeids.toString(),
                StatusIds: filters.StatusIds.toString(),
                customFieldIds: filters.customFieldIds.toString(),
                viewBy: viewBy,
                isLoginFirst: isFirstTimeOnGrid
                //ExpandedtacticIds: $('#ExpandedTacticIds').val()
            },
            cache: false
        });
    }

    /**
     * Checks if there is saved open state in a cookie.
     * If there isn't, then just returns the grid data unmodified (keeping whatever "open" settings it has)
     * If there is, then the grid data is modified so that is open settings match what was in the cookie
     * Call this when you have a bunch of grid data you are getting ready to load into the grid and want to
     * prep the openstates before initial render
     */
    function UpdateGridDataFromSavedOpenState(rows, name) {
        var cookie = dhtmlXGridObject.prototype.getCookie(name, "gridOpen");
        if (cookie) {
            // construct a dictionary of the IDS that are open
            var isOpen = Object.create(null);
            var parts = cookie.split("|");
            var numParts = parts.length;
            for (var i = 0; i < numParts; ++i) {
                isOpen[parts[i]] = "1";
            }

            // Now walk the data and set the open property
            function processRows(rows) {
                var n = rows.length;
                for (var i = 0; i < n; ++i) {
                    processItem(rows[i]);
                }
            }

            function processItem(item) {
                if (item) {
                    item.open = item.id && isOpen[item.id];
                    if (Array.isArray(item.rows)) {
                        processRows(item.rows);
                    }
                }
            }

            if (Array.isArray(rows)) {
                processRows(rows);
            }
        }
    }

    // progressive rendering.  causes some weird behavior when trying to reset the scroll position so leaving off for now.
    var USE_DISTRIBUTED_RENDERING = false;

    function RenderGrid(result) {
        tacticTypefieldOptionList = result.tType;
        lineItemTypefieldOptionList = result.lType;
        HomeGrid = new dhtmlXGridObject('gridbox');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        HomeGrid.setImagePath(imgpath);
        HomeGrid.enableDragAndDrop(true);
        HomeGrid.enableAutoHeight(false);
        HomeGrid.enableAutoWidth(false);
        HomeGrid.attachEvent("onBeforeSorting", function(ind, grid) {
            if (IsManageviewClick) {
                IsManageviewClick = false;
                return false;
            } else if (IsManageDropdown) {
                IsManageviewClick = false;
                return false;
            } else
                return true;
        });
        HomeGrid.setImageSize(1, 1);
        HomeGrid.setCustomSorting(sort_Owner, OwnerColIndex);
        HomeGrid.setCustomSorting(sort_TacticType, TypeColIndex);
        HomeGrid.enableEditTabOnly(true);;
        HomeGrid.csvParser = HomeGrid.csvExtParser;
        HomeGrid.init();
        var begin;

        var renderComplete = function() {
            var dend = performance.now();
            console.log("distributedEnd " + (dend - begin) + " ms");
            LoadAfterParsing();
            if (scrollstate != null && scrollstate != undefined) {
                HomeGrid.objBox.scrollTop = scrollstate.y;
            }
        };

   
        if (USE_DISTRIBUTED_RENDERING) {
            HomeGrid.attachEvent("onDistributedEnd", renderComplete);
        }

        HomeGrid.attachEvent("onRowSelect", function(id, ind) {
            isEditTacticHomeGrid = id;
            isCopyTacticHomeGrid = 0;
            selectedTaskID = id;
        });

        HomeGrid.enableColumnMove(true);
        GridDataHomeGrid = result.data;

        begin = performance.now();

        var rows = GridDataHomeGrid.rows;
        var head = GridDataHomeGrid.head;

        // update the row open/closed status based on saved state
        UpdateGridDataFromSavedOpenState(rows, "plangridState");

        // first process just the headers
        GridDataHomeGrid.rows = null;
        HomeGrid.parse(GridDataHomeGrid, "json");
        GridDataHomeGrid.rows = rows;

        // now modify the columns
        GridHideColumn();

        HomeGrid.setColumnMinWidth("300", TaskNameColIndex); ///to assign minimum width for task name column
        colSplitId = HomeGrid.getColIndexById(AddId);
        HomeGrid.splitAt(colSplitId + 1);

        // Now process the rows
        GridDataHomeGrid.head = null;

        HomeGrid.enableDistributedParsing(USE_DISTRIBUTED_RENDERING, 10, 0.1);
        HomeGrid.parse(GridDataHomeGrid, "json");
        GridDataHomeGrid.head = head;

        MoveColumn(); ///Calling Move column function

        renderComplete();

        HomeGrid.enableAlterCss("uneven"); // Added for odd row bgcolor

        $('#btngrid').addClass('P-icon-active');
        var count = HomeGrid.getRowsNum();

        if (parseInt(count) > 0) {
            $("#gridbox").show();
            $("#goalwrapper").show();
            $("#NodatawithfilterGrid").hide();
            $('#exp-serach').show();
            $("div[id^='LinkIcon']").each(function() {
                bootstrapetitle($(this), 'This tactic is linked to ' + "<U>" + htmlDecode($(this).attr('linkedplanname') + "</U>"), "tipsy-innerWhite");
            });

        } else {
            var noplan = '@Sessions.IsNoPlanCreated';
            if ($("#IsPlanEditable").val().toString().toLowerCase() == 'true' && noplan.toLowerCase() == 'true') {
                AddBlankRow();
                $("#gridbox").show();
                $("#goalwrapper").show();
                $("#NodatawithfilterGrid").hide();
            } else {
                $("#gridbox").hide();
                $("#goalwrapper").hide();
                $("#NodatawithfilterGrid").show();
            }
            $('#exp-serach').hide();
        }
        if ($('#txtGlobalSearch').val() != undefined && $('#txtGlobalSearch').val() != "" && $('#txtGlobalSearch').val() != null) {
            GlobalSearchonGrid($('#txtGlobalSearch').val(), $('#searchCriteria').val().replace(" ", ""));
        }
        HomeGrid.enableEditEvents(true, false, true);
        SetTooltip();

        var finish = performance.now();
        console.log("spent " + (finish - begin) + " ms to prepare grid");
    }

    function showLoader() {
        $('#loader').css('display', 'block');
    }

    function hideLoader() {
        $('#loader').css('display', 'none');
    }

    function StartRetrieveGridData() {
        filters = GetFilterIds();
        var viewBy = $('#ddlTabViewBy').val();
        return GetGridData(filters, viewBy);
    }

    function BindHomeGrid(gridDataPromise) {
        showLoader();

        // if gridData was not provided, then start retrieving it ourselves
        var promise = gridDataPromise || StartRetrieveGridData();

        return promise
            .then(RenderGrid)
            .then(hideLoader, hideLoader);
    }

    //added by devanshi to add blank row to plan grid when there is no plan for client #2587 30-9-2016
    function AddBlankRow() {
        var blankrawdata = [];
        blankrawdata.push("--");
        var id = "";
        var addcolindex = 0;
        var taskcolindex = 0;
        for (var i = 1; i < HomeGrid.getColumnCount() ; i++) {
            id = HomeGrid.getColumnId(i);
            if (id == '@Enums.HomeGrid_Default_Hidden_Columns.TaskName') {
                blankrawdata.push("Your plan goes here");
                taskcolindex = i;
            }
            else if (id == '@Enums.HomeGrid_Default_Hidden_Columns.Add') {
                blankrawdata.push("");
                addcolindex = i;
            }
            else if (id == '@Enums.HomeGrid_Default_Hidden_Columns.id') {
                blankrawdata.push("0");
            }
            else if (id == '@Enums.HomeGrid_Default_Hidden_Columns.ColourCode') {
                blankrawdata.push("");
            }
            else {
                blankrawdata.push("--");
            }
        }
        var rawdata = blankrawdata.join(',');
        HomeGrid.addRow("newRow_0", rawdata);
        HomeGrid.cells("newRow_0", addcolindex).setValue("<div class=grid_add onclick=javascript:DisplayPopUpMenu(this,event)  id='Plan' alt='000' per='true' title='Add'><i class='fa fa-plus-circle'></i></div>");
        HomeGrid.setCellTextStyle("newRow_0", taskcolindex, "color:gray;font-style: italic;");
        var colourCodeIndex = HomeGrid.getColIndexById("ColourCode");
        HomeGrid.setColumnHidden(colourCodeIndex, true);
    }

</script>