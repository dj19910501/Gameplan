@model RevenuePlanner.Models.InspectModel
@{
    var InspectMode = ViewBag.InspectMode != null ? (string)ViewBag.InspectMode : string.Empty;

    var tactic = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    var deployStatus = "";
    if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
    {
        deployStatus = Model.IsDeployedToIntegration == true ? "Yes" : "No";
        deployStatus = tactic.IsIntegrationInstanceExist == "N/A" ? "Plan not Integrated" : deployStatus; ////Modified by Mitesh Vaishnav for PL ticket #690 Model Interface - Integration
    }

    string hdnYear = ViewBag.Year != null ? (string)ViewBag.Year : string.Empty;
    bool ExtIntService = ViewBag.ExtIntService != null ? (bool)ViewBag.ExtIntService : false;
    bool isOwner = ViewBag.IsOwner != null ? (bool)ViewBag.IsOwner : false;
    var _editdescription = Common.GenerateHTMLDescription(Model.Description);   // Added by Viral Kadiya on 11/21/2014 for PL ticket #794.
}
@using RevenuePlanner.Helpers
<script src="~/Scripts/js/bootstrap-datepicker.js"></script>
<style type="text/css">
    @@media screen and (-webkit-min-device-pixel-ratio:0) {
    #dp_start .datepicker{
        top: 32px !important;
        left:auto !important;
        min-width:220px;
    }
   }
    #divPartial .simpleSelectBox .sbHolder {
            background: url(@Url.Content("~/Content/images/button-arrow.png")) no-repeat scroll right 8px center #dff0f8 !important;
            box-shadow: 1px -8px 13px #dff0f8 inset, 0 1px 2px #ededed;
            margin-bottom: 0;
            z-index: auto;
    }
    #divPartial .ui-multiselect {
         background: none repeat scroll 0 0 #dff0f8 !important;
     }
    #divPartial .sbToggle {
        border-top: 4px solid #6d6d6d !important;
    }
    #divPartial .sbHolder {
        background-color: #dff0f8 !important;
        background-image:none;
    }
    #btnEditCancel
    {
        color: gray;
    }
     #multipleselect_ddlTacticType {
        left: 0 !important;
        top: 20px !important;
        min-width:205px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.ImprovementPlanTacticId)
    @Html.HiddenFor(model => model.ImprovementPlanProgramId)
    @Html.HiddenFor(model => model.IsDeployedToIntegration, new { id = "hdnIsDeployedToIntegration" })
    @Html.HiddenFor(model => model.TacticTitle)
    @Html.HiddenFor(model => model.Title)
    @Html.HiddenFor(model => model.Description, new { id = "hdnDescription" })  // Added by Viral Kadiya on 11/15/2014 for PL ticket #794

    <div class="inspect-column-parent source-sans-proregular" style="margin-bottom: 0px;">
        <div class="span6" id="inspect-modal-left-column1">
            <p>Parent Campaign</p>
            @Html.TextBox("txtCampaign", HttpUtility.HtmlDecode(tactic.CampaignTitle), new { @class = "span12 input-small truncate", style = "background:#F2F2F2;", @readonly = "true", title = tactic.CampaignTitle })
            <p>Description</p>
            @if (InspectMode == Enums.InspectPopupMode.Edit.ToString() || InspectMode == Enums.InspectPopupMode.Add.ToString())
            {
                @Html.TextArea("Description", HttpUtility.HtmlDecode(Model.Description), new { id = "txtDescription", @class = "span12 text-area-size input-setup", style = "height:93px;" })     @*Modified by Viral Kadiya on 11/15/2014 to resolve issue for PL ticket #794*@
                if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
                {
                <div style="clear: both; width: 100%;">
                    <label style="color: #808080">This improvement tactics boosts @ViewBag.NoOfTacticBoosts activities.</label>
                    <label style="color: #808080" id="last-synced" class="pull-left">@ViewBag.LastSync</label>
                </div>
                }
            }
            else
            {
@*Modified by Viral Kadiya on 11/15/2014 to resolve issue for PL ticket #794*@
                <div class="description-content">
                    <div class="description-content-area">
                        @Html.Raw(HttpUtility.HtmlDecode(_editdescription))
                    </div>
                </div>
            }
        </div>
        <div class="span3" id="inspect-modal-left-column2" style="margin-left: 10px;">
            <p>Improvement Tactic Type <span class="required-asterisk">*</span></p>
            @if (InspectMode == Enums.InspectPopupMode.Edit.ToString() || InspectMode == Enums.InspectPopupMode.Add.ToString())
            {
                <span class="Inspect-Popup-ImprovementTactic" style="min-width: 100%; position: relative;display:block">@Html.DropDownListFor(model => model.ImprovementTacticTypeId, new SelectList((System.Collections.IEnumerable)ViewBag.Tactics, "ImprovementTacticTypeId", "Title"), "Please Select", new { @class = "ddlStyle resubmission hide", require = "true", Id = "ddlTacticType", label = "Tactic_Type" })</span>
                <p>Cost</p>    
                @Html.TextBoxFor(model => model.Cost, new { placeholder = "$0", @class = "input-small truncate resubmission input-setup", style = "", id = "txtCost", label = "Cost" })
                <p>Effective Date</p>
                <span style="position: relative;">
                    <div class="dp datepicker input-append date without-margin calendar-width sidebar-datepicker" id="dp_start" data-date="@Model.EffectiveDate.ToShortDateString()" data-date-format="@RevenuePlanner.Helpers.Common.DateFormatDatePicker" style="padding:0 0 4px;">
                        @Html.TextBoxFor(model => model.EffectiveDate, new { @class = "span12 input-small truncate resubmission input-setup", id = "txtDate", label = "Effective_Date" })
                        <span class="add-on">
                            <img class="marginTop-5px" src="~/Content/images/gray-calendar-icon.png"></span>
                    </div>
                </span>
            }
            else
            {
                @Html.TextBox("txtTacticType", HttpUtility.HtmlDecode(tactic.TacticTypeTitle), new { @class = "input-small truncate", style = "background:#F2F2F2;", @readonly = "true", title = tactic.TacticTypeTitle })   
                <p>Cost</p>
                @Html.TextBoxFor(model => model.Cost, new { placeholder = "$0", @class = "input-small truncate", style = "background:#F2F2F2;", id = "txtCost", @readonly = "true" })
                <p>Effective Date</p>
                @Html.TextBoxFor(model => model.EffectiveDate, new { @class = "input-small truncate", style = "background:#F2F2F2;", id = "txtDate", @readonly = "true" })
            }
        </div>
        <div class="span3" id="inspect-modal-left-column3">
            <p>Owner</p>
            @Html.TextBoxFor(model => model.Owner, new { @class = "span12 input-small truncate", style = "background:#F2F2F2;", @readonly = "true", title = tactic.Owner })

            @if (InspectMode == Enums.InspectPopupMode.Edit.ToString() || InspectMode == Enums.InspectPopupMode.Add.ToString())
            {
                if (@ExtIntService)
                {
                <p>Deployed to Integration</p>
                    if (Model.IsDeployedToIntegration)
                    {
                <input id="t_integration_status" name="t_status" type="text" class="span12 icon-check-blue" placeholder="Sync to integration" readonly="true" />
                    }
                    else
                    {
                <input id="t_integration_status" name="t_status" type="text" class="span12 icon-check-gray" placeholder="Don't sync to integration" readonly="true" />
                    }
                }
            }
            else
            {
                <p>Deployed to Integration</p>
                @Html.TextBox("txtDeployStatus", deployStatus, new { @class = "span12 input-small truncate", style = "background:#F2F2F2;", id = "txtDeployStatus", @readonly = "true" })   
            }
        </div>

    </div>@*  
            if (InspectMode == Enums.InspectPopupMode.Edit.ToString() || InspectMode == Enums.InspectPopupMode.Add.ToString())
            {
    <div style="width: 100%; clear: both" class="wraper-btns cf ">
        <div class="span2 btn-save" style="width: 80px;">
            <button id="btnEditSave" class="btn btn-blue text-shadow-blue source-sans-proregular margin-top23" type="button">Save</button>
        </div>
        <div class="span2">
            <button id="btnEditCancel" class="close-form btn-link source-sans-proregular" style="float: left; margin-top: 30px !important" type="button">Cancel</button>
        </div>
    </div>
            }                        
    *@<span class="flag-icon"></span>
}

<script type="text/javascript">

    var requestedModule=$("#hdnRequestedModule").val();

    $(document).ready(
      function () {
          $(".datepicker.dropdown-menu").each(function () {
              $(this).remove();
          });
          
          $('#txtDate').val($('#txtDate').val().split(" ")[0].toString());

          $('form').find(".sbSelector").each(function () {
              $(this).unbind("click");
              $(this).removeAttr("href");
              $(this).prev().unbind("click");
              $(this).prev().removeAttr("href");
          });
          $("#txtDate").val($("#txtDate").val().split(' ')[0]);

          assignDefaultValue(".resubmission");

          $('#txtCost').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
          $("#txtCost").val(FormatCurrency($('#txtCost').val().toString(), false));
          $('#txtCost').attr("title", $('#txtCost').val());

          $('.datepicker.dropdown-menu').css("display", "none");
                    
          // $(".simpleSelectBox select").selectbox();
          $('#ddlTacticType').multiselect({
              multiple: false,
              noneSelectedText: "Please Select",
              selectedList: 1,
              CustomName: '@Common.CustomTitle'
          }).multiselectfilter();
          $('#ddlTacticType').next().css('width', '95%');
          $('#ddlTacticType').next().css('min-height', '30px');
          var spanTacticType = $('#multipleselect_ddlTacticType');
          $('#btnMultiselect_ddlTacticType').after(spanTacticType);

          if ('@InspectMode' == '@Enums.InspectPopupMode.Edit.ToString()')
          {
              $("#spanSuccMessageImprovementTactic").empty();
              $("#successMessageImprovementTactic").css("display", "none");
              $("#spanErrMessageImprovementTactic").empty();
              $("#errorMessageImprovementTactic").css("display", "none");
              $('.inspect-column-parent').removeClass('remove-bottom-border');

              if ('@ExtIntService' == 'True')
              {
                  $('#inspect-modal-left-column4').css('padding-left', '25px');
              }
              else
              {
                  $('#inspect-modal-left-column4').css('padding-left', '40px');
              }
          }
          else
          {
              $('.inspect-column-parent').addClass('remove-bottom-border');
          }

          $('.Inspect-Popup-ImprovementTactic .sbSelector').attr('title', $('.Inspect-Popup-ImprovementTactic .sbSelector').html());
          //Start - Added by Viral Kadiya on 19/11/2014 to resolve PL ticket #947.
          if ('@InspectMode' == '@Enums.InspectPopupMode.Edit.ToString()' || '@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {                                 // check current page mode is editable or not.
              $('.input-setup').addClass('light-blue-background');
              $('.ddlStyle .ui-multiselect.ui-widget.ui-state-default.ui-corner-all').addClass('light-blue-background');
          }
          else {
              $('.input-setup').removeClass('light-blue-background');
              $('.ddlStyle .ui-multiselect.ui-widget.ui-state-default.ui-corner-all').removeClass('light-blue-background');
          }
          //End - Added by Viral Kadiya on 19/11/2014 to resolve PL ticket #947.

      });

      $('.dp').datepicker({
          format: "@RevenuePlanner.Helpers.Common.DateFormatDatePicker",
          autoclose: true,
      }).on('changeDate', function (ev) {
          $(this).datepicker('hide');
          var sdate = $('#txtDate').val();
          if (!CheckDateYear(sdate, '@hdnYear', "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
    });;

    //hide the other datepicker in add-on onclick
    $('#dp_start .add-on').click(function () {
        $('#dp_start').datepicker('show');
        $(".dropdown-menu").css("z-index", "25001");
        var pos = $("#txtDate").position();
        var height = $("#txtDate").height();
        var scrollTop = $("#modal-container-186470").scrollTop();
        var pos_top = pos.top + height + scrollTop + 10;
        setTimeout(function () {
            if (!$('#dp_start').find('.datepicker.dropdown-menu').hasClass('dropdown-menu')) {
                $("#txtDate").after($(".datepicker.dropdown-menu").eq(0));
                $("#txtDate").parent().find(".datepicker.dropdown-menu").css({
                    top: pos_top.toString() + 'px',
                    display: 'block'
                });
            }
            else {
                $('#dp_start').find('.datepicker.dropdown-menu').css({
                    top: pos_top.toString() + 'px',
                    display: 'block'
                });
            }
        }, 1);
    })

    $('#btnEditCancel').click(function () {
        if ('@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {
            $('#modal-container-186470').modal("hide");
            $('body').removeClass('bodyOverflow');
        }else
        {
            returnToReadOnlyMode();
        }
    })

    function returnToReadOnlyMode(id)
    {
        var url = '@Url.Content("~/Inspect/LoadInspectPopup")';
        $("#divPartial").empty();
        
        var ImprovementPlanTacticId;

        if ('@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()') {
            ImprovementPlanTacticId=id;
        }
        else
        {
            ImprovementPlanTacticId='@Model.PlanTacticId';
        }

        $("#divPartial").load(url + '?id=' + ImprovementPlanTacticId + '&Section=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.ImprovementTactic).ToLower()" + '&TabValue=' + "Setup" + '&InspectPopupMode=' + "@Enums.InspectPopupMode.ReadOnly.ToString()"+ '&RequestedModule=' + requestedModule, function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    }
    function assignDefaultValue(classname) {
        $('form').find(classname).each(function () {
            $(this).attr("oldValue", $(this).val());
        });
    }

    var _resubmissionLabelValues = [];

    function checkChangeValue(classname, withResubmissionLabel) {
        var resubmit = false;
        if (withResubmissionLabel) {
            $('form').find(classname).each(function () {
                var oldValue = $(this).attr("oldValue");
                var value = $(this).val();
                if (oldValue != value) {
                    _resubmissionLabelValues.push({
                        Key: htmlEncode($(this).attr("label").toString()),
                        Value: htmlEncode($(this).attr("label").toString())
                    });

                    resubmit = true;
                }
            });
            _resubmissionLabelValues = JSON.stringify(_resubmissionLabelValues);
            return resubmit;
        }
        else {
            $('form').find(classname).each(function () {
                var oldValue = $(this).attr("oldValue");
                var value = $(this).val();
                if (oldValue != value) {
                    return resubmit = true;
                }
            });
        }
    }
    var returnparameter = false;
    function ValidateSaveImpTactic () {
        var iserror = false;
        $('form').find('input[type=text], select, textarea').each(function () {
            if ($(this).attr('require') == 'true') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            }
        });
        var tacticTypeValue = $('#ddlTacticType').val();
     
        if (tacticTypeValue == "") {
            $('#btnMultiselect_ddlTacticType').addClass("error");
        }
        else {
            $('#btnMultiselect_ddlTacticType').removeClass("error");
        }
        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
            return false;
        }

        var regex = /(>|<)/m;

        var descriptionvalue = $("#txtDescription").val();
        if (descriptionvalue.search(regex) >= 0) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.InvalidCharacterofDescription");
            $("#txtDescription").addClass("error");
            return false;
        }

        var sdate = $('#txtDate').val();
        if (!isDate(sdate)) {
            alert('@Common.objCached.ValidateEffectiveDate');
            return false;
        }
        if (!CheckDateYear(sdate, @hdnYear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
        $("#txtCost").val(ReplaceCC($("#txtCost").val()));
        
        document.getElementById("txtTitle").value = htmlEncode($('#txtTitle').val());
        document.getElementById("txtDescription").value = htmlEncode($('#txtDescription').val());
        document.getElementById("hdnDescription").value = htmlEncode($('#txtDescription').val());   @*Modified by Viral Kadiya on 11/15/2014 to resolve issue for PL ticket #794*@ 

        $('#Title').val($('#txtTitle').val());
        
        _resubmissionLabelValues = [];
        if (checkChangeValue(".resubmission", true) && ($("#hdnIsResubmitableStatus").val().toString().toLowerCase() == "true")) {
            url = '@Url.Content("~/Inspect/LoadResubmission")';
            $("#divResubmission").load(url + '?redirectionType='+'@Convert.ToString(Enums.ResubmissionOpenFrom.ImprovementTactic)'+'&labelValues=' + _resubmissionLabelValues);
        } else {
            SaveImprovementTactic();
        }
        return returnparameter;
    }


    function SaveImprovementTactic() {
        returnparameter = false;
        var txtTacticValue = $("#txtTitle").val();
        var isAssortment = false;
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Inspect/SaveImprovementTactic")',
            async : false,
            data: $("form").serialize() + '&RedirectType=' + isAssortment,
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    else{
                    if (data.isSaved) {
                        var requestedModule = $("#hdnRequestedModule").val();
                        if (inspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
                            var ChangedTab = "Setup";
                            if (tabtext != "") {
                                ChangedTab = tabtext;
                            }
                            var inspectPopupMode = '@Enums.InspectPopupMode.Edit.ToString()';
                            if (ChangedTab == "Setup") {
                                inspectPopupMode = '@Enums.InspectPopupMode.ReadOnly.ToString()';
                            }
                            loadInspectPopup(data.id, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.ImprovementTactic).ToLower()", ChangedTab, inspectPopupMode, 0, requestedModule);
                            //RefreshCurrentTab(requestedModule, 0, 0, 0);
                        }
                        else{
                            $("#successMessage").css("display", "block");
                            $("#spanMessageSuccess").empty();
                            $("#spanMessageSuccess").text(data.msg);
                            //returnToReadOnlyMode(data.id);
                            $('#txtTitle').css('display', 'none');
                            $('#spnImprovementTacticTitle').css('display', 'block');
                            $("#spnImprovementTacticTitle").removeAttr("style");
                            $("#txtTitle").val(txtTacticValue);
                            $('#spnImprovementTacticTitle').text(txtTacticValue);
                            RefreshCurrentTab(requestedModule, 0, 0, 0);
                            returnparameter=true;
                            
                            return;
                        }
                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                        }
                        else{
                            if (data.errormsg != "") {
                                document.getElementById("txtTitle").value = htmlDecode($('#txtTitle').val());
                                document.getElementById("txtDescription").value = htmlDecode($('#txtDescription').val());
                                ShowError(data.errormsg);
                                returnparameter=false;
                                return;
                            }
                        }
                    }
                }
        });
        }

        function ShowError(value) {
            $("#errorMessageImprovementTactic").slideDown(400);
            $("#spanErrMessageImprovementTactic").empty();
            $("#spanErrMessageImprovementTactic").html(value);
        }

        //function ShowMessage(InspectSuccMsg) {
        //    $("#successMessageImprovementTactic").css("display", "block");
        //    $("#spanSuccMessageImprovementTactic").empty();
        //    $("#spanSuccMessageImprovementTactic").text(InspectSuccMsg);
        //    $("#errorMessageImprovementTactic").css("display", "none");
        //    $("#spanErrMessageImprovementTactic").empty();
        //    InspectSuccMsg = '';
        //}

        $("#t_integration_status").click(function () {
            if ('@isOwner' == 'True') {
        if ($(this).hasClass("icon-check-blue")) {
            $(this).val("Don't sync to integration");
            $(this).addClass("icon-check-gray");
            $(this).removeClass("icon-check-blue");
            $("#hdnIsDeployedToIntegration").val(false);
        }
        else {
            $(this).val("Sync to integration");
            $(this).addClass("icon-check-blue");
            $(this).removeClass("icon-check-gray");
            $("#hdnIsDeployedToIntegration").val(true);
        }
    }
});
    
    $('#ddlTacticType').change(function () {
        var tacticTypeId = $(this).val();
        var pcost = 0;
        if (tacticTypeId != '') {
            LoadImprovementTacticTypeData();
        }
        else {
            $("#txtCost").val(FormatCurrency((0).toString(), false));
            $('#txtCost').attr("title", $('#txtCost').val());
        }
        
        $('.Inspect-Popup-ImprovementTactic .sbSelector').attr('title', $('.Inspect-Popup-ImprovementTactic .sbSelector').html());
    });

    var ValueCost = 0;
    function LoadImprovementTacticTypeData() {
        var ImprovementTacticTypeId = $('#ddlTacticType').val();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Inspect/LoadImprovementTacticTypeData?")' + 'ImprovementTacticTypeId=' + ImprovementTacticTypeId,
            success: function (data) {
                if (data.isSuccess) {
                    ValueCost = data.cost;
                    $("#txtCost").val(FormatCurrency((ValueCost).toString(), false));
                    $('#txtCost').attr("title", $('#txtCost').val());
                    if (data.isDeployedToIntegration) {
                        $("#t_integration_status").val("Sync to integration");
                        $("#t_integration_status").addClass("icon-check-blue");
                        $("#t_integration_status").removeClass("icon-check-gray");
                        $("#hdnIsDeployedToIntegration").val(true);
                    }
                    else {
                        $("#t_integration_status").val("Don't sync to integration");
                        $("#t_integration_status").addClass("icon-check-gray");
                        $("#t_integration_status").removeClass("icon-check-blue");
                        $("#hdnIsDeployedToIntegration").val(false);
                    }
                }
            }
        });

    }


    
</script>
