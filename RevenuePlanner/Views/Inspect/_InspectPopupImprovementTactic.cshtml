@model RevenuePlanner.Models.InspectModel
@using RevenuePlanner.Helpers;

@*<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>*@
@{
    RevenuePlanner.Models.InspectModel tacticMaster = null;
    if(Model != null)
    {
        tacticMaster = Model;
    }
    
    var PlanProgrameId = tacticMaster.PlanProgramId;
    var IsResubmitableStatus = false;
    var TacticTitle = "";
    var PlanTacticId = 0;
    var Status = "";
    var ColorCode = "";
    string RequestedModule = (tacticMaster.RedirectType != "") ? tacticMaster.RedirectType : "";
    bool IsPlanEditable = false;
    var popupvalue = string.Empty;
    var InspectMode = string.Empty;
    if (tacticMaster != null)
    {
        PlanProgrameId = tacticMaster.PlanProgramId;
        IsResubmitableStatus = (bool)Common.CheckAfterApprovedStatus(tacticMaster.Status);
        TacticTitle = tacticMaster.TacticTitle;
        PlanTacticId = tacticMaster.PlanTacticId;
        Status = tacticMaster.Status;
        ColorCode = tacticMaster.ColorCode;
        popupvalue = (string)tacticMaster.InspectPopup;
        InspectMode = tacticMaster.InspectMode != null ? (string)tacticMaster.InspectMode : string.Empty;
        IsPlanEditable = (bool)tacticMaster.IsPlanEditable;
    }
}
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@Html.Hidden("hdnPlanTacticId", PlanTacticId, new { id = "hdnPlanTacticId" })
@Html.Hidden("hdnTacticStatus", Status, new { id = "hdnTacticStatus" })
@Html.Hidden("hdnIsResubmitableStatus", IsResubmitableStatus, new { id = "hdnIsResubmitableStatus" })
@Html.Hidden("hdnRequestedModule", RequestedModule, new { id = "hdnRequestedModule" })
@Html.Hidden("hdnIsPlanEditable", IsPlanEditable)
@Html.Hidden("hdnInspectMode", InspectMode, new { id = "hdnInspectMode" })

<div id="successMessageImprovementTactic" class="alert hide alert-success messagewidth">
    <a class="close">×</a>
    <strong>Success.</strong>
    <span id="spanSuccMessageImprovementTactic"></span>
</div>

<div id="errorMessageImprovementTactic" class="alert alert-error hide messagewidth">
    <a class="close">×</a>
    <strong>Error!</strong>
    <span id="spanErrMessageImprovementTactic"></span>
</div>
<div class="headerfix-wraper">
    @*Modified for Design changes ticket #1318*@
    <div class="headefix">
        <h2 class="title-simple source-sans-prolight">
            @if (InspectMode == Enums.InspectPopupMode.Add.ToString())
            {
                <span class="Save-icon-white btn-blue btn-large" href="#" id="btnEditImrovement" style="margin-right: 15px; cursor: pointer;"></span>
            }
            else if (IsPlanEditable)
            {
                <span class="edit-icon-white btn-blue btn-large" href="#" id="btnEditImrovement" style="margin-right: 15px; cursor: pointer;"></span>
            }
            <buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>
        </h2>
    </div>
</div>
<div class="pop-body-wraper">
    <div class="PopupDiv">
        <form>
            <div class="modal-popup-title">
                <span class="icon-flag bg-purple" style="background-color:#@ColorCode !important;"></span>
                <h2 class="title-simple source-sans-prolight">


                    <span>
                        <span class="tipsyclassTitle" id="spnImprovementTacticTitle" title="@HttpUtility.HtmlDecode(TacticTitle)">@HttpUtility.HtmlDecode(TacticTitle)</span>
                    </span>
                    @Html.TextBox("txtTitle", HttpUtility.HtmlDecode(TacticTitle), new { placeholder = "Improvement Tactic name goes here", require = "true", maxlength = "255", @class = "span12 input-small font20 light-blue-background", style = "width: 95%; height: 28px;", title = HttpUtility.HtmlDecode(TacticTitle) })
                    @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle1" })
                </h2>
            </div>
        </form>
        @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
        {
            <div class="modal-popup-summary">
                <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight" style="margin-bottom: 0px;">
                    <p class="modal-status">
                        Status: 

            @if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statussubmitted">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statusrejected">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statusapproved">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                <span id="status" class="source-sans-prosemibold statuscreated">@tacticMaster.Status</span>
            }
                    </p>
                </div>
            </div>
        }

        <div>

            <ul class="nav nav-tabs new-margin no-position" id="InspectTab">
                <li class="active pull-left" id="liSetup">
                    <a>Setup</a>
                </li>
                <li class="pull-left" id="liReview">
                    <a>Review</a>
                </li>
                <li class="pull-left" id="liImpact">
                    <a>Impact</a>
                </li>
            </ul>
            <div id="divTab">
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var isclickfrompopup = false;
    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabActual = "Impact";
    var divTab = "#divTab";
    var tabtext = "";
    var inspectMode = '@InspectMode';
    $(document).ready(function () {
        var modelHeight = $(window).height();
        var headerHeight = $('.headerfix-wraper').height();
        var bodyWrapperMaxHeight = modelHeight - headerHeight - 100;
        //$('.pop-body-wraper').css('height', '92%');
        CloseIconClick();
        NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
        var InspectValue = $("#hdnInspectPopup").val();
        var planTacticId = $("#hdnPlanTacticId").val();
        // Call Remove Tabclass
        RemoveTabClass();

        $("#li" + InspectValue).removeClass("pull-left");
        $("#li" + InspectValue).addClass("active pull-left");
        tabtext = ($("#li" + InspectValue).children('a').text());
        $('#div' + tabtext).css({ display: "block" });

        loadReview(planTacticId, tabtext);
        if ($('#btnEditImrovement').hasClass('edit-icon-white') && inspectMode == '@Enums.InspectPopupMode.Edit.ToString()') {
            $('#btnEditImrovement').removeClass('edit-icon-white');//Modified for #1318 
            $('#btnEditImrovement').addClass('Save-icon-white');
            HideAllMessages();
            $("#txtTitle").removeClass("error");
        }
        @*if (inspectMode == '@Enums.InspectPopupMode.Edit.ToString()' || inspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
            $('#txtTitle').css('display', 'inline');
            $('#spnImprovementTacticTitle').css('display', 'none');
        }
        else {
            $('#txtTitle').css('display', 'none');
            $('#spnImprovementTacticTitle').css('display', 'inline');
        }*@

        // Click on Tab Partialview Refresh Based On Selected Tab
        $("#liSetup,#liReview,#liImpact").on("click", function () {
            var activeTab = $("#InspectTab li.active a").text();
            tabtext = ($(this).children('a').text());

            isclickfrompopup = true;
            // If condition added by bhavesh, if same tab click then don't require to save data. Date : 10-jan-2015.Ticket: #1823
            var returnpara = true;
            if (tabtext != activeTab) {
                var returnpara = SaveAllData(activeTab);   //Added By Komal Rawal for #1324
            }
            if (returnpara) {
                RemoveTabClass();
                $(this).removeClass("pull-left");
                $(this).addClass("active pull-left");
                HideAllMessages();
                /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                //  var tabtext = ($(this).children('a').text());
                var planTacticId = $("#hdnPlanTacticId").val();
                loadReview(planTacticId, tabtext);
            }

        });
        function SaveAllData(activeTab) {
            //var improvementMode = $("#hdnInspectMode").val();
            if (inspectMode == '@Enums.InspectPopupMode.Edit.ToString()' || inspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
                if (activeTab == TabSetup) {
                    var ReturnParameter = ValidateSaveImpTactic();
                    if (ReturnParameter == false) {
                        return false;
                    }
                }

                else if (activeTab = TabReview) {
                    var ReturnParameter = SaveTitle();
                    if (ReturnParameter == false) {
                        return false;
                    }
                }

                // Comment By Bhavesh Date: 6-jan-2015, Ticket #1793
            }

            return true;
        }
        // Close event for Error Message & Success Message Close button 
        $(".alert").find(".close").on("click", function (e) {
            e.stopPropagation();
            e.preventDefault();
            $(this).closest(".alert").css("display", "none");
            /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
        });


    });

    //Added By komal rawal for saving the Tactictitle in actual tab of Edit Mode
    function SaveTitle() {
        var returnparameter = false;
        var txtTacticValue = $("#txtTitle").val();
        var planTacticId = $("#hdnPlanTacticId").val();
        var iserror = false;

        if (txtTacticValue == "") {
            $('#txtTitle').addClass("error");
            iserror = true;
        }
        else {
            $('#txtTitle').removeClass("error");

        }
        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                  return false;
              }
              $.ajax({
                  async: false,
                  type: 'POST',
                  url: '@Url.Content("~/Inspect/SaveTitle/")',
                  data: { title: txtTacticValue, Id: planTacticId, ActivePopup: "ImprovementTactic" },
                  success: function (data) {
                if (!data.IsDuplicate) {
                    var requestedModule = $("#hdnRequestedModule").val();
                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.msg);
                    $('#txtTitle').css('display', 'none');
                    $('#spnImprovementTacticTitle').css('display', 'block');
                    $("#spnImprovementTacticTitle").removeAttr("style");
                    $("#txtTitle").val(txtTacticValue);
                    $('#spnImprovementTacticTitle').text(txtTacticValue);
                    // Comment By Bhavesh Date: 6-jan-2015, Ticket #1793
                    //RefreshCurrentTab(requestedModule, 0, 0, 0);
                    returnparameter = true
                }
                else {
                    ShowError(data.errormsg);
                    returnparameter = false;
                }
            }
        });
        return returnparameter;
    }
    //End
        function RemoveTabClass() {
            $('#InspectTab').children().each(function () {
                if ($(this).hasClass('active pull-left')) {
                    $(this).removeClass("active pull-left");
                    $(this).addClass("pull-left");
                }
            });
        }

        function loadReview(id, tabValue) {
            $.ajaxSetup({ cache: false });
            var url;
            if (tabValue == TabSetup) {
                url = '@Url.Content("~/Inspect/LoadImprovementSetup/")';
            if (inspectMode == '@Enums.InspectPopupMode.Edit.ToString()' || inspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
                $('#txtTitle').css('display', 'inline');
                $('#spnImprovementTacticTitle').css('display', 'none');
            }
            else {
                $('#txtTitle').css('display', 'none');
                $('#spnImprovementTacticTitle').css('display', 'inline');
            }
        }
        else if (tabValue == TabReview) {
            url = '@Url.Content("~/Inspect/LoadImprovementReview/")';
            if (inspectMode == '@Enums.InspectPopupMode.Edit.ToString()')
                {
                $('#txtTitle').css('display', 'inline');
            $('#spnImprovementTacticTitle').css('display', 'none');
        }
        else {
            $('#txtTitle').css('display', 'none');
            $('#spnImprovementTacticTitle').css('display', 'inline');
        }
        }
        else if (tabValue == TabActual) {
            url = '@Url.Content("~/Inspect/LoadImprovementImpact/")';
            if (inspectMode == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTitle').css('display', 'inline');
                $('#spnImprovementTacticTitle').css('display', 'none');
            }
            else {
                $('#txtTitle').css('display', 'none');
                $('#spnImprovementTacticTitle').css('display', 'inline');
            }
            }

    RemoveTabClass();
    $("#li" + tabValue).removeClass("pull-left");
    $("#li" + tabValue).addClass("active pull-left");
    $('#div' + tabValue).css({ display: "block" });

    $("#divTab").empty();

    if (inspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
        $("#divTab").load(url + '?id=' + '@PlanProgrameId' + '&InspectPopupMode=' + inspectMode, function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    }
    else {
        $("#divTab").load(url + '?id=' + id + '&InspectPopupMode=' + inspectMode, function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    }
}

@*$('#btnEditImrovement').click(function () {
    HideAllMessages();
    var url = '@Url.Content("~/Inspect/LoadInspectPopup")';
      $("#divPartial").empty();
      $("#divPartial").load(url + '?id=' + @PlanTacticId + '&Section=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.ImprovementTactic).ToLower()" + '&TabValue=' + "Setup" + '&InspectPopupMode=' + "@Enums.InspectPopupMode.Edit.ToString()" + '&RequestedModule=' + '@RequestedModule', function (response, status, xhr) {
        if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
            //// Call function to redirect on service unavailibility.
            //// Added By: Maninder Singh Wadhva on 11/24/2014.
            //// Ticket: 942 Exception handeling in Gameplan.
            window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
        }
    });
});*@

    $('#btnEditImrovement').on("click", function (e) {     //Modified for #1318 by Komal Rawal to handle the Save function
        isDataModified = true;
        var activeTab = $("#InspectTab li.active a").text()
        var planTacticId = $("#hdnPlanTacticId").val();

        if ($('#btnEditImrovement').hasClass('edit-icon-white')) {
            $('#btnEditImrovement').removeClass('edit-icon-white');//Modified for #1318 by Komal Rawal
            $('#btnEditImrovement').addClass('Save-icon-white');
            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");
            $('#MultiSelectProcced').css("display", "none");
            $("#txtTitle").removeClass("error");


            if (activeTab == TabReview) {
                activeTab = TabSetup;
            }
            //$('#popupnewTactic').css('display', 'none');
            inspectMode = "Edit";
            //$("#hdnTacticBudgetAllocationOpt").val("Edit");
            $('#txtTitle').css('display', 'block');
            //$("#txtTacticTitle").val($("#lblTacticTitle").text());
            $('#spnImprovementTacticTitle').css('display', 'none');
            // $('#EditForm').css('display', 'none');
            loadReview(planTacticId, activeTab);
            //// Added By Kalpesh on 11/06/2014 to Non-Editable Tactic Name.mp4 mentioned in resolve ticket #868
            $("#txtTitle").prop('readonly', false);
            //  $("#AddForm").css("display", "none");
            //$('#divDeleteTactic').css('display', 'none');
        }
        else {

            isclickfrompopup = false;
            //To save the Active Tab on Save Button
            if (activeTab == TabSetup) {
                var ReturnParameter = ValidateSaveImpTactic();
                if (ReturnParameter == false) {
                    return false;
                }
                else {
                    $('.close-x-big-icon').trigger('click');
                  

                }
            }
            else if (activeTab == TabReview) {
                var ReturnParameter = SaveTitle();
                if (ReturnParameter == false) {
                    return false;
                }
                else {
                    $('.close-x-big-icon').trigger('click');
                    
                }

            }
            else if (activeTab == TabActual) {
                var ReturnParameter = SaveTitle();
                if (ReturnParameter == false) {
                    return false;
                }
                else {
                    $('.close-x-big-icon').trigger('click');
                    
                }

            }
            else {
                $('.close-x-big-icon').trigger('click');
               
            }
        }

        //  }
    });

    function HideAllMessages() {
        $("#successMessageImprovementTactic").css("display", "none");
        $("#spanSuccMessageImprovementTactic").empty();
        $("#errorMessageImprovementTactic").css("display", "none");
        $("#spanErrMessageImprovementTactic").empty();
        $("#successMessage").css("display", "none");
        $("#spanMessageSuccess").empty();
        $("#errorMessage").css("display", "none");
        $("#spanMessageError").empty();
    }
    function setTacticStatus(status) {
        var $this = $('#status');
        $this.removeClass();
        $this.text($('#hdnTacticStatus').val());
        if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value') {
              $this.addClass('source-sans-prosemibold statussubmitted');

          }
          else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value') {
              $this.addClass('source-sans-prosemibold statusrejected');
          }
          else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value') {
        $this.addClass('source-sans-prosemibold statusapproved');
    }
    else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value') {
        $this.addClass('source-sans-prosemibold statuscreated');
    }
}
</script>
