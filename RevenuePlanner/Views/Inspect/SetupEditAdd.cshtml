@model RevenuePlanner.Models.Inspect_Popup_Plan_Campaign_Program_TacticModel
@using RevenuePlanner.Helpers;
@{
    var IsTackticAddEdit = ViewBag.IsTackticAddEdit != null ? (bool)ViewBag.IsTackticAddEdit : false;
    //// Flag to indicate unavailability of web service.
    //// Added By: Maninder Singh Wadhva on 11/24/2014.
    //// Ticket: 942 Exception handeling in Gameplan.
    bool isServiceUnavailable = Convert.ToBoolean(ViewBag.IsServiceUnavailable);
    string advanceStageTitles = "";
    if (ViewBag.AdvanceStageTitles!=null)
    {
        advanceStageTitles = (string)ViewBag.AdvanceStageTitles;
    }
    string advanceStageCodes = "";
    if (ViewBag.AdvanceStageCodes != null)
    {
        advanceStageCodes = (string)ViewBag.AdvanceStageCodes;
    }
    string customFieldWeightage = ViewBag.customFieldWeightage;
}
 <style type="text/css">
     @@media screen and (-webkit-min-device-pixel-ratio:0) {
    #dp_start .datepicker{
        top: 32px !important;
        left:auto !important;
        min-width:220px;
    }
    #dp_end .datepicker{
        top: 32px !important;
        left:auto !important;
        min-width:220px;
    }
   }
    #btnCancel
    {
        color: gray;
    }
     .stage-title {
         width: auto;
         float: left;
     }
    #divTab .verticalIdSelectBox .sbHolder {
            background: url(@Url.Content("~/Content/images/button-arrow.png")) no-repeat scroll right 8px center #dff0f8 !important;
            box-shadow: 1px -8px 13px #dff0f8 inset, 0 1px 2px #ededed;
            margin-bottom: 0;
            z-index: auto;
    }
    #divTab .ui-multiselect {
         background: none repeat scroll 0 0 #dff0f8 !important;
     }
    #divTab .sbToggle {
        border-top: 4px solid #6d6d6d !important;
    }
    #divTab .sbHolder {
        background-color: #dff0f8 !important;
        background-image:none;
     }
    @* Start - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 *@
    #multipleselect_ddlOwner {
        left: 0 !important;
        top: 20px !important;
    }
    @* End - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 *@

     .inspect-column-parent input, .inspect-column-parent textarea {
    min-height: 22px !important;
    width: calc(100% - 12px) !important;
}
    .calendar-width {
    width: calc(100% - 30px) !important;
}
    .datepicker {
        padding:0px !important;
        margin-bottom:10px !important;
    }
     .margin-top-10{
     margin-top: 10px;
     }
   </style>

@using (Html.BeginForm())
{
    <script src="~/Scripts/js/bootstrap-datepicker.js"></script> 
 
    bool ExtIntService = (bool)ViewBag.ExtIntService;  
 @Html.HiddenFor(model => model.PlanProgramId, new { id = "hdnPlanProgramId" })
 @Html.HiddenFor(model => model.PlanTacticId, new { id = "hdnPlanTacticId" })
 @Html.HiddenFor(model => model.PStartDate, new { id = "hdnPStartDate" })
 @Html.HiddenFor(model => model.PEndDate, new { id = "hdnPEndDate" })
 @Html.HiddenFor(model => model.CStartDate, new { id = "hdnCStartDate" })
 @Html.HiddenFor(model => model.CEndDate, new { id = "hdnCEndDate" })
 @Html.HiddenFor(model => model.IsDeployedToIntegration, new { id = "hdnIsDeployedToIntegration" })
 @Html.HiddenFor(model => model.StageId, new { id = "hdnStageId" })
 @Html.HiddenFor(model => model.BusinessUnitId, new { id = "hdnBusinessUnitId" })
 @Html.HiddenFor(model => model.TacticTitle, new { id = "hdnPlanTacticTitle" })
 @Html.HiddenFor(model => model.Description, new { id = "hdnDescription" })
     
    <div class="inspect-column-parent source-sans-proregular remove-bottom-border" style="margin-bottom:0px;">
        <div class="span6" id="inspect-modal-left-column1">
            <p>Parent Campaign</p>
            @Html.TextBoxFor(model => model.CampaignTitle, new { @class = "span12 input-small truncate", id = "txtCampaign", @readonly = "true", style = "background:#F2F2F2;" })
            <p>Parent Program</p>
            @Html.TextBoxFor(model => model.ProgramTitle, new { @class = "span12 input-small truncate", id = "txtProgram", @readonly = "true", style = "background:#F2F2F2;" })
            <p>Description</p>
            @Html.TextArea("Description", Model.Description, new { placeholder = "Optional", @class = "span12 text-area-size input-setup", id = "Description" })   @*Modified by Viral Kadiya on 11/15/2014 to resolve issue for PL ticket #794*@
        </div>
        <div class="span3" id="inspect-modal-left-column2">
            <p>Tactic Type <span class="required-asterisk">*</span></p>
            <span class="verticalIdSelectBox">
                @Html.DropDownListFor(model => model.TacticTypeId, new SelectList((System.Collections.IEnumerable)ViewBag.Tactics, "TacticTypeId", "Title"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown hide", require = "true", Id = "ddlTacticType", label = "Tactic_Type" })
            </span>
            <p class="margin-top-10">Tactic Planned Cost</p>
            @Html.TextBoxFor(model => model.Cost, new { @class = "input-small truncate currency_dollar input-setup", id = "TacticCost", maxlength = @RevenuePlanner.Helpers.Common.maxLengthDollar })
            <p>Start Date</p>
             <span style="position:relative;">
            <div class="dp datepicker input-append date without-margin calendar-width sidebar-datepicker" id="dp_start" data-date="@Model.StartDate.ToShortDateString()" data-date-format="@RevenuePlanner.Helpers.Common.DateFormatDatePicker">
                @Html.TextBoxFor(model => model.StartDate, new { @class = "input-small resubmission input-setup", id = "t_startdate", label = "Start_Date" })
                <span class="add-on">
                    <img src="~/Content/images/gray-calendar-icon.png"></span>
            </div>
                 </span>
            <p class="clear-section" style="margin-top:2px;">End Date</p>
            <span style="position:relative;">
             <div class="dp datepicker input-append date without-margin calendar-width sidebar-datepicker" id="dp_end" data-date="@Model.EndDate.ToShortDateString()" data-date-format="@RevenuePlanner.Helpers.Common.DateFormatDatePicker">
                @Html.TextBoxFor(model => model.EndDate, new { @class = "input-small resubmission input-setup", id = "t_enddate", label = "End_Date" })
                <span class="add-on">
                    <img src="~/Content/images/gray-calendar-icon.png"></span>
            </div>
                </span>
        </div>
        <div class="span3" id="inspect-modal-left-column3">
            <p>Owner <span class="required-asterisk">*</span></p>
            @if (IsTackticAddEdit)
            {
                <span style="min-width:100%; position:relative;">
                    @Html.DropDownListFor(model => model.OwnerId, new SelectList((System.Collections.IEnumerable)ViewBag.OwnerList, "UserId", "DisplayName"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown hide", require = "true", Id = "ddlOwner", label = "Owner" })
                </span>
            }
            else
            {
            @Html.TextBoxFor(model => model.Owner, new { @class = "span12 input-small truncate", style = "background:#F2F2F2;", @readonly = "true", title = Model.Owner })
            }

            @if (ExtIntService)
            {                 

                <p style="width: 110%;">Deployed to Integration</p>
                if (Model.IsDeployedToIntegration)
                {
                <input id="t_integration_status" name="t_status" type="text" class="icon-check-blue margin-top10" placeholder="Synced to integration" style="margin-top: 0px ! important;" maxlength="18" readonly />
                }
                else
                {
                <input id="t_integration_status" name="t_status" type="text" class="icon-check-gray margin-top10" placeholder="Not synced to integration" style="margin-top: 0px ! important;" maxlength="18" readonly />
                }
            }

            <div class="cf width100">
                <div class="margin-right10 pull-left" style="width: 47%">
                    <label id="lblStageTitle" title="@Model.StageTitle" class="stage-title inspect-bolder-label">@Model.StageTitle &nbsp;</label>

                        @if (ViewBag.IsDiffrentStageType == true)
                        {
                            <span>
                                <img id="diffrentStageIcon" src="~/Content/images/flag-icon.png" title="Please note that the stage information at plan level is different than that at the model level" /></span>
                              
                        }
                    @Html.TextBoxFor(model => model.ProjectedStageValue, new { placeholder = "0", id = "txtProjectedStageValue", @class = "priceValue resubmission input-setup", label = @Model.StageTitle, maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })
                </div>

                <div class="pull-left" style="width: 47%">
                    <label title="@Html.LabelForMQL("MQL")" class="inspect-bolder-label">@Html.LabelForMQL("MQL")</label>
                    <input type="text" value="@Model.MQLs" readonly="true" id = "txtmql" />
                </div>

                <div class="pull-left" style="width: 47%">
                    <label title="Revenue" class="inspect-bolder-label">Revenue</label>
                    @Html.TextBoxFor(model => model.Revenue, new { placeholder = "$0", id = "txtRevenue", @readonly = "true", maxlength = @RevenuePlanner.Helpers.Common.maxLengthDollar })
                </div>
            </div>
        </div>
    </div>
    
    <ul class="nav nav-tabs new-margin padding-bottom10 clear border-bottom-div" id="InspectTab">
        <li class="pull-right">
            <h3 class="modal-popup-innertitle source-sans-proregular">Attributes</h3>
        </li>
    </ul>

    <div class="inspect-column-parent source-sans-proregular remove-bottom-border margin-bottom0">
        @*<div class="span3 margin-top10" style="clear: both;">
            <p class="ellipsis-left" title="@Html.CustomLabelFor(Enums.CustomLabelCode.Audience)">@Html.CustomLabelFor(Enums.CustomLabelCode.Audience)</p> <span class="required-asterisk">*</span>
            <span class="verticalIdSelectBox" style="margin-left: -2px;">
                @Html.DropDownListFor(model => model.AudienceId, new SelectList((System.Collections.IEnumerable)ViewBag.Audience, "AudienceId", "Title"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown hide", label = @Html.CustomLabelFor(Enums.CustomLabelCode.Audience), require = "true" })
            </span>
        </div>
        <div class="span3 margin-top10 paddingleft25px">
            <p>Business Unit</p>
            @Html.TextBox("txtBusinessUnit", (string)ViewBag.BudinessUnitTitle, new { @class = "span12 input-small truncate", style = "background:#F2F2F2;", @readonly = "true", title = (string)ViewBag.BudinessUnitTitle })
        </div>
        <div class="span3 margin-top10 paddingleft25px">
            <p>Vertical <span class="required-asterisk">*</span></p>
            <span class="verticalIdSelectBox" style="margin-left: -2px;">
                @Html.DropDownListFor(model => model.VerticalId, new SelectList((System.Collections.IEnumerable)ViewBag.Verticals, "VerticalId", "Title"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown hide", require = "true", label = "Vertical" })
            </span>
        </div>
        <div class="span3 margin-top10 paddingleft25px">
            <p>Geography <span class="required-asterisk">*</span></p>
            <span class="verticalIdSelectBox" style="margin-left: -2px;">
                @Html.DropDownListFor(model => model.GeographyId, new SelectList((System.Collections.IEnumerable)ViewBag.Geography, "GeographyId", "Title"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown hide", require = "true", label = "Geography" })
            </span>
        </div>*@
        @HtmlHelpers.GenerateCustomFieldsForInspectPopup(Model.PlanTacticId, Enums.EntityType.Tactic.ToString(), 0, Enums.InspectPopupMode.Edit.ToString())
    </div>   

    <div style="width: 100%; display: none; clear: both" id="divTacticSaveCancel" class="wraper-btns cf border-top-div ">
        <div class="span2 btn-save" style="width:80px;">
            <button id="btnUploadResult" class="btn btn-blue text-shadow-blue source-sans-proregular margin-top23 popup_button_save" type="button">Save</button>
        </div>
        <div class="span2">
            <button id="btnCancel" class="close-form btn-link source-sans-proregular popup_button_cancel" style="float: left; margin-top: 30px !important" type="button">Cancel</button>
        </div>
    </div>
}

<script type="text/javascript">
    var hdnYear;
    //// Function to redirect to login page on unavailability of web service.
    //// Added By: Maninder Singh Wadhva on 11/24/2014.
    //// Ticket: 942 Exception handeling in Gameplan.
    function redirectOnServiceUnavailibility() {
        if ('@Html.Raw(Json.Encode(isServiceUnavailable))' == 'true') {
            window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
        }
    }

    $(document).ready(
      function () {	 
          /*Added by Mitesh Vaishnav for PL ticket #1073
          Register events of new multiselect dropdown customfields*/
          $('.dropdown_new_btn').each(function () {
              $(this).multiselectWeight();
          });
          /*End Added by Mitesh Vaishnav for PL ticket #1073*/
          //// Call function to redirect on service unavailibility.
          //// Added By: Maninder Singh Wadhva on 11/24/2014.
          //// Ticket: 942 Exception handeling in Gameplan.
          redirectOnServiceUnavailibility();

          $(".datepicker.dropdown-menu").each(function () {
              $(this).remove();
          });
          ImageTipsy('#diffrentStageIcon'); // Added by Vira Kadiya on 11/18/2014 to resolve PL ticket #964.
          $(this).scrollTop(0);
          $(".verticalIdSelectBox select").selectbox();
          $('#txtTacticTitle').css('display', 'block');
          $('#lblTacticTitle').css('display', 'none');
          $('#divTacticSaveCancel').css('display', 'block');
          $('#EditForm').css('display', 'none');          
          $('#txtCost').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
          $('#txtCost').attr("title", $('#txtCost').val());
          $(".selectBox select").selectbox();

          $("#t_startdate").val($("#t_startdate").val().split(' ')[0]);
          $("#t_enddate").val($("#t_enddate").val().split(' ')[0]);

          //// Assign default values to controls having classname = .resubmission
          assignDefaultValue(".resubmission");

          $("#txtRevenue").val('$' + number_format($("#txtRevenue").val().toString(), 0, 0, ','));
          $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
          $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

          $("#liSetup,#liReview,#liBudget,#liActuals").removeClass('setdefultcursor');

          if (($("#hdnInspectMode").val() == '@Enums.InspectPopupMode.Add.ToString()')) {
              $("#liSetup,#liReview,#liBudget,#liActuals").unbind("click");
              $("#liSetup,#liReview,#liBudget,#liActuals").addClass('setdefultcursor');
          }

          $('.dp').datepicker({
              format: "@RevenuePlanner.Helpers.Common.DateFormatDatePicker",
              autoclose: true,
          }).on('changeDate', function (ev) {
              $(this).datepicker('hide');
          });;

          //Start - Added by Viral Kadiya on 17/11/2014 to resolve PL ticket #947.
           $('.input-setup').addClass('light-blue-background');
           $('.ddlStyle .ui-multiselect.ui-widget.ui-state-default.ui-corner-all').addClass('light-blue-background');
          //End - Added by Viral Kadiya on 17/11/2014 to resolve PL ticket #947.
          /*hide the other datepicker in input onclick*/

          $("#t_integration_status").click(function () {
              if ($(this).hasClass("icon-check-blue")) {
                  $(this).val("Not synced to integration");
                  $(this).addClass("icon-check-gray");
                  $(this).removeClass("icon-check-blue");
                  $("#hdnIsDeployedToIntegration").val(false);
              }
              else {
                  $(this).val("Synced to integration");
                  $(this).addClass("icon-check-blue");
                  $(this).removeClass("icon-check-gray");
                  $("#hdnIsDeployedToIntegration").val(true);
              }
          });

          if ('@TempData["TacticMQL"]' == "N/A") {
              $("#txtmql").removeClass("priceValue");
              $("#txtmql").val("N/A");
              $("#txtmql").attr('title', 'N/A');
          }
          else {
              var mqlValue = FormatCommas($("#txtmql").val(), false);
              $("#txtmql").val(mqlValue);
              $("#txtmql").attr('title', mqlValue);
          }


          $('#t_startdate').click(function () {
              $('#dp_end').datepicker('hide');
          })

          $('#t_enddate').click(function () {
              $('#dp_start').datepicker('hide');
          })

          //hide the other datepicker in add-on onclick
          $('#dp_start .add-on').click(function () {
              $('#dp_start').datepicker('show');
              $('#dp_end').datepicker('hide');
              $(".dropdown-menu").css("z-index", "25001");
              var pos = $("#t_startdate").position();
              var height = $("#t_startdate").height();
              var scrollTop = $("#modal-container-186470").scrollTop();
              var pos_top = pos.top + height + scrollTop + 10;
              setTimeout(function () {
                  if (!$('#dp_start').find('.datepicker.dropdown-menu').hasClass('dropdown-menu')) {
                      $("#t_startdate").after($(".datepicker.dropdown-menu").eq(0));
                      $("#t_startdate").parent().find(".datepicker.dropdown-menu").css({
                          top: pos_top.toString() + 'px',
                          display: 'block'
                      });
                  }
                  else {
                      $('#dp_start').find('.datepicker.dropdown-menu').css({
                          top: pos_top.toString() + 'px',
                          display: 'block'
                      });
                  }
              }, 1);

              //// To resolve issue of Ticket #1025, Pratik 
              $(".datepicker.dropdown-menu").last().css("display", "none");
          })

          $('#dp_end .add-on').click(function () {
              $('#dp_start').datepicker('hide');
              $('#dp_end').datepicker('show');
              $(".dropdown-menu").css("z-index", "25001");
              var pos = $("#t_enddate").position();
              var height = $("#t_enddate").height();
              var scrollTop = $("#modal-container-186470").scrollTop();
              var pos_top = pos.top + height + scrollTop + 10;
              setTimeout(function () {
                  if (!$('#dp_end').find('.datepicker.dropdown-menu').hasClass('dropdown-menu')) {
                      $("#t_enddate").after($(".datepicker.dropdown-menu").eq(1));
                      $("#t_enddate").parent().find(".datepicker.dropdown-menu").css({
                          top: pos_top.toString() + 'px',
                          display: 'block'
                      });
                  }
                  else {
                      $('#dp_end').find('.datepicker.dropdown-menu').css({
                          top: pos_top.toString() + 'px',
                          display: 'block'
                      });
                  }
              }, 1);

              //// To resolve issue of Ticket #1025, Pratik 
              $(".datepicker.dropdown-menu").first().css("display", "none");
          })

          var arLineitem = [];
          var arrClosedTaskString = null;
          var _customFieldValues = [];
          var _resubmissionLabelValues = [];
          hdnYear = @ViewBag.Year


          $("#btnCancel").on("click", function (e) {
              var activeTab = $("#InspectTab li.active a").text()
              var planTacticId = $("#hdnPlanTacticId").val();
              $('#txtTacticTitle').css('display', 'none');
              $('#lblTacticTitle').css('display', 'block');
              $("#lblTacticTitle").removeAttr("style");
              $('#divDeleteTactic').css('display', 'block');
              $("#errorMessage").css("display", "none");
              $("#successMessage").css("display", "none");
              $('#divTacticSaveCancel').css('display', 'none');
              $('#EditForm').css('display', 'block');
              $("#hdnTacticBudgetAllocationOpt").val("View");
              $("#AddForm").css("display", "block");
              if (!($("#hdnInspectMode").val() == '@Enums.InspectPopupMode.Add.ToString()')) {
                  loadReview(planTacticId, activeTab);
              }
              else {
                  $('#modal-container-186470').modal("hide");
              }
              //Start- Added by Viral Kadiya on 11/10/2014 for PL ticket #941 to refresh gantt data on cancel button click.
              if (($("#hdnInspectMode").val() == '@Enums.InspectPopupMode.Add.ToString()')) // if current view is for Add then remove class bodyOverflow to resolve scroll issue.
                  $('body').removeClass('bodyOverflow');
              var hdnRefresh = $("#hdnRefresh").val();      // This hidden value set from ApplyToCalendar page, to check flag, whether this page called from ApplyTocalender or not.
              if (hdnRefresh != null && gantt != null) {
                  gantt.refreshData();
              }
              //End- Added by Viral Kadiya on 11/10/2014 for PL ticket #941 to refresh gantt data on cancel button click.
          });

          $('#ddlOwner').multiselect({
                multiple: false,
                noneSelectedText: "Please Select",
                selectedList: 1,
                CustomName: '@Common.CustomTitle'
          }).multiselectfilter();

          $('#ddlOwner').next().css('width', '95%');
          $('#ddlOwner').next().css('min-height', '30px');

          var spanOwner = $('#multipleselect_ddlOwner');
          $('#btnMultiselect_ddlOwner').after(spanOwner);

          if ('@advanceStageTitles' != '' && '@advanceStageCodes' != '') {
              addColumnMultiselectWeight('@advanceStageTitles', '@advanceStageCodes');
              var customFieldsValues = JSON.parse('@Html.Raw(customFieldWeightage)');
              var i = customFieldsValues.length;
              for (var i = 0; i < customFieldsValues.length; i++) {
                  $('#' + customFieldsValues[i].optionId + '_' + customFieldsValues[i].stageType).val(customFieldsValues[i].Weight);
              }
              $(".table_drpdwn").each(function () {
                  $(this).find('input:checked:first').each(function () {
                      var optionId = $(this).val();
                      var BasicWeightAvailabel = $('#' + optionId + '_weight').val();
                      if (BasicWeightAvailabel == '' || typeof BasicWeightAvailabel == 'undefined') {
                          var menu = $(this).parents('.dropdown-wrapper');
                          menu.toggleClass('dropdown-block');
                          menu.find(".weight,.weight_header,.first_hide,.sus_header,.mql_header,.cw_header,.revenue_header,.cost_header").toggle();
                          menu.find('.advance_a').text("Basic Attribution");
                          return false;
                      }
                  });
              });
          }
      });

    $("#btnUploadResult").on("click", function (e) {
          document.getElementById("txtCampaign").value = htmlEncode($('#txtCampaign').val());
          document.getElementById("txtProgram").value = htmlEncode($('#txtProgram').val());
          document.getElementById("hdnDescription").value = htmlEncode($('#Description').val());
          document.getElementById("hdnPlanTacticTitle").value = htmlEncode($('#txtTacticTitle').val());
          
          var isLowBudgeted = false;
          var errorMsgForLowBudget = "@RevenuePlanner.Helpers.Common.objCached.CannotAllocateLessThanPlanned for ";
          var lowBudgetedMonths = "";
          var removeLength = 0;

          var iserror = false;
          $('form').find('input[type=text], select, textarea').each(function () {
              if ($(this).attr('require') == 'true') {
                  if ($(this).val() == '') {
                      $(this).addClass("error");
                      iserror = true;
                  }
                  else {
                      $(this).removeClass("error");
                  }
              }
          });
          $('.dropdown_new_btn').each(function () {
              if (typeof $(this).attr('require') != 'undefined' && $(this).attr('require') == 'true' && $(this).find('p').text() == 'Please Select') {
                  $(this).addClass("error");
                  iserror = true;
              }
              else {
                  $(this).removeClass("error");
              }
          })
          //sbSelector
          $('form').find('.sbSelector').each(function () {
              if ($(this).parent().prev().attr('require') == 'true') {
                  if ($(this).text() == 'Please Select') {
                      $(this).addClass("error");
                      iserror = true;
                  }
                  else {
                      $(this).removeClass("error");
                  }
              }
          });

          /* Start - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 */
          //// RequireField validation for Owner Dropdown
          if (!($("#hdnInspectMode").val() == '@Enums.InspectPopupMode.Add.ToString()')) {
              var OwnerValue = $('#btnMultiselect_ddlOwner').find('span:first').html();
              if (OwnerValue == "Please Select") {
                  $('#btnMultiselect_ddlOwner').addClass("error");
              }
              else {
                  $('#btnMultiselect_ddlOwner').removeClass("error");
              }
          }
          /* End - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 */
          if (iserror) {
              ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
              return false;
          }

          var regex = /(>|<)/m;

          var descriptionvalue = $("#Description").val();
          if (descriptionvalue.search(regex) >= 0) {
              var test = "@RevenuePlanner.Helpers.Common.objCached.InvalidCharacterofDescription";
              ShowError(test);
              $("#Description").addClass("error");
            return false;
        }

          var sdate = $('#t_startdate').val();
          var edate = $('#t_enddate').val();
          if (!isDate(sdate)) {
              alert('@Common.objCached.ValidateStartDate');
              return false;
          }
          if (!isDate(edate)) {
              alert('@Common.objCached.ValidateEndDate');
              return false;
          }


          if (!CheckDateYear(sdate, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.StartDateCurrentYear")) return false;
          if (!CheckDateYear(edate, hdnYear, "@RevenuePlanner.Helpers.Common.objCached.EndDateCurrentYear")) return false;

          $("#txtProjectedStageValue").val(ReplaceCC($("#txtProjectedStageValue").val()));
          if ($("#txtmql").val() == 'N/A') {
              $("#txtmql").val(0);
              $("#txtmql").attr("title", "0");
          }
          else {
              var mqlValue = ReplaceCC($("#txtmql").val());
              $("#txtmql").val(mqlValue);
              $("#txtmql").attr("title", mqlValue);
          }

          $("#TacticCost").val(ReplaceCC($("#TacticCost").val()));

          arrClosedTaskString = null;
          if (typeof arrClosedTask != 'undefined') {
              arrClosedTaskString = arrClosedTask.toString();
          }

          arLineitem = [];
          var _Lineitems = $("#frm_campaigns #c_tactics select");
          for (var l = 0; l < _Lineitems.length; l++) {
              var typeid = $(_Lineitems[l]).val();
              arLineitem[l] = typeid;
          }
          var arrError = autoGeneratedmultiselectWaightage();
          if (arrError.length > 0) {
              var errorAttrbutes = arrError.join(',');
              ShowError('@Common.objCached.ValidateAttributeWeightSum'.replace('{0}', errorAttrbutes.toString()));
              return false;
          }
          ////creating object which contains value of custom fields
          _customFieldValues = [];
          $('form').find('input[type=text], select').each(function () {
              if ($(this).attr('cf_id') != '' && typeof $(this).attr('cf_id') != 'undefined' && $(this).val() != '') {
                  _customFieldValues.push({
                      customFieldId: $(this).attr('cf_id').toString(),
                      Value: htmlEncode($(this).val().toString()),
                      Weight: "100",
                      StageType: null,
                      StageWeight:null
                  });
              }
          });
          $('form').find('input:checkbox:checked').each(function () {
              if ($(this).attr('cf_id') != '' && typeof $(this).attr('cf_id') != 'undefined' && $(this).val() != '') {
                  var customFieldId = $(this).attr('cf_id').toString();
                  var optionId = $(this).val();
                  if ($('#' + optionId + '_weight').parent().css('display') != 'none') {
                      _customFieldValues.push({
                          CustomFieldId: customFieldId,
                          Value: optionId,
                          Weight: $('#' + optionId + '_weight').val()!=''?$('#' + optionId + '_weight').val():null,
                          StageType: null,
                          StageWeight: null
                      });
                  }
                  else {
                      var i = 1;
                      while (i > 0) {
                          var StageInput = $(this).closest('tr').find('td').eq(i + 1).find('input');
                          if (typeof StageInput != 'undefined' && StageInput.val() != '' && StageInput.val() != null) {
                              _customFieldValues.push({
                                  CustomFieldId: customFieldId,
                                  Value: optionId,
                                  Weight: null,
                                  StageCode: StageInput.attr('id').split('_')[1].toString(),
                                  StageWeight: StageInput.val()
                              });
                              i++
                          }
                          else {
                              i = 0;
                          }
                      }
                  }
              }
          });
          _customFieldValues = JSON.stringify(_customFieldValues);
          var isAssortment = true;
          
          _resubmissionLabelValues = [];

          if ((checkChangeValue(".resubmission", true)) && ($("#hdnIsResubmitableStatus").val().toString().toLowerCase() == "true")) {
              url = '@Url.Content("~/Inspect/LoadResubmission")';
              $("#divResubmission").load(url + '?redirectionType=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic)" + '&labelValues=' + _resubmissionLabelValues);
          } else {
              saveTactic();
          }
      });

    function saveTactic(resubmission) {
        resubmission = typeof resubmission !== 'undefined' ? resubmission : false;
         var txtCampaignValue = $("#txtCampaign").val();
         var  txtProgramValue = $("#txtProgram").val();
          var txtTacticValue = $("#txtTacticTitle").val();
          var txtDescriptionValue = htmlEncode($("#Description").val());
          document.getElementById("txtCampaign").value = htmlEncode($('#txtCampaign').val());
          document.getElementById("txtProgram").value = htmlEncode($('#txtProgram').val());
          document.getElementById("hdnDescription").value = htmlEncode($('#Description').val());
          document.getElementById("hdnPlanTacticTitle").value = htmlEncode($('#txtTacticTitle').val());
          document.getElementById("Description").value = htmlEncode($('#Description').val());
          var uId = $(window).attr('name');

          $.ajax({
              type: 'POST',
              url: '@Url.Content("~/Inspect/SetupSaveTactic")',
              data: $("form").serialize() + '&lineitems=' + arLineitem + '&closedTask=' + arrClosedTaskString + '&UserId=' + uId + '&customFieldInputs=' + escape(_customFieldValues) +'&resubmission='+resubmission ,
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }
                else {
                    if (!data.IsDuplicate) {
                        if (data.redirect) {
                            var activeTab = $("#InspectTab li.active a").text()
                            var planTacticId = data.planTacticId;
                            var planCampaignId = data.planCampaignId;
                            var planProgramId = data.planProgramId;
                            var requestedModule = $("#hdnRequestedModule").val();
                            $('#txtTacticTitle').css('display', 'none');
                            $('#lblTacticTitle').css('display', 'block');
                            $("#lblTacticTitle").removeAttr("style");
                            $('#divTacticSaveCancel').css('display', 'none');
                            $('#EditForm').css('display', 'block');
                            $("#successMessage").css("display", "block");
                            $("#spanMessageSuccess").empty();
                            $("#spanMessageSuccess").text(data.Msg);
                            $("#errorMessage").css("display", "none");
                            loadInspectPopup(planTacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", activeTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, requestedModule);
                            $("#liSetup,#liReview,#liBudget,#liActuals").bind("click");
                            if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == requestedModule) {
                                $("#hdnBudgetingExpandId").val("tactic" + planTacticId);
                                $("#hdnBudgetingIsSave").val("true");
                            }
                            else {
                                RefreshCurrentTab(requestedModule, planCampaignId, planProgramId, 0);    //// Added by Sohel Pathan on 29/10/2014 for Internal Review Points
                            }
                            $("#txtCampaign").val(txtCampaignValue);
                            $("#txtProgram").val(txtProgramValue);
                            $("#txtTacticTitle").val(txtTacticValue);
                            $("#Description").val(txtDescriptionValue);

                            //// if new record save then set Refresh flag to true.
                            var _planTacticId = $("#hdnPlanTacticId").val();
                            if (_planTacticId == '' || _planTacticId == null || _planTacticId == '0' || _planTacticId == 'undefined') {
                                $("#hdnIsCreate_Clone").val(true); //// Hidden value used in _plan.cshmtl page to check that page require to refresh or not.
                                if (requestedModule == '@Enums.InspectPopupRequestedModules.Index.ToString()' || requestedModule == '@Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString()') {
                                    RefershPlanHeaderCalc();
                                }
                            }
                            return;
                        }
                    }
                    else {
                        ShowError(data.errormsg);
                        $("#divBudgetError").slideUp(30);
                        return;
                    }
                }
            }
        });
    }

    function ShowError(value) {
        $("#modal-container-186470").scrollTop(0);
        $("#errorMessage").css("display", "block");
        $("#errorMessage").slideDown(400);
        $("#spanMessageError").empty();
        $("#spanMessageError").html(value);
    }

    function assignDefaultValue(classname) {
        $('form').find(classname).not('a').each(function () {
            $(this).attr("oldValue", $(this).val());
        });
    }

    function checkChangeValue(classname, withResubmissionLabel) {
        var resubmit = false;
        if (withResubmissionLabel) {
            $('form').find(classname).each(function () {                
                var oldValue = $(this).attr("oldValue");
                var value="";
                if ($(this).prop('tagName') != 'A') {
                    value = $(this).val();
                }
                else {
                    value = $(this).text();
                }
                if (oldValue != value) {
                    _resubmissionLabelValues.push({
                        Key: htmlEncode($(this).attr("label").replace(/ /g,"_").toString()),
                        Value: htmlEncode($(this).attr("label").replace(/ /g, "_").toString())
                    });

                    resubmit = true;
                }
            });
            _resubmissionLabelValues = JSON.stringify(_resubmissionLabelValues);
            return resubmit;
        }
        else {
            $('form').find(classname).each(function () {
                var oldValue = $(this).attr("oldValue");
                var value = $(this).val();
                if (oldValue != value) {
                    return resubmit = true;
                }
            });
        }
    }
    $("#TacticCost").keyup(function () {
        var tacticBudgetValue = ReplaceCC($("#TacticCost").val());
        if (tacticBudgetValue == '' || typeof tacticBudgetValue == 'undefined') {
            $("#TacticCost").val('$0')
        }
    });
    $('#ddlTacticType').change(function () {
        var tacticTypeId = $(this).val();
        var pmql = 0;
        var pcost = 0;
        var projectedStageValue = 0;
        txtCampaignValue = $("#txtCampaign").val();
        txtProgramValue = $("#txtProgram").val();
        txtTacticValue = $("#txtTacticTitle").val();
        txtDescriptionValue = $("#Description").val();
        document.getElementById("txtCampaign").value = htmlEncode($('#txtCampaign').val());
        document.getElementById("txtProgram").value = htmlEncode($('#txtProgram').val());
        document.getElementById("hdnDescription").value = htmlEncode($('#Description').val());
        document.getElementById("hdnPlanTacticTitle").value = htmlEncode($('#txtTacticTitle').val());

        if (tacticTypeId != '') {
            if (parseInt($('#hdnPrevTacticTypeId').val()) != parseInt($('#ddlTacticType').val())) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/LoadTacticTypeValue")',
                    data: { tacticTypeId: tacticTypeId },
                    success: function (data) {
                        pcost = data.revenue;
                        projectedStageValue = data.projectedStageValue;
                        $("#lblStageTitle").text(data.stageTitle);
                        $("#txtProjectedStageValue").attr("label", data.stageTitle)
                        $("#hdnStageId").val(data.stageId);
                        $("#txtProjectedStageValue").val(projectedStageValue);
                        GetConversionRate(projectedStageValue, true);
                        $("#TacticCost").val(pcost);

                        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
                        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
                        addColumnMultiselectWeight(data.AdvanceStageTitles, data.AdvanceStageCode);
                        if (data.IsDeployedToIntegration) {
                            $("#t_integration_status").val("Synced to integration");
                            $("#t_integration_status").addClass("icon-check-blue");
                            $("#t_integration_status").removeClass("icon-check-gray");
                            $("#hdnIsDeployedToIntegration").val(true);
                        }
                        else {
                            $("#t_integration_status").val("Not synced to integration");
                            $("#t_integration_status").addClass("icon-check-gray");
                            $("#t_integration_status").removeClass("icon-check-blue");
                            $("#hdnIsDeployedToIntegration").val(false);
                        }
                        $('#hdnPrevTacticTypeId').val($('#ddlTacticType').val());
                        $("#txtCampaign").val(txtCampaignValue);
                        $("#txtProgram").val(txtProgramValue);
                        $("#txtTacticTitle").val(txtTacticValue);
                        $("#Description").val(txtDescriptionValue);
                    }
                });
            }
        }
        else {
            $("#txtProjectedStageValue").val(projectedStageValue);
            $("#txtmql").val(pmql);
            $("#txtRevenue").val('0');

            $("#TacticCost").val('0');
            $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
            $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
            $("#lblStageTitle").text("Stage");
            $("#hdnStageId").val("0");
            var newRemainingBudget = parseInt($("#hdnTotalPlanBudget").val());
            $('#hdnPrevTacticTypeId').val('0');
        }

        $('#ddlTacticType').next().find('.sbSelector').focus();
    });

    function FormatRemainingBudget() {
        if (parseInt(ReplaceCC($("#txtRemainingBudget").val())) < 0) {
            $("#txtRemainingBudget").addClass('error-text');
        }
        else {
            $("#txtRemainingBudget").removeClass('error-text');
        }
    }

    var txtCampaignValue = '';
    var txtProgramValue = '';
    var txtTacticValue = '';
    var txtDescriptionValue = '';

    $("#txtProjectedStageValue").focusout(function () {
        txtCampaignValue = $("#txtCampaign").val();
        txtProgramValue = $("#txtProgram").val();
        txtTacticValue = $("#txtTacticTitle").val();
        txtDescriptionValue = $("#Description").val();

        document.getElementById("txtCampaign").value = htmlEncode($('#txtCampaign').val());
        document.getElementById("txtProgram").value = htmlEncode($('#txtProgram').val());
        document.getElementById("hdnDescription").value = htmlEncode($('#Description').val());
        document.getElementById("hdnPlanTacticTitle").value = htmlEncode($('#txtTacticTitle').val());
        var projectedStageValue = ReplaceCC($("#txtProjectedStageValue").val());
        $("#txtProjectedStageValue").val(ReplaceCC($("#txtProjectedStageValue").val()));
        GetConversionRate(projectedStageValue, false);
        $("#txtProjectedStageValue").val(FormatCommas($("#txtProjectedStageValue").val(), false));
    });

    var isAssortment = true;
    var mqlConversion = 0;
    function GetConversionRate(projectedStageValue, isTacticTypeChange) {
        if ($('#ddlTacticType').val() != '') {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/CalculateMQL")',
                    data: $("form").serialize() + '&projectedStageValue=' + projectedStageValue + '&RedirectType=' + isAssortment + '&isTacticTypeChange=' + isTacticTypeChange,
                    success: function (data) {
                        if (data.mql == 'N/A') {
                            $("#txtmql").val(data.mql);
                            $("#txtmql").attr("title", data.mql);
                            $("#txtmql").removeClass('priceValue');
                        }
                        else {
                            mqlConversion = data.mql;
                            var mqlValue = FormatCommas(mqlConversion.toString(), false);
                            $("#txtmql").val(mqlValue);
                            $("#txtmql").attr("title", mqlValue);
                        }

                        $("#txtRevenue").val('$' + number_format(data.revenue.toString(), 0, 0, ','));
                        $("#txtRevenue").attr("title", $("#txtRevenue").val());

                        $("#txtCampaign").val(txtCampaignValue);
                        $("#txtProgram").val(txtProgramValue);
                        $("#txtTacticTitle").val(txtTacticValue);
                        $("#Description").val(txtDescriptionValue);
                    }
                });
            }
        }

    /* Start - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 */
    var tacticId = $('#hdnPlanTacticId').val();
    if (tacticId != '' && parseInt(tacticId) > 0) {
        $('#VerticalId').change(function () {
            fillOwnerList();
        });
        $('#GeographyId').change(function () {
            fillOwnerList();
        });
    }

    function fillOwnerList()
    {
        var uId = $(window).attr('name');
        var businessUnitId = $('#hdnBusinessUnitId').val();
        var geographyId = $('#GeographyId').val();
        var verticalId = $('#VerticalId').val();
        $.ajax({
            type: 'GET',
            cache: false,
            url: '@Url.Content("~/Inspect/fillOwner/")',
            data: { BusinessUnitId: businessUnitId, GeographyId: geographyId, VerticalId: verticalId, UserId: uId },
            success: function (data) {
                if (data.returnURL != 'undefined' && data.returnURL == '#') {
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }
                else {
                    if (data != null) {
                        if(data.isSuccess)
                        {
                            var preservedOwner = $("#ddlOwner").val();
                            $("#ddlOwner").empty();
                            $("#ddlOwner").append("<option value='0'>Please Select</option>");
                            $.each(data.lstOwner, function (index, optionData) {
                                $("#ddlOwner").append("<option value='" + optionData.UserId + "'>" + optionData.DisplayName + "</option>");
                            });
                            $('#ddlOwner').val(preservedOwner);
                            $('#ddlOwner').multiselect("refresh");
                        }
                    }
                }
            }
        });
    }

    $('.sbHolder').click(function () {
        $('#multipleselect_ddlOwner').css('display', 'none');
    });
    /* End - Added by Sohel Pathan on 18/11/2014 for PL ticket #708 */
    function addColumnMultiselectWeight(stageTitles, stageCodes) {
       
        var arrStageTitles = stageTitles.split(',');
        var arrStageCode = stageCodes.split(',');
        if (arrStageTitles.length > 0) {
            $(".table_drpdwn").each(function () {
                var j = 2;
                while (j > 0) {
                    if ($(this).find('thead tr').find('td').eq(j).text() != 'CW(%)') {
                        $(this).find('thead tr').find('td').eq(j).remove();
                        $(this).find('tbody tr').each(function () {
                            $(this).find('td').eq(j).remove();
                        });
                        //j++;
                    }
                    else {
                        j = 0;
                    }
                }
            });
        }
        for (var i = 0; i < arrStageTitles.length; i++) {
            $(".table_drpdwn").each(function () {
                var rowStyle = "display: none;";
                
                if ($(this).find('.advance_a').text() != 'Advanced Attribution >') {
                     rowStyle = "display: table-cell;";
                }
                $(this).find('thead tr').find('td').eq(i + 1).after('<td class="sus_header" scope="col" style="'+rowStyle+'" code="' + arrStageCode[i]+ '">' + arrStageTitles[i] + '(%)</td>');
                $(this).find('tbody tr').each(function () {
                    var optionId = $(this).find('td').eq(0).find('input').val();
                    $(this).find('td').eq(i + 1).after('<td class="first_hide" style="' + rowStyle + '"><input type="text" maxlength="3" name="textfield4" id="' + optionId + '_' + arrStageCode[i] + '"></td>')
                    });
            });
        }
        $('.dropdown_new_btn').each(function () {
            $(this).multiselectWeight('refresh');
        });
    }
    function autoGeneratedmultiselectWaightage() {
        var isError = [];
        $(".table_drpdwn").each(function () {
            if ($(this).find('.advance_a:first').text() == 'Advanced Attribution >') {
                var stageCode = 'weight';
                var waightage = 0;
                $(this).find('input:checked').each(function () {
                    var optionId = $(this).val();
                    if (typeof $('#' + optionId + '_' + stageCode).val() != 'undefined' && $('#' + optionId + '_' + stageCode).val() != '') {
                        waightage += parseInt($('#' + optionId + '_' + stageCode).val());
                    }
                });
                if (waightage != 100 && waightage > 0) {
                    isError.push($(this).parents(".dropdown-wrapper").parents().eq(1).find('.ellipsis-left').attr('title').toString());
                }
                else if (waightage == 0) {
                    var checkedCount = $(this).find('input:checked').length;
                    var residual = 100 % checkedCount;
                    var inputValue = 100 / checkedCount;
                    $(this).find('input:checked').each(function () {
                        var optionId = $(this).val();
                        $('#' + optionId + '_' + stageCode).val(parseInt(inputValue).toString());
                    });
                    if (residual != 0) {
                        $(this).find('input:checked:last').each(function () {
                            var optionId = $(this).val();
                            $('#' + optionId + '_' + stageCode).val(parseInt(inputValue + residual).toString());
                        });
                    }
                }
            }
            else {
                var arrStageCode = [];
                $(this).find('.sus_header,.cw_header,.revenue_header,.cost_header').each(function () {
                    arrStageCode.push({
                        s_code:$(this).attr('code').toString()
                    });
                });
                for (var i = 0; i < arrStageCode.length; i++) {
                    var stageCode = arrStageCode[i].s_code;
                    var waightage = 0;
                    $(this).find('input:checked').each(function () {
                        var optionId = $(this).val();
                        if (typeof $('#' + optionId + '_' + stageCode).val() != 'undefined' && $('#' + optionId + '_' + stageCode).val() != '') {
                            waightage += parseInt($('#' + optionId + '_' + stageCode).val());
                        }
                    });
                    if (waightage != 100 && waightage > 0) {
                        var labelTitle = $(this).parents(".dropdown-wrapper").parents().eq(1).find('.ellipsis-left').attr('title').toString();
                        if (isError.indexOf(labelTitle) <= -1) {
                            isError.push(labelTitle);
                        }
                    }
                    else if (waightage == 0) {
                        var checkedCount = $(this).find('input:checked').length;
                        var residual = 100 % checkedCount;
                        var inputValue = 100 / checkedCount;
                        $(this).find('input:checked').each(function () {
                            var optionId = $(this).val();
                            $('#' + optionId + '_' + stageCode).val(parseInt(inputValue).toString());
                        });
                        if (residual != 0) {
                            $(this).find('input:checked:last').each(function () {
                                var optionId = $(this).val();
                                $('#' + optionId + '_' + stageCode).val(parseInt(inputValue + residual).toString());
                            });
                        }
                    }
                }
            }
            
        });
        return isError;
    };
</script>
