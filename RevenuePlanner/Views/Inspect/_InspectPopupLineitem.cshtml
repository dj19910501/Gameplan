@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
    var RedirectType = (string)ViewBag.RedirectType;
    var inspectMode = ViewBag.InspectMode;
    var RedirectTypeMode = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString() ? true : false) : false);
    bool isIndex = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Index.ToString() ? true : false) : true);
    var CalledFromBudget = (!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Budgeting.ToString() ? "Budegting" : "") : "");
    //// Flag to indicate unavailability of web service.
    //// Added By: Maninder Singh Wadhva on 11/24/2014.
    //// Ticket: 942 Exception handeling in Gameplan.
    bool isServiceUnavailable = Convert.ToBoolean(ViewBag.IsServiceUnavailable);
    
}
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@*<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>*@
@{
    var planLineItemId = 0;
    string colorCode = "C6EBF3";
    string tacticId = Convert.ToString(ViewBag.tacticId);
    var campaignId = Convert.ToString(ViewBag.CampaignId);
    var planProgrameId = Convert.ToString(ViewBag.PlanProgrameId);

    string lineitemTitle = "";
    bool IsPlanEditable = false;
    bool IsOtherLineItem = false;

    if (ViewBag.IsOtherLineItem != null)
    {
        IsOtherLineItem = (bool)ViewBag.IsOtherLineItem;
    }

    if (ViewBag.IsPlanEditable != null)
    {
        IsPlanEditable = (bool)ViewBag.IsPlanEditable;
    }
    if (ViewBag.LineItemId != null)
    {
        planLineItemId = ViewBag.LineItemId;
        lineitemTitle = ViewBag.LineItemTitle;
    }
    bool IsPlanCreateAll = false;
    if (ViewBag.IsPlanCreateAll != null)
    {
        IsPlanCreateAll = (bool)ViewBag.IsPlanCreateAll;
    }
    bool IsTacticActualsAddEditAuthorized = (bool)ViewBag.IsTacticActualsAddEditAuthorized;
}

@Html.Hidden("hdnPlanLineItemID", planLineItemId, new { id = "hdnPlanLineItemID" })
@Html.Hidden("hdnLineitemOpt", "View", new { id = "hdnLineitemOpt" })
@Html.Hidden("hdnRedirectType", RedirectType, new { id = "hdnRedirectType" })
<style type="text/css">
    #successMessageViewCampaign, #errorMessageEditCampaign
    {
        margin-bottom: 15px !important;
    }
</style>

<div id="successMessageViewLineItem" class="alert hide alert-success messagewidth">
    <a class="close">×</a>
    <span id="spanSuccessMessageViewLineitem"></span>
</div>

<div id="errorMessageEditLineitem" class="alert alert-error hide messagewidth">
    <a class="close">×</a>
    <strong>Error!</strong>
    <span id="spanMessageEditLineitem"></span>
</div>

@*<form>
    <div class="modal-popup-title">
        <span class="icon-flag bg-purple" style="background-color:#@colorCode !important;"></span>
        <h2 class="title-simple source-sans-prolight">
            @if (lineitemTitle != string.Empty)
            {
                <span>
                    <span id="lblLineitemTitle" class="tipsyclassTitle" title="@Html.Raw(lineitemTitle)" >@Html.Raw(lineitemTitle)</span>
                    @if (IsPlanEditable)
                    {
                        if(!IsOtherLineItem){  
                        <div class="delete-btn-tab" style="float: right;" id="divDeleteProgram">
                            <button class="delete-btn-gray" id="deleteLineItem" type="button">Delete</button>
                        </div>
                        }
                    }
                    
                    @if(!IsOtherLineItem){
                         <div style="float: right; position: relative;">
                            <span class="add-icon-white btn-blue btn-large" style="display: block; cursor: pointer; margin-right: 10px;" id="AddForm"></span>
                            <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px;z-index:1;" id="popupLineitem">
                                <ul style="margin: 0;">
                                    <li class="new-prog" id="NewLineItem">New Line Item</li>
                                    <li class="copy-camp" id="CloneLineItem">Copy Line Item</li>
                                </ul>
                            </div>
                        </div>
                    }

                    @if (IsPlanEditable)
                    {
                        <a class="edit-icon-white btn-blue btn-large" href="#" id="btnEditlineItem" style="margin-right: 15px;"></a>
                    }
                </span> 
            }
            @Html.TextBox("txtTitle", HttpUtility.HtmlDecode(lineitemTitle), new { placeholder = "Line Item name goes here", require = "true", maxlength = "255", @class = "span12 input-small light-blue-background", @style = "width: 95%; height: 28px;display:none;font-family:'source_sans_prolight', Arial, 'sans-serif';font-size:27px;color:#4d4d4d;line-height: normal;", title = lineitemTitle, id = "txtTitle" })
            @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle" })
        </h2>
    </div>
</form>*@

<div class="headerfix-wraper">
    @*Modified for Design changes ticket #1318*@
    <div class="headefix">

        <h2 class="title-simple source-sans-prolight">
            @if (lineitemTitle != string.Empty)
            {
                <span>
                    @if (IsPlanEditable)
                    {
                        if (!IsOtherLineItem)
                        {  
                        <div class="delete-btn-tab" style="float: right;" id="divDeleteProgram">
                            <button class="delete-btn-gray" id="deleteLineItem" type="button">Delete</button>
                        </div>
                        }
                    }

                    @if (!IsOtherLineItem && IsPlanCreateAll)
                    {
                        <div style="float: right; position: relative;">
                            <span class="add-icon-white btn-blue btn-large" style="display: block; cursor: pointer; margin-right: 10px;" id="AddForm"></span>
                            <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 1;" id="popupLineitem">
                                <ul style="margin: 0;">
                                    <li class="new-prog" id="NewLineItem">New Line Item</li>
                                    <li class="copy-camp" id="CloneLineItem">Copy Line Item</li>
                                </ul>
                            </div>
                        </div>
                    }

                    @if (IsPlanEditable)
                    {
                        <span class="edit-icon-white btn-blue btn-large" href="#" id="btnEditlineItem" style="margin-right: 15px; cursor: pointer;"></span>
                    }
                </span> 
            }

            @if (string.IsNullOrEmpty(lineitemTitle))
            {
                <span class="Save-icon-white btn-blue btn-large" href="#" id="btnEditlineItem" style="margin-right: 15px; cursor: pointer;"></span>
               
            }

            <buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>

        </h2>

    </div>
</div>
<div class="pop-body-wraper">
    <div class="PopupDiv">
        <form>
            <div class="modal-popup-title">
                <span class="icon-flag bg-purple" style="background-color:#@colorCode !important;"></span>
                <h2 class="title-simple source-sans-prolight">
                    <span>
                        <span id="lblLineitemTitle" class="tipsyclassTitle" title="@Html.Raw(lineitemTitle)" >@Html.Raw(lineitemTitle)</span>
                    </span>
                    @Html.TextBox("txtTitle", HttpUtility.HtmlDecode(lineitemTitle), new { placeholder = "Line Item name goes here", require = "true", maxlength = "255", @class = "span12 input-small light-blue-background", @style = "width: 95%; height: 28px;display:none;font-family:'source_sans_prolight', Arial, 'sans-serif';font-size:27px;color:#4d4d4d;line-height: normal;", title = lineitemTitle, id = "txtTitle" })
                    @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle" })
                </h2>
            </div>
        </form>

        <div>
            <ul class="nav nav-tabs new-margin no-position" id="InspectTab">
                <li class="active pull-left" id="liSetup">
                    <a>Setup</a>
                </li>

                @if (IsTacticActualsAddEditAuthorized)
                {
                    <li class="pull-left" id="liActuals">
                        <a>Actuals</a>
                    </li>
                }
                @if (!IsOtherLineItem)
                {
                    if (!Sessions.IsBudgetShow)
                    {
                    <li class="pull-left" id="liBudget">
                        <a>Budget</a>
                    </li>
                    }
                }
            </ul>
            <div id="divTab">
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";

    var TabBudget = "Budget";
    var divTab = "#divTab";
    var TabActual = "Actuals";
    var tabtext = "";
    var inspectMode = '@inspectMode';
    var PlanLineItemId = $("#hdnPlanLineItemID").val();
    //// Function to redirect to login page on unavailability of web service.
    //// Added By: Maninder Singh Wadhva on 11/24/2014.
    //// Ticket: 942 Exception handeling in Gameplan.
    function redirectOnServiceUnavailibility() {
        if ('@Html.Raw(Json.Encode(isServiceUnavailable))' == 'true') {
         window.location = '@Url.Content(RevenuePlanner.Helpers.Common.RedirectOnServiceUnavailibilityPage)';
     }
 }

 $(document).ready(
  function () {
      //// Call function to redirect on service unavailibility.
      //// Added By: Maninder Singh Wadhva on 11/24/2014.
      //// Ticket: 942 Exception handeling in Gameplan.
      var modelHeight = $(window).height();
      var headerHeight = $('.headerfix-wraper').height();
      var bodyWrapperMaxHeight = modelHeight - headerHeight - 100;
      //$('.pop-body-wraper').css('height', '92%');
      redirectOnServiceUnavailibility();
      CloseIconClick();
      $("#btnEditlineItem").css("display", "block");
      $("#AddForm").css("display", "block");
      $("#divDeleteProgram").css("display", "block");
      NumberFormatterTipsyTitle(".tipsyclassTitle", 40);
      var InspectValue = $("#hdnInspectPopup").val();

      if (('@IsOtherLineItem'.toLowerCase().toString() == "true") && (InspectValue == "Budget")) {
             InspectValue = "Setup";
         }

         var planLineitemId = $("#hdnPlanLineItemID").val();

         // Call Remove Tabclass which will handle style of tabs
         RemoveTabClass();

         $("#li" + InspectValue).removeClass("pull-left");
         $("#li" + InspectValue).addClass("active pull-left");
         tabtext = ($("#li" + InspectValue).children('a').text());
         $('#div' + tabtext).css({ display: "block" });
         $("#liSetup,#liReview,#liBudget,#liActuals").on("click", function () {
             var activeTab = $("#InspectTab li.active a").text();
             tabtext = ($(this).children('a').text());
             var returnpara = SaveAllData(activeTab);   //Added By Komal Rawal 
             if (returnpara) {
                 $("#successMessageViewCampaign").slideUp(50);
                 $("#errorMessageEditCampaign").slideUp(50);
                 RemoveTabClass();
                 $(this).removeClass("pull-left");
                 $(this).addClass("active pull-left");
                 $("#errorMessage").css("display", "none");
                 $("#successMessage").css("display", "none");
                 loadReview(PlanLineItemId, tabtext);
             }
         });

         //Added By Komal Rawal 
         function SaveAllData(activeTab) {
             var LineitemOpt = $("#hdnLineitemOpt").val();
             if (LineitemOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                 if (activeTab == TabSetup) {
                     var ReturnParameter = SetupSaveLineitem();
                     if (ReturnParameter == false) {
                         return false;
                     }
                 }

                 else if (activeTab == TabBudget) {
                     var ReturnParameter = SaveLineitemBudget();
                     if (ReturnParameter == false) {
                         return false;
                     }
                 }
                 else if (activeTab == TabActual) {
                     //var ReturnParameter = SaveLineitemActual();
                     //if (ReturnParameter == false) {
                     //    return false;
                     //}
                     var hdnTacticStatus = $("#hdnParentTacticStatus").val();
                     var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                      var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                      var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                      if (typeof hdnTacticStatus != 'undefined' && (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus)) {
                          var ReturnParameter = SaveLineitemActual();
                      }
                      else {
                          var ReturnParameter = SaveTitle();
                      }
                      if (ReturnParameter == false) {
                          return false;
                      }
                  }


      }

      return true;
  }
         //End
         if (planLineitemId != '0') {
             loadReview(planLineitemId, tabtext);
         }
         else {
             // $("#liActuals ,#liBudget,#liSetup").unbind('click');
             loadAddSetup();
         }
         if ($('#btnEditlineItem').hasClass('edit-icon-white') && inspectMode == '@Enums.InspectPopupMode.Edit.ToString()') {
             $('#btnEditlineItem').removeClass('edit-icon-white');//Modified for #1318 
             $('#btnEditlineItem').addClass('Save-icon-white');
             $("#errorMessage").css("display", "none");
             $("#successMessage").css("display", "none");
             $("#txtTitle").removeClass("error");
             $('#hdnLineitemOpt').val('Edit');
             $('#txtTitle').css('display', 'block');
             $('#lblLineitemTitle').css('display', 'none');
         }


     });

     //Added By komal rawal for saving the Tactictitle in actual tab of Edit Mode
     function SaveTitle() {
         var returnparameter = false;
         var planLineitemId = $("#hdnPlanLineItemID").val();
         var _lineitemtitle = htmlEncode($('#txtTitle').val());
         //  var isotherlineitem = $("#hdnIsOtherLineItem").val();
       @* if (isotherlineitem.toLowerCase() == 'false') {
            if ($('#txtTitle').val().toString().toLowerCase().trim() == '@Common.DefaultLineItemTitle.ToLower()' && $('#lblLineitemTitle').css('display') != 'block') {
                    var errorMsg = "You can't use 'Other' as title.";
                    ShowError(errorMsg);
                    return false;
                }
            }*@
        var iserror = false;

        if (_lineitemtitle == '') {
            $('#txtTitle').addClass("error");
            iserror = true;
        }
        else {
            $('#txtTitle').removeClass("error");
        }

        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
            return false;
        }
        $.ajax({
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Inspect/SaveTitle/")',
            data: { title: _lineitemtitle, Id: planLineitemId, ActivePopup: "LineItem" },
            success: function (data) {
                if (!data.IsDuplicate) {
                    var requestedModule = $("#hdnRedirectType").val();
                    $('#lblLineitemTitle').text(_lineitemtitle);
                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.msg);
                    $("#errorMessage").css("display", "none");
                    RefreshCurrentTab(requestedModule, data.planCampaignID, data.planProgramID, data.planTacticID, 0, 0);
                    returnparameter = true
                }
                else {
                    ShowError(data.errormsg);
                    returnparameter = false;
                }
            }
        });
        return returnparameter;
    }
    //End

    //<--- End Document.ready event --->

    $("#NewLineItem").on("click", function () {
        loadInspectPopup(0, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", "Setup", "@Enums.InspectPopupMode.Add.ToString()", '@tacticId', '@RedirectType');
    });

    $("#btnEditlineItem").on("click", function () {
        isDataModified = true;
        var activeTab = $("#InspectTab li.active a").text();
        if ($('#btnEditlineItem').hasClass('edit-icon-white')) {
            $('#btnEditlineItem').removeClass('edit-icon-white');//Modified for #1318 by Komal Rawal
            $('#btnEditlineItem').addClass('Save-icon-white');
            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");
            $("#hdnLineitemOpt").val("Edit");
            var InspectValue = $("#hdnInspectPopup").val();
            var tabtext = ($("#li" + InspectValue).children('a').text());
            if (tabtext == "Setup") {
                url = '@Url.Content("~/Inspect/LoadEditSetupLineitem/")';
            $("#divTab").empty();
            $("#divTab").load(url + '?id=' + PlanLineItemId, function (response, status, xhr) {
                if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                    //// Call function to redirect on service unavailibility.
                    //// Added By: Maninder Singh Wadhva on 11/24/2014.
                    //// Ticket: 942 Exception handeling in Gameplan.
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
			          }
			      });
              }
              else if (tabtext == "Budget") {
                  url = '@Url.Content("~/Inspect/LoadLineItemBudgetAllocation/")';
                  $("#divTab").empty();
                  $("#divTab").load(url + '?id=' + PlanLineItemId);
              }
              else if (tabtext == "Actuals") {
                  //// Modified By: Arpita Soni on 1/17/2015.
                  //// Ticket: 1067 
                  var hdnTacticStatus = $("#hdnParentTacticStatus").val();
                  var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                  var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                  var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                  if ((hdnTacticStatus == null || hdnTacticStatus == '') || (hdnTacticStatus != Approvedstatus && hdnTacticStatus != InProgressstatus && hdnTacticStatus != Completestatus)) {
                      loadReview(PlanLineItemId, TabSetup);
                  }
                  else {
                      loadReview(PlanLineItemId, TabActual);
                  }
              }

            //  $("#btnEditlineItem").css("display", "none");
      $('#txtTitle').css('display', 'block');
      $('#lblLineitemTitle').css('display', 'none');
      $("#txtTitle").prop('readonly', false);
            //  $("#AddForm").css("display", "none");
            //  $("#divDeleteProgram").css("display", "none");
      $("#txtTitle").removeClass('error');
      return false;
  }
  else {
      if (activeTab == TabSetup) {
          var ReturnParameter = SetupSaveLineitem();
          if (ReturnParameter == false) {
              return false;
          }
          else {
              $("#hdnLineitemOpt").val("View");
              loadReview(PlanLineItemId, activeTab);
              $('#btnEditlineItem').removeClass('Save-icon-white');
              $('#btnEditlineItem').addClass('edit-icon-white');
              $('#txtTitle').css('display', 'none');
              $('#lblLineitemTitle').css('display', 'block');
              $("#txtTitle").prop('readonly', true);
          }
      }

      else if (activeTab == TabBudget) {
          var ReturnParameter = SaveLineitemBudget();
          if (ReturnParameter == false) {
              return false;
          }
          else {
              $("#hdnLineitemOpt").val("View");
              loadReview(PlanLineItemId, activeTab);
              $('#btnEditlineItem').removeClass('Save-icon-white');
              $('#btnEditlineItem').addClass('edit-icon-white');
              $('#txtTitle').css('display', 'none');
              $('#lblLineitemTitle').css('display', 'block');
              $("#txtTitle").prop('readonly', true);

          }
      }

      else if (activeTab == TabActual) {
          var hdnTacticStatus = $("#hdnParentTacticStatus").val();
          var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                if (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus) {
                    var ReturnParameter = SaveLineitemActual();
                }
                else {
                    var ReturnParameter = SaveTitle();
                }
                if (ReturnParameter == false) {
                    return false;
                }
                else {
                    $("#hdnLineitemOpt").val("View");
                    loadReview(PlanLineItemId, activeTab);
                    $('#btnEditlineItem').removeClass('Save-icon-white');
                    $('#btnEditlineItem').addClass('edit-icon-white');
                    $('#txtTitle').css('display', 'none');
                    $('#lblLineitemTitle').css('display', 'block');
                    $("#txtTitle").prop('readonly', true);

                }

            }

}
    });

function RemoveTabClass() {
    $('#InspectTab').children().each(function () {
        if ($(this).hasClass('active pull-left')) {
            $(this).removeClass("active pull-left");
            $(this).addClass("pull-left");
        }
    });
}

$('#AddForm').click(function () {
    if ($('#popupLineitem').css('display') == 'none') {
        $('#popupLineitem').css('display', 'block')
    }
    else {
        $('#popupLineitem').css('display', 'none')
    }
});

$(document).mouseup(function (e) {
    var popup = $('#popupLineitem');
    var button = $('#AddForm');
    if (!popup.is(e.target) && popup.has(e.target).length === 0 && popup.css('display') == 'block' && !button.is(e.target) && button.has(e.target).length === 0) {
        $('#popupLineitem').css('display', 'none');
    }
});

function loadReview(id, tabValue) {

    $("#hdnInspectPopup").val(tabValue);
    $.ajaxSetup({ cache: false });
    var url;

    var LineitemOpt = $("#hdnLineitemOpt").val();
    if (tabValue == TabSetup) {
        if (LineitemOpt == "Edit") {
            $('#txtTitle').css('display', 'block');
            $('#lblLineitemTitle').css('display', 'none');
            url = '@Url.Content("~/Inspect/LoadEditSetupLineitem/")';
            }
            else {
                url = '@Url.Content("~/Inspect/LoadSetupLineitem/")';
            }
        }

        if (tabValue == TabBudget) {
            if (LineitemOpt == "Edit") {
                $('#txtTitle').css('display', 'block');
                $('#lblLineitemTitle').css('display', 'none');
            }
            url = '@Url.Content("~/Inspect/LoadLineItemBudgetAllocation/")';
        }
        if (tabValue == TabActual) {
            if (LineitemOpt == "Edit") {
                $('#txtTitle').css('display', 'block');
                $('#lblLineitemTitle').css('display', 'none');
            }
            url = '@Url.Content("~/Inspect/LoadActualsLineItem/")';
        }

        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });
        $("#divTab").empty();
        $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    }
    // Close event for Error Message & Success Message Close button 
    $(".alert").find(".close").on("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
        $(this).closest(".alert").css("display", "none");
    });

    $('#CloneLineItem').click(function () {
        isDataModified = true;
        var idPlanProgram = $("#hdnPlanLineItemID").val();
        var Title = $("#lblLineitemTitle").html();
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Inspect/Clone")',
            data: {
                CloneType: '@Enums.DuplicationModule.LineItem',
                Id: idPlanProgram,
                title: Title,
                CalledFromBudget: '@CalledFromBudget',
                RequsetedModule: '@RedirectType'
            },
            success: function (data) {
                if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else if (data.IsSuccess) {
                    if (data.opt == '@Enums.InspectPopupRequestedModules.Index.ToString()') {
                        SaveMessageOnParent(data.msg);
                        $('body').removeClass('bodyOverflow');
                    }
                    else {

                        var currentTab = "Setup";

                        if ('@RedirectType' == "@Enums.InspectPopupRequestedModules.Budgeting.ToString()") {
                            currentTab = "Budget";
                        }

                        var lineItemId = data.Id;
                        var expandplanLineItemId = data.expand;
                        var planCampaignId = '@campaignId';
                        var planProgramId = '@planProgrameId';
                        var planTacticId = '@tacticId';
                        loadInspectPopup(lineItemId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '@RedirectType');

                        if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == '@RedirectType') {
                            $("#hdnBudgetingExpandId").val(expandplanLineItemId);
                            $("#hdnBudgetingIsSave").val("true");
                        }
                        else {
                            RefreshCurrentTab('@RedirectType', planCampaignId, planProgramId, planTacticId);
                        }

                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                        $("#errorMessage").css("display", "none");
                        return;
                    }
                }
                else {
                    $("#successMessageViewProgram").slideUp(50);
                    $("#errorMessageEditProgram").slideDown(400);
                    $("#spanMessageEditProgram").empty();
                    $("#spanMessageEditProgram").val(data.msg);
                    return false;
                }
            }
        });
    });

function SaveMessageOnParent(value) {
    $("#modal-container-186470").modal('hide');
    $("#errorMessageDuplicatePlan").slideUp(50);
    $("#successMessageDuplicatePlan").slideDown(400);
    $("#cSuccessDuplicatePlan").empty();
    $("#cSuccessDuplicatePlan").text(htmlDecode(value));
    $("#successMessageDuplicatePlan").removeClass("message-position");
    $("#successMessageDuplicatePlan").addClass("successMessage-InspectPopUpSections");
    RefreshCurrentTab();
}

$("#deleteLineItem").click(function () {
    if (confirm('@Common.objCached.ConfirmationForDeleteLineItem')) {
        isDataModified = true;
        var ProgramId = $("#hdnPlanLineItemID").val();
        var uId = $(window).attr('name');
        var arrClosedTaskString = null;
        if (typeof arrClosedTask != 'undefined') {
            arrClosedTaskString = arrClosedTask.toString();
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Inspect/DeleteSection")',
                data: {
                    ID: ProgramId
                    , DeleteType: '@Enums.DuplicationModule.LineItem'
                     , UserId: uId
                     , closedTask: arrClosedTaskString
                     , CalledFromBudget: '@CalledFromBudget'
                        , IsIndex: '@isIndex'
                        , RedirectType: '@RedirectTypeMode'
                },
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.IsSuccess && data.opt != 'undefined') {
                            if (data.opt == '@Enums.InspectPopupRequestedModules.Index.ToString()') {
                                 SaveMessageOnParent(data.msg);
                                 $('body').removeClass('bodyOverflow');
                             }
                             else {
                                 if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == data.opt) {
                                     $("#hdnBudgetingExpandId").val(data.expand);
                                     $("#hdnBudgetingIsSave").val("true");
                                     $("#hdnBudgetingIsDelete").val("true");
                                     $(".close-x-big-icon").trigger("click");
                                 }
                                 else {
                                     window.location.href = data.redirect;
                                 }

                                 return;
                             }
                         }
                         else {
                             $("#successMessageViewProgram").slideUp(50);
                             $("#errorMessageEditProgram").slideDown(400);
                             $("#spanMessageEditProgram").empty();
                             $("#spanMessageEditProgram").val(data.msg);
                             return false;
                         }
                     }
                }
            });
         }
});
     function loadAddSetup() {
         $("#errorMessage").css("display", "none");
         $("#successMessage").css("display", "none");
         $("#hdnLineitemOpt").val("Edit");
         var InspectValue = $("#hdnInspectPopup").val();
         var tabtext = ($("#li" + InspectValue).children('a').text());
         var tacticId = '@tacticId';
        if (tabtext == "Setup") {
            url = '@Url.Content("~/Inspect/createLineitem/")';
            $("#divTab").empty();
            $("#divTab").load(url + '?id=' + tacticId);
        }
        //$("#btnEditlineItem").css("display", "none");
        $("#AddForm").css("display", "none");
        $('#txtTitle').css('display', 'block');
        $('#txtTitle').text('');
        $('#lblLineitemTitle').css('display', 'none');
        return false;
    }

</script>

