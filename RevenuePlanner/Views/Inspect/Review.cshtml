@using RevenuePlanner.Helpers
@model RevenuePlanner.Models.InspectModel
@{
    var tacticReview = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    var deployStatus = tacticReview.IsDeployedToIntegration == true ? "Sync To Integration" : "Don't Sync To Integration";
    deployStatus = tacticReview.IsIntegrationInstanceExist == "N/A" ? "Plan not Integrated" : deployStatus; ////Taken from code modified by Mitesh Vaishnav for PL ticket #690 Model Interface - Integration - Brad Gray 09 Jan 2016 PL#1872
    bool ShowMQL = (bool)ViewBag.ShowMQL;
    bool IsDeployToIntegrationVisible = (bool)ViewBag.IsDeployToIntegrationVisible;
    ////Added by Mitesh Vaishnav for PL ticket #690 Model Interface - Integration
    string IntegrationStatus = tacticReview.IsIntegrationInstanceExist;
    if (tacticReview.IsIntegrationInstanceExist == "Yes" && !tacticReview.IsDeployedToIntegration)
    {
        IntegrationStatus = "No";
    }
    var INQLastSync = ViewBag.INQLastSync;
    var CWLastSync = ViewBag.CWLastSync;
    var MQLLastSync = ViewBag.MQLLastSync;
    var TacticLastSync = ViewBag.TacticLastSync;
    var tacticIntegrationInstance = ViewBag.TacticIntegrationInstance;
    var tacticEloquaInstance = ViewBag.TacticEloquaInstance;
    var tacticIntegrationProjMgmtInstance = ViewBag.TacticIntegrationProjMgmtInstance;
    List<RevenuePlanner.Models.CustomFieldReviewTab> topThreeCustomFields = ViewBag.TopThreeCustomFields;
    bool IsSyncSF = (bool)ViewBag.IsSyncSF;             // Get IsSyncSalesforce flag
    bool IsSyncEloqua = (bool)ViewBag.IsSyncEloqua;     // Get IsSyncEloqua flag
    bool IsSyncWorkFront = (bool)ViewBag.IsSyncWorkFront; //Get IsSyncWorkFront flag - true if the tactic is integrated
}


<style type="text/css">
     @@media screen and (-webkit-min-device-pixel-ratio:0) {
    #dp_start .datepicker{
        top: 32px !important;
        left:auto !important;
        min-width:220px;
    }
    #dp_end .datepicker{
        top: 32px !important;
        left:auto !important;
        min-width:220px;
    }
   }
    #btnCancel
    {
        color: gray;
    }
     .stage-title {
         width: auto;
         float: left;
     }
    #divTab .simpleSelectBox .sbHolder {
            background: url(@Url.Content("~/Content/images/button-arrow.png")) no-repeat scroll right 8px center #dff0f8 !important;
            box-shadow: 1px -8px 13px #dff0f8 inset, 0 1px 2px #ededed;
            margin-bottom: 0;
            z-index: auto;
    }
    #divTab .ui-multiselect {
         background: none repeat scroll 0 0 #dff0f8 !important;
     }
    #divTab .sbToggle {
        border-top: 4px solid #6d6d6d !important;
    }
   /* #divTab .sbHolder {
        background-color: #dff0f8 !important;
        background-image:none;
     }*/
    #workFrontRequestOptions .ui-multiselect{min-width: 150px;}
    #multipleselect_WorkFrontRequestQueue, #multipleselect_WorkFrontRequestAssignee {
        left: -3px !important;
        top: 29px !important;
        min-width:205px !important;
    }
    #workFrontRequestOptions  #multipleselect_WorkFrontRequestAssignee.drop-up {
    bottom: 40px !important;
    padding: 0;
    top: auto !important;
}

  .toggle.integrationToggle, .toggle-on.integrationToggle, .toggle-off.integrationToggle { border-radius: 20px; }
  .toggle.integrationToggle .toggle-handle { border-radius: 20px; }
</style>

<script src="~/Scripts/js/bootstrap2-toggle.min.js"></script>
<link rel="stylesheet" href="~/Content/css/bootstrap2-toggle.min.css">

 <div class="row border-bottom-div">
    <div class="span5 width360" id="inspect-modal-right-div" style="width: 42% !important">
        <div style="padding-bottom: 16px; margin-bottom: 24px;" class="span5 width96 border-bottom-div">
            <div style="float: left; width: 48%; border-right: 1px solid #b2afaf">
                <div class="source-sans-prosemibold">Parent Campaign</div>
                <div>
                    <div id="campaign-title1" class="sub-head" title="@Html.Raw(tacticReview.CampaignTitle)">@Html.Raw(tacticReview.CampaignTitle)</div>
                </div>
            </div>
            <div style="float: right; width: 47%;">
                <div class="source-sans-prosemibold">Parent Program</div>
                <div>
                    <div id="program-title1" class="sub-head" title="@Html.Raw(tacticReview.ProgramTitle)">@Html.Raw(tacticReview.ProgramTitle)</div>
                </div>
            </div>
        </div>
        <div class="cf source-sans-proregular padding-top32" style="padding-top: 26px !important;">
            <div class="chart-gray pull-left size80x78 without-padding remove-box-shadow review-box">
                <div class="padding-top16"><span id="startDay-id" class="font_size30" style="line-height: 24px;">@tacticReview.StartDate.ToString("dd")</span></div>
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
                <span id="startMonth-id" class="font_size16">@tacticReview.StartDate.ToString("MMM")</span>
                <span id="startYear-id" class="font_size16">@tacticReview.StartDate.ToString("yyyy")</span> @*added by Rahul Shah on 24/11/2015 for PL #1764 to display year in review tab*@
                <div>Start</div>  @*Modified by Rahul Shah on 30/11/2015 for PL #1764 for observation 1*@
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
            </div>
            <div class="chart-gray pull-left size80x78 without-padding remove-box-shadow review-box">
                <div class="padding-top16"><span id="endDay-id" class="font_size30" style="line-height: 24px;">@tacticReview.EndDate.ToString("dd")</span></div>
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
                <span id="endMonth-id" class="font_size16">@tacticReview.EndDate.ToString("MMM")</span>
                <span id="endYear-id" class="font_size16">@tacticReview.EndDate.ToString("yyyy")</span> @*added by Rahul Shah on 24/11/2015 for PL #1764 to display year in review tab*@
                <div>End</div> @*Modified by Rahul Shah on 30/11/2015 for PL #1764 for observation 1*@
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
            </div>
            <div class="chart-gray pull-left size80x78 without-padding remove-box-shadow review-box">
                <div class="padding-top16"><span id="inq-id" class="font_size30 addFormatterActualNumber" style="line-height: 24px;">@tacticReview.ProjectedStageValue</span></div>
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
                <span class="font_size16" title="@tacticReview.StageTitle">@tacticReview.StageTitle</span>
                <div class="margin-top16" style="margin-top:20px !important;">
                    Goal
                    @if (ViewBag.IsDiffrentStageType == true)
                    {
                        <img id="diffrentStageIcon" src="~/Content/images/flag-icon.png" title="Please note that the stage information at plan level is different than that at the model level" />

                    }
                </div>
                @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
            </div>
            @if (ShowMQL)
            {
                <div class="chart-gray pull-left size80x78 without-padding remove-box-shadow review-box review-box-last">
                    <div class="padding-top16"><span id="mqls-id" class="font_size30 addFormatterActualNumber" style="line-height: 24px;">@tacticReview.MQLs</span></div>
                    @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
                    <span class="font_size16" title="@Html.LabelForMQL("MQL")">@Html.LabelForMQL("MQL")</span>
                    <div class="margin-top16" style="margin-top:20px !important;">Goal</div>
                    @* Modified By :- Sohel Pathan on 21/05/2014 for PL ticket #483. *@
                </div>
            }
        </div>
        <div class="cf margin-top40 width96 textalign-mozcenter review_wrapper" style="padding-bottom: 5px;">

            <div class="pull-left size65x38">
                <div class="owner"></div>
                <div>Owner</div>
                <span id="owner-id" class="blue-text bold remove-bottom-border" title="@tacticReview.Owner">@tacticReview.Owner</span>
            </div>
            <!--Moved Integration review to new div; Brad Gray PL#1462 8 Aug 2015-->
            @foreach (var item in topThreeCustomFields)
            {
                string marginLeft20 = "margin-left20";
                <div class="pull-left size65x38 @marginLeft20">
                    <div class="@item.Class"></div>
                    <span class="font14 customfield-review" title="@item.Name">@item.Name</span>
                    @if (item.Value != null)
                    {
                        <span class="blue-text bold" title="@item.Value">@item.Value</span>
                    }
                    else
                    {
                        <span class="blue-text bold" title="N/A">N/A</span>
                    }
                </div>
            }
        </div>
        @if (tacticReview.IsIntegrationInstanceExist == "Yes")
        {
        <!--Begin PL#1872 Brad Gray, 09 Jan 2016-->
        <div class="cf margin-top40 width96 textalign-mozcenter" style="padding-bottom: 5px;">
            <div class="span6 review_no_padding">
                <p class="margin-top-10 text_align_left">Deployed to Integration</p>
                   @{ if (tacticReview.IsDeployedToIntegration)
                    {
                        <input id="t_integration_status" name="t_status" type="text" class="icon-check-blue margin-top10" placeholder="Sync to integration" style="margin-top: 0px ! important; width:100%" readonly" />
                    }
                      else
                      {
                        <input id="t_integration_status" name="t_status" type="text" class="icon-check-gray margin-top10" placeholder="Don't sync to integration" style="margin-top: 0px ! important; width:100%" readonly" />
                      }
}
            </div>
        </div>
        }
    </div>

    <div class="span2 right-col-tab no_margin_top" id="inspect-modal-left-column2">
        <div class="inspect-bolder-label">Notes</div>
        <div id="divComment" class="chat-div" style="overflow: auto;height: 350px !important;">
            <div id="divInnerComment" class="comment-scroll-section all-height90">
                @foreach (var item in ViewBag.ReviewModel)
                {
                    <div class="post-div" style="clear: both; width: 100%; border-bottom: solid 1px #A8A8A8;">
                        <div style="float: left; width: 10%;">
                            <img class="avatar-user" src="@Url.Action("LoadUserImage", "User", new { id = item.CreatedBy })" alt="User avatar" />
                        </div>
                        <div style="float: left; width: 90%;">
                            <span class="commentedby-color">@item.CommentedBy</span>
                            <span class="comment-color">@Html.Raw(item.Comment)</span><br />
                            <span class="font_size10" style="clear: both;">@item.CommentDate.ToString("MMM dd") at @item.CommentDate.ToString("hh:mmtt")</span>
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                }
            </div>
            <div></div>
        </div>

        @if ((bool)ViewBag.IsCommentsViewEditAuthorized)    //Modified By komal Rawal for #1158
        {
            <div class="padding-top10" id="commentsection">
                @Html.TextArea("txtAreaComment", new { id = "txtAreaComment", @class = "new-comment light-blue-background" })
                <img id="btnComment" src="~/Content/images/chat-button.png" alt="" style="float: right;" />
            </div>
        }
        else
        {
            <div class="padding-top10">
                @Html.TextArea("txtAreaComment", new { id = "txtAreaComment", @class = "new-comment light-gray-background" })
                <img src="~/Content/images/chat-button-gray.png" alt="" style="float: right;" />
            </div>
        }

    </div>
</div>
  
    <!--Begin PL#1462 07 Brad Gray, Aug 2015, moved & modified 09 Jan 2016 by Brad Gray PL#1872-->
    <div id="integrationInfo" class="row width100 border-bottom-div margin-top10" style="display:table">
           
        <div class="width10 border-cf-right margin-top20 textalign-mozcenter vertical-aligntop" style="display:table-cell">
            <div class="size65x38 margin-top20">
                <div class="integration-review"></div>
                <div>
                    <label class="integrration_label_align" id="integration">Integration</label>
                </div>
                <span id="integration-id" class="blue-text bold" title="@IntegrationStatus">@IntegrationStatus</span>
            </div>

            @*Start -Added by Mitesh Vaishnav for PL ticket #690 Model Interface - Integration - Moved and updated Jan 2016 by Brad Gray PL#1872*@
            <div class="span6 blue-text bold" style="margin-bottom: 0px; width: 93%;margin-top:10px;">
                @if (tacticIntegrationInstance != null || tacticIntegrationProjMgmtInstance != null || tacticEloquaInstance != null)
                {
                    if (INQLastSync != null)
                    {
                        <span class="pull-left" style="font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; font-size: 11px;">@Html.LabelForINQ("INQ") synced on @INQLastSync.ToString("MM/dd/yyyy ") at @INQLastSync.ToString("hh:mm tt").ToLower() </span>
                        <br />
                    }
                    if (MQLLastSync != null)
                    {
                        <span class="pull-left" style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:11px;">@Html.LabelForMQL("MQL") synced on @MQLLastSync.ToString("MM/dd/yyyy ") at @MQLLastSync.ToString("hh:mm tt").ToLower()</span>
                        <br />
                    }
                    if (CWLastSync != null)
                    {
                        <span class="pull-left" style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:11px;">@Html.LabelForCW("CW") synced on @CWLastSync.ToString("MM/dd/yyyy ") at  @CWLastSync.ToString("hh:mm tt").ToLower()</span>
                        <br />
                    }
                    if (TacticLastSync != null)
                    {
                        <span class="pull-left" style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:11px;">Last synced on @TacticLastSync.ToString("MM/dd/yyyy ") at  @TacticLastSync.ToString("hh:mm tt").ToLower()</span>
                    }
                }
                else
                {
                    <span style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:11px;">Tactic not synced</span>
                }
                @*End -Added by Mitesh Vaishnav for PL ticket #690 Model Interface - Integration*@
            </div>

        </div>

        <div id="integrationSettings" class="width100">
            <!--Modified 09 Jan 2016 by Brad Gray PL#1872 to allow changes per integration-->
            @{
                int intgrtnCnt = 0,cntr=0;
                string clsBottomBorderDiv = "border-bottom-div";
                intgrtnCnt = ((Dictionary<string, string>)ViewBag.IntegrationTypeLinks).Count;
                foreach (var item in ViewBag.IntegrationTypeLinks)
                {
                    cntr += 1;
                    if (cntr == intgrtnCnt)
                    {
                        clsBottomBorderDiv = string.Empty;
                    }
                    if (item.Key == Enums.IntegrationType.Eloqua.ToString())
                    {
                          <div class="span12 margin-left20 margin-top20 integration-SF-Eloqua-WF @clsBottomBorderDiv" integrationType="@item.Key" style="width:98%"> 
                            <div class="span2 pull-left integration-review-imglink margin-right20">
                                <a href=@item.Value onclick="window.open(this.href); return false;">
                                    <div class="link_popup pull-right margin-bottom10"></div>
                                    <div class="eloqua-img margin-top18" style="margin-left:10px"></div>
                                </a>
                            </div>
                            <div class="span1 margin-top16">
                                <input id="eloquaIntegrationToggle" type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-style="integrationToggle">
                            </div>
                          </div>
                    }
                    else if (item.Key == Enums.IntegrationType.Salesforce.ToString())
                    {
                        <div class="span12 margin-left20 margin-top20 integration-SF-Eloqua-WF @clsBottomBorderDiv" integrationtype="@item.Key" style="width:98%">
                            <div class="span2 pull-left integration-review-imglink margin-right20">
                                <a href=@item.Value onclick="window.open(this.href); return false;">
                                    <div class="link_popup pull-right margin-bottom10"></div>
                                    <div class="salesforce-img margin-top10"></div>
                                </a>
                            </div>
                            <div class="span1 margin-top16">
                                <input id="salesforceIntegrationToggle" type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-style="integrationToggle" integrationtype="@item.Key">
                            </div>
                        </div>
                    }
                    else if (item.Key == Enums.IntegrationType.WorkFront.ToString())
                    {
                        <div id="workFrontSection" class="span12 margin-left20 integration-SF-Eloqua-WF margin-top20" integrationtype="@item.Key" style="width:98%">
                            <div class="span2 pull-left integration-review-imglink margin-right20">
                                <a href=@item.Value onclick="window.open(this.href); return false;">
                                    <div class="link_popup pull-right margin-bottom10"></div>
                                    <div class="workfront-img margin-top23"></div>
                                </a>
                            </div>

                            <div class="span1 margin-top16">
                                <input id="workfrontIntegrationToggle" class="btn-blue" type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-style="integrationToggle" onchange=showHideBlock('workFrontSettings')>
                            </div>

                            <div id="workFrontSettings">
                                <!--Begin PL#1872 09 Jan 2016, Brad Gray - UI changes to add WorkFront tactic settings-->
                                <div class="span2 float-left margin-left20" style="padding-bottom: 8px; margin-bottom: 8px">
                                    <label id="workfrontTacticType">Tactic Type</label>
                                    <label id="tacticTypeTitle" class="blue-text bold font-size12" title="@Html.Raw(tacticReview.TacticTypeTitle)">@Html.Raw(tacticReview.TacticTypeTitle)</label>
                                    <label id="workfrontTemplate" class="margin-top20">WorkFront Template</label>
                                    <label id="workfront_template" class="blue-text bold font-size12" title="@Html.Raw(ViewBag.WorkFront_Template) ">@Html.Raw(ViewBag.WorkFront_Template)</label>
                                </div>
                                <div class="span2" style="padding-left:40px">
                                    <label id="workfrontApprovalBehavior">Tactic Approval Behavior</label>
                                    <div class="radio " style="width:100%; float:left;margin-left:20px">
                                        <label class="font-size12">
                                            <input type="radio" name="optionsRadios" id="workFrontProjectOnApproval" value="Create a Project" checked="" onclick="toggleRequestOptions()">Create a Project
                                        </label>
                                    </div>
                                    <div class="radio" style="width:100%; float:left; margin-left:20px">
                                        <label class="font-size12">
                                            <input id="workFrontRequestOnApproval" type="radio" name="optionsRadios" value="Create a Request" onclick="toggleRequestOptions()">Create a Request
                                            <span class="fa fa-angle-double-right" style="margin-left:5px"></span>
                                        </label>
                                    </div>
                                </div>
                                <div id="workFrontRequestOptions" class="span3 margin-bottom20" style="padding-left: 20px;">
                                    <div class="cf form-group">
                                        @Html.Label("Request Queue")
                                        <span style="min-width: 100%; position: relative; display: block;">
                                            @Html.DropDownListFor(m=>m.WorkFrontRequestQueueId, new SelectList((System.Collections.IEnumerable)ViewBag.WorkFrontRequestQueueList, "Id", "RequestQueueName"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown light-blue-background ui-multiselect", @id = "WorkFrontRequestQueue", require = "true" })
                                        </span>
                                    </div>
                                    <div class="cf form-group">
                                        @Html.Label("Assigned To")
                                        <span style="min-width: 100%; position: relative; display: block;">
                                            @Html.DropDownListFor(m=>m.WorkFrontRequestAssignee, new SelectList((System.Collections.IEnumerable)ViewBag.WorkFrontUserList, "Id", "WorkFrontUserName"), "Please Select", new { @class = "ddlStyle resubmission editable-dropdown light-blue-background ui-multiselect", @id = "WorkFrontRequestAssignee", require = "true" })
                                        </span>
                                    </div>
                                </div><!--end workFrontRequestOptions div-->
                            </div><!--end workFrontSettings div-->
                        </div><!--end workFrontDispaly div-->
                            <!--End PL#1872 09 Jan 2016, Brad Gray - UI changes to add WorkFront tactic settings-->
                    }
                 }
              }
        </div> <!--end integrationSettings div-->

    </div> <!--end integrationInfo div-->
    <!--End PL#1462 07 Brad Gray, Aug 2015-->

<div class="cf pull-left margin-top10 margin-bottom20" style="width: 100%;">



            @{
                //Modified By Komal Rawal for #1375
                string Submit = "Submit for Approval";
                string Approve = "Approve";
                string Reject = "Decline";
                List<string> aryStatus = new List<string>();
                bool isVisibleStatus = true;
                bool isVisibleSyncButton = false;   // Display sync button only when Tactic status from "Approved, In-Progress or Completed".
                if (tacticReview.Status.Equals(RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Created.ToString()].ToString()))
                {
                    if ((bool)ViewBag.IsEditable)
                    {
                        aryStatus.Add(Submit);
                    }
                    else
                    {
                        isVisibleStatus = false;
                    }
                }
                else if (tacticReview.Status.Equals(RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Submitted.ToString()].ToString()))
                {
                    if ((bool)ViewBag.IsValidManagerUser && ViewBag.IsEditable)
                    {
                        aryStatus.Add(Approve);
                        aryStatus.Add(Reject);
                    }
                    else
                    {
                        isVisibleStatus = false;
                    }
                }
                else if (tacticReview.Status.Equals(RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()))
                {
                    if ((bool)ViewBag.IsValidManagerUser && ViewBag.IsEditable)
                    {
                        aryStatus.Add(Reject);
                    }
                    else
                    {
                        isVisibleStatus = false;
                    }
                    isVisibleSyncButton = true;
                }
                else if (tacticReview.Status.Equals(RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Decline.ToString()].ToString()))
                {
                    if ((bool)ViewBag.IsValidManagerUser && ViewBag.IsEditable)
                    {
                        if ((bool)ViewBag.IsValidOwner)
                        {

                            aryStatus.Add(Submit);
                        }
                        else
                        {
                            aryStatus.Add(Approve);
                        }
                    }
                    else
                    {
                        if ((bool)ViewBag.IsValidOwner && ViewBag.IsEditable)
                        {
                            aryStatus.Add(Submit);
                        }
                        else
                        {
                            isVisibleStatus = false;
                        }
                    }
                }
                else
                {
                    if ((bool)ViewBag.IsValidManagerUser && ViewBag.IsEditable)
                    {
                        aryStatus.Add(Reject);
                    }
                    else
                    {
                        isVisibleStatus = false;
                    }
                    isVisibleSyncButton = true;
                }

                /*
                  Begin PL#1462 07 Brad Gray, Aug 2015 * */

             


                /* --Remove Sync Button Brad Gray 07 Aug 2015 PL#1462
                * Left commented to be added back in after completion of PL#1468 */
                if (IsDeployToIntegrationVisible && isVisibleSyncButton && tacticReview.IsDeployedToIntegration)
                {
                    if ((bool)ViewBag.IsModelDeploy)
                    {
                <div id="divDeployToIntegration" class="margin-top23 margin-right10" style="float: left; display:none;">
                <div id="btn_sync_status" class="btn-group dropup">
                               <button id="btnSync" class="btn buttom-width resize-drop-button without-border-buttom displayinherit  btn-blue text-shadow-blue source-sans-proregular" style="width: 65px; border-radius: 4px;">
                                  <span class="flag-icon sync-icon-dropdown"></span>
                                  <span id="spanSyncStatus">Sync</span>
                              </button>

                               @*Below code commented by Viral kadiya to implement PL ticket #1468.*@
                              @* <button id="btnSync" class="btn buttom-width resize-drop-button without-border-buttom displayinherit  btn-blue text-shadow-blue source-sans-proregular" style="width: 65px;">
                        <span class="flag-icon sync-icon-dropdown"></span>
                        <span id="spanSyncStatus">
                            @if (tacticReview.IsDeployedToIntegration)
                            {
                                @Html.Raw("Sync")
                            }
                            else
                            {
                                @Html.Raw("Don't Sync") 
                            }

                        </span>
                    </button>
                               if (tacticReview.IsDeployedToIntegration)
                    {
                        @Html.Hidden("hdnSyncStatusValue", "Sync", new { id = "hdnSyncStatusValue" });
                    }
                    else
                    {
                        @Html.Hidden("hdnSyncStatusValue", "Don't Sync", new { id = "hdnSyncStatusValue" });
                    }
                    <button data-toggle="dropdown" class="btn dropdown-toggle height25 btn-blue displayinherit">
                        <span class="caret "></span>
                    </button>
                    <ul class="dropdown-menu " id="uldivSync">
                        <li>
                            <a id="aSync">Sync</a>
                        </li>
                        <li>
                            <a id="aNotSync">Don't Sync</a>
                        </li>
                               </ul>*@
                </div>
            </div> 
                    }
                }

                if (isVisibleStatus)
                {
                    int len = aryStatus.Count;
                    if (len > 0)
                    {
                        string firstStatus = aryStatus[0];
                
        <div class="margin-top23" style="float: left;">
            <div id="btn_change_status" class="btn-group dropup">
                <button id="btnApproved" class="btn buttom-width resize-drop-button without-border-buttom displayinherit  btn-blue text-shadow-blue source-sans-proregular" style="width: 125px;">
                    <span class="flag-icon approve-icon-dropdown"></span>
                    <span id="spanTactic">@firstStatus</span>
                </button>
                @Html.Hidden("hdnStatusValue", firstStatus, new { id = "hdnStatusValue" });
                    @if (len >= 2)
                    {
                        <button data-toggle="dropdown" class="btn dropdown-toggle height25 btn-blue displayinherit">
                            <span class="caret "></span>
                        </button>
                                              
                        <ul class="dropdown-menu " id="uldiv">
                            @foreach (string s in aryStatus)
                            {
                                <li>
                                    <a>@s</a>
                                </li>
                            }
                        </ul>
                        
                        <script type="text/javascript">
                            $("#btnApproved").css("width", "90px");
                        </script>
                    }
                    else
                    {
                        <script type="text/javascript">
                            $("#btnApproved").css("border-radius", "4px");
                        </script>
                    }

                </div>

            </div> 
                    }
                }
    }

    <div style="float: left; margin-left: 10px;" class="margin-top23">
        <button class="btn btn-blue text-shadow-blue source-sans-proregular  button-inspect-result-modal pull-right  resize-button btn-blue share-tactic-icon" id="BtnShareTactic" type="button" style="width: 80px;"><span class="flag-icon"></span>Share </button>
    </div>
</div>
<div id="DivPartialShareTactic">
</div>





<script type="text/javascript">
    var strViewMode = 'View';
    $(document).ready(function () {
        var el = document.getElementById('integrationInfo');
        if ($('#t_integration_status').hasClass("icon-check-blue")) {
            el.style.display = 'table';
        }
        else {
            el.style.display = 'none';
        }

        /* Add By Bhumika For dropdown menu*/
        $('#WorkFrontRequestQueue').multiselect({
            multiple: false,
            noneSelectedText: "Please Select",
            selectedList: 1,
            CustomName: '@Common.CustomTitle'
        }).multiselectfilter();

        var spanWorkFrontRequestQueue = $('#multipleselect_WorkFrontRequestQueue');
        $('#btnMultiselect_WorkFrontRequestQueue').after(spanWorkFrontRequestQueue); // to create dropdown menu under selectbox

        $('#WorkFrontRequestAssignee').multiselect({
            multiple: false,
            noneSelectedText: "Please Select",
            selectedList: 1,
            CustomName: '@Common.CustomTitle'
        }).multiselectfilter();

        var spanWorkFrontRequestAssignee = $('#multipleselect_WorkFrontRequestAssignee');
        $('#btnMultiselect_WorkFrontRequestAssignee').after(spanWorkFrontRequestAssignee); // to create dropdown menu under selectbox

        /* ==== */
        @* var DropdownTop = 0;
        $(".pop-body-wraper").scroll(function () {

            var scrollTop = $(this).scrollTop();
            $('#btnMultiselect_WorkFrontRequestAssignee').click(function () {
                //$(this).each(function () {
                 //alert('hi3');
                // get the top offset of the dropdown (distance from top of the page)
                var dropdown_div = $(this).next('#multipleselect_WorkFrontRequestAssignee');
                //var dropdown_height = dropdown_div.height();
                var topOffset = dropdown_div.offset().top;
                // calculate the dropdown offset relative to window position
                var relativeOffset = topOffset - scrollTop;
                // get the window height
                var windowHeight = $('.pop-body-wraper').height();
                // if the relative offset is greater than half the window height,
                // reverse the dropdown.
                if (relativeOffset > windowHeight / 2 ) {
                    //alert('5');
                    dropdown_div.addClass("drop-up");
                }
                else {
                    //alert('6');
                    dropdown_div.removeClass("drop-up");
                }
                scrollTop = 0;
            });

        });*@


        /* =======  End  =============  */

        //Start - Added by Viral Kadiya on 22nd Jan 2016 for Pl ticket #1919. -WF integration added 23 Jan 2016 by Brad Gray PL#1921
        var ele = $("#salesforceIntegrationToggle");


        var isDeployIntegration = '@IsDeployToIntegrationVisible';
        var isSyncSF = '@IsSyncSF';
        var isSyncEloqua = '@IsSyncEloqua';
        var isSyncWorkFront = '@IsSyncWorkFront';

        if (isDeployIntegration) {
            $('.integration-SF-Eloqua-WF').each(function (key, val) {
                //debugger;
                var _divToggle = $(this).find("div.integrationToggle");
                var _intgrtnType = $(this).attr('integrationType');
                if (_intgrtnType == '@Enums.IntegrationType.Eloqua.ToString()') {

                    if (isSyncEloqua.toLowerCase() == 'true') {
                        _divToggle.removeClass('btn-default off').addClass('btn-success');      // Set Eloqua toggle button to ON.
                    }
                    else {
                        _divToggle.removeClass('btn-success').addClass('btn-default off');      // Set Eloqua toggle button to OFF.
                    }
                }
                if (_intgrtnType == '@Enums.IntegrationType.Salesforce.ToString()') {
                    if (isSyncSF.toLowerCase() == 'true') {
                        _divToggle.removeClass('btn-default off').addClass('btn-success');      // Set Salesforce toggle button to ON.
                    }
                    else {
                        _divToggle.removeClass('btn-success').addClass('btn-default off');      // Set Salesforce toggle button to OFF.
                    }
                }
                if (_intgrtnType == '@Enums.IntegrationType.WorkFront.ToString()') {
                    var workFrontSettingsSection = document.getElementById('workFrontSettings');
                    if (isSyncWorkFront.toLowerCase() == 'true') {
                        _divToggle.removeClass('btn-default off').addClass('btn-success');      // Set WorkFront toggle button to ON.
                        workFrontSettingsSection.style.display = 'block';
                    }
                    else {
                        _divToggle.removeClass('btn-success').addClass('btn-default off');      // Set WorkFront toggle button to OFF.
                        workFrontSettingsSection.style.display = 'none';
                    }
                }
            });
        }
        else {
            $('.integration-SF-Eloqua-WF').each(function (key, val) {
                var _divToggle = $(this).find("div.integrationToggle");
                var _intgrtnType = $(this).attr('integrationType');
                _divToggle.removeClass('btn-success').addClass('btn-default off');      // Set all integration toggle button to OFF.
            });
        }
        //End - Added by Viral Kadiya on 22nd Jan 2016 for Pl ticket #1919.

        $("#t_integration_status").click(function () {
            showHide('integrationInfo');
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Don't sync to integration");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");
                $("#hdnIsDeployedToIntegration").val(false);
                $("#integration-id").text("No");             // Added by Viral Kadiya on 21st Jan 2016 for Pl ticket #1919.
            }
            else {
                $(this).val("Sync to integration");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
                $("#hdnIsDeployedToIntegration").val(true);
                $("#integration-id").text("Yes");            // Added by Viral Kadiya on 21st Jan 2016 for Pl ticket #1919.

            }
        });

        var isModelIntegratedWorkFront = '@ViewBag.IsModelIntegratedWorkFront';
        if ($("#t_integration_status").hasClass("icon-check-blue") && isModelIntegratedWorkFront == "True") //if false, elements aren't displayed. updated by Brad Gray 22 Jan 2016 PL#1894
        {
            var workFrontApproval = @Html.Raw(Json.Encode(Model.WorkFrontTacticApprovalBehavior));
            var requestBtn = document.getElementById('workFrontRequestOnApproval');
            var projectBtn = document.getElementById('workFrontProjectOnApproval');
            if (workFrontApproval == '@Integration.Helper.Enums.WorkFrontTacticApprovalObject.Request.ToString()')
            {
                requestBtn.checked = true;
                $('#workFrontRequestOptions').addClass("show");
            }
            else
            {
                projectBtn.checked = true;
                $('#workFrontRequestOptions').addClass("hidden");
            }
        }



        /*Added by Mitesh Vaishnav on 13/06/2014 to address #498 Customized Target Stage - Publish model */
        ImageTipsy('#diffrentStageIcon');
        /*NumberFormatterTipsyTitle(".tipsyclassTitle", 55);*/ //Commented by Arpita Soni on 02/01/15 for ticket #1082
        //Added By : Pratik, Code review point changes
        $('.addFormatterActualNumber').each(function () {
            SetPriceValue($(this));
        });

        //Added by Komal Rawal for ticket #1158
        if ($('#hdnIsPlanEditable').val().toString().toLowerCase() == 'true') {


            $('#divDeployToIntegration').css('display', 'block');

        }

        if ($('#txtAreaComment').hasClass('light-gray-background')) {
            $('#txtAreaComment').attr("disabled", "disabled");
        }
        //End

        $("#BtnShareTactic").click(function () {
            $("#DivPartialShareTactic").empty();
            var url = '@Url.Content("~/Inspect/ShowShareTactic/")';
            $("#DivPartialShareTactic").load(url + '?planTacticId=' + $('#hdnPlanTacticId').val() + '&section=@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()'); // section parameter added to open share tactic popup
        });

        $("#uldiv li a").click(function () {
            $("#spanTactic").html($(this).text());
            $("#hdnStatusValue").val($(this).text());
        });

        $("#btnSync").click(function () {

            var IsDeployedToIntegration = false;
            IsDeployedToIntegration = '@tacticReview.IsDeployedToIntegration';
            //var spanSyncStatus = $("#hdnSyncStatusValue").val();
            //if (spanSyncStatus == 'Sync') {
            //    IsDeployedToIntegration = true;
            //}
            var PlanTacticId = $('#hdnPlanTacticId').val();

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/SaveSyncToIntegration/")',
                data: {
                    id: PlanTacticId,
                    section: "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()" //section parameter added to save tactic comment
                    //IsDeployedToIntegration: IsDeployedToIntegration
                },
                success: function (data) {
                    if (data.result) {
                        /*Added by Mitesh Vaishnav for PL ticket #690
                        Change of sync to don’t sync or vice versa integration section update to 'Yes' and 'No'  */
                        if ('@tacticReview.IsIntegrationInstanceExist' == 'Yes') {
                            if (IsDeployedToIntegration) {
                                $('#integration-id').html('Yes')
                            }
                            else {
                                $('#integration-id').html('No')
                            }
                        }
                        /*End : Added by Mitesh Vaishnav for PL ticket #690 */

                        var inspectMode = '';
                        var IsEditable = $("#hdnTacticBudgetAllocationOpt").val();
                        if (IsEditable == strViewMode.toString())
                            inspectMode = '@Enums.InspectPopupMode.ReadOnly.ToString()';
                        else
                            inspectMode = '@Enums.InspectPopupMode.Edit.ToString()';
                        var requestedModule = $("#hdnRequestedModule").val();
                        //alert("TacticID:" + $('#hdnPlanTacticId').val() + ", data.TabValue:" + TabReview + ", inspectMode:" + inspectMode + ", requestedModule:" + requestedModule);
                        loadInspectPopup($('#hdnPlanTacticId').val(), "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", TabReview, inspectMode, 0, requestedModule);
                        //loadReview($("#hdnPlanTacticId").val(), TabReview);

                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                    }
                },
                error: function () {
                    $("#errorMessage").css("display", "block");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });
        });

        //$("#uldivSync li a").click(function () {
        //    $("#spanSyncStatus").html($(this).text());
        //    $("#hdnSyncStatusValue").val($(this).text());
        //});

        var divheight = $("#divInnerComment").height();
        $("#divComment").scrollTop(divheight);

        // On Comment Button Save Commnet

        $("#btnComment").click(function () {
            $("#successMessage").css("display", "none");
            $("#errorMessage").css("display", "none");
            var commentText = htmlEncode($('#txtAreaComment').val());
            if (commentText == '') {
                var msgspan = "@Common.objCached.ValidateForEmptyFieldAndValid";
                $("#errorMessage").css("display", "block");
                /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                $("#txtAreaComment").addClass("error");
                $("#spanMessageError").text(msgspan);
                return false;
            }
            else {
                $("#txtAreaComment").removeClass("error");
            }

            var PlanTacticId = $('#hdnPlanTacticId').val();
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/SaveComment/")',
                data: {
                    comment: commentText,
                    planTacticId: PlanTacticId,
                    section: "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()" //section parameter added to save tactic comment
                },
                success: function (data) {
                    if (data != 'undefined') {
                        if (data.serviceUnavailable != 'undefined' && data.serviceUnavailable == '#') {
                            window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                        } else {
                            if (data.id != 0) {
                                $("#successMessage").css("display", "block");
                                /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
                                $("#spanMessageSuccess").empty();
                                $("#spanMessageSuccess").text(data.msg);
                                var requestedModule = $("#hdnRequestedModule").val();
                                var IsEditable = $("#hdnTacticBudgetAllocationOpt").val();
                                var inspectMode = '';
                                if (IsEditable == strViewMode.toString())
                                    inspectMode = '@Enums.InspectPopupMode.ReadOnly.ToString()';
                                else {
                                    inspectMode = '@Enums.InspectPopupMode.Edit.ToString()';
                                }

                                // loadInspectPopup(data.id, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", data.TabValue, inspectMode, 0, requestedModule);//section parameter passed to open tactic popup
                                loadReview($("#hdnPlanTacticId").val(), TabReview);
                            }
                            else {
                                $("#errorMessage").css("display", "block");
                                $("#spanMessageError").empty();
                                $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.InvalidError");
                            }
                        }
                    }
                },
                error: function () {
                    $("#errorMessage").css("display", "block");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });
        });


        // Click on Approved Button Save Comment & Change Status
        $("#btnApproved").click(function () {
            $("#successMessage").css("display", "none");
            $("#errorMessage").css("display", "none");
            statusValue = $("#hdnStatusValue").val();
            var PlanTacticId = $('#hdnPlanTacticId').val();
            var stat = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
            if (statusValue == "Submit for Approval") {
                stat = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Submitted.ToString()].ToString()";
            }
            else if (statusValue == "Approve") {
                stat = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
            }
            else if (statusValue == "Decline") {
                stat = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Decline.ToString()].ToString()";
            }

            var RedirectType = $("#hdnRequestedModule").val();
            //Start - Added by Viral Kadiya on 22nd Jan 2016 for Pl ticket #1919 & #1921. - WF integration added 23 Jan 2016 by Brad Gray PL#1921
            var isDeployToIntegration = false;
            if ($("#t_integration_status").hasClass("icon-check-blue")) { // if Deployed To Integration True.
                isDeployToIntegration = true;
            }

            var isSyncSF = false;
            var isSyncEloqua = false;
            var isSyncWorkFront = false;
            if (isDeployToIntegration) {
                $('.integration-SF-Eloqua-WF').each(function (key, val) {
                    var _divToggle = $(this).find("div.integrationToggle");
                    var _intgrtnType = $(this).attr('integrationType');
                    if (_intgrtnType == '@Enums.IntegrationType.Eloqua.ToString()') {
                        var isOff = _divToggle.hasClass('off');
                        if (!isOff) {
                            isSyncEloqua = true;
                        }
                    }
                    if (_intgrtnType == '@Enums.IntegrationType.Salesforce.ToString()') {
                        var isOff = _divToggle.hasClass('off');
                        if (!isOff) {
                            isSyncSF = true;
                        }
                    }
                    if (_intgrtnType == '@Enums.IntegrationType.WorkFront.ToString()') {
                        var isOff = _divToggle.hasClass('off');
                        if (!isOff) {
                            isSyncWorkFront = true;
                        }
                    }
                });
            }
            //End - Added by Viral Kadiya on 22nd Jan 2016 for Pl ticket #1919 & #1921.
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/ApprovedTactic/")',
                data: {
                    status: stat,
                    planTacticId: PlanTacticId,
                    section: "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", //section parameter added to approve tactic,
                    isDeployToIntegration: isDeployToIntegration,
                    isSyncSF: isSyncSF,
                    isSyncEloqua: isSyncEloqua,
                    isSyncWorkFront: isSyncWorkFront
                },
                success: function (data) {
                    if (data != 'undefined') {
                        if (data.serviceUnavailable != 'undefined' && data.serviceUnavailable == '#') {
                            window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                        } else {
                            if (data.id != 0) {
                                $("#successMessage").css("display", "block");
                                $("#spanMessageSuccess").empty();
                                $("#spanMessageSuccess").text(data.msg);
                                var inspectMode = '';
                                var IsEditable = $("#hdnTacticBudgetAllocationOpt").val();
                                if (IsEditable == strViewMode.toString())
                                    inspectMode = '@Enums.InspectPopupMode.ReadOnly.ToString()';
                                else
                                    inspectMode = '@Enums.InspectPopupMode.Edit.ToString()';
                                var requestedModule = $("#hdnRequestedModule").val();
                                loadInspectPopup(data.id, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", data.TabValue, inspectMode, 0, requestedModule);

                                //Added By : Kalpesh Sharma Internal review points 18/11/2014

                                if (RedirectType == "@Enums.InspectPopupRequestedModules.Index.ToString()") {
                                    RefershPlanHeaderCalc();
                                    RefreshCurrentTab();//Added by Mitesh Vaishnav for PL ticket #1132
                                }
                                else if (RedirectType == "@Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString()") {
                                    var _planId = $('#PlanId').val();  //// Get PlanId value from ApplyToCalendar page.
                                    GetHealderData(_planId);    //// Called HeaderData function exist in ApplyToCalendar Page.
                                    GetNumberOfActivityPerMonByPlanId(_planId, ''); //// Called HeaderData function exist in ApplyToCalendar Page.
                                }
                            }
                            else {
                                $("#errorMessage").css("display", "block");
                                $("#spanMessageError").empty();
                                $("#spanMessageError").text("@RevenuePlanner.Helpers.Common.objCached.InvalidError");
                            }
                        }
                    }
                },
                error: function () {
                    $("#errorMessage").css("display", "block");
                    $("#spanMessageError").empty();
                    GoToLogin();
                    return false;
                }
            });

        });

        //// Slim Scroll bar for comment div.
        var r = $('#content_wraper').height() - 170;
        $('.comment-scroll-section').css('height', r);
        $(function () {
            $('.comment-scroll-section').slimScroll();
        });
        function toggleChevron(e) {
            $(e.target)
            .prev('.accordion-heading')
            .find("i.indicator")
            .toggleClass('glyphicon-chevron-down glyphicon-chevron-up');
        }
        $('.accordion').on('hidden.bs.collapse', toggleChevron);
        $('.accordion').on('shown.bs.collapse', toggleChevron);

    });



    function showHide(id) {
        var el = document.getElementById(id);
        if (el && el.style.display == 'table')
            el.style.display = 'none';
        else
            el.style.display = 'table';
    }

    function showHideBlock(id) {
        var el = document.getElementById(id);
        if (el && el.style.display == 'block')
            el.style.display = 'none';
        else
            el.style.display = 'block';
    }

    function toggleRequestOptions() {
        var request = document.getElementById('workFrontRequestOnApproval');
        var requestChecked = request.checked;
        if (requestChecked) {
            if ($('#workFrontRequestOptions').hasClass("hidden")) {
                $('#workFrontRequestOptions').removeClass("hidden");
                $('#workFrontRequestOptions').addClass("show");
            }
        }
        else {
            if ($('#workFrontRequestOptions').hasClass("show")) {
                $('#workFrontRequestOptions').removeClass("show");
                $('#workFrontRequestOptions').addClass("hidden");
            }
        }
    }
    // Begin - Added by Viral Kadiya on 21st Jan 2016 for Pl ticket #1919. Save Tactic Title, DeployToIntegration & Sync settings for Eloqua & Salesforce.
    // WorkFront information add 23/24 Jan 2016 by Brad Gray for PL#1921 & PL#1922
    function SaveReviewIntegrationInfo() {
        var returnparameter = false;
        //debugger;
        // Start - Get & Validate Tactic Title
        var title = htmlEncode($('#txtTacticTitle').val());
        var planTacticId = $("#hdnPlanTacticId").val();
        var txtTacticValue = $("#txtTacticTitle").val();
        var iserror = false;


        if (title == '') {
            $('#txtTacticTitle').addClass("error");
            iserror = true;
        }
        else {
            $('#txtTacticTitle').removeClass("error");
        }
        if (iserror) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
            return false;
        }
        // End - Get & Validate Tactic Title

        var isDeployToIntegration = false;
        if ($("#t_integration_status").hasClass("icon-check-blue")) { // if Deployed To Integration True.
            isDeployToIntegration = true;
        }

        var isSyncSF = false;
        var isSyncEloqua = false;
        var isSyncWorkFront = false;
        if (isDeployToIntegration) {
            $('.integration-SF-Eloqua-WF').each(function (key, val) {
                var _divToggle = $(this).find("div.integrationToggle");
                var _intgrtnType = $(this).attr('integrationType');
                if (_intgrtnType == '@Enums.IntegrationType.Eloqua.ToString()') {
                    var isOff = _divToggle.hasClass('off');
                    if (!isOff) {
                        isSyncEloqua = true;
                    }
                }
                if (_intgrtnType == '@Enums.IntegrationType.Salesforce.ToString()') {
                    var isOff = _divToggle.hasClass('off');
                    if (!isOff) {
                        isSyncSF = true;
                    }
                }
                if (_intgrtnType == '@Enums.IntegrationType.WorkFront.ToString()') {
                    var isOff = _divToggle.hasClass('off');
                    if (!isOff) {
                        isSyncWorkFront = true;
                    }
                }
            });
        }

        var wfTacticApproval = "undefined";
        var requestQueue = "undefined";
        var assignee = "undefined";
        if (isSyncWorkFront == true) {
            var request = document.getElementById('workFrontRequestOnApproval');
            var requestChecked = request.checked;
            if (requestChecked) {
                wfTacticApproval = '@Integration.Helper.Enums.WorkFrontTacticApprovalObject.Request.ToString()';
                requestQueue = document.getElementById('WorkFrontRequestQueue').value; //value will be the Id of the queue in the table, not the Queue Name
                assignee = document.getElementById('WorkFrontRequestAssignee').value;  //value will be the Id of the user in the table, not the User Name
            }
            else
            {
                wfTacticApproval = '@Integration.Helper.Enums.WorkFrontTacticApprovalObject.Project.ToString()';
            }
        }

        //if ($(this).hasClass("icon-check-blue")) { // if Deployed To Integration 'No'.
        //    isDeployToIntegration = false;
        //}


        //if ($(this).hasClass("icon-check-blue")) { // if Deployed To Integration 'No'.
        //    isDeployToIntegration = false;
        //}

        $.ajax({
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Inspect/SaveReviewIntegrationInfo/")',
            data: {
                title: title, Id: planTacticId, isDeployToIntegration: isDeployToIntegration, isSyncSF: isSyncSF, isSyncEloqua: isSyncEloqua, isSyncWorkFront: isSyncWorkFront,
                approvalBehaviorWorkFront: wfTacticApproval, requestQueueWF: requestQueue, assigneeWF: assignee
            },
            success: function (data) {
                //debugger;
                if (!data.IsDuplicate) {
                    var planTacticId = data.planTacticId;
                    var planCampaignId = data.planCampaignId;
                    var planProgramId = data.planProgramId;
                    var requestedModule = $("#hdnRequestedModule").val();
                    $('#lblTacticTitle').text(txtTacticValue);
                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.Msg);
                    $("#errorMessage").css("display", "none");
                    //  RefreshCurrentTab(requestedModule, planCampaignId, planProgramId, planTacticId);
                    returnparameter = true
                }
                else {
                    ShowError(data.errormsg);
                    returnparameter = false;
                }
            }
        });
        return returnparameter;

    }

</script>

<script>
    function GoToURL(url) {
        location.href=url;
    }
</script>