@model RevenuePlanner.Models.InspectModel
@using RevenuePlanner.Helpers;
@{
    RevenuePlanner.Models.InspectModel tacticMaster = null;
    if (Model != null)
    {
        tacticMaster = Model;
    }
    var RedirectType = (string)tacticMaster.RedirectType;
        var RedirectTypeMode = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString() ? true : false) : false);
        bool isIndex = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Index.ToString() ? true : false) : true);
        var CalledFromBudget = (!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Budgeting.ToString() ? "Budegting" : "") : "");

        var TacticTitle = "";
        var Status = "";
        var PlanTacticId = 0;
        var IsResubmitableStatus = false;
        bool IsPlanEditable = false;
        bool IsTacticActualsAddEditAuthorized = false;
        var PlanId = 0;
       

        var PlanProgramId = tacticMaster.PlanProgramId;
        var colorCode = "";
        string RequestedModule = RedirectType;

        bool IsPlanCreateAll = false;
        var popupvalue = "";
        var campaignId = "";
        string InspectMode = "";
        //added by devanshi for validation for medai code if tactic is asset or promotion
        bool IsAssetType = false;
        if (tacticMaster != null)
        {
            IsPlanEditable = (bool)tacticMaster.IsPlanEditable;
            IsResubmitableStatus = (bool)Common.CheckAfterApprovedStatus(tacticMaster.Status);
            TacticTitle = tacticMaster.TacticTitle;
            PlanTacticId = tacticMaster.PlanTacticId;
            Status = tacticMaster.Status;
            colorCode = tacticMaster.ColorCode;
            popupvalue = (string)tacticMaster.InspectPopup;
            campaignId = Convert.ToString(tacticMaster.PlanCampaignId);
            IsPlanCreateAll = (bool)tacticMaster.IsPlanCreateAll;
            InspectMode = tacticMaster.InspectMode;
            PlanId = tacticMaster.PlanId;
            IsAssetType = Convert.ToString(tacticMaster.ROIType) == Convert.ToString(Enums.AssetType.Asset) ? true : false;
        }
        else
        {
            if (tacticMaster.PlanProgramId != 0)
            {
                PlanProgramId = tacticMaster.PlanProgramId;
            }
        }
        //Added by Rahul Shah on 12/04/2016 for PL #2038
        var EntityId = PlanId + "_" + PlanTacticId;
        var LinkTacticPermission = ((tacticMaster.EndDate.Year - tacticMaster.StartDate.Year) > 0) ? true : false;
        var LinkedTacticId = tacticMaster.LinkedTacticId;
        if (ViewBag.IsTacticActualsAddEditAuthorized != null) { 
         IsTacticActualsAddEditAuthorized = (bool)ViewBag.IsTacticActualsAddEditAuthorized;
        }

        //Added By komal Rawal For #1213 - To maintain the mode on tab change after review
        string ProgramOpt = "";
        if (InspectMode == Enums.InspectPopupMode.ReadOnly.ToString())
        {
            ProgramOpt = "View";
        }
        else
        {
            ProgramOpt = "Edit";
        }
        //End

        // Added by Viral for #2366
        bool _isClientMediaCodesPermission = false;
        if (ViewBag.isClientMediaCodesPermission != null)
        {
            _isClientMediaCodesPermission = (bool)ViewBag.isClientMediaCodesPermission;
        }
        
    }


@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@Html.Hidden("hdnPlanTacticId", PlanTacticId, new { id = "hdnPlanTacticId" })
@Html.Hidden("hdnTacticStatus", Status, new { id = "hdnTacticStatus" })
@Html.Hidden("hdnTacticBudgetAllocationOpt", ProgramOpt, new { id = "hdnTacticBudgetAllocationOpt" })
@Html.Hidden("hdnIsResubmitableStatus", IsResubmitableStatus, new { id = "hdnIsResubmitableStatus" })
@Html.Hidden("hdnInspectMode", InspectMode, new { id = "hdnInspectMode" })
@Html.Hidden("hdnRequestedModule", RequestedModule, new { id = "hdnRequestedModule" })
@Html.Hidden("hdnIsPlanEditable", IsPlanEditable)
@Html.Hidden("hdnOwner", "", new { id = "hdnOwner" })
@Html.Hidden("hdnPlanId",PlanId)


<div class="headerfix-wraper">
    <div class="headefix">

        <h2 class="title-simple source-sans-prolight">

            <span>
                @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
                {
                    if (IsPlanEditable)
                    {
                    <div class="delete-btn-tab" style="float: right;" id="divDeleteTactic">
                        <button class="delete-btn-gray" id="deleteTactic" type="button">Delete</button>
                    </div>
                    }

                    if (IsPlanCreateAll)
                    {
                    <div style="float: right; position: relative; margin-left: 10px;">
                        <span class="add-icon-white btn-blue btn-large" style="display: block; cursor: pointer; margin-right: 10px;" id="AddForm"></span>
                        <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 1;" id="popupnewTactic">
                            <ul style="margin: 0;">
                                @*Modified by Rahul Shah on 12/04/2016 for PL #2038*@
                                <li class="new-prog" id="NewTacticfromPopup"> New Tactic</li>
                                <li class="copy-camp" id="CloneTactic">Copy Tactic</li>
                                <li class="new-prog" id="NewLineItem">New Line Item</li>                                
                                <li class="copy-camp" entityid=@EntityId sectiontype="Tactic" id="copyToTactic" onclick="OpentCopyPopup(this)" popuptype="Copying" redirecttype=@RedirectType>Copy To</li>
                                @if (LinkTacticPermission.ToString().ToLower() == "true" && (LinkedTacticId.ToString() == "" || LinkedTacticId.ToString() == "0"))
                                {
                                    <li style="position:relative" entityid=@EntityId sectiontype="Tactic" id="linkToTactic" onclick="OpentCopyPopup(this)" popuptype="Linking" redirecttype=@RedirectType><i class="fa fa-link"></i> Link To</li>
                                }
                            </ul>
                        </div>
                    </div>
                    }

                    if (IsPlanEditable)
                    {
                        <span class="edit-icon-white btn-blue btn-large SpanDisable" style="display: block; cursor: pointer;" id="EditForm"></span>
                    }
                }

                @if (InspectMode == Enums.InspectPopupMode.Add.ToString())
                {
                    <span class="Save-icon-white btn-blue btn-large SpanDisable" style="display: block; cursor: pointer;" id="EditForm"></span>
                }

            </span>
            <button class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></button> @*Modified by Bhumika #2003 from "buttom" to "button"  *@
        </h2>

    </div>
</div>
<div class="pop-body-wraper">
    <div class="PopupDiv">
        <form>

            <div id="MultiSelectProcced" class="alert alert-error hide message-position-popup-border-color " proccedobject="#ATTRIBUTUTES#" style="display: none;  max-width: 1000px !important;">
                <a class="close multiselect-close-button-popup">×</a>
                <span id="spanMultiSelectProcced" class="spanMultiSelectProcced-popup">
                    <b><strong>Data will be lost!</strong></b> Switching
                    <attributetext>#ATTRIBUTUTES#</attributetext>
                    from Multi-selection to Single-selection will reset all weight (%).
                </span>
                <button class="proceed_btn" type="button">Proceed </button>
                <a class="cncl_btn multiselect-cancel-link-popup" href="#">Cancel</a>
            </div>
            <div class="modal-popup-title" style="margin-bottom: 3px;">
                <span class="icon-flag bg-purple flagcolor" style="background-color:#@colorCode !important;"></span>
                <h2 class="title-simple source-sans-prolight">
                    <span>
                        <span id="lblTacticTitle" class="tipsyclassTitle ConcatTextlength" title="@HttpUtility.HtmlDecode(TacticTitle)">@HttpUtility.HtmlDecode(TacticTitle)</span>
                    </span>


                    @Html.TextBox("txtTacticTitle", HttpUtility.HtmlDecode(TacticTitle), new { placeholder = "Tactic name goes here", require = "true", maxlength = "255", @class = "span12 input-small light-blue-background", @style = "width: 95%; height: 28px;display:none;font-family:'source_sans_prolight', Arial, 'sans-serif';font-size:27px;color:#4d4d4d;line-height: normal;", title = HttpUtility.HtmlDecode(TacticTitle) })
                    @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle" })
                </h2>
            </div>
            @if (tacticMaster.PlanTacticId != 0 && !string.IsNullOrEmpty(tacticMaster.TacticCustomName))
            {
                <div class="Machine-Name">
                    <span>External Name: </span>
                    <label style="display: inline;" id="lblCustomNameFormat">@tacticMaster.TacticCustomName </label>
                </div>
            }
        </form>

        @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
        {
            <div class="modal-popup-summary">
                <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight" style="margin-bottom: 0px;">
                    <p class="modal-status">
                        Status:
                        @if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statussubmitted">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statusrejected">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statusapproved">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statuscreated">@tacticMaster.Status</span>
            }
                    </p>
                </div>
            </div>
        }

        <div>

            <ul class="nav nav-tabs new-margin no-position SpanDisable" id="InspectTab">
                <li class="active pull-left" id="liSetup">
                    <a>Setup</a>
                </li>
                <li class="pull-left" id="liReview">
                    <a>Review</a>
                </li>
                @if (IsTacticActualsAddEditAuthorized)
                {

                    <li class="pull-left" id="liActuals">
                        <a>Actuals</a>
                    </li>
                }
                // Commented by Arpita Soni for Ticket #2236 on 06/07/2016
                @*@if(!Sessions.IsBudgetShow)
                {
                    <li class="pull-left" id="liBudget">
                        <a>Budget</a>
                    </li>
                }*@
                <!-- Added by Arpita Soni for Ticket #2237 on 06/09/2016 -->
                <li class="pull-left" id="liLine_Items">
                    <a>Line Items</a>
                </li>
                @if (_isClientMediaCodesPermission && IsAssetType==false)
                {
                    <li class="pull-left" id="liMedia_Codes">
                        <a>Media Codes</a>
                    </li>
                }
            </ul>
            <div id="divTab">
            </div>
            <div id="divArchiveMediaCode" class="gridViewGrid">

        </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var isclickfrompopup = false;
    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabActual = "Actuals";
    var divTab = "#divTab";
    var TabMediaCode="Media_Codes"
    // Commented by Arpita Soni for Ticket #2236 on 06/07/2016
    //var TabBudget = "Budget";
    // Added by Arpita Soni for Ticket #2237 on 06/09/2016
    var TabLineItem = "Line_Items";
    var tabtext = "";
    var InspectMode = "@InspectMode"; // Modifiedby Komal Rawal for #1213 - For Handling add mode of inspect popup
    var mxpnlTabArrivalTime,mxpnlTabLeaveTime,mxpnlTabName; //Declared global varible to handle that user spent what time to particular inspect tab. PL ticket #2343.
    $(document).ready(
         
      function () {

          // Added by Viral related to PL ticket #2434.
          var d = new Date();
          // 'mxpnlTabArrivalTime' variable declared at InspectPopup.cshtml to access & log tab arrival time for all tabs.
          mxpnlTabArrivalTime = d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();    // Store setup tab arrival time.

          //Bhumika - #2236 For equal width of li
          var evenWidth = ($("#InspectTab").width() / $("#InspectTab li").length) - 2;
          $("#InspectTab li").css("width", evenWidth);
          

          var modelHeight = $(window).height();
          var headerHeight = $('.headerfix-wraper').height();
          var bodyWrapperMaxHeight = modelHeight - headerHeight - 100;
          //$('.pop-body-wraper').css('height', '92%');
          NumberFormatterTipsyTitle($("#lblCustomNameFormat"), 130);
          $("#AddForm").css("display", "block");
          CloseIconClick();
          NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
          var InspectValue = $("#hdnInspectPopup").val();
          var planTacticId = $("#hdnPlanTacticId").val();
          // Call Remove Tabclass
          RemoveTabClass();
          $("#li" + InspectValue).removeClass("pull-left");
          $("#li" + InspectValue).addClass("active pull-left");
          // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
          tabtext = ($("#li" + InspectValue).children('a').text().replace(" ","_"));
          $('#div' + tabtext).css({ display: "block" });

          loadReview(planTacticId, tabtext);
          if ($('#EditForm').hasClass('edit-icon-white') && InspectMode == '@Enums.InspectPopupMode.Edit.ToString()') {
              $('#EditForm').removeClass('edit-icon-white');//Modified for #1318
              $('#EditForm').addClass('Save-icon-white');
              $("#errorMessage").css("display", "none");
              //$("#successMessage").css("display", "none");
              $('#MultiSelectProcced').css("display", "none");
              $("#txtTacticTitle").removeClass("error");
          }
          // Click on Tab Partialview Refresh Based On Selected Tab

          // $("#liSetup,#liReview,#liActuals,#liBudget").on("click", function () {
          $("#liSetup,#liReview,#liActuals,#liLine_Items,#liMedia_Codes").on("click", function () {
              $("#divArchiveMediaCode").html("");
              //added by devanshi for PL ticket #2276
        if (CheckHtmlTag($("#txtTacticTitle").val()) == false) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.TitleContainHTMLString");
            $("#txtTacticTitle").addClass("error");
            return false;
        }
              //end

              
            
              // Modified by Komal Rawal for #2165 clicking on tabs or button before loading gets complete gives elmah error.
              if($('#InspectTab').hasClass('SpanDisable') == false)
              {
                  $('#EditForm').removeClass('SpanDisable');
                  $('#InspectTab').addClass('SpanDisable');
                  // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
                  var activeTab = $("#InspectTab li.active a").text().replace(" ","_");
                  tabtext = ($(this).children('a').text().replace(" ","_"));
                  isclickfrompopup = true;
                  //if (activeTab == 'Actuals') {
                  //    displayConfirm('topTabsClick("' + tabtext + '","' + activeTab + '");');
                  //}

                  // If condition added by bhavesh, if same tab click then don't require to save data. Date : 10-jan-2015.Ticket: #1823
                  var returnpara = true;
                 
                  if (tabtext != activeTab) {
                      returnpara = SaveAllData(activeTab); //Added By Komal Rawal for #1213 to save data to tab click
                      
                      // Start: Log Mixpanel- Added by Viral regarding PL ticket #2343.              
                      var d = new Date();
                      // 'mxpnlTabLeaveTime' variable declared at InspectPopup.cshtml to access & log tab arrival time for all tabs.
                      mxpnlTabLeaveTime = d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();    // Store setup tab leave time.
                      mxpnlTabName = activeTab;
                      LogMixpanelInspectTabTimeSpent();
                      mxpnlTabArrivalTime = mxpnlTabLeaveTime; // one tab leave time will become arrival time for other.
                      // End: Log Mixpanel- Added by Viral regarding PL ticket #2343.
                  }
                  if (returnpara) {
                      
                      RemoveTabClass();
                      $(this).removeClass("pull-left");
                      $(this).addClass("active pull-left");
                        $("#errorMessage").css("display", "none");
                      $("#successMessage").css("display", "none");
                      $('#MultiSelectProcced').css("display", "none");
                      var planTacticId = $("#hdnPlanTacticId").val();
                      if (planTacticId != 0) {
                          InspectMode = "@Enums.InspectPopupMode.Edit.ToString()";
                      }
                      else
                      {
                          InspectMode = "@Enums.InspectPopupMode.Add.ToString()";
                      }

                      loadReview(planTacticId, tabtext);
                  }
                  else
                  { $('#InspectTab').removeClass('SpanDisable');}
              }

          });

         

          // Close event for Error Message & Success Message Close button
          $(".alert").find(".close").on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).closest(".alert").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
          });

          //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
          $(document).on("click", "#confirmClose", function (e) {
              $('#spanMessageError').html("");
              $("#errorMessage").hide();
          });
          //Dharmraj End 14July2014 : ticket #547, No warning of data loss during Add actuals

          $('#EditForm').on("click", function (e) { SaveTacticAddNew(); } );

      });
 
    //
    //The save will need to work for both "Save & Close" and "Save & Add New" - #2329 by zz
    //
    function SaveTacticAddNew() {
        $("#divArchiveMediaCode").html("");
        //added by devanshi for PL ticket #2276
        if (CheckHtmlTag($("#txtTacticTitle").val()) == false) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.TitleContainHTMLString");
            $("#txtTacticTitle").addClass("error");
            return false;
        }
        //end
        // Modified by Komal Rawal for #2165 clicking on tabs or button before loading gets complete gives elmah error.
        if($(this).hasClass('SpanDisable') == false)
        {
            logMixpanelTrack("Save & Add New button clicked under Tactic inspection window."); // log Save & Add button click event to mixpanel. Added by Viral regarding PL ticket #2434.
            isDataModified = true;
            //Modified for #1318 by Komal Rawal to handle the Save function
            var activeTab = $("#InspectTab li.active a").text().replace(" ","_");
            var planTacticId = $("#hdnPlanTacticId").val();
            if ($('#EditForm').hasClass('edit-icon-white')) {
                $("#hdnInspectMode").val('@Enums.InspectPopupMode.Edit.ToString()');
                $('#EditForm').removeClass('edit-icon-white');//Modified for #1318 by Komal Rawal
                $('#EditForm').addClass('Save-icon-white');
                $("#errorMessage").css("display", "none");
                $("#successMessage").css("display", "none");
                $('#MultiSelectProcced').css("display", "none");
                $("#txtTacticTitle").removeClass("error");


                if (activeTab == TabReview) {
                    activeTab = TabSetup;
                }
                if (activeTab == TabActual) {
                    //// Modified By: Arpita Soni on 1/7/2015.
                    //// Ticket: 1067
                    var hdnTacticStatus = $("#hdnTacticStatus").val();
                    var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                    var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                    var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                    if (hdnTacticStatus != Approvedstatus && hdnTacticStatus != InProgressstatus && hdnTacticStatus != Completestatus) {
                        activeTab = TabSetup;

                    }
                }
                $('#popupnewTactic').css('display', 'none');
                $("#hdnTacticBudgetAllocationOpt").val("Edit");
                $('#txtTacticTitle').css('display', 'block');
                //$("#txtTacticTitle").val($("#lblTacticTitle").text());
                $('#lblTacticTitle').css('display', 'none');
                // $('#EditForm').css('display', 'none');
                loadReview(planTacticId, activeTab);
                //// Added By Kalpesh on 11/06/2014 to Non-Editable Tactic Name.mp4 mentioned in resolve ticket #868
                $("#txtTacticTitle").prop('readonly', false);
                //  $("#AddForm").css("display", "none");
                //$('#divDeleteTactic').css('display', 'none');
            }
            else {

                isclickfrompopup = false;
                //To save the Active Tab on Save Button
                if (activeTab == TabSetup) {
                    var ReturnParameter = SetupSavetactic();
                    if (ReturnParameter == false) {
                        return false;
                    }
                    else {
                        ReloadSavedTactic();
                    }
                }
                    // Commented by Arpita Soni for Ticket #2236 on 06/07/2016
                    //else if (activeTab == TabBudget) {
                    //    var ReturnParameter = TacticBudgetSave();
                    //    if (ReturnParameter == false) {
                    //        return false;
                    //    }
                    //    else {
                    //        $('.close-x-big-icon').trigger('click');

                    //    }
                    //}

                else if (activeTab == TabActual) {

                    var hdnTacticStatus = $("#hdnTacticStatus").val();
                    var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                    var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                    var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                    if (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus) {
                        var ReturnParameter = SaveActual();
                    }
                    else {
                        var ReturnParameter = SaveTitle();
                    }
                    if (ReturnParameter == false) {
                        return false;
                    }
                    else {
                        ReloadSavedTactic();

                    }
                }

                else if (activeTab == TabReview) {
                    var ReturnParameter = SaveReviewIntegrationInfo();//SaveTitle();
                    if (ReturnParameter == false) {
                        return false;
                    }
                    else {

                        ReloadSavedTactic();

                    }
                }
                    // Added by Arpita Soni for Ticket #2237 on 06/09/2016
                else if (activeTab == TabLineItem) {
                    ReloadSavedTactic();
                }
                    // Added by Devanshi gandhi for Ticket #2368 on 06/09/2016
                else if (activeTab == TabMediaCode) {
                    ReloadSavedTactic();
                }
            }

        }
    }

    //
    // Reload saved tactic 
    //
    function ReloadSavedTactic(){
        //Reloading the dialog is NOT ideal, yet it sure cleans things up and guarantees a clean start. zz
        loadInspectPopup($("#hdnPlanTacticId").val(), "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", "Setup", "@Enums.InspectPopupMode.Edit.ToString()", @PlanProgramId, '@RequestedModule');
    }

    //Added By Komal Rawal for #1213
    function SaveAllData(activeTab) {
        //added by devanshi for PL ticket #2276
        if (CheckHtmlTag($("#txtTacticTitle").val()) == false) {
            ShowError("@RevenuePlanner.Helpers.Common.objCached.TitleContainHTMLString");
            $("#txtTacticTitle").addClass("error");
            return false;
        }
        //end
        var ProgramOpt = $("#hdnTacticBudgetAllocationOpt").val();
        $('.btn-dropdwn').hide();
        if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
            if (activeTab == TabSetup) {

                var ReturnParameter = SetupSavetactic();
                if (ReturnParameter == false) {
                    $('#InspectTab').removeClass('SpanDisable');
                    return false;
                }
            }

            // Commented by Arpita Soni for Ticket #2236 on 06/07/2016
            //else if (activeTab == TabBudget) {
            //    var ReturnParameter = TacticBudgetSave();
            //    if (ReturnParameter == false) {
            //        $('#InspectTab').removeClass('SpanDisable');
            //        return false;
            //    }
            //}

            else if (activeTab == TabActual) {
                var hdnTacticStatus = $("#hdnTacticStatus").val();
                var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                if (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus) {
                    var ReturnParameter = SaveActual();
                }
                else {
                    var ReturnParameter = SaveTitle();

                }
                if (ReturnParameter == false) {
                    $('#InspectTab').removeClass('SpanDisable');
                    return false;
                }
            }
                // Added by Arpita Soni for Ticket #2237 on 06/09/2016
                //Modified by Komal for #2296
            else if (activeTab == TabLineItem) {
                    $('#InspectTab').removeClass('SpanDisable');
            }
            else if (activeTab == TabReview) {
                var ReturnParameter = SaveReviewIntegrationInfo();//SaveTitle();

                if (ReturnParameter == false) {
                    $('#InspectTab').removeClass('SpanDisable');
                    return false;
                }
            }
            

        }

        return true;

    }
    //End

    function ShowError(value) {
        $("#modal-container-186470").scrollTop(0);
        $("#errorMessage").css("display", "block");
        $("#errorMessage").slideDown(400);
        $("#spanMessageError").empty();
        $("#spanMessageError").html(value);
    }

    //Added By komal rawal for saving the Tactictitle in actual tab of Edit Mode
    function SaveTitle() {
        var returnparameter = false;
        var title = htmlEncode($('#txtTacticTitle').val());
        var planTacticId = $("#hdnPlanTacticId").val();
        var txtTacticValue = $("#txtTacticTitle").val();
        var iserror = false;

        if (title == '') {
            $('#txtTacticTitle').addClass("error");
            iserror = true;
        }
        else {
            $('#txtTacticTitle').removeClass("error");
        }
        if (iserror) {
            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                $('#InspectTab').removeClass('SpanDisable');
                return false;
            }
        }
        $.ajax({
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Inspect/SaveTitle/")',
            data: { title: title, Id: planTacticId, ActivePopup: "Tactic" },
            success: function (data) {
                if (!data.IsDuplicate) {
                    var planTacticId = data.planTacticId;
                    var planCampaignId = data.planCampaignId;
                    var planProgramId = data.planProgramId;
                    var requestedModule = $("#hdnRequestedModule").val();
                    $('#lblTacticTitle').text(txtTacticValue);
                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.Msg);
                    $("#errorMessage").css("display", "none");
                    // Comment By Bhavesh Date: 6-jan-2015, Ticket #1793
                    //  RefreshCurrentTab(requestedModule, planCampaignId, planProgramId, planTacticId);
                    returnparameter = true
                }
                else {
                    ShowError(data.errormsg);
                    returnparameter = false;
                }
            }
        });
        return returnparameter;
    }
    //End


    function topTabsClick(tabText) {
        var returnpara = savealldata(activeTab);
        if (returnpara) {
            RemoveTabClass();
            $("#li" + tabText).removeClass("pull-left");
            $("#li" + tabText).addClass("active pull-left");
            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");
            $('#MultiSelectProcced').css("display", "none");
            /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
            var tabtext = ($("#li" + tabText).children('a').text().replace(" ","_"));
            var planTacticId = $("#hdnPlanTacticId").val();
            $("#divArchiveMediaCode").html("");
            loadReview(planTacticId, tabtext);
        }
    }

    $('#AddForm').click(function () {
        if ($('#popupnewTactic').css('display') == 'none') {
            logMixpanelTrack("Add button clicked under Tactic inspection window."); // log Add button click event to mixpanel. Added by Viral regarding PL ticket #2434.
            $('#popupnewTactic').css('display', 'block')
        }
        else {
            $('#popupnewTactic').css('display', 'none')
        }
    });

    function RemoveTabClass() {
        $('#InspectTab').children().each(function () {
            if ($(this).hasClass('active pull-left')) {
                $(this).removeClass("active pull-left");
                $(this).addClass("pull-left");
            }
        });
    }

    function loadReview(id, tabValue) {
        $("#divArchiveMediaCode").html("");
        $.ajaxSetup({ cache: false });
        var url;
        var ProgramOpt = $("#hdnTacticBudgetAllocationOpt").val();
        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });
        // Modified by Komal Rawal for #2165 clicking on tabs or button before loading gets complete gives elmah error.
        if (tabValue == TabSetup) {
            if (InspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
                url = '@Url.Content("~/Inspect/CreateTactic/")';
                $("#divTab").load(url + '?id=' + "@PlanProgramId", function (response, status, xhr) {

                    $('#InspectTab').removeClass('SpanDisable');
                });;
            }
            else if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {

                url = '@Url.Content("~/Inspect/EditTactic/")';

                $("#divTab").load(url + '?id=' + id + '&RedirectType=""&CalledFromBudget=""', function (response, status, xhr) {
                    if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                        //// Call function to redirect on service unavailibility.
                        //// Added By: Maninder Singh Wadhva on 11/24/2014.
                        //// Ticket: 942 Exception handeling in Gameplan.
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    $('#InspectTab').removeClass('SpanDisable');
                });
                //  TacticBudgetSave()
            }
            else {
                url = '@Url.Content("~/Inspect/LoadSetup/")';
                $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                    if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                        //// Call function to redirect on service unavailibility.
                        //// Added By: Maninder Singh Wadhva on 11/24/2014.
                        //// Ticket: 942 Exception handeling in Gameplan.
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                    $('#InspectTab').removeClass('SpanDisable');
                });
            }
        }
        if (tabValue == TabReview) {
            //$('#txtTacticTitle').css('display', 'none');
            //$('#lblTacticTitle').css('display', 'block');
            //$("#lblTacticTitle").removeAttr("style");
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
            }

            url = '@Url.Content("~/Inspect/LoadReview/")';
            $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                    //// Call function to redirect on service unavailibility.
                    //// Added By: Maninder Singh Wadhva on 11/24/2014.
                    //// Ticket: 942 Exception handeling in Gameplan.
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }
                $('#InspectTab').removeClass('SpanDisable');
            });
        }
        if (tabValue == TabActual) {

            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {

                //  $("#divTab").empty();
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
                // return false;

            }

            url = '@Url.Content("~/Inspect/LoadActuals/")';
            $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                    //// Call function to redirect on service unavailibility.
                    //// Added By: Maninder Singh Wadhva on 11/24/2014.
                    //// Ticket: 942 Exception handeling in Gameplan.
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }

                $('#InspectTab').removeClass('SpanDisable');
            });
        }
        // Commented by Arpita Soni for Ticket #2236 on 06/07/2016
       @* if (tabValue == TabBudget) {
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                 $('#txtTacticTitle').css('display', 'block');
                 $('#lblTacticTitle').css('display', 'none');
             }

             url = '@Url.Content("~/Inspect/LoadTacticBudgetAllocation/")';
             $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                 $('#InspectTab').removeClass('SpanDisable');
             });
         }*@
                
        // Added by Arpita Soni for Ticket #2237 on 06/09/2016
        if (tabValue == TabLineItem) {
            var isLocked = true;
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
                isLocked = false;
            }
            var AllocatedBy = '@Convert.ToString(Enums.PlanAllocatedBy.months)'
            var IsPlanEditable = '@IsPlanEditable'
            url = '@Url.Content("~/Inspect/LoadLineItemTabFromTacticPopup/")';
            $("#divTab").load(url + '?tacticId=' + id +'&AllocatedBy=' +AllocatedBy +'&IsPlanEditable=' +IsPlanEditable, function (response, status, xhr) {
                $('#InspectTab').removeClass('SpanDisable');
            });
        }
       //added by devanshi #2290
        if(tabValue==TabMediaCode)
        {
            var InsepectMode=$("#hdnInspectMode").val();
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
            }
            $("#divArchiveMediaCode").html("");
            url = '@Url.Content("~/Inspect/LoadMediaCodeFromTacticPopup/")';
            $("#divTab").load(url + '?tacticId=' + id + '&InsepectMode='+InsepectMode+'&IsPlanCreateAll='+IsPlanCreateAll, function (response, status, xhr) {
                $('#InspectTab').removeClass('SpanDisable');
            });
        }
        // added by Rahul Shah for PL #2335 point 1. to set default focus on tactic inspect popup open.
        $('#txtTacticTitle').focus();
        var txtTactTitle = $('#txtTacticTitle').val();
        $('#txtTacticTitle').val('');
        $('#txtTacticTitle').val(txtTactTitle);
    }

    //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
    function AssignDefaultValue() {
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            $(this).attr("myValue", $(this).val());
        });
    }
    //function to check myValue attribute values and input values that any changes made?
    function isDataChanged() {
        var changed = false;
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            var iv = $(this).attr("myValue");
            if ($(this).val() != iv) {
                //changed = true;
                changed = false;
            }
        });
        return changed;
    }

    function displayConfirmCommon() {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                $('#modal-container-186470').modal("hide");
            });
        }
        else {
            $('#modal-container-186470').modal("hide");
        }
    }

    function displayConfirm(functionName) {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                eval(functionName);
            });
        }
        else {
            eval(functionName);
        }
    }

    //Modified By Komal Rawal for #2182 
    function checkChangeValue(classname, withResubmissionLabel) {
        _resubmissionLabelValues = [];
        var resubmit = false;
        if (withResubmissionLabel) {
            $('form').find(classname).each(function () {
                var oldValue = $(this).attr("oldValue");
                var value = "";
                if ($(this).prop('tagName') != 'A') {
                    value = $(this).val();
                }
                else {
                    value = $(this).text();
                }
                if (oldValue != value) {
                    _resubmissionLabelValues.push({
                        Key: htmlEncode($(this).attr("label").replace(/ /g, "_").toString()),
                        Value: htmlEncode($(this).attr("label").replace(/ /g, "_").toString())
                    });

                    resubmit = true;
                }
            });
            _resubmissionLabelValues = JSON.stringify(_resubmissionLabelValues);
            return resubmit;
        }
        else {
            $('form').find(classname).each(function () {
                var oldValue = $(this).attr("oldValue");
                var value = $(this).val();
                if (oldValue != value) {
                    return resubmit = true;
                }
            });
        }
    }
    //End
       
    var isInspectWin = false;
    $('#CloneTactic').click(function () {        
        //Modified by Rahul Shah for PL #2031 on 22/03/2016        
        var returnpara = true;
        isInspectWin = false;
        if ((checkChangeValue(".resubmission", true)) && ($("#hdnIsResubmitableStatus").val().toString().toLowerCase() == "true")) {
            var iserror = false;
            $('form').find('input[type=text], select, textarea').each(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val().toString().trim() == '' && $(this).parent().css("display") != "none") {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
            $('.dropdown_new_btn').each(function () {
                if (typeof $(this).attr('require') != 'undefined' && $(this).attr('require') == 'true' && $(this).find('p').text() == 'Please Select' && $(this).parent().parent().css("display") != "none") {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            });
            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                return false;
            }
            url = '@Url.Content("~/Inspect/LoadResubmission")';
            $("#divResubmission").load(url + '?redirectionType=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic)" + '&labelValues=' + _resubmissionLabelValues);
            isInspectWin = true;
            // returnparameter = true;
        }
        else {
            // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
            var activeTab = $("#InspectTab li.active a").text().replace(" ","_");
            if (activeTab != null && activeTab != undefined && activeTab != '') {
                returnpara = SaveAllData(activeTab);                               
            }
        }
        if (!isInspectWin && returnpara) {
            isDataModified = true;
            var idPlanTactic = $("#hdnPlanTacticId").val();
            var Title = $("#lblTacticTitle").html();
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/Clone")',
                data: {
                    CloneType: '@Enums.DuplicationModule.Tactic',
                    Id: idPlanTactic,
                    title: Title,
                    CalledFromBudget: '@CalledFromBudget',
                    RequsetedModule: '@RedirectType'
                },
                success: function (data) {
                    if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else if (data.IsSuccess) {
                        var currentTab = "Setup";

                        @*if ('@RequestedModule' == "@Enums.InspectPopupRequestedModules.Budgeting.ToString()") {
                            currentTab = "Budget";
                        }*@

                        var planTacticId = data.Id;
                        var expandPlanTacticId = data.expand;
                        var planCampaignId = '@campaignId';
                        var planProgramId = '@PlanProgramId';
                        logMixpanelTrack("Copy Tactic:" + data.msg); // log Tactic copied event to mixpanel. Added by Viral regarding PL ticket #2434.
                        loadInspectPopup(planTacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '@RequestedModule');

                        if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == '@RequestedModule') {
                            $("#hdnBudgetingExpandId").val(expandPlanTacticId);
                            $("#hdnBudgetingIsSave").val("true");
                        }

                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                        $("#errorMessage").css("display", "none");
                        $("#hdnIsCreate_Clone").val(true); //// Hidden value used in _plan.cshmtl page to check that page require to refresh or not.
                        RefershPlanHeaderCalc();   //Modified By Komal Rawal on 22-02-16 to get proper value in header according to filter on add or copy tactic.
                        return;
                    }
                    else {
                        $("#successMessage").slideUp(50);
                        $("#errorMessage").slideDown(400);
                        $("#spanMessageError").empty();
                        $("#spanMessageError").val(data.msg);
                        return false;
                    }
                }
            });
        }
    });

    function CopyTactNew() {
        isDataModified = true;
        var idPlanTactic = $("#hdnPlanTacticId").val();
        var Title = $("#lblTacticTitle").html();
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Inspect/Clone")',
            async:false,
            data: {

                CloneType: '@Enums.DuplicationModule.Tactic',
                Id: idPlanTactic,
                title: Title,
                CalledFromBudget: '@CalledFromBudget',
                RequsetedModule: '@RedirectType'
            },
            success: function (data) {                
                if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else if (data.IsSuccess) {
                    
                    var currentTab = "Setup";

                    @*if ('@RequestedModule' == "@Enums.InspectPopupRequestedModules.Budgeting.ToString()") {
                        currentTab = "Budget";
                    }*@

                    var planTacticId = data.Id;
                    var expandPlanTacticId = data.expand;
                    var planCampaignId = '@campaignId';
                    var planProgramId = '@PlanProgramId';

                    loadInspectPopup(planTacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '@RequestedModule');

                    if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == '@RequestedModule') {
                        $("#hdnBudgetingExpandId").val(expandPlanTacticId);
                        $("#hdnBudgetingIsSave").val("true");
                    }

                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.msg);
                    $("#errorMessage").css("display", "none");
                    $("#hdnIsCreate_Clone").val(true); //// Hidden value used in _plan.cshmtl page to check that page require to refresh or not.
                    RefershPlanHeaderCalc();   //Modified By Komal Rawal on 22-02-16 to get proper value in header according to filter on add or copy tactic.
                    return;
                }
                else {
                    $("#successMessage").slideUp(50);
                    $("#errorMessage").slideDown(400);
                    $("#spanMessageError").empty();
                    $("#spanMessageError").val(data.msg);
                    return false;
                }
            }
        });
    }
    function SaveMessageOnParent(value) {
        $("#modal-container-186470").modal('hide');
        $("#errorMessageDuplicatePlan").slideUp(50);
        $("#successMessageDuplicatePlan").slideDown(400);
        $("#cSuccessDuplicatePlan").empty();
        $("#cSuccessDuplicatePlan").text(htmlDecode(value));
        $("#successMessageDuplicatePlan").removeClass("message-position");
        $("#successMessageDuplicatePlan").addClass("successMessage-InspectPopUpSections");

    }

    $("#deleteTactic").click(function () {
        if (confirm('@Common.objCached.ConfirmationForDeleteTactic')) {
            isDataModified = true;
            var ProgramId = $("#hdnPlanTacticId").val();
            var uId = $(window).attr('name');
            var arrClosedTaskString = null;
            if (typeof arrClosedTask != 'undefined') {
                arrClosedTaskString = arrClosedTask.toString();
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/DeleteSection")',
                data: {
                    ID: ProgramId
                    , DeleteType: '@Enums.DuplicationModule.Tactic'
                     , UserId: uId
                     , closedTask: arrClosedTaskString
                     , CalledFromBudget: '@CalledFromBudget'
                        , IsIndex: '@isIndex'
                        , RedirectType: '@RedirectTypeMode'
                },
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.IsSuccess && data.opt != 'undefined') {
                            if (data.opt == '@Enums.InspectPopupRequestedModules.Index.ToString()') {
                                
                                // Added by Arpita Soni for Ticket #2354 on 07/14/2016
                                RemoveAllHoneyCombData();

                                SaveMessageOnParent(data.msg);
                                RefershPlanHeaderCalc();
                                //Added By : Kalpesh Sharma Internal review points 18/11/2014
                                if ($('#IsGridView').val().toLowerCase() == "true") { //Modified by Komal Rawal for 2013 Home/Plan Layout changes
                                    LoadPlanGrid();
                                    gridSearchFlag = 0;


                                }
                                else {
                                    RefreshCurrentTab();
                                    //Added by Rahul Shah on 20/10/2015 fro PL #1634

                                }
                                //Added by Rahul Shah on 20/10/2015 fro PL #1634
                                addDefaultModalPopupBackgroungColor();
                                $("#modal-container-186470").addClass("transition-close");
                                $("#modal-container-186470").removeClass("transition_y");
                                $('body').removeClass('bodyOverflow');
                            }
                            else {

                                if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == data.opt) {
                                    $("#hdnBudgetingExpandId").val(data.expand);
                                    $("#hdnBudgetingIsSave").val("true");
                                    $("#hdnBudgetingIsDelete").val("true");
                                    $(".close-x-big-icon").trigger("click");
                                }
                                else {
                                    window.location.href = data.redirect;
                                }

                                return;
                            }
                        }
                        else {
                            $("#successMessage").slideUp(50);
                            $("#errorMessage").slideDown(400);
                            $("#spanMessageError").empty();
                            $("#spanMessageError").val(data.msg);
                            return false;
                        }
                    }
                }
            });
        }
    });


    $(document).mouseup(function (e) {
        var popup = $('#popupnewTactic');
        var button = $('#AddForm');
        if (!popup.is(e.target) && popup.has(e.target).length === 0 && popup.css('display') == 'block' && !button.is(e.target) && button.has(e.target).length === 0) {
            $('#popupnewTactic').css("display", "none");
        }
    });
    var isInspectNewLineItem = false;
    //Modified by Rahul Shah on 12/04/2016 for PL #2038
    $('#NewLineItem').click(function () {
        //Modified by Rahul Shah for PL #2031 on 22/03/2016
        isInspectNewLineItem = false;
        var returnpara = true;
        if ((checkChangeValue(".resubmission", true)) && ($("#hdnIsResubmitableStatus").val().toString().toLowerCase() == "true")) {
            var iserror = false;
            $('form').find('input[type=text], select, textarea').each(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val().toString().trim() == '' && $(this).parent().css("display") != "none") {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
            $('.dropdown_new_btn').each(function () {
                if (typeof $(this).attr('require') != 'undefined' && $(this).attr('require') == 'true' && $(this).find('p').text() == 'Please Select' && $(this).parent().parent().css("display") != "none") {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            });
            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                return false;
            }
            url = '@Url.Content("~/Inspect/LoadResubmission")';
            $("#divResubmission").load(url + '?redirectionType=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic)" + '&labelValues=' + _resubmissionLabelValues);
            isInspectNewLineItem = true;
        }
        else {
            // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
            var activeTab = $("#InspectTab li.active a").text().replace(" ","_");
            if (activeTab != null && activeTab != undefined && activeTab != '') {
                returnpara = SaveAllData(activeTab);
               
            }
        }
        if (!isInspectNewLineItem && returnpara) {
            loadInspectPopup('0', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", "Setup", '@Enums.InspectPopupMode.Add.ToString()', $('#hdnPlanTacticId').val(), $("#hdnRequestedModule").val());
        }
    });
    //Added by Rahul Shah on 12/04/2016 for PL #2038
    var isInspectNewTactic = false;
    $("#NewTacticfromPopup").on("click", function () {  
        isInspectNewLineItem = false;
        var returnpara = true;
        // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
        var activeTab = $("#InspectTab li.active a").text().replace(" ","_");
        if ((checkChangeValue(".resubmission", true)) && ($("#hdnIsResubmitableStatus").val().toString().toLowerCase() == "true")) {
            var iserror = false;
            $('form').find('input[type=text], select, textarea').each(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val().toString().trim() == '' && $(this).parent().css("display") != "none") {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });
            $('.dropdown_new_btn').each(function () {
                if (typeof $(this).attr('require') != 'undefined' && $(this).attr('require') == 'true' && $(this).find('p').text() == 'Please Select' && $(this).parent().parent().css("display") != "none") {
                    $(this).addClass("error");
                    iserror = true;
                }
                else {
                    $(this).removeClass("error");
                }
            });
            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                return false;
            }

            url = '@Url.Content("~/Inspect/LoadResubmission")';
            $("#divResubmission").load(url + '?redirectionType=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic)" + '&labelValues=' + _resubmissionLabelValues);
            isInspectNewLineItem = true;
        }
        else {
            
        if (activeTab != null && activeTab != undefined && activeTab != '') {
            returnpara = SaveAllData(activeTab);
           
        }
        }
        var ProgramId = @PlanProgramId;
        isCopyTactic = ProgramId;
        if(returnpara && !isInspectNewLineItem){
            @*ShowModels("@Enums.InspectPopupMode.Add.ToString()", "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", 0, ProgramId, '@RequestedModule');       *@
            loadInspectPopup('0', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", "Setup", "@Enums.InspectPopupMode.Add.ToString()", ProgramId, '@RequestedModule');
        }
        return false;
    });
    function setTacticStatus(status) {
        var $this = $('#status');
        $this.removeClass();
        $this.text($('#hdnTacticStatus').val());
        if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statussubmitted');

        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statusrejected');
        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statusapproved');
        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statuscreated');
        }
    }


    $('.proceed_btn').click(function (e) {
        var label = $('#MultiSelectProcced').attr('proccedObject').toString();
        $('.dropdown_new_btn').each(function () {
            if ($(this).attr('label').toString() == label) {
                var menu = $(this).parent().find('.dropdown-wrapper');
                menu.toggleClass('dropdown-block minimum-width215');
                menu.find('.text_ellipsis').toggleClass('minmax-width200');
                menu.find(".weight,.weight_header,.first_hide,.revenue_header,.cost_header,.value_header,.top_head_attribute").toggle();
                menu.find('input[type=checkbox]').toggle();
                menu.find('.advance_a').text("> Multi-selection");
                menu.find('.advance_a').attr('mode', 'Single');
                $(this).find('p:first').text("Please Select");
                menu.find('input:checkbox').removeAttr('checked');
                menu.find('input[type=text]').val('');
                menu.find('input[type=text]').addClass('multiselect-input-text-color-grey');
                menu.find('p').addClass('single-p');
                menu.find('tr').addClass('trdropdownhover');
                menu.find('#aclose_tag').css('display', 'none');
                //added by Rahul Shah on 05/11/2015 - by default multi mode of Custom dropdown then hide the "Please Select"

                if ($(this).next().children().children().find('tbody').children(':first-child').find('p').text() == "Please Select") {
                    $(this).next().children().children().find('tbody').children(':first-child').show();

                }
            }
        });
        $('#MultiSelectProcced').slideUp(400);
        e.stopPropagation();
    });

</script>

<script type="text/javascript">
    // following functions regarding Mixpanel.

    function toSeconds(time_str) {
        // Extract hours, minutes and seconds
        var parts = time_str.split(':');
        // compute  and return total seconds
        return parts[0] * 3600 + // an hour has 3600 seconds
        parts[1] * 60 + // a minute has 60 seconds
        +
        parts[2]; // seconds
    }

    function LogMixpanelInspectTabTimeSpent()
    {
        var leaveTime = mxpnlTabLeaveTime;
        var arrivalTime = mxpnlTabArrivalTime;
        var difference = Math.abs(toSeconds(leaveTime) - toSeconds(arrivalTime));
       
        // format time differnece
        var result = [
            Math.floor(difference / 3600), // an hour has 3600 seconds
            Math.floor((difference % 3600) / 60), // a minute has 60 seconds
            difference % 60
        ];
        // 0 padding and concatation
        result = result.map(function(v) {
            return v < 10 ? '0' + v : v;
        }).join(':');
        logMixpanelTrack(mxpnlTabName +" Tab Spent Time(hh:mm:ss):" + result); // log inpsect tab spent event to mixpanel.
    }
    
    function UpdateViewByForLineIitemsGrid(AllocatedBy){
        var id = $("#hdnPlanTacticId").val();        
        var IsPlanEditable = '@IsPlanEditable';
        var url = '@Url.Content("~/Inspect/LoadLineItemTabFromTacticPopup/")';
        $("#divTab").load(url + '?tacticId=' + id +'&AllocatedBy=' +AllocatedBy +'&IsPlanEditable=' +IsPlanEditable, function (response, status, xhr) {
            $('#InspectTab').removeClass('SpanDisable');
        });
    }

</script>
<script src="@Url.Content("~/Scripts/js/mixpanel.inspect.js")" type="text/javascript"></script>

