@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
    var RedirectType = (string)ViewBag.RedirectType;
    var RedirectTypeMode = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString() ? true : false) : false);
    bool isIndex = (bool)(!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Index.ToString() ? true : false) : true);
    var CalledFromBudget = (!string.IsNullOrEmpty(RedirectType) ? (RedirectType == Enums.InspectPopupRequestedModules.Budgeting.ToString() ? "Budegting" : "") : "");
}

@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@*<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>*@
@{
    var TacticTitle = "";
    var Status = "";
    var PlanTacticId = 0;
    var IsResubmitableStatus = false;
    bool IsPlanEditable = false;
    var campaignId = Convert.ToString(ViewBag.CampaignId);
    var tacticMaster = (RevenuePlanner.Models.InspectModel)ViewBag.TacticDetail;
    var PlanProgramId = ViewBag.PlanProgrameId;
    var colorCode = "";
    string RequestedModule = (ViewBag.RedirectType != "") ? ViewBag.RedirectType : "";
    if (tacticMaster != null)
    {
        TempData["TacticModel"] = tacticMaster;
    }

    bool IsPlanCreateAll = false;
    if (ViewBag.IsPlanCreateAll != null)
    {
        IsPlanCreateAll = (bool)ViewBag.IsPlanCreateAll;
    }

    if (ViewBag.TacticDetail != null)
    {
        IsPlanEditable = (bool)ViewBag.IsPlanEditable;
        IsResubmitableStatus = (bool)Common.CheckAfterApprovedStatus(tacticMaster.Status);
        TacticTitle = tacticMaster.TacticTitle;
        PlanTacticId = tacticMaster.PlanTacticId;
        Status = tacticMaster.Status;
        colorCode = tacticMaster.ColorCode;
    }
    else
    {
        if (ViewBag.PlanProgrameId != null)
        {
            PlanProgramId = ViewBag.PlanProgrameId;
        }
    }

    bool IsTacticActualsAddEditAuthorized = (bool)ViewBag.IsTacticActualsAddEditAuthorized;
    string InspectMode = ViewBag.InspectMode;
    //Added By komal Rawal For #1213 - To maintain the mode on tab change after review
    string ProgramOpt = "";
    if (InspectMode == Enums.InspectPopupMode.ReadOnly.ToString())
    {
        ProgramOpt = "View";
    }
    else
    {
        ProgramOpt = "Edit";
    }
    //End
}


@Html.Hidden("hdnPlanTacticId", PlanTacticId, new { id = "hdnPlanTacticId" })
@Html.Hidden("hdnTacticStatus", Status, new { id = "hdnTacticStatus" })
@Html.Hidden("hdnTacticBudgetAllocationOpt", ProgramOpt, new { id = "hdnTacticBudgetAllocationOpt" })
@Html.Hidden("hdnIsResubmitableStatus", IsResubmitableStatus, new { id = "hdnIsResubmitableStatus" })
@Html.Hidden("hdnInspectMode", InspectMode, new { id = "hdnInspectMode" })
@Html.Hidden("hdnRequestedModule", RequestedModule, new { id = "hdnRequestedModule" })
@Html.Hidden("hdnIsPlanEditable", IsPlanEditable)
@Html.Hidden("hdnOwner", "", new { id = "hdnOwner" })



<div class="headerfix-wraper">
    <div class="headefix">

        <h2 class="title-simple source-sans-prolight">

            <span>
                @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
                {
                    if (IsPlanEditable)
                    {
                    <div class="delete-btn-tab" style="float: right;" id="divDeleteTactic">
                        <button class="delete-btn-gray" id="deleteTactic" type="button">Delete</button>
                    </div>
                    }

                    if (IsPlanCreateAll)
                    {
                    <div style="float: right; position: relative; margin-left: 10px;">
                        <span class="add-icon-white btn-blue btn-large" style="display: block; cursor: pointer; margin-right: 10px;" id="AddForm"></span>
                        <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 1;" id="popupnewTactic">
                            <ul style="margin: 0;">
                                <li class="new-prog" id="NewTactic">New Line Item</li>
                                <li class="copy-camp" id="CloneTactic">Copy Tactic</li>
                            </ul>
                        </div>
                    </div>
                    }

                    if (IsPlanEditable)
                    {
                    <span class="edit-icon-white btn-blue btn-large" style="display: block; cursor: pointer;" id="EditForm"></span>
                    }
                }

                @if (InspectMode == Enums.InspectPopupMode.Add.ToString())
                {
                    <span class="Save-icon-white btn-blue btn-large" style="display: block; cursor: pointer;" id="EditForm"></span>
                }

            </span>
            <buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>
        </h2>

    </div>
</div>
<div class="pop-body-wraper">
    <div class="PopupDiv">
        <form>

            <div id="MultiSelectProcced" class="alert alert-error hide message-position-popup-border-color " proccedobject="#ATTRIBUTUTES#" style="display: none;  max-width: 1000px !important;">
                <a class="close multiselect-close-button-popup">×</a>
                <span id="spanMultiSelectProcced" class="spanMultiSelectProcced-popup">
                    <b><strong>Data will be lost!</strong></b> Switching
                    <attributetext>#ATTRIBUTUTES#</attributetext>
                    from Multi-selection to Single-selection will reset all weight (%).
                </span>
                <button class="proceed_btn" type="button">Proceed </button>
                <a class="cncl_btn multiselect-cancel-link-popup" href="#">Cancel</a>
            </div>
            <div class="modal-popup-title" style="margin-bottom: 3px;">
                <span class="icon-flag bg-purple flagcolor" style="background-color:#@colorCode !important;"></span>
                <h2 class="title-simple source-sans-prolight">
                    <span>
                        <span id="lblTacticTitle" class="tipsyclassTitle ConcatTextlength" title="@HttpUtility.HtmlDecode(TacticTitle)">@HttpUtility.HtmlDecode(TacticTitle)</span>
                    </span>


                    @Html.TextBox("txtTacticTitle", HttpUtility.HtmlDecode(TacticTitle), new { placeholder = "Tactic name goes here", require = "true", maxlength = "255", @class = "span12 input-small light-blue-background", @style = "width: 95%; height: 28px;display:none;font-family:'source_sans_prolight', Arial, 'sans-serif';font-size:27px;color:#4d4d4d;line-height: normal;", title = HttpUtility.HtmlDecode(TacticTitle) })
                    @Html.TextBox("txtTitle1", "", new { @style = "display:none", id = "txtTitle" })
                </h2>
            </div>
            @if (tacticMaster != null && !string.IsNullOrEmpty(tacticMaster.TacticCustomName))
            {
                <div class="Machine-Name">
                    <span>External Name: </span>
                    <label style="display: inline;" id="lblCustomNameFormat">@tacticMaster.TacticCustomName </label>
                </div>
            }
        </form>

        @if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
        {
            <div class="modal-popup-summary">
                <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight" style="margin-bottom: 0px;">
                    <p class="modal-status">
                        Status:
                        @if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statussubmitted">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statusrejected">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value ||
                     tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statusapproved">@tacticMaster.Status</span>
            }
            else if (tacticMaster.Status == Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value)
            {
                            <span id="status" class="source-sans-prosemibold statuscreated">@tacticMaster.Status</span>
            }
                    </p>
                </div>
            </div>
        }

        <div>

            <ul class="nav nav-tabs new-margin no-position" id="InspectTab">
                <li class="active pull-left" id="liSetup">
                    <a>Setup</a>
                </li>
                <li class="pull-left" id="liReview">
                    <a>Review</a>
                </li>
                @if (IsTacticActualsAddEditAuthorized)
                {

                    <li class="pull-left" id="liActuals">
                        <a>Actuals</a>
                    </li>
                }
                 @if(!Sessions.IsBudgetShow)
                {
                <li class="pull-left" id="liBudget">
                    <a>Budget</a>
                </li>
                 }
            </ul>
            <div id="divTab">
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabReview = "Review";
    var TabActual = "Actuals";
    var divTab = "#divTab";
    var TabBudget = "Budget";
    var tabtext = "";
    var InspectMode = "@InspectMode"; // Modifiedby Komal Rawal for #1213 - For Handling add mode of inspect popup
    $(document).ready(
      function () {
          var modelHeight = $(window).height();
          var headerHeight = $('.headerfix-wraper').height();
          var bodyWrapperMaxHeight = modelHeight - headerHeight - 100;
          //$('.pop-body-wraper').css('height', '92%');
          NumberFormatterTipsyTitle($("#lblCustomNameFormat"), 130);
          $("#AddForm").css("display", "block");
          CloseIconClick();
          NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
          var InspectValue = $("#hdnInspectPopup").val();
          var planTacticId = $("#hdnPlanTacticId").val();
          // Call Remove Tabclass
          RemoveTabClass();

          $("#li" + InspectValue).removeClass("pull-left");
          $("#li" + InspectValue).addClass("active pull-left");
          tabtext = ($("#li" + InspectValue).children('a').text());
          $('#div' + tabtext).css({ display: "block" });

          loadReview(planTacticId, tabtext);
          if ($('#EditForm').hasClass('edit-icon-white') && InspectMode == '@Enums.InspectPopupMode.Edit.ToString()') {
              $('#EditForm').removeClass('edit-icon-white');//Modified for #1318
              $('#EditForm').addClass('Save-icon-white');
              $("#errorMessage").css("display", "none");
              $("#successMessage").css("display", "none");
              $('#MultiSelectProcced').css("display", "none");
              $("#txtTacticTitle").removeClass("error");
          }
          // Click on Tab Partialview Refresh Based On Selected Tab
          $("#liSetup,#liReview,#liActuals,#liBudget").on("click", function () {
              var activeTab = $("#InspectTab li.active a").text();
              tabtext = ($(this).children('a').text());

              //if (activeTab == 'Actuals') {
              //    displayConfirm('topTabsClick("' + tabtext + '","' + activeTab + '");');
              //}
              var returnpara = SaveAllData(activeTab); //Added By Komal Rawal for #1213 to save data to tab click

              if (returnpara) {
                  RemoveTabClass();
                  $(this).removeClass("pull-left");
                  $(this).addClass("active pull-left");
                  //  $("#errorMessage").css("display", "none");
                  $("#successMessage").css("display", "none");
                  $('#MultiSelectProcced').css("display", "none");
                  var planTacticId = $("#hdnPlanTacticId").val();
                  InspectMode = "@Enums.InspectPopupMode.Edit.ToString()";
                  loadReview(planTacticId, tabtext);
              }

          });

          //Added By Komal Rawal for #1213
          function SaveAllData(activeTab) {
              var ProgramOpt = $("#hdnTacticBudgetAllocationOpt").val();
              if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                  if (activeTab == TabSetup) {

                      var ReturnParameter = SetupSavetactic();
                      if (ReturnParameter == false) {
                          return false;
                      }
                  }

                  else if (activeTab == TabBudget) {
                      var ReturnParameter = TacticBudgetSave();
                      if (ReturnParameter == false) {
                          return false;
                      }
                  }

                  else if (activeTab == TabActual) {
                      var hdnTacticStatus = $("#hdnTacticStatus").val();
                      var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                      var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                      var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                      if (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus) {
                          var ReturnParameter = SaveActual();
                      }
                      else {
                          var ReturnParameter = SaveTitle();

                      }
                      if (ReturnParameter == false) {
                          return false;
                      }
                  }

                  else if (activeTab = TabReview) {
                      var ReturnParameter = SaveTitle();
                      if (ReturnParameter == false) {
                          return false;
                      }
                  }

              }

              return true;

          }



          //End

          // Close event for Error Message & Success Message Close button
          $(".alert").find(".close").on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).closest(".alert").css("display", "none");
              /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
          });

          //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
          $(document).on("click", "#confirmClose", function (e) {
              $('#spanMessageError').html("");
              $("#errorMessage").hide();
          });
          //Dharmraj End 14July2014 : ticket #547, No warning of data loss during Add actuals

          $('#EditForm').on("click", function (e) {
              isDataModified = true;
              //Modified for #1318 by Komal Rawal to handle the Save function
              var activeTab = $("#InspectTab li.active a").text()
              var planTacticId = $("#hdnPlanTacticId").val();

              if ($('#EditForm').hasClass('edit-icon-white')) {
                  $('#EditForm').removeClass('edit-icon-white');//Modified for #1318 by Komal Rawal
                  $('#EditForm').addClass('Save-icon-white');
                  $("#errorMessage").css("display", "none");
                  $("#successMessage").css("display", "none");
                  $('#MultiSelectProcced').css("display", "none");
                  $("#txtTacticTitle").removeClass("error");


                  if (activeTab == TabReview) {
                      activeTab = TabSetup;
                  }
                  if (activeTab == TabActual) {
                      //// Modified By: Arpita Soni on 1/7/2015.
                      //// Ticket: 1067
                      var hdnTacticStatus = $("#hdnTacticStatus").val();
                      var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                      var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                      var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                      if (hdnTacticStatus != Approvedstatus && hdnTacticStatus != InProgressstatus && hdnTacticStatus != Completestatus) {
                          activeTab = TabSetup;

                      }
                  }
                  $('#popupnewTactic').css('display', 'none');
                  $("#hdnTacticBudgetAllocationOpt").val("Edit");
                  $('#txtTacticTitle').css('display', 'block');
                  //$("#txtTacticTitle").val($("#lblTacticTitle").text());
                  $('#lblTacticTitle').css('display', 'none');
                  // $('#EditForm').css('display', 'none');
                  loadReview(planTacticId, activeTab);
                  //// Added By Kalpesh on 11/06/2014 to Non-Editable Tactic Name.mp4 mentioned in resolve ticket #868
                  $("#txtTacticTitle").prop('readonly', false);
                  //  $("#AddForm").css("display", "none");
                  //$('#divDeleteTactic').css('display', 'none');
              }
              else {


                  //To save the Active Tab on Save Button
                  if (activeTab == TabSetup) {
                      var ReturnParameter = SetupSavetactic();
                      if (ReturnParameter == false) {
                          return false;
                      }
                      else {

                          $("#hdnTacticBudgetAllocationOpt").val("View");
                          planTacticId = $("#hdnPlanTacticId").val();
                          InspectMode = "@Enums.InspectPopupMode.Edit.ToString()";
                          loadReview(planTacticId, activeTab);
                          $('#EditForm').removeClass('Save-icon-white');
                          $('#EditForm').addClass('edit-icon-white');
                          $('#txtTacticTitle').css('display', 'none');
                          $('#lblTacticTitle').css('display', 'block');
                          $("#lblTacticTitle").removeAttr("style");
                      }
                  }

                  else if (activeTab == TabBudget) {
                      var ReturnParameter = TacticBudgetSave();
                      if (ReturnParameter == false) {
                          return false;
                      }
                      else {
                          $("#hdnTacticBudgetAllocationOpt").val("View");
                          loadReview(planTacticId, activeTab);
                          $('#EditForm').removeClass('Save-icon-white');
                          $('#EditForm').addClass('edit-icon-white');
                          $('#txtTacticTitle').css('display', 'none');
                          $('#lblTacticTitle').css('display', 'block');
                          $("#lblTacticTitle").removeAttr("style");
                      }
                  }

                  else if (activeTab == TabActual) {

                      var hdnTacticStatus = $("#hdnTacticStatus").val();
                      var Approvedstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Approved.ToString()].ToString()";
                      var Completestatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.Complete.ToString()].ToString()";
                      var InProgressstatus = "@RevenuePlanner.Helpers.Enums.TacticStatusValues[RevenuePlanner.Helpers.Enums.TacticStatus.InProgress.ToString()].ToString()";
                      if (hdnTacticStatus == Approvedstatus || hdnTacticStatus == InProgressstatus || hdnTacticStatus == Completestatus) {
                          var ReturnParameter = SaveActual();
                      }
                      else {
                          var ReturnParameter = SaveTitle();
                      }
                      if (ReturnParameter == false) {
                          return false;
                      }
                      else {
                          $("#hdnTacticBudgetAllocationOpt").val("View");
                          loadReview(planTacticId, activeTab);
                          $('#EditForm').removeClass('Save-icon-white');
                          $('#EditForm').addClass('edit-icon-white');
                          $('#txtTacticTitle').css('display', 'none');
                          $('#lblTacticTitle').css('display', 'block');
                          $("#lblTacticTitle").removeAttr("style");
                      }
                  }

                  else if (activeTab == TabReview) {

                      var ReturnParameter = SaveTitle();
                      if (ReturnParameter == false) {
                          return false;
                      }
                      else {


                          $("#hdnTacticBudgetAllocationOpt").val("View");
                          loadReview(planTacticId, activeTab);
                          $('#EditForm').removeClass('Save-icon-white');
                          $('#EditForm').addClass('edit-icon-white');
                          $('#txtTacticTitle').css('display', 'none');
                          $('#lblTacticTitle').css('display', 'block');
                          $("#lblTacticTitle").removeAttr("style");
                      }
                  }
              }

              //  }
          });


      });

    function ShowError(value) {
        $("#modal-container-186470").scrollTop(0);
        $("#errorMessage").css("display", "block");
        $("#errorMessage").slideDown(400);
        $("#spanMessageError").empty();
        $("#spanMessageError").html(value);
    }

    //Added By komal rawal for saving the Tactictitle in actual tab of Edit Mode
    function SaveTitle() {
        var returnparameter = false;
        var title = htmlEncode($('#txtTacticTitle').val());
        var planTacticId = $("#hdnPlanTacticId").val();
        var txtTacticValue = $("#txtTacticTitle").val();
        var iserror = false;

        if (title == '') {
            $('#txtTacticTitle').addClass("error");
            iserror = true;
        }
        else {
            $('#txtTacticTitle').removeClass("error");
        }
        if (iserror) {
            if (iserror) {
                ShowError("@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField");
                return false;
            }
        }
        $.ajax({
            async: false,
            type: 'POST',
            url: '@Url.Content("~/Inspect/SaveTitle/")',
            data: { title: title, Id: planTacticId, ActivePopup: "Tactic" },
            success: function (data) {
                if (!data.IsDuplicate) {
                    var planTacticId = data.planTacticId;
                    var planCampaignId = data.planCampaignId;
                    var planProgramId = data.planProgramId;
                    var requestedModule = $("#hdnRequestedModule").val();
                    $('#lblTacticTitle').text(txtTacticValue);
                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.Msg);
                    $("#errorMessage").css("display", "none");
                    RefreshCurrentTab(requestedModule, planCampaignId, planProgramId, planTacticId);
                    returnparameter = true
                }
                else {
                    ShowError(data.errormsg);
                    returnparameter = false;
                }
            }
        });
        return returnparameter;
    }
    //End


    function topTabsClick(tabText) {
        var returnpara = savealldata(activeTab);
        if (returnpara) {
            RemoveTabClass();
            $("#li" + tabText).removeClass("pull-left");
            $("#li" + tabText).addClass("active pull-left");
            $("#errorMessage").css("display", "none");
            $("#successMessage").css("display", "none");
            $('#MultiSelectProcced').css("display", "none");
            /*Changed by Nirav Shah for Inspect pop-up screen : CSS changes as per new HTML on 13 feb 2014*/
            var tabtext = ($("#li" + tabText).children('a').text());
            var planTacticId = $("#hdnPlanTacticId").val();
            loadReview(planTacticId, tabtext);
        }
    }

    $('#AddForm').click(function () {
        if ($('#popupnewTactic').css('display') == 'none') {
            $('#popupnewTactic').css('display', 'block')
        }
        else {
            $('#popupnewTactic').css('display', 'none')
        }
    });

    function RemoveTabClass() {
        $('#InspectTab').children().each(function () {
            if ($(this).hasClass('active pull-left')) {
                $(this).removeClass("active pull-left");
                $(this).addClass("pull-left");
            }
        });
    }

    function loadReview(id, tabValue) {
        $.ajaxSetup({ cache: false });
        var url;
        var ProgramOpt = $("#hdnTacticBudgetAllocationOpt").val();
        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });

        if (tabValue == TabSetup) {
            if (InspectMode == '@Enums.InspectPopupMode.Add.ToString()') {
                url = '@Url.Content("~/Inspect/CreateTactic/")';
                $("#divTab").load(url + '?id=' + "@PlanProgramId");
            }
            else if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {

                url = '@Url.Content("~/Inspect/EditTactic/")';

                $("#divTab").load(url + '?id=' + id + '&RedirectType=""&CalledFromBudget=""', function (response, status, xhr) {
                    if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                        //// Call function to redirect on service unavailibility.
                        //// Added By: Maninder Singh Wadhva on 11/24/2014.
                        //// Ticket: 942 Exception handeling in Gameplan.
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                });
                //  TacticBudgetSave()
            }
            else {
                url = '@Url.Content("~/Inspect/LoadSetup/")';
                $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                    if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                        //// Call function to redirect on service unavailibility.
                        //// Added By: Maninder Singh Wadhva on 11/24/2014.
                        //// Ticket: 942 Exception handeling in Gameplan.
                        window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                    }
                });
            }
        }

        if (tabValue == TabReview) {
            //$('#txtTacticTitle').css('display', 'none');
            //$('#lblTacticTitle').css('display', 'block');
            //$("#lblTacticTitle").removeAttr("style");
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
            }

            url = '@Url.Content("~/Inspect/LoadReview/")';
            $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                    //// Call function to redirect on service unavailibility.
                    //// Added By: Maninder Singh Wadhva on 11/24/2014.
                    //// Ticket: 942 Exception handeling in Gameplan.
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }
            });
        }
        if (tabValue == TabActual) {

            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {

                //  $("#divTab").empty();
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
                // return false;

            }

            url = '@Url.Content("~/Inspect/LoadActuals/")';
            $("#divTab").load(url + '?id=' + id, function (response, status, xhr) {
                if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                    //// Call function to redirect on service unavailibility.
                    //// Added By: Maninder Singh Wadhva on 11/24/2014.
                    //// Ticket: 942 Exception handeling in Gameplan.
                    window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
                }
            });
        }

        if (tabValue == TabBudget) {
            if (ProgramOpt == '@Enums.InspectPopupMode.Edit.ToString()') {
                $('#txtTacticTitle').css('display', 'block');
                $('#lblTacticTitle').css('display', 'none');
            }

            url = '@Url.Content("~/Inspect/LoadTacticBudgetAllocation/")';
            $("#divTab").load(url + '?id=' + id);
        }
    }

    //Dharmraj Start 14July2014 : ticket #547, No warning of data loss during Add actuals
    function AssignDefaultValue() {
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            $(this).attr("myValue", $(this).val());
        });
    }
    //function to check myValue attribute values and input values that any changes made?
    function isDataChanged() {
        var changed = false;
        $('#divTab').find("input,input[type=text],textarea,select").each(function () {
            var iv = $(this).attr("myValue");
            if ($(this).val() != iv) {
                //changed = true;
                changed = false;
            }
        });
        return changed;
    }

    function displayConfirmCommon() {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                $('#modal-container-186470').modal("hide");
            });
        }
        else {
            $('#modal-container-186470').modal("hide");
        }
    }

    function displayConfirm(functionName) {
        if (isDataChanged()) {
            $('#spanMessageError').html(" You have unsaved changes. Do you wish to leave this page and lose your work?&nbsp;&nbsp;&nbsp;&nbsp;<a id='btnConfirmOK' class='btn-gray CursorHand' style='color:gray;'>Continue</a>&nbsp;&nbsp;<a style='color:gray;' id='confirmClose' href='#' class='underline'>Cancel</a>");
            $("#errorMessage").css("display", "block");
            $("#btnConfirmOK").click(function () {
                $('#spanMessageError').html("");
                $("#errorMessage").hide();
                eval(functionName);
            });
        }
        else {
            eval(functionName);
        }
    }

    //Dharmraj End 14July2014 : ticket #547, No warning of data loss during Add actuals


    $('#CloneTactic').click(function () {
        isDataModified = true;
        var idPlanTactic = $("#hdnPlanTacticId").val();
        var Title = $("#lblTacticTitle").html();
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Inspect/Clone")',
            data: {
                CloneType: '@Enums.DuplicationModule.Tactic',
                Id: idPlanTactic,
                title: Title,
                CalledFromBudget: '@CalledFromBudget',
                RequsetedModule: '@RedirectType'
            },
            success: function (data) {
                if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                    window.location = '@Url.Content("~/Login/Index")';
                }
                else if (data.IsSuccess) {

                    var currentTab = "Setup";

                    if ('@RequestedModule' == "@Enums.InspectPopupRequestedModules.Budgeting.ToString()") {
                        currentTab = "Budget";
                    }

                    var planTacticId = data.Id;
                    var expandPlanTacticId = data.expand;
                    var planCampaignId = '@campaignId';
                    var planProgramId = '@PlanProgramId';

                    loadInspectPopup(planTacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '@RequestedModule');

                    if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == '@RequestedModule') {
                        $("#hdnBudgetingExpandId").val(expandPlanTacticId);
                        $("#hdnBudgetingIsSave").val("true");
                    }

                    $("#successMessage").css("display", "block");
                    $("#spanMessageSuccess").empty();
                    $("#spanMessageSuccess").text(data.msg);
                    $("#errorMessage").css("display", "none");
                    $("#hdnIsCreate_Clone").val(true); //// Hidden value used in _plan.cshmtl page to check that page require to refresh or not.
                    return;
                }
                else {
                    $("#successMessage").slideUp(50);
                    $("#errorMessage").slideDown(400);
                    $("#spanMessageError").empty();
                    $("#spanMessageError").val(data.msg);
                    return false;
                }
            }
        });
    });

    function SaveMessageOnParent(value) {
        $("#modal-container-186470").modal('hide');
        $("#errorMessageDuplicatePlan").slideUp(50);
        $("#successMessageDuplicatePlan").slideDown(400);
        $("#cSuccessDuplicatePlan").empty();
        $("#cSuccessDuplicatePlan").text(htmlDecode(value));
        $("#successMessageDuplicatePlan").removeClass("message-position");
        $("#successMessageDuplicatePlan").addClass("successMessage-InspectPopUpSections");

    }

    $("#deleteTactic").click(function () {
        if (confirm('@Common.objCached.ConfirmationForDeleteTactic')) {
            isDataModified = true;
            var ProgramId = $("#hdnPlanTacticId").val();
            var uId = $(window).attr('name');
            var arrClosedTaskString = null;
            if (typeof arrClosedTask != 'undefined') {
                arrClosedTaskString = arrClosedTask.toString();
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/DeleteSection")',
                data: {
                    ID: ProgramId
                    , DeleteType: '@Enums.DuplicationModule.Tactic'
                     , UserId: uId
                     , closedTask: arrClosedTaskString
                     , CalledFromBudget: '@CalledFromBudget'
                        , IsIndex: '@isIndex'
                        , RedirectType: '@RedirectTypeMode'
                },
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.IsSuccess && data.opt != 'undefined') {
                            if (data.opt == '@Enums.InspectPopupRequestedModules.Index.ToString()') {
                                SaveMessageOnParent(data.msg);
                                RefershPlanHeaderCalc();
                                //Added By : Kalpesh Sharma Internal review points 18/11/2014
                                if (document.getElementById("liGrid") != null && document.getElementById("liGrid").className.indexOf("active") >= 0) {
                                    LoadPlanGrid();
                                    gridSearchFlag = 0;
                                    
                                  
                                }
                                else {
                                    RefreshCurrentTab();
                                    //Added by Rahul Shah on 20/10/2015 fro PL #1634
                                   
                                }
                                //Added by Rahul Shah on 20/10/2015 fro PL #1634
                                addDefaultModalPopupBackgroungColor();
                                $("#modal-container-186470").addClass("transition-close");
                                $("#modal-container-186470").removeClass("transition_y");
                                $('body').removeClass('bodyOverflow');
                            }
                            else {

                                if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == data.opt) {
                                    $("#hdnBudgetingExpandId").val(data.expand);
                                    $("#hdnBudgetingIsSave").val("true");
                                    $("#hdnBudgetingIsDelete").val("true");
                                    $(".close-x-big-icon").trigger("click");
                                }
                                else {
                                    window.location.href = data.redirect;
                                }

                                return;
                            }
                        }
                        else {
                            $("#successMessage").slideUp(50);
                            $("#errorMessage").slideDown(400);
                            $("#spanMessageError").empty();
                            $("#spanMessageError").val(data.msg);
                            return false;
                        }
                    }
                }
            });
        }
    });


    $(document).mouseup(function (e) {
        var popup = $('#popupnewTactic');
        var button = $('#AddForm');
        if (!popup.is(e.target) && popup.has(e.target).length === 0 && popup.css('display') == 'block' && !button.is(e.target) && button.has(e.target).length === 0) {
            $('#popupnewTactic').css("display", "none");
        }
    });
    $('#NewTactic').click(function () {

        loadInspectPopup('0', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", "Setup", '@Enums.InspectPopupMode.Add.ToString()', $('#hdnPlanTacticId').val(), $("#hdnRequestedModule").val());
    });

    function setTacticStatus(status) {
        var $this = $('#status');
        $this.removeClass();
        $this.text($('#hdnTacticStatus').val());
        if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Submitted.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statussubmitted');

        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Decline.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statusrejected');
        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Approved.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Complete.ToString())).Value'
            || status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.InProgress.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statusapproved');
        }
        else if (status == '@Enums.TacticStatusValues.Single(tacticStatus => tacticStatus.Key.Equals(Enums.TacticStatus.Created.ToString())).Value') {
            $this.addClass('source-sans-prosemibold statuscreated');
        }
    }
</script>
