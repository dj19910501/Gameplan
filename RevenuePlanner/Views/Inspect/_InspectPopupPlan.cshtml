@using RevenuePlanner.Helpers;
@{
    var popupvalue = (string)ViewBag.InspectPopup;
    var InspectMode = ViewBag.InspectMode != null ? (string)ViewBag.InspectMode : string.Empty;
    var planDetails = (RevenuePlanner.Models.InspectModel)ViewBag.PlanDetails;
    bool IsPlanEditable = (bool)ViewBag.IsPlanEditable;
    bool IsPlanCreateAuthorized = (bool)ViewBag.IsPlanCreateAuthorized;
    string RequestedModule = ViewBag.RedirectType != null ? ViewBag.RedirectType : "";
    var RedirectTypeMode = (bool)(!string.IsNullOrEmpty(RequestedModule) ? (RequestedModule == Enums.InspectPopupRequestedModules.ApplyToCalendar.ToString() ? true : false) : false);
    bool isIndex = (bool)(!string.IsNullOrEmpty(RequestedModule) ? (RequestedModule == Enums.InspectPopupRequestedModules.Index.ToString() ? true : false) : true);
    var CalledFromBudget = (!string.IsNullOrEmpty(RequestedModule) ? (RequestedModule == Enums.InspectPopupRequestedModules.Budgeting.ToString() ? "Budegting" : "") : "");
    var goalType = planDetails.GoalType;
    var modelId = planDetails.ModelId;
    var goalValue = planDetails.GoalValue;


    if (planDetails != null)
    {
        TempData["PlanModel"] = planDetails;

    }
    
}

@Html.Hidden("hdnGoalType", goalType, new { id = "hdnGoalType" })
@Html.Hidden("hdnPopup", popupvalue, new { id = "hdnInspectPopup" })
@Html.Hidden("hdnPlanId", planDetails.PlanId, new { id = "hdnPlanId" })
@Html.Hidden("hdnRequestedModule", RequestedModule, new { id = "hdnRequestedModule" })
<buttom class="close-x-big-icon" data-dismiss="modal" aria-hidden="true"></buttom>

<div id="successMessagePlan" class="alert hide alert-success message-position-small">
    <a class="close">×</a>
    <strong>Success.</strong>
    <span id="spanSuccMessagePlan"></span>
</div>

<div id="errorMessagePlan" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong>
    <span id="spanErrMessagePlan"></span>
</div>
<div id="divErrLessBudget" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error!</strong> <span>@Common.objCached.ErrMsgLessPlanBudget</span>
</div>
<div id="divBudgetError" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error! </strong><span id="BudgetErrorMessage">You cannot allocate more than budgeted for Jan and May .</span>
</div>
<form>
    <div class="modal-popup-title">
        <span class="icon-flag bg-purple" style="background-color:#@planDetails.ColorCode !important;"></span>
        <h2 class="title-simple source-sans-prolight">
            @if (InspectMode == Enums.InspectPopupMode.Edit.ToString())
            {
                @Html.TextBox("txtTitle", HttpUtility.HtmlDecode(planDetails.Title), new { placeholder = "Required", require = "true", maxlength = "255", @class="span12 input-small font20 light-blue-background", style="width: 95%; height: 28px;", title = planDetails.Title })
                @Html.TextBox("txtTitle1", "", new { @style = "display:none", id="txtTitle1" })
            }
            else
            {
                <span class="tipsyclassTitle ConcatTextlength" title="@Html.Raw(planDetails.Title)">@Html.Raw(planDetails.Title)</span>
            }
            @if(!(InspectMode == Enums.InspectPopupMode.Edit.ToString()))
            {
                if (IsPlanEditable)
                {
                    <div id="divDeletePlan" style="float: right;" class="delete-btn-tab">
                        <button type="button" id="deletePlan" class="delete-btn-gray">Delete</button>
                    </div>
                }
                <div style="float: right; position: relative;">
                    <span id="AddForm" style="display: block; cursor: pointer; margin-right: 10px;" class="add-icon-white btn-blue btn-large"></span>
                    <div id="popupnewplan" style="display: none; position: absolute; top: 35px;" class="btn-dropdwn">
                        <ul style="margin: 0;">
                            <li id="NewCampaign" class="new-prog">New Campaign</li>
                            @if(IsPlanCreateAuthorized){
                            <li id="ClonePlan" class="copy-camp">Copy Plan</li>
                            }
                        </ul>
                    </div>
                </div>
                if (IsPlanEditable)
                {
                <div style="float: right; position: relative;">
                    <span id="EditForm" style="display: block; cursor: pointer; margin-right: 10px;" class="edit-icon-white btn-blue btn-large"></span>
                    <div id="popupeditplan" style="display: none; position: absolute; top: 35px;" class="btn-dropdwn">
                        <ul style="margin: 0; width: 141px;">
                            <li id="lnkEdit" class="new-edit">Edit Details</li>
                            <li id="EditDefination" class="new-edit">Edit Plan Definition</li>
                        </ul>
                    </div>
                </div>
                }
            }
        </h2>
    </div>
</form>

@if (!(InspectMode == Enums.InspectPopupMode.Add.ToString()))
{
    <div class="modal-popup-summary">
        <h3 class="modal-popup-innertitle source-sans-proregular">Summary</h3>
        <div id="nl-form" class="nl-form nl-form-modal source-sans-prolight">
            I'm running a plan called 
            <span id="plan-name" class="source-sans-prosemibold color5693B3">@HttpUtility.HtmlDecode(planDetails.Title)</span>
            based on the 
            <span id="model-name" class="source-sans-prosemibold color5693B3">@planDetails.ModelTitle</span>
            model with a
            <span id="inq-label" class="source-sans-prosemibold color5693B3">@planDetails.GoalType</span>
            goal of 
        <span id="revenueSign" class="source-sans-prosemibold color5693B3">$ </span>
            <span id="inq-value" class="source-sans-prosemibold color5693B3">@planDetails.GoalValue</span>
            which will require 
            <span id="input1" class="source-sans-prosemibold color5693B3"></span>
            <span id="msg1" class="source-sans-prosemibold color5693B3"></span>
            <span id="conjuntionWord">and </span>
            <span id="input2" class="source-sans-prosemibold color5693B3"></span>
            <span id="msg2" class="source-sans-prosemibold color5693B3"></span>.
        </div>
    </div>
}

<div>
    <ul class="nav nav-tabs new-margin" id="InspectTab">
        <li class="active pull-left" id="liSetup">
            <a>Setup</a>
        </li>
        <li class="pull-left" id="liBudget">
            <a>Budget</a>
        </li>
         <li class="pull-right">
            <h3 class="modal-popup-innertitle source-sans-proregular">Details</h3>          
        </li>
    </ul>
    <div id="divTab">
    </div>
</div>

<script type="text/javascript">

    var divPartial = "#divPartial";
    var TabSetup = "Setup";
    var TabBudget = "Budget";
    var divTab = "#divTab";

    $(document).ready(function () {
        CloseIconClick();
        NumberFormatterTipsyTitle(".tipsyclassTitle", 55);
        var InspectValue = $("#hdnInspectPopup").val();
        var planId = $("#hdnPlanId").val();
        // Call Remove Tabclass
        RemoveTabClass();

        if ($("#hdnGoalType").val().toLowerCase() == "revenue") {
            $('#revenueSign').show();
            $('#conjuntionWord').html('and ');
        }
        else {
            $('#revenueSign').hide();
            $('#conjuntionWord').html('to deliver ');
        }

        $("#inq-label").text('@Common.GetGoalTypeFromGoalCode(Sessions.User.ClientId,goalType)');

        $("#li" + InspectValue).removeClass("pull-left");
        $("#li" + InspectValue).addClass("active pull-left");
        var tabtext = ($("#li" + InspectValue).children('a').text());
        $('#div' + tabtext).css({ display: "block" });

        $("#inq-value").text(number_format($("#inq-value").text().toString(), 0, 0, ','));

        if (!('@InspectMode' == '@Enums.InspectPopupMode.Add.ToString()')) {
            calculateBudget('@modelId', '@goalType', '@goalValue');
        }

        loadInnerTabs(planId, tabtext);
    });

    function calculateBudget(_modelId, _goalType, _goalValue) {
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Plan/CalculateBudget/")',
            dataType: "json",
            data: { modelId: _modelId, goalType: _goalType, goalValue: _goalValue },
            success: function (data) {
                $('#msg1').html(data.msg1);
                $('#msg2').html(data.msg2);
                $('#input1').html(number_format(data.input1.toString(), 0, '.', ','));
                if (_goalType.toLowerCase() != "revenue") {
                    $('#input2').html('$' + number_format(data.input2.toString(), 0, '.', ','));
                }
                else {
                    $('#input2').html(number_format(data.input2.toString(), 0, '.', ','));
                }
                $('#averageDealSize').html(FormatCurrency(data.ADS, false));
            }
        });
    }

    function RemoveTabClass() {
        $('#InspectTab').children().each(function () {
            if ($(this).hasClass('active pull-left')) {
                $(this).removeClass("active pull-left");
                $(this).addClass("pull-left");
            }
        });
    }

    function loadInnerTabs(id, tabValue) {
        $("#hdnInspectPopup").val(tabValue);
        $.ajaxSetup({ cache: false });
        var url;
        if (tabValue == TabSetup) {
            url = '@Url.Content("~/Inspect/LoadPlanSetup/")';
        }
        else if (tabValue == TabBudget) {
            url = '@Url.Content("~/Inspect/LoadPlanBudget/")';
        }

        RemoveTabClass();
        $("#li" + tabValue).removeClass("pull-left");
        $("#li" + tabValue).addClass("active pull-left");
        $('#div' + tabValue).css({ display: "block" });

        $("#divTab").empty();
        $("#divTab").load(url + '?id=' + id + '&InspectPopupMode=' + '@InspectMode', function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    }

    // Click on Tab Partialview Refresh Based On Selected Tab
    $("#liSetup,#liBudget").on("click", function () {
        RemoveTabClass();
        $(this).removeClass("pull-left");
        $(this).addClass("active pull-left");
        HideAllMessages();
        var tabtext = ($(this).children('a').text());
        var planId = $("#hdnPlanId").val();
        loadInnerTabs(planId, tabtext);
    });

    // Close event for Error Message & Success Message Close button 
    $(".alert").find(".close").on("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
        $(this).closest(".alert").css("display", "none");
    });

    function HideAllMessages() {
        $("#successMessagePlan").css("display", "none");
        $("#spanSuccMessagePlan").empty();
        $("#errorMessagePlan").css("display", "none");
        $("#spanErrMessagePlan").empty();
        $("#successMessage").css("display", "none");
        $("#spanMessageSuccess").empty();
        $("#errorMessage").css("display", "none");
        $("#spanMessageError").empty();
    }

    $('#EditForm').click(function () {
        if ($('#popupeditplan').css('display') == 'none') {
            $('#popupeditplan').css('display', 'block')
        }
        else {
            $('#popupeditplan').css('display', 'none')
        }
    });

    $('#AddForm').click(function () {
        if ($('#popupnewplan').css('display') == 'none') {
            $('#popupnewplan').css('display', 'block')
        }
        else {
            $('#popupnewplan').css('display', 'none')
        }
    });

    $(document).mouseup(function (e) {
        var popup = $('#popupnewplan');
        var button = $('#AddForm');
        if (!popup.is(e.target) && popup.has(e.target).length === 0 && popup.css('display') == 'block' && !button.is(e.target) && button.has(e.target).length === 0) {
            $('#popupnewplan').css("display", "none");
        }

        var editpopup = $('#popupeditplan');
        var editbutton = $('#EditForm');
        if (!editpopup.is(e.target) && editpopup.has(e.target).length === 0 && editpopup.css('display') == 'block' && !editbutton.is(e.target) && editbutton.has(e.target).length === 0) {
            $('#popupeditplan').css("display", "none");
        }
    });

    $('#EditDefination').click(function () {
        var pid = $("#hdnPlanId").val();
        var url = '@Url.Content("~/Plan/Create?id=")' + pid;
        window.location.href = url;
    });

    $('#NewCampaign').click(function () {
        var planId = $("#hdnPlanId").val();
        loadInspectPopup('0', "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Campaign).ToLower()", "Setup", "@Enums.InspectPopupMode.ReadOnly.ToString()", planId, '@RequestedModule');
    });

    $('#ClonePlan').click(function () {
        var planId = $("#hdnPlanId").val();
        if (parseInt(planId) > 0) {
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Plan/Clone")',
                data: {
                    CloneType: '@Enums.DuplicationModule.Plan',
                    Id: '@Model.PlanId',
                    title: ''
                },
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.redirect) {
                            var currentTab = "Setup";

                            if ('@RequestedModule' == "@Enums.InspectPopupRequestedModules.Budgeting.ToString()") {
                                 currentTab = "Budget";
                            }

                            var planId = data.Id;
                            var expandplanProgramId = data.expand;
                            var planCampaignId = "";
                            var planProgramId="";
                            loadInspectPopup(planId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Plan).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '@RequestedModule');

                            if ("@Enums.InspectPopupRequestedModules.Budgeting.ToString()" == '@RequestedModule') {
                                $("#hdnBudgetingExpandId").val(expandplanProgramId);
                                $("#hdnBudgetingIsSave").val("true");
                                $("#hdnBudgetingCurrentTab").val("aAllocated")
                                $("#hdnBudgetingCurrentPlanId").val(planId)
                            }
                            else {
                            RefreshCurrentTab('@RequestedModule', planCampaignId, planProgramId, 0);
                        }

                            $("#successMessage").css("display", "block");
                            $("#spanMessageSuccess").empty();
                            $("#spanMessageSuccess").text(data.msg);
                            return;
                        }
                        if (data.errormsg != '') {
                            $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + $('#cErrorDuplicatePlan').html());
                            return;
                        }
                    }
                }
            });
        }
    });

    $('#lnkEdit').click(function () {
        var InspectValue = $("#hdnInspectPopup").val();
        var tabtext = ($("#li" + InspectValue).children('a').text());
        var planId = $("#hdnPlanId").val();
        HideAllMessages();
        var url = '@Url.Content("~/Inspect/LoadInspectPopup")';
        $("#divPartial").empty();
        $("#divPartial").load(url + '?id=' + planId + '&Section=' + "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Plan).ToLower()" + '&TabValue=' + tabtext + '&InspectPopupMode=' + "@Enums.InspectPopupMode.Edit.ToString()" + '&RequestedModule=' + '@RequestedModule', function (response, status, xhr) {
            if (response == '{"serviceUnavailable":"~/Login/ServiceUnavailable"}') {
                //// Call function to redirect on service unavailibility.
                //// Added By: Maninder Singh Wadhva on 11/24/2014.
                //// Ticket: 942 Exception handeling in Gameplan.
                window.location = '@Url.Content(Common.RedirectOnServiceUnavailibilityPage)';
            }
        });
    });

    $("#deletePlan").click(function () {
        if (confirm('@Common.objCached.PlanDeleteConfirmMessage')) {
            var planId = $("#hdnPlanId").val();
            var uId = $(window).attr('name');
            var arrClosedTaskString = null;
            if (typeof arrClosedTask != 'undefined') {
                arrClosedTaskString = arrClosedTask.toString();
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/DeleteSection")',
                data: {
                    ID: planId,
                    DeleteType: '@Enums.DuplicationModule.Plan',
                    UserId: uId,
                    closedTask: arrClosedTaskString,
                    CalledFromBudget: '@CalledFromBudget',
                    IsIndex: '@isIndex',
                    RedirectType: '@RedirectTypeMode'
                },
                success: function (data) {
                    if (data.returnURL != 'undefined' && data.returnURL == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else {
                        if (data.IsSuccess && data.opt != 'undefined') {
                            if (data.opt == '@Enums.InspectPopupRequestedModules.Index.ToString()') {
                                $('#cSuccessDuplicatePlan').html('<strong>Success. </strong> ' + data.msg);
                                var url = '@Url.Content("~/Home/Index?ActiveMenu=")' + $('#ActiveMenu').val();
                                window.location.href = url;
                             }
                             else {
                                 window.location.href = data.redirect;
                                 return;
                             }
                         }
                         else {
                            $("#successMessagePlan").slideUp(50);
                             $("#errorMessagePlan").slideDown(400);
                             $("#spanErrMessagePlan").empty();
                             $("#spanErrMessagePlan").val(data.msg);
                             return false;
                         }
                     }
                }
            });
         }
    });

    function SaveMessageOnParent(value) {
        $("#modal-container-186470").modal('hide');
        $("#errorMessageDuplicatePlan").slideUp(50);
        $("#successMessageDuplicatePlan").slideDown(400);
        $("#cSuccessDuplicatePlan").empty();
        $("#cSuccessDuplicatePlan").text(htmlDecode(value));
        $("#successMessageDuplicatePlan").removeClass("message-position");
        $("#successMessageDuplicatePlan").addClass("successMessage-InspectPopUpSections");
        RefreshCurrentTab();
    }
</script>