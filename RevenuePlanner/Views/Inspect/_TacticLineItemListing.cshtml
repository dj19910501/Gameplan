@using RevenuePlanner.Helpers;
@model RevenuePlanner.Models.BudgetDHTMLXGridModel
@{
    var countrows = Model.Grid.rows.Count;
    var isQuarter = ViewBag.AllocatedBy;
}
<style>
    .tooltip {
        z-index: 9999 !important; /* Need this style on page level - Bhumika */
    }
</style>

<!-- Added by Arpita Soni for Ticket #2237 on 06/13/2016 -->
@if (countrows > 0)
{
    <div id="lineItemGrid" class="gridViewGrid"></div>
}
else
{
    <div>No records available.</div>
}

<div class="market-activity-main">
    <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 11;" id="popupLineitemIP">
    </div>
</div>

<script type="text/javascript">
    var LineItemGrid;
    var tacticId = 0;
    var lineItemId = 0;
    $(document).ready(function () {
        $('#liLine_Items').removeClass("pull-left");
        $('#liLine_Items').addClass("active pull-left");
        
        $('.nav').addClass('no-bottom-border');
        // Added by Arpita Soni for Ticket #2237 on 06/13/2016
        if (@countrows > 0) {
            BindLineItemGrid();

            $(document).ajaxComplete(function () {
                LineItemGrid.setSizes();
            });
        }
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;
   
        $(".grid_Search").off("click");
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).parent().next().html();
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });
        SetTooltip();
    });

    function SetTooltip() {
        $(".grid_Search").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".grid_add").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".honeycombbox-icon-gantt").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
    }
    var $doc = $(document);
    $doc.click(function () {
        $('#popupLineitemIP').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupLineitemIP').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupLineitemIP').css('display', 'none');
    });
    
    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });
    
    var GridDataLineItemGrid;
    var ActivityIdColIndex;
    var PlannedCostColIndex;
    var TaskNameColIndex;
    var arrDetailedGrids = [];

    var arrFullMonthNames = { 'JAN': 'January' ,
        'FEB': 'February' ,
        'MAR': 'March' ,
        'APR': 'April' ,
        'MAY': 'May' ,
        'JUN': 'June' ,
        'JUL': 'July' ,
        'AUG': 'August' ,
        'SEP': 'September' ,
        'OCT': 'October' ,
        'NOV': 'November' ,
        'DEC': 'December',
        'Q1': 'Quarter 1',
        'Q2': 'Quarter 2',
        'Q3': 'Quarter 3',
        'Q4': 'Quarter 4'
    }

    function BindLineItemGrid() {
        var JsonModel = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Grid)';
        var mainGridData = JsonModel;
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        GridDataLineItemGrid = (mainGridData.toString().replace(/&amp;/g, '&'));
        
        LineItemGrid = new dhtmlXGridObject('lineItemGrid');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        LineItemGrid.setImagePath(imgpath);
        
        LineItemGrid.setImageSize(1, 1);
        LineItemGrid.attachEvent("onEditCell", doOnEditCell);
        LineItemGrid.setHeader('@Model.SetHeader');
        LineItemGrid.setColAlign('@Model.ColAlign');
        LineItemGrid.setColTypes('@Model.ColType');
        LineItemGrid.setInitWidths('@Model.Width');
        LineItemGrid.setColSorting('@Model.ColSorting');
        LineItemGrid.setColumnIds('@Model.ColumnIds');
        
        LineItemGrid.init();
        setTimeout(function () {
            LineItemGrid.loadOpenStates();
        }, 500);
        setTimeout(function () {
            LineItemGrid.setSizes();
        }, 200);
        LineItemGrid.enableAutoHeight(true);
        
        LineItemGrid.parse(GridDataLineItemGrid, "json");
        ActivityIdColIndex = LineItemGrid.getColIndexById("id");
        PlannedCostColIndex = LineItemGrid.getColIndexById("plannedcost");
        TaskNameColIndex = LineItemGrid.getColIndexById("taskname");
    }
    
    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        if (stage == 0) {   // Stage == 0 Means Click on Cell
            // Disable cells which has no permission to edit
            var locked = LineItemGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && (locked == "1" || locked == "True"))
                return false;
        }
        if (stage == 1) {   // Stage == 1 - Means Perform Event on Cell -  Keydown, etc. 
            // Disable alphabets or special characters in input
            if(cellInd != TaskNameColIndex){
                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                LineItemGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }
        }
        if (stage == 2) {   // Stage == 2 - Means perform focus out event
            if (nValue != null && nValue != "") {
                var entityId = LineItemGrid.cells(rowId, 0).getValue(); 
                var section = "lineitem";
                var isTotalCost = false;
                var month = "";
                if(rowId.indexOf('tactic') > -1) {
                    section = "tactic";
                }
                debugger;
                if(cellInd == TaskNameColIndex){
                    // Get column name for edit
                    var UpdateColumn = LineItemGrid.getColLabel(cellInd, 0);
                    $.ajax({
                        type: 'POST',
                        url: urlContent + 'Plan/SaveGridDetail',
                        data: { UpdateType: section, UpdateColumn: UpdateColumn.trim(), UpdateVal: nValue, Id: parseInt(entityId) },
                        dataType: 'json',
                        success: function (states) {
                            if (data.isSuccess == true) {
                                $("#liLine_Items").trigger("click");
                            }
                            else {
                                $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + data.errormsg);
                                $('#errorMessageDuplicatePlan').slideDown(700);
                            }
                        }
                    });
                }
                else{
                    if (cellInd == PlannedCostColIndex) {
                        isTotalCost = true;
                    }
                    else {
                        month = arrFullMonthNames[LineItemGrid.getColLabel(cellInd)];   // Get full name of month from initial (JAN -> January)
                    }
                    var plannedcost = LineItemGrid.cells(rowId, cellInd).getValue(); // updated cell value
                
                    var tab = 'Planned';
                    var isquarter = false;
                    if('@isQuarter' == 'quarters') {
                        isquarter = true;
                    }
                    var allocatedcost = SetValueByExchangeRate(plannedcost.replace(/,/g, ""))
                    
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Content("~/Inspect/SaveLineItemCostAllocation/")',
                        dataType: "json",
                        data: 'entityId=' + entityId + '&section=' + section + '&month=' + month + '&allocatedcost=' + allocatedcost + '&tab=' + tab + '&isquarter=' + isquarter + '&isTotalCost=' + isTotalCost,
                        success: function (data) {
                            if (data.isSuccess == true) {
                                // format current cell value
                                LineItemGrid.cells(rowId, cellInd).setValue(number_format(nValue, 0, '.', ','));

                                // Start - Update balance row value on edit (vertical calculation)
                                var rows_count = LineItemGrid.getRowsNum();
                                var balance_rowid = LineItemGrid.getRowId(rows_count - 1);
                                // always first row is for tactic so get tactic cost value
                                var first_rowid = LineItemGrid.getRowId(0);
                                var tac_cost = parseInt(LineItemGrid.cells(first_rowid, cellInd).getValue().replace(',','')); 
                                var lineitem_cost = 0;
                                for(var i = 1 ; i < rows_count - 1; i++) { // sum of line item cost
                                    var row_id = LineItemGrid.getRowId(i);
                                    lineitem_cost = lineitem_cost + parseInt(LineItemGrid.cells(row_id, cellInd).getValue().replace(',',''));
                                }
                                var balance_cost = tac_cost - lineitem_cost;
                                // set balance line item cost 
                                LineItemGrid.cells(balance_rowid, cellInd).setValue(number_format(balance_cost, 0, '.', ','));
                                // End - Update balance row value on edit 

                                UpdateUnallocatedColumnValues(rowId);   // update unallocated cost column for edited row
                                UpdateUnallocatedColumnValues(balance_rowid);   // update unallocated cost column for balance row
                            }
                            else {
                                $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + data.errormsg);
                                $('#errorMessageDuplicatePlan').slideDown(700);
                            }
                        }
                    });
                }
            }
            else {
                return false;
            }
    }
    return true;
    }
    function UpdateUnallocatedColumnValues(rowId) {
        // Update Unallocated column value on edit 
        var cols_count = LineItemGrid.getColumnCount();
        // always first row is for tactic so get tactic cost value
        var planned_cost = parseInt(LineItemGrid.cells(rowId, PlannedCostColIndex).getValue().replace(',','')); 
        var allocated_cost = 0;
        for (var j = PlannedCostColIndex + 1; j <= cols_count - 2; j++) { // sum of line item cost
            allocated_cost = allocated_cost + parseInt(LineItemGrid.cells(rowId, j).getValue().replace(',',''));
        }
        var unallocated = planned_cost  - allocated_cost;
        // set balance line item cost 
        LineItemGrid.cells(rowId, cols_count - 1).setValue(number_format(unallocated, 0, '.', ','));
    }
$(document).on('click.bs.toggle', 'div[data-toggle^=toggle]', function(e) {
    var $checkbox = $(this).find('input[type=checkbox]')
    $checkbox.bootstrapToggle('toggle')
    e.preventDefault()
});    
</script>
