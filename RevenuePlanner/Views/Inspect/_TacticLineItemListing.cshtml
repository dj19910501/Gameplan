@using RevenuePlanner.Helpers;
@model RevenuePlanner.Models.BudgetDHTMLXGridModel
@{
    var countrows = Model.Grid.rows.Count;
    string SelectedViewBy = ViewBag.AllocatedBy;
}
<style>
    .tooltip {
        z-index: 9999 !important; /* Need this style on page level - Bhumika */
    }
</style>

<!-- Added by Arpita Soni for Ticket #2237 on 06/13/2016 -->
@if (countrows > 0)
{
    <div class="ddlViewByLineItems">
        @Html.Label("View By:", new { id = "lblViewBy", style = "font-family:Helvetica Neue,Helvetica,Arial,sans-serif !important" })
        <span class="selectBox" id="ddlAllocatedBySelectBox" style="width: 158px; line-height: 1.1;">
            @Html.DropDownList("ddlAllocateViewByLineItems", new SelectList((System.Collections.IEnumerable)ViewBag.ViewByAllocated, "Value", "Text", SelectedViewBy), new { @class = "ddlStyleReport hide" })
        </span>
    </div>
    <div id="lineItemGrid" class="gridViewGrid"></div>
}
else
{
    <div>No records available.</div>
}

<div class="market-activity-main">
    <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 9999;" id="popupLineitemIP">
    </div>
</div>

<script type="text/javascript">
    var LineItemGrid;
    var ParentId;
    var EntityId;
    var Type;
    var AllocatedBy = '@Convert.ToString(Enums.PlanAllocatedBy.months)'
    $(document).ready(function () {
        $('#liLine_Items').removeClass("pull-left");
        $('#liLine_Items').addClass("active pull-left");

        $('.nav').addClass('no-bottom-border');
        // Added by Arpita Soni for Ticket #2237 on 06/13/2016
        if (@countrows > 0) {
            BindLineItemGrid();

            $(document).ajaxComplete(function () {
                LineItemGrid.setSizes();
            });
        }
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;

        $(".grid_Search").off("click");
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).parent().next().html();
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });
        SetTooltip();
        $("#ddlAllocatedBySelectBox select").selectbox();

        $(".sbSelector").click(function () {
            $(".ui-multiselect-menu").each(function () {
                $(this).css("display", "none");
            });
        });
    });

    function SetTooltip() {
        $(".grid_Search").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".grid_add").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".honeycombbox-icon-gantt").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
    }
    var $doc = $(document);
    $doc.click(function () {
        $('#popupLineitemIP').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupLineitemIP').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupLineitemIP').css('display', 'none');
    });

    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });

    var GridDataLineItemGrid;
    var ActivityIdColIndex;
    var PlannedCostColIndex;
    var TaskNameColIndex;
    var arrDetailedGrids = [];

    function BindLineItemGrid() {
        var JsonModel = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Grid)';
        var mainGridData = JsonModel;
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        GridDataLineItemGrid = (mainGridData.toString().replace(/&amp;/g, '&'));

        LineItemGrid = new dhtmlXGridObject('lineItemGrid');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        LineItemGrid.setImagePath(imgpath);

        LineItemGrid.setImageSize(1, 1);
        LineItemGrid.attachEvent("onEditCell", doOnEditCell);
        LineItemGrid.setHeader('@Model.SetHeader');
        LineItemGrid.setColAlign('@Model.ColAlign');
        LineItemGrid.setColTypes('@Model.ColType');
        LineItemGrid.setInitWidths('@Model.Width');
        LineItemGrid.setColSorting('@Model.ColSorting');
        LineItemGrid.setColumnIds('@Model.ColumnIds');

        LineItemGrid.init();
        LineItemGrid.enableAutoHeight(true);
        LineItemGrid.parse(GridDataLineItemGrid, "json");
        ActivityIdColIndex = LineItemGrid.getColIndexById("id");
        PlannedCostColIndex = LineItemGrid.getColIndexById("plannedcost");
        TaskNameColIndex = LineItemGrid.getColIndexById("taskname");
        AttachIcons();
    }
    //Added by Rahul Shah to bind '+' & 'view' Icon
    function AttachIcons()
    {   
        var imgAddString,imgSearchString, rowid, ActivityType, ActivityTypeId, AltId, EntityType, Permisson;
        $('#lineItemGrid .objbox').find('table tbody').find('tr').find("td").each(function (key, value) {            
            if ($(this).html().indexOf('#GRIDACTION#') >= 0)
            {                
                rowid = $(this).text().replace("#GRIDACTION#", "");
                if(rowid.split('-').length > 1){
                    ActivityType = rowid.split('-')[0];
                    ActivityTypeId = rowid.split('-')[1];
                    AltId = rowid.split('-')[2];
                    Permisson = rowid.split('-')[3];

                }
                if(ActivityType.toString().trim().toUpperCase() == '@Enums.EntityType.Tactic.ToString().ToUpper()')
                {
                    EntityType = '@Enums.EntityType.Tactic.ToString().ToUpper()';
                    imgAddString = "<div style = 'margin-left: 31px ! important' class='grid_add' id= '"+ EntityType +"' onclick='OpenLineItemGridPopup(this,event)'  alt = " + AltId +" lt=" + ActivityTypeId + "><i class='fa fa-plus-circle' aria-hidden='true'></i></div> "
                    $(this).html(imgAddString);
                }
                else if(EntityType = '@Enums.EntityType.Lineitem.ToString().ToUpper()' && ActivityTypeId != "")
                {
                    EntityType = '@Enums.EntityType.Lineitem.ToString().ToUpper()';
                    imgSearchString = "<div class='grid_Search' id= 'LP' title=View><i class='fa fa-external-link-square' aria-hidden='true'></i></div> "
                    if(Permisson.toString().toUpperCase() == 'TRUE'){
                        imgAddString = "<div class='grid_add' id= '"+ EntityType +"' onclick='OpenLineItemGridPopup(this,event)'  alt = " + AltId +" lt=" + ActivityTypeId + "><i class='fa fa-plus-circle' aria-hidden='true'></i></div> "
                    }                   
                    else{
                        imgAddString  = "";
                    }
                    $(this).html(imgSearchString + imgAddString);
                }
                else{
                    $(this).html('');
                }
            }
        });
    }

    function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {        
        if (stage == 0) {   // Stage == 0 Means Click on Cell
            // Disable cells which has no permission to edit
            var locked = LineItemGrid.cells(rowId, cellInd).getAttribute("lo");
            if ((locked != null && locked != "") && (locked == "1" || locked == "True"))
                return false;
        }
        if (stage == 1) {   // Stage == 1 - Means Perform Event on Cell -  Keydown, etc.
            // Disable alphabets or special characters in input
            if(cellInd != TaskNameColIndex){
                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e,this,true); }));
                LineItemGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }
        }
        if (stage == 2) {   // Stage == 2 - Means perform focus out event
            if (nValue != null && nValue.trim() != "") {
                var entityId = LineItemGrid.cells(rowId, 0).getValue();
                var section = "lineitem";
                var isTotalCost = false;
                var month = "";
                if(rowId.indexOf('tactic') > -1) {
                    section = "tactic";
                }
                if(cellInd == TaskNameColIndex){
                    // Get column name for edit
                    var UpdateColumn = '@Enums.HomeGrid_Default_Hidden_Columns.TaskName';
                    $.ajax({
                        type: 'POST',
                        url: urlContent + 'Plan/SaveGridDetail',
                        data: { UpdateType: section, UpdateColumn: UpdateColumn.trim(), UpdateVal: nValue, Id: parseInt(entityId) },
                        dataType: 'json',
                        success: function (data) {
                        }
                    });
                }
                else{
                    if (cellInd == PlannedCostColIndex) {
                        isTotalCost = true;
                    }
                    else {
                        // Get column name e.g. JAN-2016
                        month = LineItemGrid.getColLabel(cellInd);
                    }
                    var plannedcost = LineItemGrid.cells(rowId, cellInd).getValue(); // updated cell value

                    var tab = 'Planned';
                    var isquarter = false;
                    if('@SelectedViewBy' == 'quarters') {
                        isquarter = true;
                    }
                    // Converting user preferred value to $ currency
                    var allocatedcost = SetValueByExchangeRate(plannedcost.replace(/,/g, ""))

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Content("~/Inspect/SaveLineItemCostAllocation/")',
                        dataType: "json",
                        data: 'entityId=' + entityId + '&section=' + section + '&month=' + month + '&allocatedcost=' + allocatedcost + '&tab=' + tab + '&isquarter=' + isquarter + '&isTotalCost=' + isTotalCost,
                        success: function (data) {
                            if (data.isSuccess == true) {
                                var decimal_points = 0;
                                nValue = nValue.replace(/,/g, "");
                                if(parseFloat(nValue) % 1 != 0){
                                    decimal_points = 2;
                                }

                                // format current cell value
                                LineItemGrid.cells(rowId, cellInd).setValue(number_format(nValue, decimal_points, '.', ','));

                                // Start - Update balance row value on edit (vertical calculation)
                                var rows_count = LineItemGrid.getRowsNum();
                                var balance_rowid = LineItemGrid.getRowId(rows_count - 1);
                                // always first row is for tactic so get tactic cost value
                                var first_rowid = LineItemGrid.getRowId(0);
                                // get value of tactic planned cost by removing all commas
                                var tac_cost = parseFloat(LineItemGrid.cells(first_rowid, cellInd).getValue().replace(/,/g, ""));
                                var lineitem_cost = 0;
                                for(var i = 1 ; i < rows_count - 1; i++) { // sum of line item cost
                                    var row_id = LineItemGrid.getRowId(i);
                                    lineitem_cost = lineitem_cost + parseFloat(LineItemGrid.cells(row_id, cellInd).getValue().replace(/,/g, ""));
                                }
                                var balance_cost = tac_cost - lineitem_cost;
                                if(balance_cost % 1 != 0){
                                    decimal_points = 2;
                                }
                                // set balance line item cost
                                LineItemGrid.cells(balance_rowid, cellInd).setValue(number_format(balance_cost, decimal_points, '.', ','));
                                // End - Update balance row value on edit

                                UpdateUnallocatedColumnValues(rowId);   // update unallocated cost column for edited row
                                UpdateUnallocatedColumnValues(balance_rowid);   // update unallocated cost column for balance row
                            }
                            else {
                                $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + data.errormsg);
                                $('#errorMessageDuplicatePlan').slideDown(700);
                            }
                        }
                    });
                }
            }
            else {
                return false;
            }
        }
        return true;
    }
    function UpdateUnallocatedColumnValues(rowId) {
        // Update Unallocated column value on edit
        var cols_count = LineItemGrid.getColumnCount();
        // always first row is for tactic so get tactic cost value
        var planned_cost = parseFloat(LineItemGrid.cells(rowId, PlannedCostColIndex).getValue().replace(/,/g, ""));
        var allocated_cost = 0;
        for (var j = PlannedCostColIndex + 1; j <= cols_count - 2; j++) { // sum of line item cost
            allocated_cost = allocated_cost + parseFloat(LineItemGrid.cells(rowId, j).getValue().replace(/,/g, ""));
        }
        var unallocated = planned_cost - allocated_cost;
        var decimal_points = 0;
        if(unallocated % 1 != 0) {
            decimal_points = 2;
        }

        // set balance line item cost
        LineItemGrid.cells(rowId, cols_count - 1).setValue(number_format(unallocated, decimal_points, '.', ','));
    }
    $("#ddlAllocateViewByLineItems").change(function () {
        var AllocatedBy = $("#ddlAllocateViewByLineItems").val();
        UpdateViewByForLineIitemsGrid(AllocatedBy);
    });

    $(".grid_Search").off("click");
    $(".grid_Search").click(function (e) {
        inspectCloseFocus = $(this).position().top;
        var EntityIdWithSection = $(this).parent().parent().find('td:first').html().split(';');
        var id = EntityIdWithSection[0];
        var type = $(this).attr('id');
        gridSearchFlag = 1;
        DisplayEditablePopup(id, type);
    });

    $(document).on("click", '#NewLineItemGrid', function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        var returnpara = true;
        // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
        var activeTab = $("#InspectTab li.active a").text().replace(" ", "_");
        if (activeTab != null && activeTab != undefined && activeTab != '') {
            returnpara = SaveAllData(activeTab);
        }
        if (returnpara) {
            loadInspectPopup(0, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", "Setup", "@Enums.InspectPopupMode.Add.ToString()", ParentId, '');
        }
    });

    $(document).on("click", '#CloneLineItemGrid', function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        var activeTab = "Line_Items";
        var returnpara = true;
        if (activeTab != null && activeTab != undefined && activeTab != '') {
            returnpara = SaveAllData(activeTab);
        }
        if (returnpara) {
            isDataModified = true;
            var idPlanProgram = $("#hdnPlanLineItemID").val();
            var Title = '';
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/Clone")',
                data: {
                    CloneType: "@Enums.Section.LineItem",
                    Id: EntityId,
                    title: Title,
                    CalledFromBudget: '',
                    RequsetedModule: ''
                },
                success: function (data) {
                    if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else if (data.IsSuccess) {
                        var currentTab = "Line_Items";
                        var lineItemId = data.Id;
                        var expandplanLineItemId = data.expand;
                        loadInspectPopup(tacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", currentTab, "@Enums.InspectPopupMode.Add.ToString()", 0, '');

                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                        $("#errorMessage").css("display", "none");
                        return true;
                    }
                    else {
                        $("#successMessageViewProgram").slideUp(50);
                        $("#errorMessageEditProgram").slideDown(400);
                        $("#spanMessageEditProgram").empty();
                        $("#spanMessageEditProgram").val(data.msg);
                        return false;
                    }
                }
            });
        }
    });
    function OpenLineItemGridPopup(obj, e) {
        var arrTacticAndLineItemIds = $(obj).attr('alt').replace('cp_','').replace('cpt_','').replace('cptl_','').split('_');
        ItemType = $(obj).attr('id');
        if(arrTacticAndLineItemIds.length > 1){
            if(ItemType.toString().toUpperCase() == '@Enums.EntityType.Tactic.ToString().ToUpper()'){
                ParentId = arrTacticAndLineItemIds[1];
            }
            else{
                ParentId = arrTacticAndLineItemIds[0];
                EntityId = arrTacticAndLineItemIds[1];
            }
        }
        var lineItemType = $(obj).attr('lt');

        var LinkTacticPermission = $(obj).attr('linktacticper');
        var LinkedTacticId = $(obj).attr('linkedtacticid');

        if (lineItemType == "0" || ItemType.toString().toUpperCase() == '@Enums.EntityType.Tactic.ToString().ToUpper()') {
            ul = "<ul style='margin: 0;'>  <li class='new-prog' id='NewLineItemGrid'>New Line Item</li> </ul>";
        }
        else {
            ul = "<ul style='margin: 0;'>  <li class='new-prog' id='NewLineItemGrid'>New Line Item</li> <li class='new-prog' id='CloneLineItemGrid'>Copy Line Item</li>  </ul>";
        }

        $('#popupLineitemIP').html(ul);

        if ($('#popupLineitemIP').css('display') == 'none') {
            $('#popupLineitemIP').css('display', 'block')
        }
        else {
            $('#popupLineitemIP').css('display', 'none')
        }
        var left = e.pageX - 10;
        var target = $(e.target);

        var targetOffset = 0;
        targetOffset = target.offset().top - 35;
        var scrollPosition = $(window).scrollTop();

        if ($('#popupLineitemIP').css('display') != 'none') {
            if (scrollPosition <= targetOffset) {
                $('#popupLineitemIP').css({
                    //'display': 'block',
                    'top': targetOffset,
                    'left': left,
                });
            }
            else {
                var targetHeight = target.height();
                var targetBottomOffset =0;
                if($('#IsGridView').val() == 'True'){
                    //var contentHeight = $('#popupLineitemIP').outerHeight();
                    targetBottomOffset = targetOffset + targetHeight; // - contentHeight;
                }
                else{
                    var contentHeight = $('#popupLineitemIP').outerHeight();
                    targetBottomOffset = targetOffset + targetHeight - contentHeight;
                }
                $('#popupLineitemIP').css({
                    // 'display': 'block',
                    'top': targetBottomOffset,
                    'left': left,
                });
            }
        }
    }
    $(document).on('click.bs.toggle', 'div[data-toggle^=toggle]', function(e) {
        var $checkbox = $(this).find('input[type=checkbox]')
        $checkbox.bootstrapToggle('toggle')
        e.preventDefault()
    });
</script>

