@using RevenuePlanner.Helpers;
@model RevenuePlanner.Models.Plangrid
@{
    var countrows = Model.PlanDHTMLXGrid.rows.Count;
}
<style>
    .gridViewGrid.gridbox.gridbox_dhx_skyblue {
        width: 98% !important;
        background: #fff;
    }

    div.gridbox_dhx_skyblue.gridbox table.hdr td div.hdrcell,
    .dhx_sub_row table.obj tr td {
        text-align: center;
        padding-left: 0px !important;
    }

    div.gridbox_dhx_skyblue.gridbox div.xhdr table.hdr,
    div.gridbox_dhx_skyblue.gridbox div.objbox table.row20px {
        width: 100% !important;
    }

    div.gridbox_dhx_skyblue.gridbox table.hdr td {
        -moz-user-select: none;
    }

    #lineItemGrid .grid_add {
        margin-top: 0;
    }

    #lineItemGrid .grid_Search {
        margin-left: 10px;
    }

    #lineItemGrid .objbox {
        overflow-x: hidden !important;
    }

    #lineItemGrid .dhx_sub_row {
        background: #fff none repeat scroll 0 0;
        border-top: 1px solid #d4d4d4;
        left: 0 !important;
        margin-left: 0 !important;
        margin-top: 0 !important;
        width: 100% !important;
    }

    #lineItemGrid .rowselected td {
        background: #f2f2f2;
    }

    .tooltip {
        z-index: 9999 !important;
    }
    .dhx_sub_row {
          height: 52px !important;
    }
    .dhx_sub_row div.xhdr {
    height: 27px !important;
    }
   
</style>

<!-- Added by Arpita Soni for Ticket #2237 on 06/13/2016 -->
@if (countrows > 0)
{
    <div id="lineItemGrid" class="gridViewGrid"></div>
}
else
{
    <div>No records available.</div>
}

<div class="market-activity-main">
    <div class="btn-dropdwn" style="display: none; position: absolute; top: 40px; z-index: 11;" id="popupLineitemIP">
       
    </div>
</div>
<script src="~/Scripts/js/DHTMLX/dhtmlxgrid_excell_grid.js"></script>
<script src="~/Scripts/js/DHTMLX/dhtmlxgrid_excell_sub_row.js"></script>
<script type="text/javascript">
    var LineItemGrid;
    var tacticId = 0;
    var lineItemId = 0;
    $(document).ready(function () {
        $('#liLine_Items').removeClass("pull-left");
        $('#liLine_Items').addClass("active pull-left");
        
        $('.nav').addClass('no-bottom-border');
        // Added by Arpita Soni for Ticket #2237 on 06/13/2016
        if (@countrows > 0) {
            BindLineItemGrid();

            //Added by Rahul shah on 23/10/2015 for PL #1693 : set grid size after performing any operation
            $(document).ajaxComplete(function () {
                LineItemGrid.setSizes();
            });
        }
        $("input[name='useless']").click(doIt);
        function doIt() {
            return true;
        }
        $("#useless").click();
        window.focus();

        pageIsScroll = false;
        //$('.task-tbl div.gridbox').css('height', $(window).height() - 450); //PL #1758 H9_QA - Grid View Scrolling - Added by Dashrath Prajapati
       
        //if ($('.honeycombbox-icon-gantt-Active').length == 0) {
        //    $(".honeycombbox").hide();
        //}
        //else {
        //    $("#totalEntity").text($('.honeycombbox-icon-gantt-Active').length);
        //    $(".honeycombbox").show();
        //}

        $(".grid_Search").off("click");
        $(".grid_Search").click(function (e) {
            inspectCloseFocus = $(this).position().top;
            var id = $(this).parent().next().html();
            var type = $(this).attr('id');
            gridSearchFlag = 1;
            DisplayEditablePopup(id, type);
        });
        SetTooltip();
        
    });

    function SetTooltip() {
        $(".grid_Search").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".grid_add").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
        $(".honeycombbox-icon-gantt").tooltip({
            'container': 'body',
            'placement': 'bottom'
        });
    }
    var $doc = $(document);
    $doc.click(function () {
        $('#popupLineitemIP').css('display', 'none');
        $('#dhx_combo_select').css('display', 'none');
    });

    $(document).mouseup(function (e) {
        $('#popupLineitemIP').css("display", "none");
        $('#dhx_combo_select').css('display', 'none');
    });
    $(".grid_ver_scroll").scroll(function () {
        $('#popupLineitemIP').css('display', 'none');
    });
    
  
    // End By Nishant Sheth
    //Added by Ashish mistry for PL #1782 :- export to csv for Honeycomb
    var ListOfSelectedIds = { Id: [] };

    // Add By Nishant Sheth
    var countid = 0;
    function UpdateLineItemGridData(id) {
        var ColumnCount = LineItemGrid.getColumnCount();
        var dataid;
        if (id == null) {
            dataid = ListOfSelectedIds.Id[countid];
        } else {
            dataid = id;
        }
        var datahome = JSON.parse(GridDataLineItemGrid);
        $.each(datahome.rows, function () {

            // Update data for planrecords
            var planid = this.id;
            var plandata = this;
            if (planid == dataid) {
                for (var i = 0; i < ColumnCount; i++)
                {
                    plandata.data[i].value = LineItemGrid.cells(planid, i).getValue();
                }
                countid++;
                return UpdateLineItemGridData(countid);
            } else {

                // Update data for campaign records
                if(plandata.rows != null && plandata.rows != "")
                {
                    $.each(plandata.rows, function () {

                        var campid = this.id;
                        var campdata = this;
                        if (campid == dataid) {
                            for ( var i = 0; i < ColumnCount; i++) {
                                campdata.data[i].value = LineItemGrid.cells(campid, i).getValue();
                            }
                            countid++;
                            return UpdateLineItemGridData(countid);
                        }
                        else {
                            if(campdata.rows != null && campdata.rows != "")
                            {
                                // Update data for program records
                                $.each(campdata.rows, function () {

                                    var progid = this.id;
                                    var progdata = this;
                                    if (progid == dataid) {
                                        for ( var i = 0; i < ColumnCount; i++) {
                                            progdata.data[i].value = LineItemGrid.cells(progid, i).getValue();
                                        }
                                        countid++;
                                        return UpdateLineItemGridData(countid);
                                    } else {
                                        // Update data for tactic records
                                        if(progdata.rows != null && progdata.rows != "")
                                        {
                                            $.each(progdata.rows, function () {
                                                var tacid = this.id;
                                                var tacdata = this;
                                                if (tacid == dataid) {
                                                    for ( var i = 0; i < ColumnCount; i++) {
                                                        tacdata.data[i].value = LineItemGrid.cells(tacid, i).getValue();
                                                    }
                                                    countid++;
                                                    return UpdateLineItemGridData(countid);
                                                } else {
                                                    countid++;
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
            }
        })

        GridDataLineItemGrid = JSON.stringify(datahome);
    }

    // End By Nishant Sheth

    $('#errorMessageInspectPopup .close').click(function () {
        $('#errorMessageInspectPopup').css("display", "none");
    });
    
    var GridDataLineItemGrid;
    var ActivityIdColIndex;
    var PlannedCostColIndex;
    var TypeColIndex;
    var arrDetailedGrids = [];
    var arrFullMonthNames = { 'JAN': 'January' ,
        'FEB': 'February' ,
        'MAR': 'March' ,
        'APR': 'April' ,
        'MAY': 'May' ,
        'JUN': 'June' ,
        'JUL': 'July' ,
        'AUG': 'August' ,
        'SEP': 'September' ,
        'OCT': 'October' ,
        'NOV': 'November' ,
        'DEC': 'December' }

    function BindLineItemGrid() {
        var JsonModel = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.PlanDHTMLXGrid)';
        var mainGridData = JsonModel;
        mainGridData = $('<div/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        GridDataLineItemGrid = (mainGridData.toString().replace(/&amp;/g, '&'));
        
        LineItemGrid = new dhtmlXGridObject('lineItemGrid');
        var imgpath = '@Url.Content("~/codebase/imgs/")';
        LineItemGrid.setImagePath(imgpath);
        
        LineItemGrid.setImageSize(1, 1);
        LineItemGrid.setCustomSorting(sort_Owner, 6);
        LineItemGrid.setCustomSorting(sort_TacticType, 5);
        LineItemGrid.attachEvent("onEditCell", doOnEditCell);
        
        LineItemGrid.setColumnHidden(1,true); // hide column activity type
        LineItemGrid.setColumnHidden(4,true); // hide column id
        
        var subgrid_data;
        var lstChildGrids = '@Newtonsoft.Json.JsonConvert.SerializeObject(Model.lstChildPlanDHTMLXGrid)';
        lstChildGrids = $('<div/>').html(lstChildGrids.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
        lstChildGrids = (lstChildGrids.toString().replace(/&amp;/g, '&'));

        lstChildGrids = JSON.parse(lstChildGrids);
        
        LineItemGrid.attachEvent("onSubGridCreated",function(subgrid,id,index,value) {
            // this code will be called each time when subgrid opened , any code to init subgrid can be placed here
            var LineItemId= LineItemGrid.cells(id, ActivityIdColIndex).getValue();
           
            subgrid_data = lstChildGrids[LineItemId];
            subgrid.setImageSize(1, 1);
            subgrid.setHeader(subgrid_data.SetHeader);
                    
            subgrid.setColTypes(subgrid_data.ColType);
            subgrid.setInitWidths(subgrid_data.Width);
            
                    
            subgrid.attachEvent("onEditCell", doOnSubgridEditCell);
            subgrid.init();
            subgrid.enableAutoHeight(true);
            subgrid.parse(subgrid_data.Grid,"json");

            subgrid.setColumnHidden(0,true);
            subgrid.setColumnHidden(2,true);
            //subgrid.callEvent("onGridReconstructed",[]);
            
            return false; // block defaults
        });
        LineItemGrid.attachEvent("onSubGridLoaded",function(subgrid){
            alert();
        })
        LineItemGrid.init();
        LineItemGrid.enableAutoHeight(true);
        LineItemGrid.parse(GridDataLineItemGrid, "json");
        ActivityIdColIndex = LineItemGrid.getColIndexById("id");
        PlannedCostColIndex = LineItemGrid.getColIndexById("plannedcost");
        TypeColIndex = LineItemGrid.getColIndexById("tactictype");
        
        LineItemGrid.forEachRow(function (id) {
            LineItemGrid.cells(id, 0).open();
        });
        //LineItemGrid.refresh();
        //LineItemGrid.callEvent("onGridReconstructed",[]);
        
    }
    
    function sort_Owner(a, b, ord, a_id, b_id) {

        a = LineItemGrid.cells(a_id, 6).getText();
        b = LineItemGrid.cells(b_id, 6).getText();
        return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
    };
    function sort_TacticType(a, b, ord, a_id, b_id) {

        var atype = a_id.split(".")[0].toString();
        var btype = b_id.split(".")[0].toString();
        if (atype == "tact" && btype == "tact") {
            a = LineItemGrid.cells(a_id, 5).getText();
            b = LineItemGrid.cells(b_id, 5).getText();
            return ord == "asc" ? (a > b ? 1 : -1) : (a > b ? -1 : 1);
        } else return 0;
    };
 
    function OpenLineItemGridPopup(obj, e) {
        var arrTacticAndLineItemIds = $(obj).attr('alt').split('_');
        tacticId = arrTacticAndLineItemIds[0];
        lineItemId = arrTacticAndLineItemIds[1];
        var lineItemType = $(obj).attr('lt');
        if (lineItemType == "0") {
            ul = "<ul style='margin: 0;'>  <li class='new-prog' id='NewLineItemGrid'>New Line Item</li> </ul>";
        }
        else {
            ul = "<ul style='margin: 0;'>  <li class='new-prog' id='NewLineItemGrid'>New Line Item</li> <li class='new-prog' id='CloneLineItemGrid'>Copy Line Item</li>  </ul>";
        }
        $('#popupLineitemIP').html(ul);

        if ($('#popupLineitemIP').css('display') == 'none') {
            $('#popupLineitemIP').css('display', 'block')
        }
        else {
            $('#popupLineitemIP').css('display', 'none')
        }
        var left = e.pageX - 10;
        var target = $(e.target);
        var targetOffset = target.offset().top - 35;
        var scrollPosition = $(window).scrollTop();

        if ($('#popupLineitemIP').css('display') != 'none') {
            if (scrollPosition <= targetOffset) {
                $('#popupLineitemIP').css({
                    //'display': 'block',
                    'top': targetOffset,
                    'left': left,
                });
            }
            else {
                var targetHeight = target.height();
                var contentHeight = $('#popupLineitemIP').outerHeight();
                var targetBottomOffset = targetOffset + targetHeight - contentHeight;
                $('#popupLineitemIP').css({
                    // 'display': 'block',
                    'top': targetBottomOffset,
                    'left': left,
                });
            }
        }
    }

    $(document).on("click", '#NewLineItemGrid', function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        var returnpara = true;
        // Modified by Arpita Soni for Ticket #2237 on 06/13/2016
        var activeTab = $("#InspectTab li.active a").text().replace(" ", "_");
        if (activeTab != null && activeTab != undefined && activeTab != '') {
            returnpara = SaveAllData(activeTab);
        }
        if (returnpara) {
            loadInspectPopup(0, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.LineItem).ToLower()", "Setup", "@Enums.InspectPopupMode.Add.ToString()", tacticId, '');

        }
   });

    $(document).on("click", '#CloneLineItemGrid', function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        var activeTab = "Line_Items";
        var returnpara = true;
        if (activeTab != null && activeTab != undefined && activeTab != '') {
            returnpara = SaveAllData(activeTab);
        }
        if (returnpara) {
            isDataModified = true;
            var idPlanProgram = $("#hdnPlanLineItemID").val();
            var Title = '';
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Inspect/Clone")',
                data: {
                    CloneType: '@Enums.DuplicationModule.LineItem',
                    Id: lineItemId,
                    title: Title,
                    CalledFromBudget: '',
                    RequsetedModule: ''
                },
                success: function (data) {
                    if (data.IsSuccess != 'undefined' && data.IsSuccess == '#') {
                        window.location = '@Url.Content("~/Login/Index")';
                    }
                    else if (data.IsSuccess) {
                        var currentTab = "Line_Items";

                        var lineItemId = data.Id;
                        var expandplanLineItemId = data.expand;
                        loadInspectPopup(tacticId, "@Convert.ToString(RevenuePlanner.Helpers.Enums.Section.Tactic).ToLower()", currentTab, "@Enums.InspectPopupMode.ReadOnly.ToString()", 0, '');

                        $("#successMessage").css("display", "block");
                        $("#spanMessageSuccess").empty();
                        $("#spanMessageSuccess").text(data.msg);
                        $("#errorMessage").css("display", "none");
                        return true;
                    }
                    else {
                        $("#successMessageViewProgram").slideUp(50);
                        $("#errorMessageEditProgram").slideDown(400);
                        $("#spanMessageEditProgram").empty();
                        $("#spanMessageEditProgram").val(data.msg);
                        return false;
                    }
                }
            });
    }
    });

function doOnSubgridEditCell(stage, rowId, cellInd, nValue, oValue) {
    var detailedGridData = $(this)[0];

    if (stage == 0){
        var locked = detailedGridData.cells(rowId, cellInd).getAttribute("locked");
        if ((locked != null && locked != "") && (locked == "1" || locked == "True"))
            return false;
    }
    if (stage == 1){
    }
    if (stage == 2){
        
        var entityId = detailedGridData.cells(rowId, 0).getValue();
        var section = "LineItem";
    
        var month = arrFullMonthNames[detailedGridData.getColLabel(cellInd)];
        
        var yearlyplannedcost = detailedGridData.cells(rowId, 2).getValue();
        var monthlyplannedcost = detailedGridData.cells(rowId, cellInd).getValue();

        //tab
        var tab = 'Planned';
        var isquarter = false;
        if('@Sessions.ViewByValue' == 'Q') {
            isquarter = true;
        }
        
        var inputArr = [];
        //Insertation Start 19/08/2016 Kausha #2503 Used SetValueByExchangeRate function to store value in dollar.
        inputArr.push({
            key: "CostMonth",
            Value: SetValueByExchangeRate(monthlyplannedcost.replace(/,/g, ""))
        },
            {
                key: "CostYear",
                Value: SetValueByExchangeRate(yearlyplannedcost.replace(/,/g, ""))
            });
        var jsonInputs = JSON.stringify(inputArr);
        $.ajax({
            type: 'POST',
            url: '@Url.Content("~/Plan/SavePlannedCell/")',
            dataType: "json",
            data: 'entityId=' + entityId + '&section=' + section + '&month=' + month + '&inputs=' + jsonInputs + '&tab=' + tab + '&isquarter=' + isquarter,
            success: function (data) {
                if (data.isSuccess == true) {
                    $("#liLine_Items").trigger("click");
                }
                else {
                    $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + data.errormsg);
                    $('#errorMessageDuplicatePlan').slideDown(700);
                }
            }
        });
    }
    return true;
}

function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
    var updatetype = rowId.split(".")[0];
    var Id;
    var UpdateColumn;
    var UpdateVal;
    var Colind = this.cell.cellIndex;

    if(stage == 0)
    {
        var  newvalue = LineItemGrid.cells(rowId, cellInd).getValue();
        if(newvalue.indexOf("</div>") > -1)
        {

            value = newvalue.split("</div>")[0];
        }
        TacticName = newvalue.split("</div>")[1];
    }
    else
    {
        if(nValue != undefined)
        {
            TacticName = nValue;
        }
    }
    UpdateColumn = LineItemGrid.getColLabel(Colind, 0);
    if (stage == 0) {
        // Only check for type column
        if (Colind == TypeColIndex) {
            if (updatetype == "line") {
                var actval = LineItemGrid.cells(rowId, cellInd).getAttribute("actval");
                if (actval == "") {
                    return false;
                }
                var combo = LineItemGrid.getCombo(cellInd);
                var lineitemtype = JSON.parse('@Html.Raw(Json.Encode(TempData["lineItemTypes"]))');
                //  d = optionlist.filter(filterbyname);
                combo.clear();
                $.each(lineitemtype, function (i, item) {
                    combo.put(item.LineItemTypeId, item.Title);
                });
            }
        }
        var locked = LineItemGrid.cells(rowId, cellInd).getAttribute("locked");
        if ((locked != null && locked != "") && (locked == "1" || locked == "True"))
            return false;
    }
    if (stage == 1) {
        $('.dhx_combo_select').css('z-index', '9999');
        if (updatetype == "line") {
            var oldval = LineItemGrid.cells(rowId, cellInd).getValue();
            var actval = LineItemGrid.cells(rowId, cellInd).getAttribute("actval");
            if (cellInd != 1) {
                if (oldval == "")
                    $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                else {
                    var v1 = parseInt(oldval);
                    if (isNaN(v1)) {
                        $('.dhx_combo_select option[value="' + oldval + '"]').remove();
                        $('.dhx_combo_select').val(actval);
                        //var v = $('.dhx_combo_select option:contains("' + oldval + '")').val();
                        //if (v != "undefined")
                        //    $('.dhx_combo_select').val(v);
                    }
                    else
                        $('.dhx_combo_select').val(actval);
                }
            }
        }
        $(".dhx_combo_edit").off("keydown");
        if (UpdateColumn == "Planned Cost") {

            $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
            LineItemGrid.editor.obj.onkeypress = function (e) {
                e = e || window.event;
                if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                    var text = this.value;
                    if (text.length > 10) { //max length of the text
                        return false;
                    }
                }
            }
        }

    }
    if (stage == 2) // start edit Shipping column
    {
        if (nValue != null && nValue != "") {

            //Added By Komal Rawal to Change the value in array if grid updated              
            var NewValue = htmlDecode(nValue);
            //Modified by Rahul Shah on 18/12/2015 fot PL #1813.
            var TaskID = LineItemGrid.cells(rowId,3).getValue();
            //Modified by Rahul Shah on 09/03/2016 for PL #1939
            if (UpdateColumn == "" || UpdateColumn == null)
                UpdateColumn = LineItemGrid.getColLabel(Colind, 0);
            if(UpdateColumn == "Task Name"){  
                //added by devanshi for PL ticket #2276
                if (CheckHtmlTag(nValue) == false) {
                    alert("@RevenuePlanner.Helpers.Common.objCached.TitleContainHTMLString");
                       
                    return false;

                }
                //updatePlanNameDrp(TaskID,NewValue);
            }
            if(cellInd == 1)
            {
                $("div[taskId='" + TaskID + "']").attr('taskname',NewValue);
            }
            if(ExportSelectedIds.TaskID.length > 0)
            {
                var TasknameIndex = ExportSelectedIds.Title.indexOf(oValue);
                if(TasknameIndex >= 0 )
                {
                    ExportSelectedIds.Title[TasknameIndex] = NewValue;
                }
            }
            var idindex = LineItemGrid.getColIndexById('id');
            var costindex = LineItemGrid.getColIndexById('plannedcost');
            var stageindex = LineItemGrid.getColIndexById('inq');

            Id = LineItemGrid.cells(rowId, idindex).getValue();
            if (updatetype == "line") {
                var actval = LineItemGrid.cells(rowId, cellInd).getAttribute("actval");
                if (actval == null || actval == "")
                    actval = oValue;
                if (nValue != oValue && nValue != actval) {

                    UpdateVal = nValue;
                    //Added By Rahul Shah on 16/10/2015 for PL 1559
                    tactid = LineItemGrid.getParentId(rowId);
                    //progid = LineItemGrid.getParentId(tactid);
                    //campid = LineItemGrid.getParentId(progid);
                    //planid = LineItemGrid.getParentId(campid);
                    var TotalRowIds = LineItemGrid.getAllSubItems(tactid);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SaveGridDetail", "Plan")', // we are calling json method
                                data: { UpdateType: 'LineItem', UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                                dataType: 'json',
                                success: function (states) {
                                    if (states.errormsg != null && states.errormsg.trim() != "") {
                                        alert(states.errormsg.trim());
                                        LineItemGrid.cells(rowId, cellInd).setValue(oValue);
                                        return false;
                                    }
                                    else if (UpdateColumn == "Planned Cost") {
                                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                                        diff = parseInt(nValue) - parseInt(oValue);
                                        diffLineAndTactic = states.lineItemCost - states.tacticCost
                                        if (states.lineItemCost > states.tacticCost) {
                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                                if (LineItemGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") { //Modiied by Rahul Shah
                                                    LineItemGrid.cells(TotalRowIds.split(',')[i], 4).setValue((states.otherLineItemCost));
                                                    LineItemGrid.deleteRow(TotalRowIds.split(',')[i]);
                                                }
                                            }
                                        }
                                            //Added by Rahul Shah for PL #1744
                                        else if(states.lineItemCost == states.tacticCost){
                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                                if (LineItemGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                    LineItemGrid.deleteRow(TotalRowIds.split(',')[i]);
                                                }
                                            }
                                        }
                                        else {

                                            for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                                if (LineItemGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                    LineItemGrid.cells(TotalRowIds.split(',')[i], 4).setValue((states.otherLineItemCost));

                                                }
                                            }
                                        }
                                        // Added by Arpita Soni for Ticket #2237 on 06/22/2016
                                        $("#liLine_Items").trigger("click");
                                         ItemIndex=LineItemGrid.getRowIndex(tactid);
                                        state0 = ItemIndex;
                                        LineItemGrid.cells(rowId, PlannedCostColIndex).setValue((nValue));
                                    }
                                    else if(UpdateColumn == "Type")
                                        LineItemGrid.cells(rowId, cellInd).setAttribute("actval",nValue);
                                }
                            });
                        }
                        return true;
                    }
                    if (htmlDecode(nValue) != oValue) {//Modified by Rahul Shah on 30/11/2015 for PL #1778. here in special character nValue data carry with Extra character.
                        if (UpdateColumn != "Type" && UpdateColumn.toString().trim() != "Target Stage Goal") {
                       
                            //Added By Rahul Shah on 16/10/2015 for PL 1559
                            var TotalRowIds = LineItemGrid.getAllSubItems(rowId);
                            //
                            UpdateVal = nValue;
                            $.ajax({
                                type: 'POST',
                                url: '@Url.Action("SaveGridDetail")', // we are calling json method
                                data: { UpdateType: GetItemType(updatetype), UpdateColumn: UpdateColumn.trim(), UpdateVal: UpdateVal, Id: parseInt(Id) },
                                dataType: 'json',
                                success: function (states) {
                                    //Modified by Rahul Shah on 18/12/2015 fot PL #1813.
                                    var TaskID = LineItemGrid.cells(rowId,3).getValue();
                                    var OldValue = $("div[taskId='" + TaskID + "']").attr('OwnerName');

                                    if(ExportSelectedIds.TaskID.length > 0)
                                    {

                                        var OwnerNameIndex = ExportSelectedIds.OwnerName.indexOf(OldValue);

                                        if(OwnerNameIndex >= 0 && states.OwnerName != "" )
                                        {
                                            ExportSelectedIds.OwnerName[OwnerNameIndex] = states.OwnerName;

                                        }
                                    }
                                    if(states.OwnerName != "" && states.OwnerName !=  null)
                                    {
                                        $("div[taskId='" + TaskID + "']").attr('ownername',states.OwnerName);
                                    }

                                    //Added By Komal Rawal for 2058
                                    if((OldValue.toString() != states.OwnerName.toString()) && states.OwnerName != "" &&  states.OwnerName != null)
                                    {
                                        if (planid != 0 && planid != null && planid != undefined) {
                                            var PlanID = LineItemGrid.cells(planid,3).getValue();
                                        }
                                        else if(campid != 0 && campid != null && campid != undefined) {
                                            var PlanID = LineItemGrid.cells(campid,3).getValue();
                                        }
                                        else{
                                            var PlanID = LineItemGrid.cells(progid,3).getValue();
                                        }
                                        //var PreviousOwnerListlength = $("#ulSelectedOwner li").length;
                                        $("#ulSelectedOwner li input[type=checkbox]").each(function () {
                                            if ($(this).attr('checked') != 'checked') {
                                                filters.tempOwnerIds.push($(this).attr("id"));
                                            }
                                        });
                                        GetTacticTypelist(PlanID, false); //Called to manage Data in cache
                                        GetOwnerListForFilter(PlanID, false);
                                        SaveLastSetofViews();
                                    }
                                    //End
                                    if (states.errormsg != null && states.errormsg.trim() != "") {
                                        alert(states.errormsg.trim());
                                        LineItemGrid.cells(rowId, cellInd).setValue(oValue);
                                        return false;
                                    }
                                
                                    if (UpdateColumn == "Planned Cost") {
                                        //Added By Rahul Shah on 16/10/2015 for PL 1559
                                        if (nValue < states.lineItemCost) {
                                            LineItemGrid.cells(rowId, PlannedCostColIndex).setValue((oValue));
                                        }
                                            //Added by Rahul Shah for PL #1744.
                                        else if (nValue == states.lineItemCost) {
                                            if (TotalRowIds != "") {
                                                for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                                    if (LineItemGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                        LineItemGrid.deleteRow(TotalRowIds.split(',')[i]);
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            diff = parseInt(nValue) - parseInt(oValue);
                                            //SetColumUpdatedValue(4, diff);
                                            //LineItemGrid.cells(progid, 4).setValue((newProgVal));
                                            //LineItemGrid.cells(campid, 4).setValue((newCampVal));
                                            //LineItemGrid.cells(planid, 4).setValue((newPlanVal));
                                            LineItemGrid.cells(rowId, 4).setValue((nValue));
                                            if (TotalRowIds != "") {
                                                for (var i = 0; i < TotalRowIds.split(',').length; i++) {
                                                    
                                                    if (LineItemGrid.getUserData(TotalRowIds.split(',')[i], "IsOther") == "True") {
                                                        LineItemGrid.cells(TotalRowIds.split(',')[i], PlannedCostColIndex).setValue((states.OtherLineItemCost));
                                                    }
                                                }
                                            }
                                    
                                        }
                                        // Added by Arpita Soni for Ticket #2237 on 06/22/2016
                                        $("#liLine_Items").trigger("click");
                                        ItemIndex=LineItemGrid.getRowIndex(rowId);
                                        state0=ItemIndex;
                                    }
                                    if (UpdateColumn == "Owner") {
                                        CheckPermissionByOwner(rowId, nValue, updatetype, parseInt(Id))
                                    }

                                }
                            });
                        }

                        //Modified By Komal Rawal for #1848 Link To tactic feature
                        if(cellInd == 1)
                        {
                            if(value != undefined && value != "undefined" && value != null)
                            {
                                LineItemGrid.cells(rowId, cellInd).setValue(value+"</div>" + TacticName);
                            }
                            else
                            {
                                LineItemGrid.cells(rowId, cellInd).setValue(TacticName);
                            }
                        }
                        value = "";
                        $("div[id^='LinkIcon']").each(function () {
                            bootstrapetitle($(this), 'This tactic is linked to ' + "<U>"+ htmlDecode($(this).attr('linkedplanname') + "</U>"), "tipsy-innerWhite");
                        });
                        //End
                        return true;
                    }
            //Modified By Komal Rawal for #1848 Link To tactic feature
                    if(cellInd == 1)
                    {
                        if(value != undefined && value != "undefined" && value != null)
                        {
                            LineItemGrid.cells(rowId, cellInd).setValue(value+"</div>" + TacticName);
                        }
                        else
                        {
                            LineItemGrid.cells(rowId, cellInd).setValue(TacticName);
                        }
                    }
                    value = "";
                    $("div[id^='LinkIcon']").each(function () {
                        bootstrapetitle($(this), 'This tactic is linked to ' + "<U>"+ htmlDecode($(this).attr('linkedplanname') + "</U>"), "tipsy-innerWhite");
                    });
            //End
                    return true;
                }
            }
        
        }

        //Added by Rahul Shah for PL #2296 
        $(document).on('click.bs.toggle', 'div[data-toggle^=toggle]', function(e) {
            var $checkbox = $(this).find('input[type=checkbox]')
            $checkbox.bootstrapToggle('toggle')
            e.preventDefault()
        });    
</script>