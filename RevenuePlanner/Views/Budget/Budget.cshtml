@model RevenuePlanner.Models.BudgetDHTMLXGridModel
@using RevenuePlanner.Models
@using RevenuePlanner.Helpers

@{
    bool isquarter = ViewBag.isquarter;
    string GridFirstrowId = string.Empty;
    if (Model.Grid.rows.Count>0)
    {
        GridFirstrowId = Model.Grid.rows[0].id;
    }
}
<link href="@Url.Content("~/Content/css/DHTMLX/dhtmlxtreegrid2_min.css")" rel="stylesheet" type="text/css" />

@*<script src="@Url.Content("~/Scripts/js/Home/Grid_CalendarCommon.js")"></script>*@
@Styles.Render("~/Content/css/GetCSSBudget")
<div id="gridbox" style="background-color: white; width: 100%;" class="financeReportGrid"></div>
@*Insertation start for #2623 popup for import multiple plan*@
<div id="ImportModal" class="modal hide fade import-popover">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4> Import Data  </h4>
    </div>
    <div class="modal-body">
        <ul>
            @*
                updation start 14/09/2016 #2543 kausha (current plan data will be downlded as per export and label is changed)
            *@
            @*<li><strong>Download file format  <a href="~/Content/Common/grid sample.xls" onclick="return ExportToExcel(); ">here</a></strong></li>*@
            <li><strong>Download file  <a onclick="return ExportToExcel();">here</a></strong></li>
            <li><strong>Import will only support plan Year data. </strong></li>

            <li>
                <strong>Make any necessary changes</strong><br />
                <span>Note: Any additional rows or columns added will not appear after imported</span>
            </li>
            <li>
                <strong>Import the file</strong><br />
                <span>Note:The file format must match the file format of sample file.</span>
            </li>
            <li>
                <strong>Actual data import</strong><br />

                <ul>
                    <li><span>Only tactic and line item will be updated when we import data of actual.</span></li>
                    <li><span>Tactic will be updated in case no lineitem available.</span></li>
                    <li><span>Tactic and line item will be updated when tactic status will be approved.</span></li>
                </ul>


            </li>
            <li>
                <strong>Planned data import</strong><br />

                <ul>
                    <li><span>Only tactic and line item will be updated when we import data of planned.</span></li>
                    <li><span>Other line item will not be updated.</span></li>
                </ul>

            </li>
        </ul>
        <input id="input-43" name="input43[]" type="file" class="file-loading select-file">
        <div id="errorBlock" class="help-block file-error-message"></div>
    </div>


</div>
@*Insertation end for #2623 popup for import multiple plan*@
<script type="text/javascript">
    gridname = "budget";
    var gridheader;
    var colType;
    var budgetWidth;
    var colSorting;
    var ColumnIds;
    var attachHeader;
    var header;
    var eventidonedit = 0;
    var noplan = '@Sessions.IsNoPlanCreated';
    $(document).ready(function () {
        var GridRowId='@GridFirstrowId';
        $('#divgridview').addClass('budget-grid');
        if (GridRowId != '' || noplan.toLowerCase() == 'true') {
            var JsonModel = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Grid))';
            exportgridData = JsonModel;
            HomeGrid = new dhtmlXGridObject('gridbox');
            var imgpath = '@Url.Content("~/codebase/imgs/")';
            HomeGrid.setImagePath(imgpath);
            HomeGrid.setImageSize(1, 1);
            gridheader = '@Model.SetHeader';
            ColumnIds = '@Model.ColumnIds';
            colType = '@Model.ColType';
            colSorting = '@Model.ColSorting';
            budgetWidth = '@Model.Width';
            header = '@Model.SetHeader';
            header = $('<div/>').html(header.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
            header = (header.toString().replace(/&amp;/g, '&'));
            HomeGrid.setHeader(header);
            //assigned header to export to excel
            gridheader = header;
            HomeGrid.setColTypes('@Model.ColType');
            HomeGrid.setInitWidths('@Model.Width');
            HomeGrid.setColSorting('@Model.ColSorting');
            HomeGrid.setColumnIds('@Model.ColumnIds');
            HomeGrid.enableAutoHeight(false);
            HomeGrid.enableAutoWidth(false);
            HomeGrid.enableEditTabOnly(true);

        TaskNameColIndex = HomeGrid.getColIndexById("TaskName");
        HomeGrid.setColumnMinWidth("300", TaskNameColIndex);

            HomeGrid.setEditable(true);
            HomeGrid.init();

            var mainGridData = JsonModel;
            mainGridData = $('<textarea/>').html(mainGridData.toString().replace(/[\\]/g, "\\\\")).text(); // Decode Html content.
            var GridDataHomeGrid = (mainGridData.toString().replace(/&amp;/g, '&'));

            //Set number format for value fields
            var columnIdArray = '@Model.ColumnIds'.split(',');

            var startValueColumnIndex = 7;//this is the value column start index
            for (i = startValueColumnIndex; i < columnIdArray.length; ++i) {
                // do something with `substr[i]`

                HomeGrid.setNumberFormat("0,000.00", i, ".", ",");

            }
            HomeGrid.parse(GridDataHomeGrid, "json");
            HomeGrid.collapseAll();

            var colSplitId = HomeGrid.getColIndexById("BudgetCost");
            HomeGrid.splitAt(colSplitId);

            HomeGrid.attachEvent("onOpenEnd", function (id, state) {
                if (state == "1") {
                    SetFlagTooltip();
                    SetTooltip();
                }
            });

            HomeGrid.attachEvent("onBeforeSorting", function (ind, grid) {
                if (IsManageviewClick) {
                    IsManageviewClick = false;
                    return false;
                }
                else if (IsManageDropdown) {
                    IsManageviewClick = false;
                    return false;
                }
                else
                    return true;
            });
            HomeGrid.attachEvent("onRowSelect", function (id, ind) {
                isEditTacticHomeGrid = id;

            });
            var machineNameindex = HomeGrid.getColIndexById("MachineName");
            var ActivityIdindex = HomeGrid.getColIndexById("ActivityId");
            var colTypeIndex = HomeGrid.getColIndexById("Type");
            var LineItemTypeIdIndex = HomeGrid.getColIndexById("LineItemTypeId");
            HomeGrid.setColumnHidden(ActivityIdindex, true);
            HomeGrid.setColumnHidden(machineNameindex, true);
            HomeGrid.setColumnHidden(colTypeIndex, true);
            HomeGrid.setColumnHidden(LineItemTypeIdIndex, true);
            var ColumnsToView = '@Model.HiddenTab';
            var selectedTab = ColumnsToView.split(',');
            for (var i = 0; i < selectedTab.length; i++) {
                var sTab = selectedTab[i];
                if (sTab != '' && sTab != null) {
                    for (var j = 0; j < HomeGrid.getColumnsNum() ; j++) {
                        var ColumnId = HomeGrid.getColumnId(j);
                        if (ColumnId == 'UnAllocatedCost') {
                            ColumnId = 'PlannedCost';
                        }
                        if (ColumnId == 'UnAllocatedBudget') {
                            ColumnId = 'BudgetCost';
                        }                        
                        var YearlyTab = sTab + "Cost";
                        if (ColumnId == sTab || ColumnId == YearlyTab) {
                            HomeGrid.setColumnHidden(j, true);
                        }
                    }
                }
            }
           
            //setTimeout(function () {
                HomeGrid.setSizes();
              HomeGrid.loadOpenStates("plangridState");
              
                   HomeGrid.objBox.scrollTop = scrollstate.y ;
               
            //}, 200);
                   LoadAfterParsing();

            var rowCount = HomeGrid.getRowsNum();
            if (rowCount != undefined && rowCount == 0) {
                
                if ($("#IsPlanEditable").val().toString().toLowerCase() == 'true' && noplan.toLowerCase() == 'true') {
                    AddBlankRow();
                    $('#exp-serach').hide();
                }
            }
            SetFlagTooltip();
            SetTooltip();
        }
        else {
            $('#exp-serach').hide();
            $('#divgridview').html('<div id="NodatawithfilterBudget"><span class="pull-left margin_t30 bold " style="margin-left: 20px;">No data exists. Please check the filters or grouping applied.</span><br/></div>');
        }
        if ($('#txtGlobalSearch').val() != undefined && $('#txtGlobalSearch').val() != "" && $('#txtGlobalSearch').val() != null) {
            GlobalSearchonGrid($('#txtGlobalSearch').val(), $('#searchCriteria').val().replace(" ", ""));
        }
    });

    function SetFlagTooltip()
    {
        var allRowIDs = HomeGrid.getAllRowIds(',').split(",");
        var parent = ["plan", "campaign", "program"];
        var parentUppercase = ["Plan", "Campaign", "Program"];
        var child = ["Campaign", "Program", "Tactic"];
        for (var i = 0; i < allRowIDs.length; i++) {
            for (var j = 0; j < HomeGrid.getColumnsNum() ; j++) {
                if (HomeGrid.getColumnId(j) == "PlannedCost" || HomeGrid.getColumnId(j) == "Planned" || HomeGrid.getColumnId(j) == "BudgetCost" || HomeGrid.getColumnId(j) == "Budget")
                    if (HomeGrid.cells(allRowIDs[i], j).getAttribute("actval") == "1") {
                        var TypeIndex = HomeGrid.getColIndexById("Type");
                        var Type = HomeGrid.cells(allRowIDs[i], TypeIndex).getValue();
                        HomeGrid.cells(allRowIDs[i], j).setAttribute("title", Type + "'s cost is over it's budget.");
                    }
                    else if (HomeGrid.cells(allRowIDs[i], j).getAttribute("actval") == "2") {
                        var TypeIndex = HomeGrid.getColIndexById("Type");
                        var Type = HomeGrid.cells(allRowIDs[i], TypeIndex).getValue();
                        var p_ind = parent.indexOf(Type.toLowerCase());
                        HomeGrid.cells(allRowIDs[i], j).setAttribute("title", parentUppercase[p_ind] + " Budget is less than the budget for it's " + child[p_ind] + ".");
                    }
            }
        }
    }
function LoadAfterParsing() {
    if (eventidonedit != 0) {
        HomeGrid.detachEvent(eventidonedit);
    }
    eventidonedit = HomeGrid.attachEvent("onEditCell", doOnEditCell);
    SetselectedRow();
   
        HomeGrid.objBox.scrollTop = scrollstate.y ;
    
}

var value;
var TacticName;
function doOnEditCell(stage, rowId, cellInd, nValue, oValue) {
        var TaskNameId = HomeGrid.getColIndexById("TaskName");
        if (cellInd != TaskNameId && nValue == '') {
            nValue = 0;
            HomeGrid.cells(rowId, cellInd).setValue(nValue);
        }
        if (stage == 0) { // Stage == 0 Means Click on Cell
            var newvalue = HomeGrid.cells(rowId, cellInd).getValue();
            if (newvalue.indexOf("</div>") > -1) {
                if (newvalue.split("</div>").length > 2) {
                    value = newvalue.split("</div>")[0] + '</div>' + newvalue.split("</div>")[1];
                    TacticName = newvalue.split("</div>")[2];
                }
                else {
                    value = newvalue.split("</div>")[0];
                    TacticName = newvalue.split("</div>")[1];
                }
            }
            var locked = HomeGrid.cells(rowId, cellInd).getAttribute("locked");
            if ((locked != null && locked != "") && locked == "1")
                return false;
            if (rowId == "newRow_0")
                return false;
        }
        else {
            if (nValue != undefined) {
                TacticName = nValue;
            }
        }
        if (stage == 1) {
            if (cellInd != TaskNameId) {
                $(".dhx_combo_edit").on('keydown', (function (e) { GridPriceFormatKeydown(e); }));
                HomeGrid.editor.obj.onkeypress = function (e) {
                    e = e || window.event;
                    if ((e.keyCode >= 47) || (e.keyCode == 0)) {
                        var text = this.value;
                        if (text.length > 10) { //max length of the text
                            return false;
                        }
                    }
                }
            }
        }
       
        if (stage == 2) { // Stage == 2 - Means perform focus out event
            if (nValue != oValue) {
            var EntityId = HomeGrid.cells(rowId, 0).cell.innerText;
            var Section = HomeGrid.cells(rowId, 1).cell.innerText;
            var Month = '';
            var YearCost;
            var MonthCost;
            var Tab;
            var BudgetHdr = HomeGrid.getColLabel(cellInd, 0);
            if (BudgetHdr.indexOf("-") > -1) {
                Tab = BudgetHdr.split(' ')[1];
            }
            else {
                Tab = BudgetHdr;
            }

            var TypeIndex = HomeGrid.getColIndexById("Type");

            if (TaskNameId == cellInd) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Plan/SaveGridDetail/")',
                    data: { UpdateType: HomeGrid.cells(rowId, TypeIndex).cell.innerText, UpdateColumn: 'TaskName', UpdateVal: nValue, Id: parseInt(EntityId) },
                    dataType: 'json',
                    success: function (states) {
                        if (states.errormsg != null && states.errormsg.trim() != "") {
                            alert(states.errormsg.trim());
                            HomeGrid.cells(rowId, cellInd).setValue(oValue);
                            return false;
                        }
                        else {
                            if (HomeGrid.cells(rowId, TypeIndex).cell.innerText.toLowerCase() == "plan") {
                                SetFilterData(EntityId, nValue);
                            }
                        }
                    }
                });
            }
            else {
                if (Tab.toLowerCase() == 'actual' || Tab.toLowerCase() == 'planned' || Tab.toLowerCase() == 'budget') {
                    Month = BudgetHdr.split(' ')[0];
                }
                var IsTotalCost = false;
                if (Tab.toLowerCase() == 'actual') {
                    var ActualCostColIndex = HomeGrid.getColIndexById("ActualCost");
                    YearCost = HomeGrid.cells(rowId, ActualCostColIndex).cell.innerText;
                    MonthCost = nValue;
                }
                else if (Tab.toLowerCase() == 'planned') {
                    var PlannedCostColIndex = HomeGrid.getColIndexById("PlannedCost");
                    YearCost = HomeGrid.cells(rowId, PlannedCostColIndex).cell.innerText;
                    MonthCost = nValue;
                }
                else if (Tab.toLowerCase() == 'budget') {
                    var BudgetCostColIndex = HomeGrid.getColIndexById("BudgetCost");
                    YearCost = HomeGrid.cells(rowId, BudgetCostColIndex).cell.innerText;
                    MonthCost = nValue;
                }
                else if (Tab.toLowerCase() == 'total actual') {
                    Tab = "Actual";
                    MonthCost = '';
                    YearCost = nValue;
                }
                else if (Tab.toLowerCase() == 'planned cost') {
                    IsTotalCost = true;
                    Tab = "Planned";
                    MonthCost = '';
                    YearCost = nValue;
                }
                else if (Tab.toLowerCase() == 'total budget') {
                    IsTotalCost = true;
                    Tab = "Budget";
                    MonthCost = '';
                    YearCost = nValue;
                }
                SaveValues(EntityId, Section, Month, Tab, MonthCost, YearCost);

                var Type = HomeGrid.cells(rowId, TypeIndex).getValue();
                if (Tab.toLowerCase() == "planned") {
                    var TypeIndex = HomeGrid.getColIndexById("Type");
                    if (IsTotalCost) {
                        if (Type.toLowerCase() == 'tactic') {
                            //Tactic Planned Cost Change
                            SetPlannedCost(rowId, cellInd, nValue, oValue, Type.toLowerCase(), true);
                        }
                        else if (Type.toLowerCase() == 'lineitem') {
                            //LineItem Planned Cost Change
                            SetPlannedCost(rowId, cellInd, nValue, oValue, Type.toLowerCase(), true);
                        }
                    }
                    else {
                        if (Type.toLowerCase() == 'tactic') {
                            //Tactic Monthly Planned Cost Change
                            SetPlannedCost(rowId, cellInd, nValue, oValue, Type.toLowerCase(), false);
                        }
                        else if (Type.toLowerCase() == 'lineitem') {
                            //LineItem Monthly Planned Cost Change
                            SetPlannedCost(rowId, cellInd, nValue, oValue, Type.toLowerCase(), false);
                        }
                    }
                }
                else if (Tab.toLowerCase() == "actual") {
                    //Actual Cost Change
                    SetActualCost(rowId, cellInd, nValue, oValue, Type.toLowerCase());
                }
                else if (Tab.toLowerCase() == "budget") {
                    SetBudgetCost(rowId, cellInd, nValue, oValue, IsTotalCost);
                }
            }
            if (cellInd == TaskNameId) {
                if (value != undefined && value != "undefined" && value != null) {
                    HomeGrid.cells(rowId, cellInd).setValue(value + "</div>" + TacticName);
                }
                else {
                    HomeGrid.cells(rowId, cellInd).setValue(TacticName);
                }
            }
            value = "";

            return true;
            }
           
            if (cellInd == TaskNameId) {
                if (value != undefined && value != "undefined" && value != null) {
                    HomeGrid.cells(rowId, cellInd).setValue(value + "</div>" + TacticName);
                }
                else {
                    HomeGrid.cells(rowId, cellInd).setValue(TacticName);
                }
            }
            value = "";
            return true;

        }
   
}

    function SetBudgetCost(rowId, cellInd, nValue, oValue, IsTotalCost) {
        var UnAllocatedIndex = HomeGrid.getColIndexById("UnAllocatedBudget");
        var UnAllocatedBudgetCost = parseFloat(HomeGrid.cells(rowId, UnAllocatedIndex).getValue());
        var AmtDiff = parseFloat(nValue) - parseFloat(oValue);
        var SetAmtDiff = parseFloat(UnAllocatedBudgetCost) + parseFloat(AmtDiff);
        if (!IsTotalCost) {
            SetAmtDiff = parseFloat(UnAllocatedBudgetCost) - parseFloat(AmtDiff);
        }
        HomeGrid.cells(rowId, UnAllocatedIndex).setValue(SetAmtDiff);

        var GetParentId = HomeGrid.getParentId(rowId);
        var ParentCost = parseFloat(HomeGrid.cells(GetParentId, cellInd).getValue());
        var ChildNodeIds = HomeGrid.getSubItems(GetParentId);
        var arrChildNodeIds = ChildNodeIds.split(',');
        var ChildTotal = 0;
        for (var i = 0; i < arrChildNodeIds.length; i++) {
            ChildTotal = parseFloat(ChildTotal + parseFloat(HomeGrid.cells(arrChildNodeIds[i], cellInd).getValue()));
        }
        if (ChildTotal > ParentCost) {
            HomeGrid.setCellTextStyle(GetParentId, cellInd, "background-image: url(./content/images/orange-corner-budget.png); background-repeat: no-repeat; background-position: right top;");
        }
        else {
            HomeGrid.setCellTextStyle(GetParentId, cellInd, "");
        }

        var BudgetVal = parseFloat(HomeGrid.cells(rowId, cellInd).getValue());
        var PlannedVal = parseFloat(HomeGrid.cells(rowId, cellInd + 1).getValue());
        if (PlannedVal > BudgetVal) {
            HomeGrid.setCellTextStyle(rowId, cellInd + 1, "background-image:url(./content/images/red-corner-budget.png); background-repeat: no-repeat; background-position: right top;");
        }
        else {
            HomeGrid.setCellTextStyle(rowId, cellInd + 1, "");
        }
    }

    function SetActualCost(rowId, cellInd, nValue, oValue, Type) {
    var TotalActualIndex = HomeGrid.getColIndexById("ActualCost");
    var TotalActualCost = parseFloat(HomeGrid.cells(rowId, TotalActualIndex).getValue());
    var AmtDiff = parseFloat(nValue) - parseFloat(oValue);
    var SetAmtDiff = parseFloat(TotalActualCost) + parseFloat(AmtDiff);
    HomeGrid.cells(rowId, TotalActualIndex).setValue(SetAmtDiff);

    if (Type == 'tactic') {
        var ChildNodeIds = HomeGrid.getSubItems(rowId);
        var arrChildNodeIds = ChildNodeIds.split(',');
        var ActivityTypeIndex = HomeGrid.getColIndexById("LineItemTypeId");
        for (var i = 0; i < arrChildNodeIds.length; i++) {
            var ActivityId = HomeGrid.cells(arrChildNodeIds[i], ActivityTypeIndex).getValue();
            if (ActivityId == '') {
                //Balance Actual Cost
                var BalCelVal = parseFloat(HomeGrid.cells(arrChildNodeIds[i], cellInd).getValue());
                var SetBalCelVal = parseFloat(BalCelVal + AmtDiff);
                HomeGrid.cells(arrChildNodeIds[i], cellInd).setValue(SetBalCelVal);
                //Balance Total Actual Cost
                var BalTotCelVal = parseFloat(HomeGrid.cells(arrChildNodeIds[i], TotalActualIndex).getValue());
                var SetBalTotCelVal = parseFloat(BalTotCelVal + AmtDiff);
                HomeGrid.cells(arrChildNodeIds[i], TotalActualIndex).setValue(SetBalTotCelVal);
            }
        }
    }
    //Roll Up Function
    RollUpActualCost(rowId, cellInd, AmtDiff);
}

function SetPlannedCost(rowId, cellInd, nValue, oValue, Type, IsTotalCost) {
    //Total Planned Cost
    var UnAllocatedIndex = HomeGrid.getColIndexById("UnAllocatedCost");
    var UnAllocatedTotalCost = parseFloat(HomeGrid.cells(rowId, UnAllocatedIndex).getValue());
    var AmtDiff = parseFloat(nValue) - parseFloat(oValue);
    var SetAmtDiff = parseFloat(UnAllocatedTotalCost) + parseFloat(AmtDiff);
    if (!IsTotalCost) {
        SetAmtDiff = parseFloat(UnAllocatedTotalCost) - parseFloat(AmtDiff);
    }
    HomeGrid.cells(rowId, UnAllocatedIndex).setValue(SetAmtDiff);
    var ChildNodeIds = HomeGrid.getSubItems(rowId);
        var ParentCost = 0;
        var ParentUnallocatedCost = SetAmtDiff;
    if (Type.toLowerCase() == 'lineitem') {
        var GetParentId = HomeGrid.getParentId(rowId);
            ParentCost = HomeGrid.cells(GetParentId, cellInd).getValue();
            ParentUnallocatedCost = HomeGrid.cells(GetParentId, UnAllocatedIndex).getValue();
        ChildNodeIds = HomeGrid.getSubItems(GetParentId);
    }
    var arrChildNodeIds = ChildNodeIds.split(',');
    var ActivityTypeIndex = HomeGrid.getColIndexById("LineItemTypeId");

        var LineItemTotal = 0;
        
        for (var i = 0; i < arrChildNodeIds.length; i++) {
            var ActivityId = HomeGrid.cells(arrChildNodeIds[i], ActivityTypeIndex).getValue();
            if (ActivityId != '') {
                LineItemTotal = LineItemTotal + parseFloat(HomeGrid.cells(arrChildNodeIds[i], cellInd).getValue());
            }
        }
        //calculate total lineitems unallocated cost
        var LineItemUnallocatedTotal = 0;
        for (var i = 0; i < arrChildNodeIds.length; i++) {
            var ActivityId = HomeGrid.cells(arrChildNodeIds[i], ActivityTypeIndex).getValue();
            if (ActivityId != '') {
                LineItemUnallocatedTotal = LineItemUnallocatedTotal + parseFloat(HomeGrid.cells(arrChildNodeIds[i], UnAllocatedIndex).getValue());
            }
        }
        for (var i = 0; i < arrChildNodeIds.length; i++) {
            var ActivityId = HomeGrid.cells(arrChildNodeIds[i], ActivityTypeIndex).getValue();
            if (ActivityId == '') {
                //Balance Planned Cost
                SetBalanceCost(arrChildNodeIds[i], cellInd, Type, AmtDiff, IsTotalCost, LineItemTotal, nValue,ParentCost);
                //Balance UnAllocated Cost
                SetBalanceUnallocatedCost(arrChildNodeIds[i], UnAllocatedIndex, Type, AmtDiff, IsTotalCost, LineItemTotal, nValue, ParentUnallocatedCost, LineItemUnallocatedTotal);
            }
        }
        //Roll Up Function
        if (Type.toLowerCase() != 'lineitem') {
            RollUpCost(rowId, cellInd, AmtDiff, IsTotalCost);
        }

        var PlannedVal = parseFloat(HomeGrid.cells(rowId, cellInd).getValue());
        var BudgetVal = parseFloat(HomeGrid.cells(rowId, cellInd - 1).getValue());
        if (PlannedVal > BudgetVal) {
            HomeGrid.setCellTextStyle(rowId, cellInd, "background-image:url(./content/images/red-corner-budget.png); background-repeat: no-repeat; background-position: right top;");
        }
        else {
            HomeGrid.setCellTextStyle(rowId, cellInd, "");
        }
    }

    function SetBalanceCost(arrChildNodeId, cellInd, Type, AmtDiff, IsTotalCost, LineItemTotal, nValue, ParentCost) {
      
        var SetAmtDiff = 0;
        if (Type.toLowerCase() == 'tactic') {
            SetAmtDiff = parseFloat(nValue) - parseFloat(LineItemTotal);
        }
        else if (Type.toLowerCase() == 'lineitem') {
            SetAmtDiff = parseFloat(ParentCost) - parseFloat(LineItemTotal);
        }
        HomeGrid.cells(arrChildNodeId, cellInd).setValue(SetAmtDiff);
    }
    function SetBalanceUnallocatedCost(arrChildNodeId, cellInd, Type, AmtDiff, IsTotalCost, LineItemTotal, nValue, tacticUnallocatedCost, LineItemUnallocatedTotal) {
        
        var unAllocated = tacticUnallocatedCost - LineItemUnallocatedTotal;
            HomeGrid.cells(arrChildNodeId, cellInd).setValue(unAllocated);
    }

function RollUpCost(rowId, cellInd, AmtDiff, IsTotalCost) {
    var UnAllocatedIndex = HomeGrid.getColIndexById("UnAllocatedCost");
    var ParentId = HomeGrid.getParentId(rowId);
    while (ParentId != null && ParentId != '') {
        var ParentCost = parseFloat(HomeGrid.cells(ParentId, cellInd).getValue());
        var ParentAmtDiff = parseFloat(ParentCost) + parseFloat(AmtDiff);
        HomeGrid.cells(ParentId, cellInd).setValue(ParentAmtDiff);

        var PlannedVal = parseFloat(HomeGrid.cells(ParentId, cellInd).getValue());
        var BudgetVal = parseFloat(HomeGrid.cells(ParentId, cellInd - 1).getValue());
        if (PlannedVal > BudgetVal) {
            HomeGrid.setCellTextStyle(ParentId, cellInd, "background-image:url(./content/images/red-corner-budget.png); background-repeat: no-repeat; background-position: right top;");
        }
        else {
            HomeGrid.setCellTextStyle(ParentId, cellInd, "");
        }

        //Parent UnAllocated Cost
        var UnAllocatedTotalCost = parseFloat(HomeGrid.cells(ParentId, UnAllocatedIndex).getValue());
        var SetAmtDiff = parseFloat(UnAllocatedTotalCost) + parseFloat(AmtDiff);
        if (!IsTotalCost) {
            SetAmtDiff = parseFloat(UnAllocatedTotalCost) - parseFloat(AmtDiff);
        }
        HomeGrid.cells(ParentId, UnAllocatedIndex).setValue(SetAmtDiff);

        ParentId = HomeGrid.getParentId(ParentId);
    }
}

function RollUpActualCost(rowId, cellInd, AmtDiff) {
    var TotalActualIndex = HomeGrid.getColIndexById("ActualCost");
    var ParentId = HomeGrid.getParentId(rowId);
    while (ParentId != null && ParentId != '') {
        var ParentCost = parseFloat(HomeGrid.cells(ParentId, cellInd).getValue());
        var ParentAmtDiff = parseFloat(ParentCost) + parseFloat(AmtDiff);
        HomeGrid.cells(ParentId, cellInd).setValue(ParentAmtDiff);

        //Parent Total Cost
        var TotalActualCost = parseFloat(HomeGrid.cells(ParentId, TotalActualIndex).getValue());
        var SetAmtDiff = parseFloat(TotalActualCost) + parseFloat(AmtDiff);
        HomeGrid.cells(ParentId, TotalActualIndex).setValue(SetAmtDiff);

        ParentId = HomeGrid.getParentId(ParentId);
    }
}

function SaveValues(EntityId, Section, Month, Tab, MonthCost, YearCost) {
    var isquarter = false;
    var FunctionParam;
    var isTotalCost = false;
    if ('@isquarter'.toLowerCase() == 'true') {
        isquarter = true;
    }

    if (Tab.toLowerCase() == 'planned') {
        var monthlyplannedcost;
        if (MonthCost != null && MonthCost != '') {
            monthlyplannedcost = SetValueByExchangeRate(MonthCost.replace(/,/g, ""));
        }
        else {
            isTotalCost = true;
            monthlyplannedcost = SetValueByExchangeRate(YearCost.replace(/,/g, ""));
        }
        FunctionParam = 'entityId=' + EntityId + '&section=' + Section + '&month=' + Month + '&allocatedcost=' + monthlyplannedcost + '&tab=' + Tab + '&isquarter=' + isquarter + '&isTotalCost=' + isTotalCost;
    }
    else {
        var inputArr = [];
        var jsonInputs;
        var MonthlyKeyText;
        var TotalKeyText;

        if (Tab.toLowerCase() == 'budget') {
            MonthlyKeyText = 'BudgetMonth';
            TotalKeyText = 'BudgetYear';
        }
        else {
            MonthlyKeyText = 'CostMonth';
            TotalKeyText = 'CostYear';
        }
        if (MonthCost != null && MonthCost != '') {
            inputArr.push({
                key: TotalKeyText,
                Value: SetValueByExchangeRate(YearCost.replace(/,/g, ""))
            });
            inputArr.push({
                key: MonthlyKeyText,
                Value: SetValueByExchangeRate(MonthCost.replace(/,/g, ""))
            });
        }
        else {
            inputArr.push({
                key: TotalKeyText,
                Value: SetValueByExchangeRate(YearCost.replace(/,/g, ""))
            });
        }
        jsonInputs = JSON.stringify(inputArr);

        if (Tab.toLowerCase() == 'budget') {
            FunctionParam = 'entityId=' + EntityId + '&section=' + Section + '&month=' + Month + '&inputs=' + jsonInputs + '&isquarter=' + isquarter;
        }
        else {
            FunctionParam = 'entityId=' + EntityId + '&section=' + Section + '&month=' + Month + '&inputs=' + jsonInputs + '&tab=' + Tab + '&isquarter=' + isquarter;
        }
    }

    var URL;
    if (Tab.toLowerCase() == 'budget') {
        URL = '@Url.Content("~/Plan/SaveBudgetCell/")';
    }
    else if (Tab.toLowerCase() == 'planned') {
        URL = '@Url.Content("~/Inspect/SaveLineItemCostAllocation/")';
    }
    else if (Tab.toLowerCase() == 'actual') {
        URL = '@Url.Content("~/Plan/SavePlannedCell/")';
    }
    $.ajax({
        type: 'POST',
        url: URL,
        dataType: "json",
        data: FunctionParam,
        success: function (data) {

            if (data.isSuccess == true) {
                section = Section.toLowerCase();
                $("#hdnBudgetingIsSave").val("true");
                if (Tab.toLowerCase() == 'actual' || Tab.toLowerCase() == 'budget') {
                    $("#hdnBudgetingExpandId").val(section + EntityId);
                }
                else {
                    var sectionIntializer = section == "tactic" ? "cpt" : section == "program" ? "cp" : section == "campaign" ? "c" : "";
                    $("#hdnBudgetingExpandId").val(section + sectionIntializer + '_' + EntityId);
                }
            }
            else {
                $('#cErrorDuplicatePlan').html('<strong>Error! </strong> ' + data.errormsg);
                $('#errorMessageDuplicatePlan').slideDown(700);

            }
        }
    });
}

function showModal() {
    LoadFileInputModelBox();
    $('#ImportModal').modal('show');
}
//added by devanshi to add blank row to budget grid when there is no plan for client #2587 30-9-2016
function AddBlankRow() {
    var blankrawdata = [];
    blankrawdata.push("--");
    var id = "";
    var addcolindex = 0;
    var taskcolindex = 0;
    for (var i = 1; i < HomeGrid.getColumnCount() ; i++) {
        id = HomeGrid.getColumnId(i);
        if (id == '@Enums.HomeGrid_Default_Hidden_Columns.TaskName.ToString()') {
            blankrawdata.push("Your plan goes here");
            taskcolindex = i;
        }
        else if (id == 'Buttons') {
            blankrawdata.push("");
            addcolindex = i;
        }
        else if (id == 'ActivityId') {
            blankrawdata.push("0");
        }
        else if (id == '@Enums.HomeGrid_Default_Hidden_Columns.ColourCode.ToString().ToLower()') {
            blankrawdata.push("");
        }
        else {
            blankrawdata.push("--");
        }
    }
    var rawdata = blankrawdata.join(',');
    HomeGrid.addRow("newRow_0", rawdata);
    HomeGrid.cells("newRow_0", addcolindex).setValue("<div class=grid_add onclick=javascript:DisplayPopUpMenu(this,event)  id='Plan' alt='000' per='true' title='Add'><i class='fa fa-plus-circle'></i></div>");
    HomeGrid.setCellTextStyle("newRow_0", taskcolindex, "color:gray;font-style: italic;");
    var colourCodeIndex = HomeGrid.getColIndexById('@Enums.HomeGrid_Default_Hidden_Columns.ColourCode.ToString().ToLower()');
    HomeGrid.setColumnHidden(colourCodeIndex, true);
}
</script>
