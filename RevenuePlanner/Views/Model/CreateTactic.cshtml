@model RevenuePlanner.Models.Tactic_TypeModel
@using RevenuePlanner.Models
@using RevenuePlanner.Helpers
@using System.Data;
@using System.Data.Entity;
@using System.Linq;
@{
    bool IsModelIntegrated = ViewBag.IsModelIntegrated;
    //string ModelIntegrationType = ViewBag.ModelIntegrationType;
    //Start Manoj Limbachiya PL # 486

    bool IsDeplyed = ViewBag.IsDeployed;
    bool IsWorkFront = ViewBag.isIntegratedWithWorkFront != null ? ViewBag.isIntegratedWithWorkFront : false; // Update by bhavesh #1727
    bool IsMarketo = ViewBag.isIntegratedWithMarketo != null ? ViewBag.isIntegratedWithMarketo : false;         //Added By Komal RAwal
    //End Manoj Limbachiya PL # 486
    // Start - Added By Sohel Pathan on 16/06/2014 for PL ticket #528
    string ModelStatus = Convert.ToString(ViewBag.ModelStatus);
    int? stageid = Model.StageId;
    @Html.Hidden("hdnModelStatus", ModelStatus);
    string TacticTypeStageId = Convert.ToString(ViewBag.TacticTypeStageId);
    @Html.Hidden("hdnStageId", TacticTypeStageId);
    string ChangeTargetStageMsg = Convert.ToString(ViewBag.ChangeTargetStageMsg);
    @Html.Hidden("hdnChangeTargetStageMsg", ChangeTargetStageMsg);


    // End - Added By Sohel Pathan on 16/06/2014 for PL ticket #528
}
<div class="head">
    <span class="close-form source-sans-proregular">» CLOSE MENU</span>
    <div class="cf">
        <h2 class="source-sans-prolight">Tactic Detail</h2>
        @if ((bool)ViewBag.IsCreated == false && (bool)ViewBag.CanDelete == true)
        {
            <div class="btn-group pull-right gear-dropdown">
                <span class="gear-sidebar dropdown-toggle" data-toggle="dropdown"></span>
                <ul class="dropdown-menu">
                    <li><a id="deleteTactic">Delete Tactic</a></li>
                </ul>
            </div>
        }
    </div>

</div>

<div id="validationMessage" class="alert alert-error hide message-position-small">
    <a class="close">×</a>
    <strong>Error:</strong> <span id="spanMessage"></span>
</div>


@using (Html.BeginForm(new { @id = "frmSaveTactic" }))
{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".simpleSelectBox select").selectbox();
        });
    </script>
    <div id="frm_tactics" name="frm_tactics">
        <div class="content">
            @Html.HiddenFor(model => model.TacticTypeId, new { id = "hdnTacticTypeId" })

            @Html.HiddenFor(model => model.ModelId, new { id = "hdnModelId" })
            @Html.HiddenFor(model => model.ClientId, new { id = "hdnClientId" })

            <label>Title <span class="required-asterisk">*</span></label>
            @Html.TextBoxFor(model => model.Title, new { placeholder = "Required", require = "true", maxlength = "255" })@*maxlength added by uday for functinal review point 69 17-7-2014*@

            <label>Description</label>
            @Html.TextAreaFor(model => model.Description, new { placeholder = "Optional" })

            <label>Target Stages <span class="required-asterisk">*</span></label>

            <span class="simpleSelectBox">@Html.DropDownListFor(model => model.StageId, new SelectList((System.Collections.IEnumerable)ViewBag.Stages, "StageId", "Title"), "Please Select", new { @class = "ddlStyle hide", require = "true" })</span>
            @{
                <label>Asset Type<span class="required-asterisk">*</span></label>

                <span class="simpleSelectBox">@Html.DropDownListFor(model => model.AssetType, new SelectList((System.Collections.IEnumerable)ViewBag.BindAssetType, "ID", "Title"), "Please Select", new { @class = "ddlStyle hide", require = "true" })</span>
                    <label class="margin-top10">Status</label>

                //Start Manoj Limbachiya PL # 486
                if (IsDeplyed)
                {
                    <input id="t_model_status" name="t_status" type="text" class="icon-check-blue margin-top10" placeholder="Deployed to Model" maxlength="18" readonly />
                }
                else
                {
                    <input id="t_model_status" name="t_status" type="text" class="icon-check-gray margin-top10" placeholder="Not Deployed to Model" maxlength="18" readonly />
                }
                //End Manoj Limbachiya PL # 486

                if (IsModelIntegrated)
                {
                    if (Model.IsDeployedToIntegration)
                    {
                        <input id="t_integration_status" name="t_status" type="text" class="icon-check-blue margin-top10" placeholder="Deployed to Integration" maxlength="18" readonly />
                    }
                    else
                    {
                        <input id="t_integration_status" name="t_status" type="text" class="icon-check-gray margin-top10" placeholder="Not Deployed to Integration" maxlength="18" readonly />
                    }

                    //Start Brad Gray PL # 1374
                    if (IsWorkFront == true)
                    {
                        <label>WorkFront Template <span class="required-asterisk">*</span></label> //Modified by Komal Rawal to display asterik as required field
                                                                                                <span class="simpleSelectBox">
                                                                                                    @Html.DropDownListFor(m => m.WorkFrontTemplateId, new SelectList((System.Collections.IEnumerable)ViewBag.WorkFrontTemplates, "ID", "Template_Name"), "Please Select", new { @class = "ddlStyle hide", @id = "WorkFrontTemplateId", require = "true" })
                                                                                                </span>
                    }
                    //End Brad Gray PL # 1374

                    //Start Komal Rawal  PL #2216
                    if (IsMarketo == true)
                    {
                        <label>Marketo Program Type <span class="required-asterisk">*</span></label>
                        <span class="simpleSelectBox">
                            @Html.DropDownListFor(m => m.programType, new SelectList(ViewBag.DDLProgramType, "Value", "Text"), "Please Select", new { @class = "ddlStyle", @id = "ddlprogramtype", require = "true" })
                        </span>
                    }

                    if (IsMarketo == true)
                    {
                        <label>Marketo Channel <span class="required-asterisk">*</span></label>
                        <span class="simpleSelectBox" id="Spanchannel">
                            @Html.DropDownListFor(m => m.Channel, new SelectList((System.Collections.IEnumerable)ViewBag.DDLChannel, "ChannelName", "ChannelName"), "Please Select", new { @class = "ddlStyle", @id = "ddlchannel", require = "true" })
                            <span style="display:none">
                                @Html.DropDownList("ParentChannel", new SelectList((System.Collections.IEnumerable)ViewBag.DDLChannel, "Parentprogramid", "ChannelName"), "Please Select", new { @class = "ddlStyle hide", @id = "getchannelparent" })
                            </span>
                        </span>
                    }


                }



            }
        </div>
        <!--End content-->

        <div class="content dark">
            <p>Add two or more projected or historical values for projection purposes.</p>

            <label id="projectStage">Projected [Stage]</label>
            @*//changes done by uday for #497*@
            <label></label>
            <span class="simpleSelectBox">
            </span>
            <label></label>
            <span class="simpleSelectBox">
            </span>
            @Html.TextBoxFor(model => model.ProjectedStageValue, new { require = "true", id = "hdnProjectedStageValue", @class = "priceValue", maxlength = @RevenuePlanner.Helpers.Common.maxLengthPriceValue })

            <label>Projected Cost</label>
            @Html.TextBoxFor(model => model.ProjectedRevenue, new { require = "true", id = "hdnProjectedRevenue", @class = "currency_dollar", maxlength = @RevenuePlanner.Helpers.Common.maxLengthDollar })

        </div>
        <!--end content dark-->
        <div class="wraper-btns cf">
            <div class="span6">

                <button id="CreateTactic" class="btn btn-blue text-shadow-blue source-sans-proregular" type="button">Save</button>

            </div>
            <div class="span6">
                <button class="close-form btn-link source-sans-proregular" type="button">Cancel</button>
            </div>
        </div>
    </div>
                }

 <div id="PackageListModal" class="form-inspect-share hide height-auto popup-block margin_top0" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div>
        <form>
            <label style="text-align: center; width: 100%;" class="resubmission_content">Changing the Asset Type to promotion will delete all the associated packages</label>
            <div style="color: white !important;margin:0 auto;" class="resubmission_list" id="BindpackageList">
                <ul ></ul>
            </div>
            <button class="form-inspect-share-button btn btn-large bottom-margin-popups" type="button" id="proceed-button-Package">Proceed</button>
            <button id="cancel-button-Package" class="btn-link Cancel-button-center-popups" style="margin-left: 10.5%" type="button">Cancel</button>
        </form>
    </div>
</div>



<script type="text/javascript">

    $(document).ready(function () {
        //Added By Komal Rawal for #2134 for channel and program type dropdown dependency
        var DeleteAllPackage = false;
        var LiCount = 0;
        var Parentprogramtype = [];
        var Valuesinlist = [];
        var ProgramTypeValue = "";
        var LiValue = "";
        var SelectedValue = "";
        $('#slidepanel-container').slimScroll({ scrollTo: '0px' });
        $('.currency_dollar').priceFormat({ prefix: '$', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });
        $('.priceValue').priceFormat({ prefix: '', centsSeparator: '', thousandsSeparator: ',', centsLimit: 0 });

        if ($("#StageId option:selected").text() != "Please Select") {
            $("#projectStage").html();
            $("#projectStage").html('Projected [' + $("#StageId option:selected").text() + ']');
        }
        else {
            $("#projectStage").html();
            $("#projectStage").html('Projected [Stage]');
        }


        $("#StageId").on('change', function (e) {
            var optionSelected = $("option:selected", this);
            var valueSelected = optionSelected.val();
            var textSelected = optionSelected.text();
            if (textSelected != "Please Select") {
                $("#projectStage").html();
                $("#projectStage").html('Projected [' + textSelected + ']');
            }
            else {
                $("#projectStage").html();
                $("#projectStage").html('Projected [Stage]');
            }
        });

        $("#deleteTactic").click(function () {
            var uId = $(window).attr('name');   // Added by Sohel Pathan on 19/06/2014 for PL ticket #536
            if (confirm('@Common.objCached.ConfirmationForDeleteTactic')) {
                var idTactic = $("#hdnTacticTypeId").val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Model/DeleteTactic")',
                    data: {
                        ID: idTactic
                        , UserId: uId    // Added by Sohel Pathan on 19/06/2014 for PL ticket #536
                    },
                    success: function (data) {
                        // Start - Added by Sohel Pathan on 19/06/2014 for PL ticket #536
                        if (data.returnURL != 'undefined' && data.returnURL == '#') {
                            window.location = '@Url.Content("~/Login/Index")';
                        }
                            // End - Added by Sohel Pathan on 19/06/2014 for PL ticket #536
                        else {
                            if (data.status == 'SUCCESS') {
                                $('.close-form', this.$panel).click();
                                window.location.reload(true);
                            }
                            if (data.status == 'ERROR') {
                                ShowError(data.Message);
                            }
                        }
                    }
                });
            }
            else {
                return false;
            }
        });
        if ($("#latestModelId").val() == $("#mode").val()) {
            $("#CreateTactic").show();
            MakeEditable();
        }
        else {
            $("#CreateTactic").hide();
            MakeViewOnly();//Bug 17:Should not be able to edit a published model
        }
        $("span.tool-tip").tooltip();

        $(".alert").find(".close").on("click", function (e) {
            e.stopPropagation();
            e.preventDefault();
            $(this).closest(".alert").slideUp(400);
        });

        $('.close-form', this.$panel).click(function (e) {
            $("#slidepanel").css("display", "none");
            $("#slidepanel-container").empty();
        });

        //Start Manoj Limbachiya PL # 486
        $("#frm_tactics #t_model_status").click(function () {
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Not Deployed to Model");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");

                /*changed for TFS bug #495 	Add/Edit Tactic under Model: Deploy to Integration is activated without Deploy to Model Activation by Maninder Singh Wadhva on 27 May 2014*/
                t_integration_status = $("#frm_tactics #t_integration_status");
                if (t_integration_status.hasClass("icon-check-blue")) {
                    t_integration_status.val("Not Deployed to Integration");
                    t_integration_status.addClass("icon-check-gray");
                    t_integration_status.removeClass("icon-check-blue");
                }
                //revert all the changes regarding 2115
                @*var isTrue = confirm(htmlDecode("@Common.objCached.TacticTypeMaybeUsed"));
                if (!isTrue) {
                    $(this).addClass('icon-check-blue');
                }*@
            }
            else {
                $(this).val("Deployed to Model");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
            }
        });

        //End Manoj Limbachiya PL # 486
        $("#frm_tactics #t_integration_status").click(function () {
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Not Deployed to Integration");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");
            }
            else if ($("#frm_tactics #t_model_status").hasClass("icon-check-gray")) {
                /*changed for TFS bug #495 	Add/Edit Tactic under Model: Deploy to Integration is activated without Deploy to Model Activation by Maninder Singh Wadhva on 27 May 2014*/
                alert('@Common.objCached.TacticMustDeployedToModel');
            }
            else {
                $(this).val("Deployed to Integration");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
            }
        });


        $('form').find('input[type=text], select, textarea').each(function () {
            $(this).change(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val() == '') {
                        $(this).addClass("error");
                    }
                    else {
                        $(this).removeClass("error");
                    }
                } /*changed for TFS bug 176 : Model Creation - Tactic Defaults should Allow values of zero changed by Nirav Shah on 7 feb 2014*/
                if ($(this).attr('id') == 'hdnProjectedInquiries') {
                    var tValue = ReplaceCC($("#hdnProjectedInquiries").val());
                    if (isNaN(tValue)) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                }
                //changes done by uday for PL #497
                if ($(this).attr('id') == 'hdnProjectedStageValue') {
                    var tValue = ReplaceCC($("#hdnProjectedStageValue").val());
                    if (isNaN(tValue)) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                }
                if ($(this).attr('id') == 'hdnProjectedRevenue') {
                    var tValue = ReplaceCC($("#hdnProjectedRevenue").val());
                    if (isNaN(tValue)) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                }
            });
        });
        $('form').find(".sbSelector").each(function () {
            $(this).next().find('li').click(function () {
                if ($(this).parent().parent().prev().attr('require') == 'true') {
                    if ($(this).parent().prev().text() == 'Please Select') {
                        $(this).parent().prev().addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).parent().prev().removeClass("error");
                    }
                }
            });
        });

        
        /*Modified by Mitesh Vaishnav on 05/06/2014 for remove two buttons of save tactics */
        $("#CreateTactic").click(function (event, DeleteAllPackage) {
            var iserror = false;
            var isCreated = '@ViewBag.IsCreated';
            $('form').find('input[type=text], select, textarea').each(function () {
                if ($(this).attr('require') == 'true') {
                    if ($(this).val() == '') {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
                /*changed for TFS bug 176 : Model Creation - Tactic Defaults should Allow values of zero changed by Nirav Shah on 7 feb 2014*/

                //changes done by uday for PL #497 changed projectedmlqs to projectedstagevalue
                if ($(this).attr('id') == 'hdnProjectedStageValue') {
                    var tValue = ReplaceCC($("#hdnProjectedStageValue").val());
                    if (isNaN(tValue)) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                }
                if ($(this).attr('id') == 'hdnProjectedRevenue') {
                    var tValue = ReplaceCC($("#hdnProjectedRevenue").val());
                    if (isNaN(tValue)) {
                        $(this).addClass("error");
                        iserror = true;
                    }
                }
            });

            //sbSelector
            $('form').find('.sbSelector').each(function () {
                if ($(this).parent().prev().attr('require') == 'true') {
                    if ($(this).text() == 'Please Select') {
                        $(this).addClass("error");
                        iserror = true;
                    }
                    else {
                        $(this).removeClass("error");
                    }
                }
            });

            /*changed for TFS bug #495 	Add/Edit Tactic under Model: Deploy to Integration is activated without Deploy to Model Activation by Maninder Singh Wadhva on 27 May 2014*/
            var isDeployedToIntegration = false;

            if ($("#t_integration_status").hasClass("icon-check-blue")) {
                isDeployedToIntegration = true;
            }

            var isDeployedToModel = false;

            if ($("#t_model_status").hasClass("icon-check-blue")) {
                isDeployedToModel = true;
            }

            if (iserror) {
                ShowError("@Common.objCached.ValidateForEmptyField");
                return false;
            }

            var Title = htmlEncode($("#Title").val());////Modified by Mitesh Vaishnav on 07/07/2014 for PL ticket #584
            var Description = htmlEncode($("#Description").val());////Modified by Mitesh Vaishnav on 07/07/2014 for PL ticket #584
            var StageId = $("#StageId").val();
            if (StageId == '' || StageId == 'Undefined') {
                StageId = 'null';
            }
            //Begin added Brad Gray 07/24/2015 PL # 1374
            var TemplateId = $("#WorkFrontTemplateId").val();
            if (TemplateId == '' || TemplateId == 'undefined') {
                TemplateId = 'null';
            }
            //End added Brad Gray 07/24/2015 PL # 1374
            //var Campainfoldervalue = "";
            //var ProgramType = "";
            //var Channel = "";

            var ProgramType = $('#ddlprogramtype').attr('value');
            var Channel = $('#ddlchannel').attr('value');

            var AssetType = $("#AssetType").val();


            /*changed for TFS bug 176 : Model Creation - Tactic Defaults should Allow values of zero changed by Nirav Shah on 7 feb 2014*/
            //changes done by uday for PL #497 changed projectedmlqs to projectedstagevalue
            var ProjectedStageValue = ReplaceCC($("#hdnProjectedStageValue").val());
            var ProjectedRevenue = ReplaceCC($("#hdnProjectedRevenue").val());
            var TacticTypeId = $("#hdnTacticTypeId").val();
            if (isCreated == 'True') {
                TacticTypeId = 0;
            }

            var clientId = $("#hdnClientId").val();
            var modelID = $("#hdnModelId").val();

            // Start - Added By Sohel Pathan on 16/06/2014 for PL ticket #528
            if ($('#hdnModelStatus').val().toLowerCase() == 'published' && $('#hdnStageId').val() != '') {
                if ($('#hdnStageId').val() != $('#StageId').val()) {
                    if (!confirm($('#hdnChangeTargetStageMsg').val().toString())) {
                        return false;
                        e.preventDefault();
                    }
                }
            }
            if (AssetType == '@Enums.AssetType.Promotion.ToString()' && DeleteAllPackage != true) {
                if ($('#BindpackageList').find('ul li').length != 0)
                {
                    $('#PackageListModal').modal('show');
                    $('.modal-backdrop').css('display', 'none');
                }
                else
                {
                    DeleteAllPackage = true;
                }
            
            }
            if ($('#hdnModelStatus').val().toLowerCase() == 'published' && '@ViewBag.IsCreated.ToString().ToLower()' == 'false' && AssetType == '@Enums.AssetType.Asset.ToString()' && '@Sessions.IsMediaCodePermission.ToString().ToLower()' == 'true') {
                var retValue = confirm('Media code associated to this tactic will be deleted. Do you wish to continue?');
                if (!retValue) {
                    return false;
                }
            }
            // End - Added By Sohel Pathan on 16/06/2014 for PL ticket #528
            if (AssetType == '@Enums.AssetType.Asset.ToString()' || DeleteAllPackage == true)
            {
            //Modified by Brad Gray on 07/24/2015 for PL#1373,1374 WorkFront template integration
            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Home/CheckUserId/")?UserId=' + $(window).attr('name'),
                success: function (data) {
                    if (data.returnURL == '#') {
                        $.ajax({
                            type: 'Post',
                            url: '@Url.Content("~/Model/SaveTactic/")',
                            data: 'Title=' + escape(Title) + '&Description=' + escape(Description) + '&StageId=' + StageId + '&ProjectedStageValue=' + ProjectedStageValue
                            + '&ProjectedRevenue=' + ProjectedRevenue + '&TacticTypeId=' + TacticTypeId
                           + '&modelID=' + modelID + '&isDeployedToIntegration=' + isDeployedToIntegration
                            + '&isDeployedToModel=' + isDeployedToModel + '&WorkFrontTemplate=' + TemplateId + '&ProgramType=' + ProgramType + '&Channel=' + Channel + '&AssetType=' + AssetType + '&DeleteAllPackage=' + DeleteAllPackage,
                            success: function (data) {

                                if (data.redirect) {

                                    $("#slidepanel").css("display", "none");
                                    $("#slidepanel-container").empty();
                                    var queryStringArr = [];
                                    queryStringArr.push(
                                        {
                                            key: 'id',
                                            Value: modelID
                                        });
                                    formSubmitEvent('@Url.Content("~/Model/Tactics")', queryStringArr);
                                    return;
                                }
                                if (data.errormsg) {
                                    ShowError(data.errormsg);
                                    return;
                                }

                            }
                        });
                    }
                    else {
                        window.location = data.returnURL;
                    }
                }
            });
            }

        });
        /*End: Modified by Mitesh Vaishnav on 05/06/2014 for remove two buttons of save tactics */

        function ShowError(value) {
            $("#validationMessage").css("display", "block");
            $("#validationMessage").removeClass("hide");
            $("#validationMessage").slideDown(400);
            $("#spanMessage").empty();
            $("#spanMessage").text(value);
        }

        //Added By Komal Rawal for #2216 for channel and program type dropdown dependency
        ProgramTypeValue = $('#ddlprogramtype').val();
        LiCount = 0;
        Parentprogramtype = [];
        Valuesinlist = [];
        $("#getchannelparent option[value = '" + ProgramTypeValue + "']").each(function () {

            Parentprogramtype.push($(this).text().toLowerCase());
        })
        $("#Spanchannel div ul li").each(function () {
            LiValue = $(this).find('a').text();
            if (LiValue != undefined && LiValue != 'undefined') {
                if (Parentprogramtype.indexOf(LiValue.toLowerCase()) >= 0 || LiValue == "Please Select") {
                    $(this).css('display', 'block');
                    if (LiValue != "Please Select") {
                        Valuesinlist.push(LiValue);
                        LiCount++;
                    }
                }
                else {
                    $(this).css('display', 'none');
                }
            }
        });


        SelectedValue = $('#ddlchannel').val();
        if (LiCount == 0 || Valuesinlist.indexOf(SelectedValue) < 0) {
            $('#Spanchannel div .sbSelector').text("Please Select");
            $("#ddlchannel").val("");
        }



    });



    $('#ddlprogramtype').on('change', function () {
        ProgramTypeValue = $(this).val();
        LiCount = 0;
        Parentprogramtype = [];
        Valuesinlist = [];
        $("#getchannelparent option[value = '" + ProgramTypeValue + "']").each(function () {

            Parentprogramtype.push($(this).text().toLowerCase());
        })
        $("#Spanchannel div ul li").each(function () {
            LiValue = $(this).find('a').text();
            if (LiValue != undefined && LiValue != 'undefined') {
                if (Parentprogramtype.indexOf(LiValue.toLowerCase()) >= 0 || LiValue == "Please Select") {
                    $(this).css('display', 'block');
                    if (LiValue != "Please Select") {
                        Valuesinlist.push(LiValue);
                        LiCount++;
                    }
                }
                else {
                    $(this).css('display', 'none');
                }
            }
        });

        SelectedValue = $('#ddlchannel').val();
        if (LiCount == 0 || Valuesinlist.indexOf(SelectedValue) < 0) {
            $('#Spanchannel div .sbSelector').text("Please Select");
            $("#ddlchannel").val("");
        }

    });
    //End
    var TacticTypeIdforpackage = $("#hdnTacticTypeId").val();
    var PreviousValue = $('#AssetType').val();
    $('#AssetType').on('change', function () {
        var NewValue = $(this).val();
        if (TacticTypeIdforpackage != 0)
        {
            if (PreviousValue != NewValue) {
                if (NewValue == '@Enums.AssetType.Promotion.ToString()') {
                    $.ajax({
                        beforeSend: function (x) {
                            myApp.hidePleaseWait();
                        },
                        type: 'Post',
                        url: '@Url.Content("~/Model/GetListofAssociatedPackage/")',
                        data: '&TacticTypeId=' + TacticTypeIdforpackage,
                        success: function (data) {
                            if (data.PackageList != null && data.PackageList != "") {
                                $('#BindpackageList').find('ul li').remove();
                                $.each(data.PackageList, function (i, Packageitem) {
                                    $('#BindpackageList').find('ul').append('<li  style="padding-left: 0">' + Packageitem + '</li>')
                                });
                            
                            }
                        }
                    });
                }
            }
        }


    });

    $("#cancel-button-Package").click(function () {
        $('#PackageListModal').css("display", "none");
        $('#PackageListModal').modal("hide");
    });

    $('#proceed-button-Package').on("click", function () {
        var Assetvalue = $('#AssetType').val();
     //   DeleteAllPackage = true;
        $('#CreateTactic').trigger('click',[true]);
        $('#PackageListModal').css("display", "none");
        $('#PackageListModal').modal("hide");
    });

</script>


