@model RevenuePlanner.Models.IntegrationModel
@using RevenuePlanner.Helpers

<div class="accordion-group">
    <div class="accordion-heading">
        <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapseGrp1">General Settings<span href="javascript:void(0)">- Collapse</span></a> @* Modified by Sohel Pathan on 08/08/2014 for Internal Review Point *@
    </div>
    <div class="accordion-body collapse in" id="collapseGrp1">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "integrationForm", style = "margin-bottom:5px !important;" }))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => Model.IntegrationType.Code);
            @Html.HiddenFor(model => Model.IntegrationTypeId);
            @Html.HiddenFor(model => Model.IntegrationInstanceId);
            @Html.HiddenFor(model => Model.IsActiveStatuChanged);
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.IntegrationType.Title)

                @Html.TextBoxFor(model => model.IntegrationType.Title, new { style = "background:#F2F2F2;", @readonly = "true" })
                <p style="margin-top: -10px;"><span class="font-black">Add Provider credentials to customize your integration.</span></p>
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Instance)

                @Html.TextBoxFor(model => model.Instance, new { maxlength = "255", tabindex = "1" })
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Username)

                @Html.TextBoxFor(model => model.Username, new { maxlength = "255", tabindex = "2" })
                <span class="field-validation-error" id="isUsernameExist"></span>
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Password)

                @Html.TextBoxFor(model => model.Password, new { type = "password", maxlength = "255", tabindex = "3" })
            </div>
            
            
                                                                for (int i = 0; i < Model.IntegrationTypeAttributes.Count; i++)
                                                                {
            <div class="cf inputs-aligned-horizontal">
                @Html.Label(Model.IntegrationTypeAttributes[i].Attribute)
                @Html.HiddenFor(model => model.IntegrationTypeAttributes[i].IntegrationTypeAttributeId)
                @if (Model.IntegrationTypeAttributes[i].AttributeType == "textbox")
                { 
                    @Html.TextBoxFor(model => model.IntegrationTypeAttributes[i].Value, new { maxlength = "255", tabindex = "4" })
                }
                else if (Model.IntegrationTypeAttributes[i].AttributeType == "dropdown")
                {
                    @Html.DropDownListFor(model => model.IntegrationTypeAttributes[i].Value, new SelectList((System.Collections.IEnumerable)Model.IntegrationTypeAttributes[i].Value, "Value", "Text"), new { tabindex = "4", @class="hide" })
                }
            </div>
                                                                }
            
            <div class="cf inputs-aligned-horizontal content dark inline-ellipsis">
                @Html.Label("Integration Status")
                @if (Model.IsActive == true)
                { 
                    <input type="text" readonly="" maxlength="18" placeholder="Active" class="icon-check-blue" value="Active" name="t_status" id="integrationStatus" tabindex="5">  // Modified by Sohel Pathan on 22/08/2014 for PL ticket #716.
                }
                else
                { 
                    <input type="text" readonly="" maxlength="18" placeholder="Inactive" class="icon-check-gray" value="Inactive" name="t_status" id="integrationStatus" tabindex="5">  // Modified by Sohel Pathan on 22/08/2014 for PL ticket #716.
                }
                @Html.HiddenFor(model => model.IsActive)
                @Html.HiddenFor(model => model.IsActive, new { id = "hdnIsActiveIntact" })
            </div>
            
            <div class="cf inputs-aligned-horizontal">
                <p><a id="aTestIntegration" href="#" onclick="return testIntegration();" tabindex="-1">Click</a> to test integration credentials.</p>
            </div>
            
            
            <div class="cf inputs-aligned-horizontal">
                @Html.Label("Sync Preference", new { style = "padding-top: 9px;" })

                <div class="selectBox shortSelectBox" id="divSyncFrequency">
                    @Html.DropDownListFor(model => model.SyncFrequency.Frequency, new SelectList((System.Collections.IEnumerable)TempData["lstSyncFreq"], "Value", "Text"), new { require = "true", Id = "ddlSyncFrequency", tabindex = "6" })
                </div>
                <div class="selectBox shortSelectBox" id="divTimeOptions">
                    @Html.DropDownListFor(model => model.SyncFrequency.Time, new SelectList((System.Collections.IEnumerable)TempData["lst24Hours"], "Value", "Text"), new { require = "true", Id = "timeOptions", tabindex = "7" })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal">
                <label></label>
                <div class="selectBox" id="divDayOptions">
                    @Html.DropDownListFor(model => model.SyncFrequency.DayofWeek, new SelectList((System.Collections.IEnumerable)TempData["lstWeekdays"], "Value", "Text"), new { Id = "dayOptions", tabindex = "8" })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal">
                <label></label>
                <div id="divDateOptions" style="margin-left: 20px; display: inline-block;">
                    @Html.TextBoxFor(model => model.SyncFrequency.Day, new { style = "width:130px !important", maxlength = "255", tabindex = "9", placeholder = "Enter date of month" })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal content">
                @Html.LabelFor(model => model.IsImportActuals, new { id = "lblImportActuals" })
                @if (Model.IsImportActuals == true)
                {
                    <input id="importActuals" class="icon-check-blue" type="text" readonly="" maxlength="18" placeholder="Active" value="Active" name="importActuals" tabindex="10">    // Modified by Sohel Pathan on 22/08/2014 for PL ticket #716.
                }
                else
                {
                    <input id="importActuals" class="icon-check-gray" type="text" readonly="" maxlength="18" placeholder="Inactive" value="Inactive" name="importActuals" tabindex="10">    // Modified by Sohel Pathan on 22/08/2014 for PL ticket #716.
                }
                @Html.HiddenFor(model => model.IsImportActuals)
            </div>
            
            <div class="cf inputs-aligned-horizontal">
                <p>Note that imported values override user-generated values.</p>
            </div>
            		
            if (Model.IntegrationInstanceId > 0)
            {
                 <div class="cf inputs-aligned-horizontal">
                <div class="delete-container">
                    <div class="btn-group">
                        <div class="selectBox" id="ddlIsDeletedSelectBox">
                            @Html.DropDownListFor(model => model.IsDeleted, new SelectList((System.Collections.IEnumerable)TempData["lstDelete"], "Value", "Text"), new { Id = "IsDeleted", style = "width:54px; height:23px;float:right;margin-top:10px;margin-right:12px;", tabindex = "11" })
                        </div>
                    </div>
                    @Html.LabelFor(model => model.IsDeleted, new { style = "float:left;padding-left:20px;padding-top:2px;" })
                </div>
            </div>	    
            }								
           	
            <!--success message-->
            <div id="successMessageGeneralSettings" class="alert hide alert-success messages">
                <a class="close">×</a>
                <div id="cSuccessGeneralSettings"><strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessageGeneralSetting"]))</div>
            </div>
            <div id="errorMessageGeneralSettings" class="alert alert-error hide messages">
                <a class="close">×</a>
                <div id="cErrorGeneralSettings"><strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessageGeneralSetting"]))</div>
            </div>
            <!--success message-->
            
            <div class="cf inputs-aligned-horizontal" style="margin-top: 10px;">
                <div class="container-button">
                    <span class="span5">
                        <input id="btnSave" type="button" value="Save" title="Save" class="btn btn-blue btn-save text-shadow-blue source-sans-proregular" style="margin-left: 0px;" tabindex="12" />
                    </span>
                    <span class="span5">
                        <button id="btnCancel" class="close-form btn-link source-sans-proregular" type="button" tabindex="13">Cancel</button>
                    </span>
                </div>
            </div>            
        }
    </div>
</div>

<script type="text/javascript">

    function testIntegration() {
        var testIntegrationValidation = true;
        $('#content #integrationForm :input').each(function () {
            if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                if (this.id != 'importActuals' && this.id != 'integrationStatus' && this.id != 'SyncFrequency_Day') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                        testIntegrationValidation = false;
                    } else {
                        $(this).removeClass("error");
                    }
                }
            }
        });

        if (testIntegrationValidation == false) {
            $('#cErrorGeneralSettings').html('<strong>Error! </strong> ' + '@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField');
              $("#cSuccessGeneralSettings").html('');
              $("#successMessageGeneralSettings").slideUp(1);
              $("#errorMessageGeneralSettings").slideDown(400);
              return false;
          }

        if ($('#integrationForm #Instance').val().trim() != "" && $('#integrationForm #Username').val().trim() != "" && $('#integrationForm #Password').val().trim() != "") {
            $.ajax({
                cache: false,
                cache: false,
                type: 'POST',
                url: '@Url.Content("~/ExternalService/TestIntegration")',
                    data: $("form").serialize(),
                    success: function (data) {
                        if (data != null) {
                            if (data.status == 1) {
                                $("#cSuccessGeneralSettings").html('');
                                $('#cSuccessGeneralSettings').append("<strong>Success. </strong>" + data.SuccessMessage.toString());
                                $("#successMessageGeneralSettings").slideDown(1200);
                                $("#errorMessageGeneralSettings").slideUp(1);

                                $('#integrationStatus').val("Active");
                                $('#IsActive').val(true);
                                $('#integrationStatus').addClass("icon-check-blue");
                                $('#integrationStatus').removeClass("icon-check-gray");

                                return true;
                            }
                            else {
                                $('#cErrorGeneralSettings').html('');
                                $('#cErrorGeneralSettings').append("<strong>Error! </strong>" + data.ErrorMessage.toString());
                                $("#errorMessageGeneralSettings").slideDown(400);
                                $("#successMessageGeneralSettings").slideUp(1);
                                return true;
                            }
                        }
                    }
                });

                return false;
            }
        }

    $(document).ready(function () {

        $("#SyncFrequency_Day").keydown(function (e) {
            var count = $(this).val();

            // Allow: backspace, delete, tab, escape, enter and .
            if (($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) ||
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39))) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) || count.length >= 2) {
                e.preventDefault();
            }
        });

        $("#SyncFrequency_Day").blur(function (e) {
            var count = $(this).val();
            if (parseInt(count) > 31 || count.length > 2) {
                //$(this).val('');
                $('#SyncFrequency_Day').addClass("error");
                var ErrMsg = 'Please enter valid Sync Frequency day.';
                $('#cErrorGeneralSettings').html('<strong>Error! </strong> ' + ErrMsg)
                $("#cSuccessGeneralSettings").html('');
                $("#successMessageGeneralSettings").slideUp(1);
                $("#errorMessageGeneralSettings").slideDown(400);
                e.preventDefault();
            }
            else {
                $('#SyncFrequency_Day').removeClass("error");
                $("#cErrorGeneralSettings").html('');
                $("#errorMessageGeneralSettings").slideUp(1);
                e.preventDefault();
            }
        });

        if (localStorage.Message != undefined) {
            $("#cSuccessGeneralSettings").html('');
            $('#cSuccessGeneralSettings').append("<strong>Success. </strong>" + localStorage.Message);
            $("#successMessageGeneralSettings").slideDown(1200);
            localStorage.removeItem('Message');
        }

        $("#integrationForm #t_status").click(function () {
            /*change status checkmark according to JSON data*/
            if ($(this).hasClass("icon-check-blue")) {
                $(this).val("Inactive");
                $(this).addClass("icon-check-gray");
                $(this).removeClass("icon-check-blue");
            }
            else {
                $(this).val("Active");
                $(this).addClass("icon-check-blue");
                $(this).removeClass("icon-check-gray");
            }
        });


        $('#btnSave').click(function (e) {

            var isValidate = true;


            if ('@Model.IntegrationInstanceId' > 0) {
                if ($('#IsDeleted').val().toLowerCase() == 'true') {
                    CheckActiveStatus();
                    SaveGeneralSetting();
                    return true;
                }
            }

            $('#content #integrationForm :input').each(function () {
                if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                    if (this.id != 'importActuals' && this.id != 'integrationStatus' && this.id != 'SyncFrequency_Day') {
                        var input = $(this).val();
                        if (input == '') {
                            $(this).addClass("error");
                            isValidate = false;
                        } else {
                            $(this).removeClass("error");
                        }
                    }
                }
            });

            //function to add or remove class ERROR when inputs text are empty.
            $('#integrationForm input').blur(function () {
                if ($(this).attr('type') == 'text' || $(this).attr('type') == 'password') {
                    if (this.id != 'importActuals' && this.id != 'integrationStatus') {
                        if ($(this).val() == '') {
                            $(this).addClass("error");
                        } else {
                            $(this).removeClass("error");
                        }
                    }
                }
            });

            if ($("#ddlSyncFrequency").val() == "Monthly") {
                if ($("#SyncFrequency_Day").val() == "") {
                    $('#SyncFrequency_Day').addClass("error");
                    $('#cErrorGeneralSettings').html('<strong>Error! </strong> ' + '@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField');
                    $("#cSuccessGeneralSettings").html('');
                    $("#successMessageGeneralSettings").slideUp(1);
                    $("#errorMessageGeneralSettings").slideDown(400);
                    return false;
                }
                else if ($("#SyncFrequency_Day").val() > 31) {
                    $('#SyncFrequency_Day').addClass("error");
                    var ErrMsg = 'Please enter valid Sync Frequency day.';
                    $('#cErrorGeneralSettings').html('<strong>Error! </strong> ' + ErrMsg)
                    $("#cSuccessGeneralSettings").html('');
                    $("#successMessageGeneralSettings").slideUp(1);
                    $("#errorMessageGeneralSettings").slideDown(400);
                    return false;
                }
                else {
                    $('#SyncFrequency_Day').removeClass("error");
                    $("#cErrorGeneralSettings").html('');
                    $("#errorMessageGeneralSettings").slideUp(1);
                }
            }

            if (isValidate == false) {
                $('#cErrorGeneralSettings').html('<strong>Error! </strong> ' + '@RevenuePlanner.Helpers.Common.objCached.ValidateForEmptyField');
                $("#cSuccessGeneralSettings").html('');
                $("#successMessageGeneralSettings").slideUp(1);
                $("#errorMessageGeneralSettings").slideDown(400);
                return false;
            }

            if (($('#hdnIsActiveIntact').val().toLowerCase().toString() == $('#IsActive').val().toLowerCase().toString()) &&
                ($('#IsActive').val().toLowerCase().toString()) == "false") {

                $("#cErrorGeneralSettings").html('');
                $('#cErrorGeneralSettings').append("<strong>Error! </strong>" + '@Common.objCached.ValidateIntegretionCredential');
                $("#errorMessageGeneralSettings").slideDown(1200);
                $("#successMessageGeneralSettings").slideUp(1);
            return false;
        }
            CheckActiveStatus();
            SaveGeneralSetting();
        });

        /// Added By : Kalpesh Sharma Save the value of General Settings in Integration #682
        function SaveGeneralSetting()
        {
            $.ajax({
                cache: false,
                cache: false,
                type: 'POST',
                url: '@Url.Content("~/ExternalService/SaveGeneralSetting")',
                data: $("form").serialize(),
                success: function (data) {
                    if (data != null) {
                        if (data.status > 0 ) {
                            if (data.status == 1) {
                                localStorage.Message = data.SuccessMessage.toString();
                                var URL = "@Url.Content("~/ExternalService/edit/")";
                                URL = URL + "?id=" + data.Id + "&TypeId=" + '@Model.IntegrationTypeId';
                                window.location.href = URL;
                                AssignDefaultValueIntegrationForm();   // Added by Sohel Pathan on 22/08/2014 for PL ticket #716.
                            }
                            else if (data.status == 3) {
                                var URL = "@Url.Content("~/ExternalService/Index/")";
                                window.location.href = URL;
                            }
                            else {
                                $("#cSuccessGeneralSettings").html('');
                                $('#cSuccessGeneralSettings').append("<strong>Success. </strong>" + data.SuccessMessage.toString());
                                $("#successMessageGeneralSettings").slideDown(1200);
                                $("#errorMessageGeneralSettings").slideUp(1);
                                $('#IntegrationInstanceId').val(data.Id);
                                AssignDefaultValueIntegrationForm();   // Added by Sohel Pathan on 22/08/2014 for PL ticket #716.
                            }
                            return true;
                        }
                        else {
                            $('#cErrorGeneralSettings').html('');
                            $('#cErrorGeneralSettings').append("<strong>Error! </strong>" + data.ErrorMessage.toString());
                            $("#errorMessageGeneralSettings").slideDown(400);
                            $("#successMessageGeneralSettings").slideUp(1);
                            return true;
                        }
                    }
                }
             });
        }

        function CheckActiveStatus() {
            if (($('#hdnIsActiveIntact').val().toLowerCase().toString() != $('#IsActive').val().toLowerCase().toString()) &&
                ($('#IsActive').val().toLowerCase().toString()) == "false" && ($('#hdnIsActiveIntact').val().toLowerCase().toString() == "true")) {
                if (confirm($("#InActiveConfirmationMsg").val())) {
                    $('#IsActiveStatuChanged').val(true);
                    return true;
                }
                else {
                    $('#IsActiveStatuChanged').val(false);
                    e.preventDefault();
                    return false;
                }
            }

            if ('@Model.IntegrationInstanceId' > 0 ) {
                if ($('#IsDeleted').val().toLowerCase() == 'true') {
                if (confirm($("#DeleteConfirmationMsg").val())) {
                    return true;
                }
                else {
                    e.preventDefault();
                    return false;
                }
            }
         }
        }

        AssignDefaultValueIntegrationForm();   // Added by Sohel Pathan on 22/08/2014 for PL ticket #716.
    });

    // Start - Added by Sohel Pathan on 22/08/2014 for PL ticket #716.
    function AssignDefaultValueIntegrationForm() {
        $('#integrationForm').find("input[type=text],textarea,select,input[type=password]").each(function () {
            $(this).attr("myValue", $(this).val());
        });
    }
    // End - Added by Sohel Pathan on 22/08/2014 for PL ticket #716.

</script>
