@model RevenuePlanner.Models.IntegrationModel
@using RevenuePlanner.Helpers

<script src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

@Html.Hidden("SuccMsg", TempData["SuccessMessage"])
@Html.Hidden("ErrMsg", TempData["ErrorMessage"])
@Html.Hidden("DeleteConfirmationMsg", TempData["DeleteConfirmationMsg"])
@Html.Hidden("InActiveConfirmationMsg", TempData["InActiveConfirmationMsg"])

@{
    ViewBag.Title = "Edit External Service Integrations";
    ViewBag.ActiveMenu = RevenuePlanner.Helpers.Enums.ActiveMenu.Pref;
    Layout = "~/Views/Shared/_Layout.cshtml";
    
}

@section Sidebar {
    <div class="padding-content">
        <h4 class="text-shadow-black source-sans-prolight">Preferences</h4>
    </div>
    <ul class="nav nav-list nav-gray">
        <li class="item">
            <a class="source-sans-probold inputs" href="#" id="aMyProfile"><span></span>MY PROFILE</a>
        </li>
           <li class="item">@*uday for new screen*@
            <a class="source-sans-probold organization" href="#" id="aOrganization"><span></span>ORGANIZATION</a>
        </li>
        <li class="item active">
            <a class="source-sans-probold integrations" href="#" id="aIntegrations"><span></span>INTEGRATIONS</a>
        </li>
      
    </ul>
}

<!--success message-->
<div id="successMessage" class="alert hide alert-success message-position">
    <a class="close">×</a>
    <div id="cSuccess"><strong>Success.</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["SuccessMessage"]))</div>
</div>
<div id="errorMessage" class="alert alert-error hide message-position">
    <a class="close">×</a>
    <div id="cError"><strong>Error!</strong> @Html.Raw(HttpUtility.HtmlDecode((string)TempData["ErrorMessage"]))</div>
</div>
<!--success message-->

<ul class="nav nav-tabs margin-bottom0">
    <li class="source-sans-proregular">
        <h2 class="title-header">Edit External Service Integrations</h2>
    </li>
</ul>

<a class="link-gray" href="@Url.Action("Index", "ExternalService")">« BACK TO LIST</a>

<div class="padding-content cf source-sans-proregular" id="content" style="padding-bottom:0px !important">
    <div class="row">
        <div class="span2 myaccount-colum">
            <div class="width216">
                <ul class="nav nav-pills nav-stacked width216">
                    <li class="active">
                        <a href="#">Integration Credentials</a>
                    </li>
                    <li>
                        <a href="@Url.Content("~/ExternalService/MapDataTypes/")@Model.IntegrationInstanceId.ToString()">Map Data Types</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="span10 content-colum-info-user">
        @using (Html.BeginForm("Edit", "ExternalService", FormMethod.Post, new { id = "integrationForm", style="margin-bottom:5px !important;" } ))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.IntegrationTypeId);
            @Html.HiddenFor(model => model.IntegrationInstanceId);
            @Html.HiddenFor(model => model.IsActiveStatuChanged);
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.IntegrationType.Title)

                @Html.TextBoxFor(model => model.IntegrationType.Title, new { style = "background:#F2F2F2;", @readonly = "true" })
                @Html.ValidationMessageFor(model => model.IntegrationType.Title)
            </div>
            <div class="cf inputs-aligned-horizontal">
                <div class="Add-Integration">
                    <span>Add Provider credentials to customize your integration.</span>
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Instance)

                @Html.TextBoxFor(model => model.Instance, new { maxlength= "255", tabindex = "1" })
                @Html.ValidationMessageFor(model => model.Instance, "" ,new { style="padding-top: 6px; position: absolute;" })
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Username)

                @Html.TextBoxFor(model => model.Username, new { maxlength= "255", tabindex = "2" })
                <span class="field-validation-error" id="isUsernameExist"></span>
                @Html.ValidationMessageFor(model => model.Username, "" ,new { style="padding-top: 6px; position: absolute;" })
            </div>
            <div class="cf inputs-aligned-horizontal">
                @Html.LabelFor(model => model.Password)

                @Html.TextBoxFor(model => model.Password , new { type = "password", maxlength= "255", tabindex = "3" })
                @Html.ValidationMessageFor(model => model.Password, "" ,new { style="padding-top: 6px; position: absolute;" })
            </div>
            
            
            for (int i = 0; i < Model.IntegrationTypeAttributes.Count; i++)
            {
                <div class="cf inputs-aligned-horizontal">
                    @Html.Label(Model.IntegrationTypeAttributes[i].Attribute)
                    @Html.HiddenFor(model => model.IntegrationTypeAttributes[i].IntegrationTypeAttributeId)
                    @if (Model.IntegrationTypeAttributes[i].AttributeType == "textbox")
                    { 
                        @Html.TextBoxFor(model => model.IntegrationTypeAttributes[i].Value, new { maxlength= "255", tabindex = "4"  })
                        @Html.ValidationMessageFor(model => model.IntegrationTypeAttributes[i].Value, "" ,new { style="padding-top: 6px; position: absolute;" })
                    }
                    else if (Model.IntegrationTypeAttributes[i].AttributeType == "dropdown")
                    {
                        @Html.DropDownListFor(model => model.IntegrationTypeAttributes[i].Value, new SelectList((System.Collections.IEnumerable)Model.IntegrationTypeAttributes[i].Value, "Value", "Text"), new { tabindex = "4" })
                        @Html.ValidationMessageFor(model => model.IntegrationTypeAttributes[i].Value, "" ,new { style="padding-top: 6px; position: absolute;" })
                    }
                </div>
            }
            
            <div class="cf inputs-aligned-horizontal content dark inline-ellipsis">
                @Html.Label("Integration Status")
                @if (Model.IsActive == true) { 
                    <input type="text" readonly="" maxlength="18" placeholder="Active" class="icon-check-blue" name="t_status" id="integrationStatus" tabindex="5">
                }
                else
                { 
                    <input type="text" readonly="" maxlength="18" placeholder="Inactive" class="icon-check-gray" name="t_status" id="integrationStatus" tabindex="5">
                }
                @Html.HiddenFor(model => model.IsActive)
                @Html.HiddenFor(model => model.IsActive, new { id = "hdnIsActiveIntact" })
            </div>
            
            <div class="cf inputs-aligned-horizontal">
                <div class="Add-Integration">
                    <span><a id="aTestIntegration" href="#" onclick="return testIntegration();" tabindex="-1">Click</a> to test integration credentials.</span>
                </div>
            </div>
            
            
            <div class="cf inputs-aligned-horizontal">
                @Html.Label("Sync Preference", new { style = "padding-top: 9px;" })

                <div class="selectBox shortSelectBox" id="divSyncFrequency">
                    @Html.DropDownListFor(model => model.SyncFrequency.Frequency, new SelectList((System.Collections.IEnumerable)TempData["lstSyncFreq"], "Value", "Text"), new { require = "true", Id = "ddlSyncFrequency", tabindex = "6"  })
                </div>
                <div class="selectBox shortSelectBox" id="divTimeOptions">
                    @Html.DropDownListFor(model => model.SyncFrequency.Time, new SelectList((System.Collections.IEnumerable)TempData["lst24Hours"], "Value", "Text"), new { require = "true", Id = "timeOptions", tabindex = "7"  })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal">
                <label></label>
                <div class="selectBox" id="divDayOptions">
                    @Html.DropDownListFor(model => model.SyncFrequency.DayofWeek, new SelectList((System.Collections.IEnumerable)TempData["lstWeekdays"], "Value", "Text"), new { Id = "dayOptions", tabindex = "8"  })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal">
                <label></label>
                <div id="divDateOptions" style="margin-left:20px; display:inline-block;">
                    @Html.TextBoxFor(model => model.SyncFrequency.Day, new { style = "width:130px !important", maxlength= "255", tabindex = "9", placeholder="Enter date of month" })
                </div>
            </div>
            <div class="cf inputs-aligned-horizontal content">
                @Html.LabelFor(model => model.IsImportActuals, new  { id="lblImportActuals"})
                @if (Model.IsImportActuals == true)
                {
                    <input id="importActuals" class="icon-check-blue" type="text" readonly="" maxlength="18" placeholder="Active" name="importActuals" tabindex="10"> 
                }
                else
                {
                    <input id="importActuals" class="icon-check-gray" type="text" readonly="" maxlength="18" placeholder="Inactive" name="importActuals" tabindex="10">
                }
                @Html.HiddenFor(model => model.IsImportActuals)
            </div>
            
            <div class="cf inputs-aligned-horizontal">
                <div class="Add-Integration">
                    <span>Note that imported values override user-generated values.</span>
                </div>
            </div>
            										
            <div class="cf inputs-aligned-horizontal" style="margin-left: 179px;">
			    <div class="delete-container">
                    @Html.LabelFor(model => model.IsDeleted, new { style = "float:left;padding-left:20px;padding-top:2px;" })
                    <div class="selectBox" id="ddlIsDeletedSelectBox">
                        @Html.DropDownListFor(model => model.IsDeleted, new SelectList((System.Collections.IEnumerable)TempData["lstDelete"], "Value", "Text"), new { Id = "IsDeleted", style = "width:54px; height:23px;float:right;margin-top:10px;margin-right:12px;", tabindex = "11"  })
                    </div>
                </div>
			</div>		
            
            <div class="cf inputs-aligned-horizontal" style="margin-top:10px;">
                <div class="Add-Integration">
                    <span class="span5">
                        <input id="btnSave" type="submit" value="Save" title="Save" class="btn btn-blue btn-large text-shadow-blue source-sans-proregular" style="margin-left: 0px;" tabindex="12" />
                    </span>
                </div>
                <div class="container-button">
                    <span class="span5">
                        <button id="btnCancel" class="close-form btn-link source-sans-proregular" type="button" tabindex="13">Cancel</button>
                    </span>
                </div>
            </div>
            
        }
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#Instance").focus();
        $(".selectBox select").selectbox();

        if ($('#SuccMsg').val() == null || $('#SuccMsg').val() == '') {
            $("#successMessage").slideUp(400);
        }
        else {
            $("#successMessage").slideDown(1200);
            $("#successMessage").slideUp(3000);
        }
        if ($('#ErrMsg').val() == null || $('#ErrMsg').val() == '') {
            $("#errorMessage").slideUp(400);
        }
        else {
            $("#errorMessage").slideDown(400);
            $("html, body").animate({ scrollTop: 0 }, 1000);
        }

        $('#hdnIsActiveIntact').val($('#IsActive').val());

        $('#content :input').each(function () {
            if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                if (this.id != 'importActuals' && this.id != 'integrationStatus') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                }
            }
        });

        var selectedSpan = $('#ddlSyncFrequency').val();
        if (selectedSpan != "") {
            if (selectedSpan == "Hourly") {
                $("#divTimeOptions").hide();
                $("#divDayOptions").hide();
                $("#divDateOptions").hide();
            }
            else if (selectedSpan == "Daily") {
                $("#divTimeOptions").show();
                $("#divDayOptions").hide();
                $("#divDateOptions").hide();
            }
            else if (selectedSpan == "Weekly") {
                $("#divTimeOptions").show();
                $("#divDayOptions").show();
                $("#divDateOptions").hide();
            }
            else if (selectedSpan == "Monthly") {
                $("#divTimeOptions").show();
                $("#divDayOptions").hide();
                $("#divDateOptions").show();
            }
        }

        $("#SyncFrequency_Day").keydown(function (e) {
            var count = $(this).val();

            // Allow: backspace, delete, tab, escape, enter and .
            if (($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) ||
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39))) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) || count.length >= 2) {
                e.preventDefault();
            }
        });

        $("#SyncFrequency_Day").blur(function (e) {
            var count = $(this).val();
            if (parseInt(count) > 31 || count.length > 2) {
                $(this).val('');
                e.preventDefault();
            }
        });
           
        if ($('#IsActive').val().toString().toLowerCase() == "false") {
            $(this).val("Inactive");
            $('#IsActive').val(false);
            $(this).addClass("icon-check-gray");
            $(this).removeClass("icon-check-blue");
        } else {
            $(this).val("Active");
            $('#IsActive').val(true);
            $(this).addClass("icon-check-blue");
            $(this).removeClass("icon-check-gray");
        }
        
        if ($('#IsImportActuals').val().toString().toLowerCase() == "false") {
            $(this).val("Inactive");
            $('#IsImportActuals').val(false);
            $(this).addClass("icon-check-gray");
            $(this).removeClass("icon-check-blue");
        } else {
            $(this).val("Active");
            $('#IsImportActuals').val(true);
            $(this).addClass("icon-check-blue");
            $(this).removeClass("icon-check-gray");
        }
        
        $("#content_wraper").removeClass("span10 all-height").addClass("span10 padding-top40");
    });

    $('#aMyProfile').click(function () {
        var url = '';
        url = '@Url.Action("Edit", "User", new { usrid = Sessions.User.UserId, src = "myaccount" })';
        window.location.href = url;
    });

    $('#btnCancel').click(function () {
        var url = '';
        url = '@Url.Action("Index", "ExternalService")';
        window.location.href = url;
    });

    $("#ddlSyncFrequency").change(function () {
        var selectedSpan = $(this).val();
        if (selectedSpan != "") {
            if (selectedSpan == "Hourly") {
                $("#divTimeOptions").hide();
                $("#divDayOptions").hide();
                $("#divDateOptions").hide();
            }
            else if (selectedSpan == "Daily") {
                $("#divTimeOptions").show();
                $("#divDayOptions").hide();
                $("#divDateOptions").hide();
                populateTimeOptions();
                $("#divTimeOptions").focus();
            }
            else if (selectedSpan == "Weekly") {
                $("#divTimeOptions").show();
                $("#divDayOptions").show();
                $("#divDateOptions").hide();
                populateTimeOptions();
                populateWeekDayOptions();
                $("#divTimeOptions").focus();
            }
            else if (selectedSpan == "Monthly") {
                $("#divTimeOptions").show();
                $("#divDayOptions").hide();
                $("#divDateOptions").show();
                populateTimeOptions();
                $("#divTimeOptions").focus();
                $("#SyncFrequency_Day").val('');
            }
        }
    });

    function testIntegration() {
        //alert("Test integration");
        $('#content :input').each(function () {
            if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                if (this.id == 'Instance' || this.id == 'Username' || this.id == 'Password') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                    } else {
                        $(this).removeClass("error");
                    }
                }
            }
        });

        if ($('#Instance').val().trim() != "" && $('#Username').val().trim() != "" && $('#Password').val().trim() != "") {
            $.ajax({
                cache: false,
                cache: false,
                type: 'POST',
                url: '@Url.Content("~/ExternalService/TestIntegration")',
                data: $("form").serialize(),
                success: function (data) {
                    if (data != null) {
                        if (data.status == 1) {
                            $("#cSuccess").html('');
                            $('#cSuccess').append("<strong>Success. </strong>" + data.SuccessMessage.toString());
                            $("#successMessage").slideDown(1200);
                            $("#successMessage").slideUp(3000);
                            $("#errorMessage").slideUp(1);

                            $('#integrationStatus').val("Active");
                            $('#IsActive').val(true);
                            $('#integrationStatus').addClass("icon-check-blue");
                            $('#integrationStatus').removeClass("icon-check-gray");

                            return true;
                        }
                        else {
                            $('#cError').html('');
                            $('#cError').append("<strong>Error! </strong>" + data.ErrorMessage.toString());
                            $("#errorMessage").slideDown(400);
                            $("html, body").animate({ scrollTop: 0 }, 1000);
                            return true;
                        }
                    }
                }
            });
            
            return false;
        }
    }

    $('#btnSave').click(function (e) {
        var isValidate = true;
        $('#content :input').each(function () {
            if ($(this).attr('type') == 'text' || $(this).attr('type') == 'select' || $(this).attr('type') == 'password') {
                if (this.id != 'importActuals' && this.id != 'integrationStatus' && this.id != 'SyncFrequency_Day') {
                    var input = $(this).val();
                    if (input == '') {
                        $(this).addClass("error");
                        isValidate = false;
                    } else {
                        $(this).removeClass("error");
                    }
                }
            }
        });

        if ($("#ddlSyncFrequency").val() == "Monthly" && $("#SyncFrequency_Day").val() == "") {
            $('#SyncFrequency_Day').addClass("error");
            isValidate = false;
        }
        else {
            $('#SyncFrequency_Day').removeClass("error");
        }

        if (isValidate == false)
            return false;

        if (($('#hdnIsActiveIntact').val().toLowerCase().toString() == $('#IsActive').val().toLowerCase().toString()) &&
            ($('#IsActive').val().toLowerCase().toString()) == "false") {
                alert("Please test integration credentials");
                return false;
        }
        CheckUserSession("#btnSave", true);
        if (reason == 'user') {
            return false;
        }
    });

    $('#integrationForm').submit(function (e) {
        if (($('#hdnIsActiveIntact').val().toLowerCase().toString() != $('#IsActive').val().toLowerCase().toString()) &&
            ($('#IsActive').val().toLowerCase().toString()) == "false" && ($('#hdnIsActiveIntact').val().toLowerCase().toString() == "true"))
        {
            if (confirm($("#InActiveConfirmationMsg").val())) {
                $('#IsActiveStatuChanged').val(true);
                return true;
            }
            else {
                $('#IsActiveStatuChanged').val(false);
                e.preventDefault();
                return false;
            }
        }
        if ($('#IsDeleted').val().toLowerCase() == 'true'){
            if (confirm($("#DeleteConfirmationMsg").val())) {
                return true;
            }
            else {
                e.preventDefault();
                return false;
            }
        }
    });

    //function to add or remove class ERROR when inputs text are empty.
    $('input').blur(function () {
        if ($(this).attr('type') == 'text' || $(this).attr('type') == 'password') {
            if (this.id != 'importActuals' && this.id != 'integrationStatus') {
                if ($(this).val() == '') {
                    $(this).addClass("error");
                } else {
                    $(this).removeClass("error");
                }
            }
        }
    });

    $('select').blur(function () {
        if ($(this).val() == '') {
            $(this).addClass("error");
        } else {
            $(this).removeClass("error");
        }
    });

    $("#integrationStatus").click(function () {
        if ($(this).hasClass("icon-check-blue")) {
            $(this).val("Inactive");
            $('#IsActive').val(false);
            $(this).addClass("icon-check-gray");
            $(this).removeClass("icon-check-blue");
        } else {
            $(this).val("Active");
            $('#IsActive').val(true);
            $(this).addClass("icon-check-blue");
            $(this).removeClass("icon-check-gray");
        }
    });

    $("#importActuals").click(function () {
        if ($(this).hasClass("icon-check-blue")) {
            $(this).val("Inactive");
            $('#IsImportActuals').val(false);
            $(this).addClass("icon-check-gray");
            $(this).removeClass("icon-check-blue");
        } else {
            $(this).val("Active");
            $('#IsImportActuals').val(true);
            $(this).addClass("icon-check-blue");
            $(this).removeClass("icon-check-gray");
        }
    });
    
    // Added by :- Sohel Pathan on 12/5/2014 for PL #430 to setup integration screen
    $('#aIntegrations').click(function () {
        var url = '';
        url = '@Url.Content("~/ExternalService/Index")';
        window.location.href = url;
    });

    function populateTimeOptions() {
        $.getJSON("@Url.Content("~/ExternalService/populateTimeOptions")",
        function (TimeData) {
            var select = $("#timeOptions");
            select.empty();
            $.each(TimeData, function (index, itemData) {
                select.append($('<option/>', {
                    value: itemData.Value,
                    text: itemData.Text
                }));
            });

            $(".selectBox select").selectbox('detach');
            $(".selectBox select").selectbox("attach");
        });
    }

    function populateWeekDayOptions() {
        $.getJSON("@Url.Content("~/ExternalService/populateWeekDayOptions")",
        function (WeekData) {
            var select = $("#dayOptions");
            select.empty();
            $.each(WeekData, function (index, itemData) {
                select.append($('<option/>', {
                    value: itemData.Value,
                    text: itemData.Text
                }));
            });

            $(".selectBox select").selectbox('detach');
            $(".selectBox select").selectbox("attach");
        });
    }

    //Modified by Mitesh Vaishnav on 23-06-2014
    $('#aOrganization').click(function () {
        var url = '';
        url = '@Url.Action("ViewEditPermission", "Organization", new { Id = Sessions.User.UserId, Mode = "MyPermission" })';
        window.location.href = url;
    });
</script>
