//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RevenuePlanner.BDSService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BDSService.IBDSService")]
    public interface IBDSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ValidateUserByClientEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ValidateUserByClientExResponse")]
        Integration.BDSService.User ValidateUserByClientEx(System.Guid applicationId, string userEmail, string userPassword, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ValidateUserByClientEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ValidateUserByClientExResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserByClientExAsync(System.Guid applicationId, string userEmail, string userPassword, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetTeamMemberDetailsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetTeamMemberDetailsExResponse")]
        Integration.BDSService.User GetTeamMemberDetailsEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetTeamMemberDetailsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetTeamMemberDetailsExResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetTeamMemberListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetTeamMemberListExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberListEx(int clientId, System.Guid applicationId, int userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetTeamMemberListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetTeamMemberListExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListExAsync(int clientId, System.Guid applicationId, int userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientByIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientByIdExResponse")]
        Integration.BDSService.Client GetClientByIdEx(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientByIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientByIdExResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdExAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberDetailsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberDetailsExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetailsEx(System.Collections.Generic.List<int> userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberDetailsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberDetailsExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsExAsync(System.Collections.Generic.List<int> userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ChangePasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ChangePasswordExResponse")]
        int ChangePasswordEx(int userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ChangePasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ChangePasswordExResponse")]
        System.Threading.Tasks.Task<int> ChangePasswordExAsync(int userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_ChangePasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_ChangePasswordExResponse")]
        string _ChangePasswordEx(int userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_ChangePasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_ChangePasswordExResponse")]
        System.Threading.Tasks.Task<string> _ChangePasswordExAsync(int userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CheckCurrentPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CheckCurrentPasswordExResponse")]
        bool CheckCurrentPasswordEx(int userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CheckCurrentPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CheckCurrentPasswordExResponse")]
        System.Threading.Tasks.Task<bool> CheckCurrentPasswordExAsync(int userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserExResponse")]
        int DeleteUserEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserExResponse")]
        System.Threading.Tasks.Task<int> DeleteUserExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserDetailsByIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserDetailsByIdExResponse")]
        Integration.BDSService.User GetUserDetailsByIdEx(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserDetailsByIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserDetailsByIdExResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsByIdExAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserExResponse")]
        int CreateUserEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserExResponse")]
        System.Threading.Tasks.Task<int> CreateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_CreateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_CreateUserExResponse")]
        int _CreateUserEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_CreateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_CreateUserExResponse")]
        System.Threading.Tasks.Task<int> _CreateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserBasicEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserBasicExResponse")]
        int CreateUserBasicEx(Integration.BDSService.User user, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserBasicEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserBasicExResponse")]
        System.Threading.Tasks.Task<int> CreateUserBasicExAsync(Integration.BDSService.User user, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserWithPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserWithPermissionExResponse")]
        int CreateUserWithPermissionEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateUserWithPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateUserWithPermissionExResponse")]
        System.Threading.Tasks.Task<int> CreateUserWithPermissionExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_CreateUserWithPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_CreateUserWithPermissionExResponse")]
        string _CreateUserWithPermissionEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_CreateUserWithPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_CreateUserWithPermissionExResponse")]
        System.Threading.Tasks.Task<string> _CreateUserWithPermissionExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateUserExResponse")]
        int UpdateUserEx(Integration.BDSService.User user, System.Guid applicationId, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateUserExResponse")]
        System.Threading.Tasks.Task<int> UpdateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateUserDataEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateUserDataExResponse")]
        int UpdateUserDataEx(Integration.BDSService.User user, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateUserDataEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateUserDataExResponse")]
        System.Threading.Tasks.Task<int> UpdateUserDataExAsync(Integration.BDSService.User user, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateClientDataEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateClientDataExResponse")]
        int UpdateClientDataEx(Integration.BDSService.Client client, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateClientDataEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateClientDataExResponse")]
        System.Threading.Tasks.Task<int> UpdateClientDataExAsync(Integration.BDSService.Client client, int modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserRoleExResponse")]
        string GetUserRoleEx(int userId, System.Guid applicationId, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserRoleExResponse")]
        System.Threading.Tasks.Task<string> GetUserRoleExAsync(int userId, System.Guid applicationId, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientNameEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientNameExResponse")]
        string GetClientNameEx(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientNameEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientNameExResponse")]
        System.Threading.Tasks.Task<string> GetClientNameExAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ResetPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ResetPasswordExResponse")]
        int ResetPasswordEx(int userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ResetPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ResetPasswordExResponse")]
        System.Threading.Tasks.Task<int> ResetPasswordExAsync(int userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_ResetPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_ResetPasswordExResponse")]
        string _ResetPasswordEx(int userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/_ResetPasswordEx", ReplyAction="http://tempuri.org/IBDSServiceEx/_ResetPasswordExResponse")]
        System.Threading.Tasks.Task<string> _ResetPasswordExAsync(int userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateLastLoginDateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateLastLoginDateExResponse")]
        int UpdateLastLoginDateEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateLastLoginDateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateLastLoginDateExResponse")]
        System.Threading.Tasks.Task<int> UpdateLastLoginDateExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserListByClientIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserListByClientIdExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientIdEx(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserListByClientIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserListByClientIdExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdExAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserActivityPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserActivityPermissionExResponse")]
        System.Collections.Generic.List<string> GetUserActivityPermissionEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserActivityPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserActivityPermissionExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetAllRoleListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetAllRoleListExResponse")]
        System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleListEx(System.Guid applicationid, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetAllRoleListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetAllRoleListExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListExAsync(System.Guid applicationid, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DuplicateRoleCheckEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DuplicateRoleCheckExResponse")]
        int DuplicateRoleCheckEx(Integration.BDSService.Role role, System.Guid applicationid, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DuplicateRoleCheckEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DuplicateRoleCheckExResponse")]
        System.Threading.Tasks.Task<int> DuplicateRoleCheckExAsync(Integration.BDSService.Role role, System.Guid applicationid, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteRoleAndReassignEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteRoleAndReassignExResponse")]
        int DeleteRoleAndReassignEx(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, int modifiedBy, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteRoleAndReassignEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteRoleAndReassignExResponse")]
        System.Threading.Tasks.Task<int> DeleteRoleAndReassignExAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, int modifiedBy, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateRoleExResponse")]
        int CreateRoleEx(string roledesc, string permissionID, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateRoleExResponse")]
        System.Threading.Tasks.Task<int> CreateRoleExAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateRoleWithoutPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateRoleWithoutPermissionExResponse")]
        System.Guid CreateRoleWithoutPermissionEx(string roledesc, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreateRoleWithoutPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreateRoleWithoutPermissionExResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateRoleWithoutPermissionExAsync(string roledesc, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CopyRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CopyRoleExResponse")]
        int CopyRoleEx(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CopyRoleEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CopyRoleExResponse")]
        System.Threading.Tasks.Task<int> CopyRoleExAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserActivityEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserActivityExResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivityEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserActivityEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserActivityExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserCustomRestrictionListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserCustomRestrictionListExResponse")]
        System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionListEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserCustomRestrictionListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserCustomRestrictionListExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/AddUserActivityPermissionsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/AddUserActivityPermissionsExResponse")]
        int AddUserActivityPermissionsEx(int userId, int CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/AddUserActivityPermissionsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/AddUserActivityPermissionsExResponse")]
        System.Threading.Tasks.Task<int> AddUserActivityPermissionsExAsync(int userId, int CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserActivityPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserActivityPermissionExResponse")]
        int DeleteUserActivityPermissionEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserActivityPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserActivityPermissionExResponse")]
        System.Threading.Tasks.Task<int> DeleteUserActivityPermissionExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserCustomrestrictionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserCustomrestrictionExResponse")]
        int DeleteUserCustomrestrictionEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteUserCustomrestrictionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteUserCustomrestrictionExResponse")]
        System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ResetToRoleDefaultEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ResetToRoleDefaultExResponse")]
        int ResetToRoleDefaultEx(int userId, int CretorId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/ResetToRoleDefaultEx", ReplyAction="http://tempuri.org/IBDSServiceEx/ResetToRoleDefaultExResponse")]
        System.Threading.Tasks.Task<int> ResetToRoleDefaultExAsync(int userId, int CretorId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CopyRoleWithoutPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CopyRoleWithoutPermissionExResponse")]
        System.Guid CopyRoleWithoutPermissionEx(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CopyRoleWithoutPermissionEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CopyRoleWithoutPermissionExResponse")]
        System.Threading.Tasks.Task<System.Guid> CopyRoleWithoutPermissionExAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetRoleIdFromUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetRoleIdFromUserExResponse")]
        System.Guid GetRoleIdFromUserEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetRoleIdFromUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetRoleIdFromUserExResponse")]
        System.Threading.Tasks.Task<System.Guid> GetRoleIdFromUserExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserHierarchyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserHierarchyExResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchyEx(int clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserHierarchyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserHierarchyExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyExAsync(int clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetManagerListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetManagerListExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetManagerListEx(int clientId, System.Guid applicationId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetManagerListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetManagerListExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListExAsync(int clientId, System.Guid applicationId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetOtherApplicationUsersEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetOtherApplicationUsersExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsersEx(int clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetOtherApplicationUsersEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetOtherApplicationUsersExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersExAsync(int clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/AssignUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/AssignUserExResponse")]
        int AssignUserEx(int UserId, System.Guid RoleId, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/AssignUserEx", ReplyAction="http://tempuri.org/IBDSServiceEx/AssignUserExResponse")]
        System.Threading.Tasks.Task<int> AssignUserExAsync(int UserId, System.Guid RoleId, System.Guid applicationId, int createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserListWithCustomRestrictionsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserListWithCustomRestrictionsExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictionsEx(int userId, int clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetUserListWithCustomRestrictionsEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetUserListWithCustomRestrictionsExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsExAsync(int userId, int clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameExResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameEx(System.Collections.Generic.List<int> userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameExAsync(System.Collections.Generic.List<int> userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameByApplicationIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameByApplicationIdExRespon" +
            "se")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameByApplicationIdEx(System.Collections.Generic.List<int> userIdList, System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameByApplicationIdEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetMultipleTeamMemberNameByApplicationIdExRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameByApplicationIdExAsync(System.Collections.Generic.List<int> userIdList, System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetDatabaseListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetDatabaseListExResponse")]
        System.Collections.Generic.List<Integration.BDSService.ClientDatabase> GetDatabaseListEx(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetDatabaseListEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetDatabaseListExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ClientDatabase>> GetDatabaseListExAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/SetDefaultRightsForDababaseEx", ReplyAction="http://tempuri.org/IBDSServiceEx/SetDefaultRightsForDababaseExResponse")]
        int SetDefaultRightsForDababaseEx(int userId, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/SetDefaultRightsForDababaseEx", ReplyAction="http://tempuri.org/IBDSServiceEx/SetDefaultRightsForDababaseExResponse")]
        System.Threading.Tasks.Task<int> SetDefaultRightsForDababaseExAsync(int userId, int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateLicenseAgreedEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateLicenseAgreedExResponse")]
        int UpdateLicenseAgreedEx(int userId, System.Guid applicationId, bool IsAgreed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/UpdateLicenseAgreedEx", ReplyAction="http://tempuri.org/IBDSServiceEx/UpdateLicenseAgreedExResponse")]
        System.Threading.Tasks.Task<int> UpdateLicenseAgreedExAsync(int userId, System.Guid applicationId, bool IsAgreed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetLicenseAgreedEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetLicenseAgreedExResponse")]
        int GetLicenseAgreedEx(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetLicenseAgreedEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetLicenseAgreedExResponse")]
        System.Threading.Tasks.Task<int> GetLicenseAgreedExAsync(int userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreatePasswordHistoryEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreatePasswordHistoryExResponse")]
        string CreatePasswordHistoryEx(int UserId, string Password, int CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/CreatePasswordHistoryEx", ReplyAction="http://tempuri.org/IBDSServiceEx/CreatePasswordHistoryExResponse")]
        System.Threading.Tasks.Task<string> CreatePasswordHistoryExAsync(int UserId, string Password, int CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientCurrencyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientCurrencyExResponse")]
        System.Collections.Generic.List<Integration.BDSService.Currency> GetClientCurrencyEx(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetClientCurrencyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetClientCurrencyExResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetClientCurrencyExAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteExchangeRateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteExchangeRateExResponse")]
        bool DeleteExchangeRateEx(int clientId, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/DeleteExchangeRateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/DeleteExchangeRateExResponse")]
        System.Threading.Tasks.Task<bool> DeleteExchangeRateExAsync(int clientId, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/SaveClientCurrencyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/SaveClientCurrencyExResponse")]
        bool SaveClientCurrencyEx(System.Collections.Generic.List<string> currencyIds, int clientId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/SaveClientCurrencyEx", ReplyAction="http://tempuri.org/IBDSServiceEx/SaveClientCurrencyExResponse")]
        System.Threading.Tasks.Task<bool> SaveClientCurrencyExAsync(System.Collections.Generic.List<string> currencyIds, int clientId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetCurrencyExchangeRateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetCurrencyExchangeRateExResponse")]
        Integration.BDSService.Currency GetCurrencyExchangeRateEx(int clientId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSServiceEx/GetCurrencyExchangeRateEx", ReplyAction="http://tempuri.org/IBDSServiceEx/GetCurrencyExchangeRateExResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Currency> GetCurrencyExchangeRateExAsync(int clientId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRoleWithoutPermission", ReplyAction="http://tempuri.org/IBDSService/CopyRoleWithoutPermissionResponse")]
        System.Guid CopyRoleWithoutPermission(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRoleWithoutPermission", ReplyAction="http://tempuri.org/IBDSService/CopyRoleWithoutPermissionResponse")]
        System.Threading.Tasks.Task<System.Guid> CopyRoleWithoutPermissionAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleIdFromUser", ReplyAction="http://tempuri.org/IBDSService/GetRoleIdFromUserResponse")]
        System.Guid GetRoleIdFromUser(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleIdFromUser", ReplyAction="http://tempuri.org/IBDSService/GetRoleIdFromUserResponse")]
        System.Threading.Tasks.Task<System.Guid> GetRoleIdFromUserAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserHierarchy", ReplyAction="http://tempuri.org/IBDSService/GetUserHierarchyResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchy(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserHierarchy", ReplyAction="http://tempuri.org/IBDSService/GetUserHierarchyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyAsync(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetManagerList", ReplyAction="http://tempuri.org/IBDSService/GetManagerListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetManagerList(System.Guid clientId, System.Guid applicationId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetManagerList", ReplyAction="http://tempuri.org/IBDSService/GetManagerListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetOtherApplicationUsers", ReplyAction="http://tempuri.org/IBDSService/GetOtherApplicationUsersResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsers(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetOtherApplicationUsers", ReplyAction="http://tempuri.org/IBDSService/GetOtherApplicationUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersAsync(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AssignUser", ReplyAction="http://tempuri.org/IBDSService/AssignUserResponse")]
        int AssignUser(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AssignUser", ReplyAction="http://tempuri.org/IBDSService/AssignUserResponse")]
        System.Threading.Tasks.Task<int> AssignUserAsync(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictions", ReplyAction="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictionsResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictions(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictions", ReplyAction="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsAsync(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberName", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberName(string userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberName", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameAsync(string userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameByApplicationId", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameByApplicationIdResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameByApplicationId(string userIdList, System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameByApplicationId", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameByApplicationIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameByApplicationIdAsync(string userIdList, System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetClientApplicationactivitylistResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetClientApplicationactivitylist(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetClientApplicationactivitylistResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetClientApplicationactivitylistAsync(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetDatabaseList", ReplyAction="http://tempuri.org/IBDSService/GetDatabaseListResponse")]
        System.Collections.Generic.List<Integration.BDSService.ClientDatabase> GetDatabaseList(System.Guid userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetDatabaseList", ReplyAction="http://tempuri.org/IBDSService/GetDatabaseListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ClientDatabase>> GetDatabaseListAsync(System.Guid userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SetDefaultRightsForDababase", ReplyAction="http://tempuri.org/IBDSService/SetDefaultRightsForDababaseResponse")]
        int SetDefaultRightsForDababase(System.Guid userId, System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SetDefaultRightsForDababase", ReplyAction="http://tempuri.org/IBDSService/SetDefaultRightsForDababaseResponse")]
        System.Threading.Tasks.Task<int> SetDefaultRightsForDababaseAsync(System.Guid userId, System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLicenseAgreed", ReplyAction="http://tempuri.org/IBDSService/UpdateLicenseAgreedResponse")]
        int UpdateLicenseAgreed(System.Guid userId, System.Guid applicationId, bool IsAgreed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLicenseAgreed", ReplyAction="http://tempuri.org/IBDSService/UpdateLicenseAgreedResponse")]
        System.Threading.Tasks.Task<int> UpdateLicenseAgreedAsync(System.Guid userId, System.Guid applicationId, bool IsAgreed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetLicenseAgreed", ReplyAction="http://tempuri.org/IBDSService/GetLicenseAgreedResponse")]
        int GetLicenseAgreed(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetLicenseAgreed", ReplyAction="http://tempuri.org/IBDSService/GetLicenseAgreedResponse")]
        System.Threading.Tasks.Task<int> GetLicenseAgreedAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordHistory", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordHistoryResponse")]
        string CreatePasswordHistory(System.Guid UserId, string Password, System.Guid CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordHistory", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordHistoryResponse")]
        System.Threading.Tasks.Task<string> CreatePasswordHistoryAsync(System.Guid UserId, string Password, System.Guid CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllCurrency", ReplyAction="http://tempuri.org/IBDSService/GetAllCurrencyResponse")]
        System.Collections.Generic.List<Integration.BDSService.Currency> GetAllCurrency();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllCurrency", ReplyAction="http://tempuri.org/IBDSService/GetAllCurrencyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetAllCurrencyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientCurrency", ReplyAction="http://tempuri.org/IBDSService/GetClientCurrencyResponse")]
        System.Collections.Generic.List<Integration.BDSService.Currency> GetClientCurrency(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientCurrency", ReplyAction="http://tempuri.org/IBDSService/GetClientCurrencyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetClientCurrencyAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteExchangeRate", ReplyAction="http://tempuri.org/IBDSService/DeleteExchangeRateResponse")]
        bool DeleteExchangeRate(System.Guid clientId, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteExchangeRate", ReplyAction="http://tempuri.org/IBDSService/DeleteExchangeRateResponse")]
        System.Threading.Tasks.Task<bool> DeleteExchangeRateAsync(System.Guid clientId, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveClientCurrency", ReplyAction="http://tempuri.org/IBDSService/SaveClientCurrencyResponse")]
        bool SaveClientCurrency(System.Collections.Generic.List<string> currencyIds, System.Guid clientId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveClientCurrency", ReplyAction="http://tempuri.org/IBDSService/SaveClientCurrencyResponse")]
        System.Threading.Tasks.Task<bool> SaveClientCurrencyAsync(System.Collections.Generic.List<string> currencyIds, System.Guid clientId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveExchangeRate", ReplyAction="http://tempuri.org/IBDSService/SaveExchangeRateResponse")]
        bool SaveExchangeRate(Integration.BDSService.ExchangeRate_Log objExchnageRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveExchangeRate", ReplyAction="http://tempuri.org/IBDSService/SaveExchangeRateResponse")]
        System.Threading.Tasks.Task<bool> SaveExchangeRateAsync(Integration.BDSService.ExchangeRate_Log objExchnageRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveExchangeRateList", ReplyAction="http://tempuri.org/IBDSService/SaveExchangeRateListResponse")]
        bool SaveExchangeRateList(System.Collections.Generic.List<Integration.BDSService.ExchangeRate_Log> lstExchnageRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/SaveExchangeRateList", ReplyAction="http://tempuri.org/IBDSService/SaveExchangeRateListResponse")]
        System.Threading.Tasks.Task<bool> SaveExchangeRateListAsync(System.Collections.Generic.List<Integration.BDSService.ExchangeRate_Log> lstExchnageRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetCurrencyExchangeRate", ReplyAction="http://tempuri.org/IBDSService/GetCurrencyExchangeRateResponse")]
        Integration.BDSService.Currency GetCurrencyExchangeRate(System.Guid clientId, System.Guid UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetCurrencyExchangeRate", ReplyAction="http://tempuri.org/IBDSService/GetCurrencyExchangeRateResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Currency> GetCurrencyExchangeRateAsync(System.Guid clientId, System.Guid UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUser", ReplyAction="http://tempuri.org/IBDSService/ValidateUserResponse")]
        Integration.BDSService.User ValidateUser(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUser", ReplyAction="http://tempuri.org/IBDSService/ValidateUserResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserAsync(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/Validate_User", ReplyAction="http://tempuri.org/IBDSService/Validate_UserResponse")]
        Integration.BDSService.User Validate_User(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/Validate_User", ReplyAction="http://tempuri.org/IBDSService/Validate_UserResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> Validate_UserAsync(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/Validate_UserOverAll", ReplyAction="http://tempuri.org/IBDSService/Validate_UserOverAllResponse")]
        Integration.BDSService.User Validate_UserOverAll(string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/Validate_UserOverAll", ReplyAction="http://tempuri.org/IBDSService/Validate_UserOverAllResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> Validate_UserOverAllAsync(string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateAppConfiguration", ReplyAction="http://tempuri.org/IBDSService/ValidateAppConfigurationResponse")]
        System.Collections.Generic.List<Integration.BDSService.AppConfiguration> ValidateAppConfiguration(System.Guid applicationId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateAppConfiguration", ReplyAction="http://tempuri.org/IBDSService/ValidateAppConfigurationResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.AppConfiguration>> ValidateAppConfigurationAsync(System.Guid applicationId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/LockUser", ReplyAction="http://tempuri.org/IBDSService/LockUserResponse")]
        int LockUser(System.Guid applicationId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/LockUser", ReplyAction="http://tempuri.org/IBDSService/LockUserResponse")]
        System.Threading.Tasks.Task<int> LockUserAsync(System.Guid applicationId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUserByClient", ReplyAction="http://tempuri.org/IBDSService/ValidateUserByClientResponse")]
        Integration.BDSService.User ValidateUserByClient(System.Guid applicationId, string userEmail, string userPassword, System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUserByClient", ReplyAction="http://tempuri.org/IBDSService/ValidateUserByClientResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserByClientAsync(System.Guid applicationId, string userEmail, string userPassword, System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberDetailsResponse")]
        Integration.BDSService.User GetTeamMemberDetails(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberList", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberList(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberList", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientList", ReplyAction="http://tempuri.org/IBDSService/GetClientListResponse")]
        System.Collections.Generic.List<Integration.BDSService.Client> GetClientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientList", ReplyAction="http://tempuri.org/IBDSService/GetClientListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Client>> GetClientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientById", ReplyAction="http://tempuri.org/IBDSService/GetClientByIdResponse")]
        Integration.BDSService.Client GetClientById(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientById", ReplyAction="http://tempuri.org/IBDSService/GetClientByIdResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetailsResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetails(string userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetailsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsAsync(string userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ChangePassword", ReplyAction="http://tempuri.org/IBDSService/ChangePasswordResponse")]
        int ChangePassword(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ChangePassword", ReplyAction="http://tempuri.org/IBDSService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<int> ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_ChangePassword", ReplyAction="http://tempuri.org/IBDSService/_ChangePasswordResponse")]
        string _ChangePassword(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_ChangePassword", ReplyAction="http://tempuri.org/IBDSService/_ChangePasswordResponse")]
        System.Threading.Tasks.Task<string> _ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckCurrentPassword", ReplyAction="http://tempuri.org/IBDSService/CheckCurrentPasswordResponse")]
        bool CheckCurrentPassword(System.Guid userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckCurrentPassword", ReplyAction="http://tempuri.org/IBDSService/CheckCurrentPasswordResponse")]
        System.Threading.Tasks.Task<bool> CheckCurrentPasswordAsync(System.Guid userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenu", ReplyAction="http://tempuri.org/IBDSService/GetMenuResponse")]
        System.Collections.Generic.List<Integration.BDSService.Menu> GetMenu(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenu", ReplyAction="http://tempuri.org/IBDSService/GetMenuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMenuAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllMenu", ReplyAction="http://tempuri.org/IBDSService/GetAllMenuResponse")]
        System.Collections.Generic.List<Integration.BDSService.Menu> GetAllMenu(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllMenu", ReplyAction="http://tempuri.org/IBDSService/GetAllMenuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetAllMenuAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMeasureMenuforPlan", ReplyAction="http://tempuri.org/IBDSService/GetMeasureMenuforPlanResponse")]
        System.Collections.Generic.List<Integration.BDSService.Menu> GetMeasureMenuforPlan(System.Guid ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMeasureMenuforPlan", ReplyAction="http://tempuri.org/IBDSService/GetMeasureMenuforPlanResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMeasureMenuforPlanAsync(System.Guid ApplicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPermission", ReplyAction="http://tempuri.org/IBDSService/GetPermissionResponse")]
        System.Collections.Generic.List<Integration.BDSService.Permission> GetPermission(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPermission", ReplyAction="http://tempuri.org/IBDSService/GetPermissionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Permission>> GetPermissionAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckEmail", ReplyAction="http://tempuri.org/IBDSService/CheckEmailResponse")]
        bool CheckEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckEmail", ReplyAction="http://tempuri.org/IBDSService/CheckEmailResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUser", ReplyAction="http://tempuri.org/IBDSService/DeleteUserResponse")]
        int DeleteUser(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUser", ReplyAction="http://tempuri.org/IBDSService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetails", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsResponse")]
        Integration.BDSService.User GetUserDetails(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetails", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsAsync(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetailsById", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsByIdResponse")]
        Integration.BDSService.User GetUserDetailsById(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetailsById", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsByIdResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsByIdAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUser", ReplyAction="http://tempuri.org/IBDSService/CreateUserResponse")]
        int CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUser", ReplyAction="http://tempuri.org/IBDSService/CreateUserResponse")]
        System.Threading.Tasks.Task<int> CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_CreateUser", ReplyAction="http://tempuri.org/IBDSService/_CreateUserResponse")]
        int _CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_CreateUser", ReplyAction="http://tempuri.org/IBDSService/_CreateUserResponse")]
        System.Threading.Tasks.Task<int> _CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserBasic", ReplyAction="http://tempuri.org/IBDSService/CreateUserBasicResponse")]
        int CreateUserBasic(Integration.BDSService.User user, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserBasic", ReplyAction="http://tempuri.org/IBDSService/CreateUserBasicResponse")]
        System.Threading.Tasks.Task<int> CreateUserBasicAsync(Integration.BDSService.User user, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/CreateUserWithPermissionResponse")]
        int CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/CreateUserWithPermissionResponse")]
        System.Threading.Tasks.Task<int> CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/_CreateUserWithPermissionResponse")]
        string _CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/_CreateUserWithPermissionResponse")]
        System.Threading.Tasks.Task<string> _CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUser", ReplyAction="http://tempuri.org/IBDSService/UpdateUserResponse")]
        int UpdateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUser", ReplyAction="http://tempuri.org/IBDSService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserData", ReplyAction="http://tempuri.org/IBDSService/UpdateUserDataResponse")]
        int UpdateUserData(Integration.BDSService.User user, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserData", ReplyAction="http://tempuri.org/IBDSService/UpdateUserDataResponse")]
        System.Threading.Tasks.Task<int> UpdateUserDataAsync(Integration.BDSService.User user, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateClientData", ReplyAction="http://tempuri.org/IBDSService/UpdateClientDataResponse")]
        int UpdateClientData(Integration.BDSService.Client client, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateClientData", ReplyAction="http://tempuri.org/IBDSService/UpdateClientDataResponse")]
        System.Threading.Tasks.Task<int> UpdateClientDataAsync(Integration.BDSService.Client client, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserRole", ReplyAction="http://tempuri.org/IBDSService/GetUserRoleResponse")]
        string GetUserRole(System.Guid id, System.Guid applicationId, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserRole", ReplyAction="http://tempuri.org/IBDSService/GetUserRoleResponse")]
        System.Threading.Tasks.Task<string> GetUserRoleAsync(System.Guid id, System.Guid applicationId, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationName", ReplyAction="http://tempuri.org/IBDSService/GetApplicationNameResponse")]
        string GetApplicationName(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationName", ReplyAction="http://tempuri.org/IBDSService/GetApplicationNameResponse")]
        System.Threading.Tasks.Task<string> GetApplicationNameAsync(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationDictionary", ReplyAction="http://tempuri.org/IBDSService/GetApplicationDictionaryResponse")]
        System.Collections.Generic.Dictionary<System.Guid, string> GetApplicationDictionary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationDictionary", ReplyAction="http://tempuri.org/IBDSService/GetApplicationDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetApplicationDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientName", ReplyAction="http://tempuri.org/IBDSService/GetClientNameResponse")]
        string GetClientName(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientName", ReplyAction="http://tempuri.org/IBDSService/GetClientNameResponse")]
        System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AllowedMenusForUser", ReplyAction="http://tempuri.org/IBDSService/AllowedMenusForUserResponse")]
        System.Collections.Generic.List<int> AllowedMenusForUser(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AllowedMenusForUser", ReplyAction="http://tempuri.org/IBDSService/AllowedMenusForUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> AllowedMenusForUserAsync(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenuName", ReplyAction="http://tempuri.org/IBDSService/GetMenuNameResponse")]
        string GetMenuName(int menuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenuName", ReplyAction="http://tempuri.org/IBDSService/GetMenuNameResponse")]
        System.Threading.Tasks.Task<string> GetMenuNameAsync(int menuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ResetPassword", ReplyAction="http://tempuri.org/IBDSService/ResetPasswordResponse")]
        int ResetPassword(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ResetPassword", ReplyAction="http://tempuri.org/IBDSService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<int> ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_ResetPassword", ReplyAction="http://tempuri.org/IBDSService/_ResetPasswordResponse")]
        string _ResetPassword(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/_ResetPassword", ReplyAction="http://tempuri.org/IBDSService/_ResetPasswordResponse")]
        System.Threading.Tasks.Task<string> _ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleDetails", ReplyAction="http://tempuri.org/IBDSService/GetRoleDetailsResponse")]
        Integration.BDSService.Role GetRoleDetails(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleDetails", ReplyAction="http://tempuri.org/IBDSService/GetRoleDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Role> GetRoleDetailsAsync(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLastLoginDate", ReplyAction="http://tempuri.org/IBDSService/UpdateLastLoginDateResponse")]
        int UpdateLastLoginDate(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLastLoginDate", ReplyAction="http://tempuri.org/IBDSService/UpdateLastLoginDateResponse")]
        System.Threading.Tasks.Task<int> UpdateLastLoginDateAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordResetRequestResponse")]
        string CreatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordResetRequestResponse")]
        System.Threading.Tasks.Task<string> CreatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/GetPasswordResetRequestResponse")]
        Integration.BDSService.PasswordResetRequest GetPasswordResetRequest(System.Guid PasswordResetRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/GetPasswordResetRequestResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.PasswordResetRequest> GetPasswordResetRequestAsync(System.Guid PasswordResetRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/UpdatePasswordResetRequestResponse")]
        int UpdatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/UpdatePasswordResetRequestResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/GetSecurityQuestionResponse")]
        System.Collections.Generic.List<Integration.BDSService.SecurityQuestion> GetSecurityQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/GetSecurityQuestionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.SecurityQuestion>> GetSecurityQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/UpdateUserSecurityQuestionResponse")]
        int UpdateUserSecurityQuestion(Integration.BDSService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/UpdateUserSecurityQuestionResponse")]
        System.Threading.Tasks.Task<int> UpdateUserSecurityQuestionAsync(Integration.BDSService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListByClientId", ReplyAction="http://tempuri.org/IBDSService/GetUserListByClientIdResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientId(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListByClientId", ReplyAction="http://tempuri.org/IBDSService/GetUserListByClientIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListComplete", ReplyAction="http://tempuri.org/IBDSService/GetUserListCompleteResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListComplete();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListComplete", ReplyAction="http://tempuri.org/IBDSService/GetUserListCompleteResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListCompleteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationReleaseVersion", ReplyAction="http://tempuri.org/IBDSService/GetApplicationReleaseVersionResponse")]
        string GetApplicationReleaseVersion(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationReleaseVersion", ReplyAction="http://tempuri.org/IBDSService/GetApplicationReleaseVersionResponse")]
        System.Threading.Tasks.Task<string> GetApplicationReleaseVersionAsync(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityPermissionResponse")]
        System.Collections.Generic.List<string> GetUserActivityPermission(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityPermissionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllRoleList", ReplyAction="http://tempuri.org/IBDSService/GetAllRoleListResponse")]
        System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleList(System.Guid applicationid, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllRoleList", ReplyAction="http://tempuri.org/IBDSService/GetAllRoleListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListAsync(System.Guid applicationid, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetUserApplicationactivitylistResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetUserApplicationactivitylist(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetUserApplicationactivitylistResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetUserApplicationactivitylistAsync(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DuplicateRoleCheck", ReplyAction="http://tempuri.org/IBDSService/DuplicateRoleCheckResponse")]
        int DuplicateRoleCheck(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DuplicateRoleCheck", ReplyAction="http://tempuri.org/IBDSService/DuplicateRoleCheckResponse")]
        System.Threading.Tasks.Task<int> DuplicateRoleCheckAsync(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleMemberList", ReplyAction="http://tempuri.org/IBDSService/GetRoleMemberListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetRoleMemberList(System.Guid applicationId, System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleMemberList", ReplyAction="http://tempuri.org/IBDSService/GetRoleMemberListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetRoleMemberListAsync(System.Guid applicationId, System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteRoleAndReassign", ReplyAction="http://tempuri.org/IBDSService/DeleteRoleAndReassignResponse")]
        int DeleteRoleAndReassign(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteRoleAndReassign", ReplyAction="http://tempuri.org/IBDSService/DeleteRoleAndReassignResponse")]
        System.Threading.Tasks.Task<int> DeleteRoleAndReassignAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRole", ReplyAction="http://tempuri.org/IBDSService/CreateRoleResponse")]
        int CreateRole(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRole", ReplyAction="http://tempuri.org/IBDSService/CreateRoleResponse")]
        System.Threading.Tasks.Task<int> CreateRoleAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRoleWithoutPermission", ReplyAction="http://tempuri.org/IBDSService/CreateRoleWithoutPermissionResponse")]
        System.Guid CreateRoleWithoutPermission(string roledesc, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRoleWithoutPermission", ReplyAction="http://tempuri.org/IBDSService/CreateRoleWithoutPermissionResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateRoleWithoutPermissionAsync(string roledesc, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRole", ReplyAction="http://tempuri.org/IBDSService/CopyRoleResponse")]
        int CopyRole(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRole", ReplyAction="http://tempuri.org/IBDSService/CopyRoleResponse")]
        System.Threading.Tasks.Task<int> CopyRoleAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleactivitypermissions", ReplyAction="http://tempuri.org/IBDSService/GetRoleactivitypermissionsResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetRoleactivitypermissions(System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleactivitypermissions", ReplyAction="http://tempuri.org/IBDSService/GetRoleactivitypermissionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetRoleactivitypermissionsAsync(System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivity", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivity(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivity", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserCustomRestrictionList", ReplyAction="http://tempuri.org/IBDSService/GetUserCustomRestrictionListResponse")]
        System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionList(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserCustomRestrictionList", ReplyAction="http://tempuri.org/IBDSService/GetUserCustomRestrictionListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AddUserActivityPermissions", ReplyAction="http://tempuri.org/IBDSService/AddUserActivityPermissionsResponse")]
        int AddUserActivityPermissions(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AddUserActivityPermissions", ReplyAction="http://tempuri.org/IBDSService/AddUserActivityPermissionsResponse")]
        System.Threading.Tasks.Task<int> AddUserActivityPermissionsAsync(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/DeleteUserActivityPermissionResponse")]
        int DeleteUserActivityPermission(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/DeleteUserActivityPermissionResponse")]
        System.Threading.Tasks.Task<int> DeleteUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserCustomrestriction", ReplyAction="http://tempuri.org/IBDSService/DeleteUserCustomrestrictionResponse")]
        int DeleteUserCustomrestriction(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserCustomrestriction", ReplyAction="http://tempuri.org/IBDSService/DeleteUserCustomrestrictionResponse")]
        System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/resetToRoleDefault", ReplyAction="http://tempuri.org/IBDSService/resetToRoleDefaultResponse")]
        int resetToRoleDefault(System.Guid userId, System.Guid CretorId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/resetToRoleDefault", ReplyAction="http://tempuri.org/IBDSService/resetToRoleDefaultResponse")]
        System.Threading.Tasks.Task<int> resetToRoleDefaultAsync(System.Guid userId, System.Guid CretorId, System.Guid applicationId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBDSServiceChannel : RevenuePlanner.BDSService.IBDSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BDSServiceClient : System.ServiceModel.ClientBase<RevenuePlanner.BDSService.IBDSService>, RevenuePlanner.BDSService.IBDSService {
        
        public BDSServiceClient() {
        }
        
        public BDSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BDSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BDSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BDSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Integration.BDSService.User ValidateUserByClientEx(System.Guid applicationId, string userEmail, string userPassword, int clientId) {
            return base.Channel.ValidateUserByClientEx(applicationId, userEmail, userPassword, clientId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserByClientExAsync(System.Guid applicationId, string userEmail, string userPassword, int clientId) {
            return base.Channel.ValidateUserByClientExAsync(applicationId, userEmail, userPassword, clientId);
        }
        
        public Integration.BDSService.User GetTeamMemberDetailsEx(int userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetailsEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetailsExAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberListEx(int clientId, System.Guid applicationId, int userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberListEx(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListExAsync(int clientId, System.Guid applicationId, int userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberListExAsync(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public Integration.BDSService.Client GetClientByIdEx(int clientId) {
            return base.Channel.GetClientByIdEx(clientId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdExAsync(int clientId) {
            return base.Channel.GetClientByIdExAsync(clientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetailsEx(System.Collections.Generic.List<int> userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetailsEx(userIdList, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsExAsync(System.Collections.Generic.List<int> userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetailsExAsync(userIdList, applicationId);
        }
        
        public int ChangePasswordEx(int userId, string newPassword, string currPassword) {
            return base.Channel.ChangePasswordEx(userId, newPassword, currPassword);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordExAsync(int userId, string newPassword, string currPassword) {
            return base.Channel.ChangePasswordExAsync(userId, newPassword, currPassword);
        }
        
        public string _ChangePasswordEx(int userId, string newPassword, string currPassword) {
            return base.Channel._ChangePasswordEx(userId, newPassword, currPassword);
        }
        
        public System.Threading.Tasks.Task<string> _ChangePasswordExAsync(int userId, string newPassword, string currPassword) {
            return base.Channel._ChangePasswordExAsync(userId, newPassword, currPassword);
        }
        
        public bool CheckCurrentPasswordEx(int userId, string currentPassword) {
            return base.Channel.CheckCurrentPasswordEx(userId, currentPassword);
        }
        
        public System.Threading.Tasks.Task<bool> CheckCurrentPasswordExAsync(int userId, string currentPassword) {
            return base.Channel.CheckCurrentPasswordExAsync(userId, currentPassword);
        }
        
        public int DeleteUserEx(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserExAsync(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserExAsync(userId, applicationId);
        }
        
        public Integration.BDSService.User GetUserDetailsByIdEx(int userId) {
            return base.Channel.GetUserDetailsByIdEx(userId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsByIdExAsync(int userId) {
            return base.Channel.GetUserDetailsByIdExAsync(userId);
        }
        
        public int CreateUserEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel.CreateUserEx(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel.CreateUserExAsync(user, applicationId, createdBy);
        }
        
        public int _CreateUserEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel._CreateUserEx(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> _CreateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel._CreateUserExAsync(user, applicationId, createdBy);
        }
        
        public int CreateUserBasicEx(Integration.BDSService.User user, int createdBy) {
            return base.Channel.CreateUserBasicEx(user, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserBasicExAsync(Integration.BDSService.User user, int createdBy) {
            return base.Channel.CreateUserBasicExAsync(user, createdBy);
        }
        
        public int CreateUserWithPermissionEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel.CreateUserWithPermissionEx(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserWithPermissionExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel.CreateUserWithPermissionExAsync(user, applicationId, createdBy);
        }
        
        public string _CreateUserWithPermissionEx(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel._CreateUserWithPermissionEx(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> _CreateUserWithPermissionExAsync(Integration.BDSService.User user, System.Guid applicationId, int createdBy) {
            return base.Channel._CreateUserWithPermissionExAsync(user, applicationId, createdBy);
        }
        
        public int UpdateUserEx(Integration.BDSService.User user, System.Guid applicationId, int modifiedBy) {
            return base.Channel.UpdateUserEx(user, applicationId, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserExAsync(Integration.BDSService.User user, System.Guid applicationId, int modifiedBy) {
            return base.Channel.UpdateUserExAsync(user, applicationId, modifiedBy);
        }
        
        public int UpdateUserDataEx(Integration.BDSService.User user, int modifiedBy) {
            return base.Channel.UpdateUserDataEx(user, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserDataExAsync(Integration.BDSService.User user, int modifiedBy) {
            return base.Channel.UpdateUserDataExAsync(user, modifiedBy);
        }
        
        public int UpdateClientDataEx(Integration.BDSService.Client client, int modifiedBy) {
            return base.Channel.UpdateClientDataEx(client, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateClientDataExAsync(Integration.BDSService.Client client, int modifiedBy) {
            return base.Channel.UpdateClientDataExAsync(client, modifiedBy);
        }
        
        public string GetUserRoleEx(int userId, System.Guid applicationId, int ClientId) {
            return base.Channel.GetUserRoleEx(userId, applicationId, ClientId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserRoleExAsync(int userId, System.Guid applicationId, int ClientId) {
            return base.Channel.GetUserRoleExAsync(userId, applicationId, ClientId);
        }
        
        public string GetClientNameEx(int userId) {
            return base.Channel.GetClientNameEx(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetClientNameExAsync(int userId) {
            return base.Channel.GetClientNameExAsync(userId);
        }
        
        public int ResetPasswordEx(int userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPasswordEx(userId, SingleHash_NewPassword);
        }
        
        public System.Threading.Tasks.Task<int> ResetPasswordExAsync(int userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPasswordExAsync(userId, SingleHash_NewPassword);
        }
        
        public string _ResetPasswordEx(int userId, string SingleHash_NewPassword) {
            return base.Channel._ResetPasswordEx(userId, SingleHash_NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> _ResetPasswordExAsync(int userId, string SingleHash_NewPassword) {
            return base.Channel._ResetPasswordExAsync(userId, SingleHash_NewPassword);
        }
        
        public int UpdateLastLoginDateEx(int userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDateEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLastLoginDateExAsync(int userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDateExAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientIdEx(int clientId) {
            return base.Channel.GetUserListByClientIdEx(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdExAsync(int clientId) {
            return base.Channel.GetUserListByClientIdExAsync(clientId);
        }
        
        public System.Collections.Generic.List<string> GetUserActivityPermissionEx(int userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermissionEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermissionExAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleListEx(System.Guid applicationid, int ClientId) {
            return base.Channel.GetAllRoleListEx(applicationid, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListExAsync(System.Guid applicationid, int ClientId) {
            return base.Channel.GetAllRoleListExAsync(applicationid, ClientId);
        }
        
        public int DuplicateRoleCheckEx(Integration.BDSService.Role role, System.Guid applicationid, int ClientID) {
            return base.Channel.DuplicateRoleCheckEx(role, applicationid, ClientID);
        }
        
        public System.Threading.Tasks.Task<int> DuplicateRoleCheckExAsync(Integration.BDSService.Role role, System.Guid applicationid, int ClientID) {
            return base.Channel.DuplicateRoleCheckExAsync(role, applicationid, ClientID);
        }
        
        public int DeleteRoleAndReassignEx(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, int modifiedBy, int ClientId) {
            return base.Channel.DeleteRoleAndReassignEx(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRoleAndReassignExAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, int modifiedBy, int ClientId) {
            return base.Channel.DeleteRoleAndReassignExAsync(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public int CreateRoleEx(string roledesc, string permissionID, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId) {
            return base.Channel.CreateRoleEx(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CreateRoleExAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId) {
            return base.Channel.CreateRoleExAsync(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Guid CreateRoleWithoutPermissionEx(string roledesc, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId) {
            return base.Channel.CreateRoleWithoutPermissionEx(roledesc, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateRoleWithoutPermissionExAsync(string roledesc, string colorcode, System.Guid applicationid, int createdby, System.Guid roleid, string delpermission, int ClientId) {
            return base.Channel.CreateRoleWithoutPermissionExAsync(roledesc, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public int CopyRoleEx(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId) {
            return base.Channel.CopyRoleEx(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CopyRoleExAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId) {
            return base.Channel.CopyRoleExAsync(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivityEx(int userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityExAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionListEx(int userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionListEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionListExAsync(userId, applicationId);
        }
        
        public int AddUserActivityPermissionsEx(int userId, int CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissionsEx(userId, CreatorId, permissions, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> AddUserActivityPermissionsExAsync(int userId, int CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissionsExAsync(userId, CreatorId, permissions, applicationId);
        }
        
        public int DeleteUserActivityPermissionEx(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermissionEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserActivityPermissionExAsync(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermissionExAsync(userId, applicationId);
        }
        
        public int DeleteUserCustomrestrictionEx(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestrictionEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionExAsync(int userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestrictionExAsync(userId, applicationId);
        }
        
        public int ResetToRoleDefaultEx(int userId, int CretorId, System.Guid applicationId) {
            return base.Channel.ResetToRoleDefaultEx(userId, CretorId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> ResetToRoleDefaultExAsync(int userId, int CretorId, System.Guid applicationId) {
            return base.Channel.ResetToRoleDefaultExAsync(userId, CretorId, applicationId);
        }
        
        public System.Guid CopyRoleWithoutPermissionEx(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId) {
            return base.Channel.CopyRoleWithoutPermissionEx(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CopyRoleWithoutPermissionExAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, int createdby, int ClientId) {
            return base.Channel.CopyRoleWithoutPermissionExAsync(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Guid GetRoleIdFromUserEx(int userId, System.Guid applicationId) {
            return base.Channel.GetRoleIdFromUserEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetRoleIdFromUserExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetRoleIdFromUserExAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchyEx(int clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchyEx(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyExAsync(int clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchyExAsync(clientId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetManagerListEx(int clientId, System.Guid applicationId, int userId) {
            return base.Channel.GetManagerListEx(clientId, applicationId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListExAsync(int clientId, System.Guid applicationId, int userId) {
            return base.Channel.GetManagerListExAsync(clientId, applicationId, userId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsersEx(int clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsersEx(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersExAsync(int clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsersExAsync(clientId, applicationId);
        }
        
        public int AssignUserEx(int UserId, System.Guid RoleId, System.Guid applicationId, int createdBy) {
            return base.Channel.AssignUserEx(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AssignUserExAsync(int UserId, System.Guid RoleId, System.Guid applicationId, int createdBy) {
            return base.Channel.AssignUserExAsync(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictionsEx(int userId, int clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictionsEx(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsExAsync(int userId, int clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictionsExAsync(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameEx(System.Collections.Generic.List<int> userIdList) {
            return base.Channel.GetMultipleTeamMemberNameEx(userIdList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameExAsync(System.Collections.Generic.List<int> userIdList) {
            return base.Channel.GetMultipleTeamMemberNameExAsync(userIdList);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameByApplicationIdEx(System.Collections.Generic.List<int> userIdList, System.Guid applicationid) {
            return base.Channel.GetMultipleTeamMemberNameByApplicationIdEx(userIdList, applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameByApplicationIdExAsync(System.Collections.Generic.List<int> userIdList, System.Guid applicationid) {
            return base.Channel.GetMultipleTeamMemberNameByApplicationIdExAsync(userIdList, applicationid);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ClientDatabase> GetDatabaseListEx(int userid) {
            return base.Channel.GetDatabaseListEx(userid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ClientDatabase>> GetDatabaseListExAsync(int userid) {
            return base.Channel.GetDatabaseListExAsync(userid);
        }
        
        public int SetDefaultRightsForDababaseEx(int userId, int clientId) {
            return base.Channel.SetDefaultRightsForDababaseEx(userId, clientId);
        }
        
        public System.Threading.Tasks.Task<int> SetDefaultRightsForDababaseExAsync(int userId, int clientId) {
            return base.Channel.SetDefaultRightsForDababaseExAsync(userId, clientId);
        }
        
        public int UpdateLicenseAgreedEx(int userId, System.Guid applicationId, bool IsAgreed) {
            return base.Channel.UpdateLicenseAgreedEx(userId, applicationId, IsAgreed);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLicenseAgreedExAsync(int userId, System.Guid applicationId, bool IsAgreed) {
            return base.Channel.UpdateLicenseAgreedExAsync(userId, applicationId, IsAgreed);
        }
        
        public int GetLicenseAgreedEx(int userId, System.Guid applicationId) {
            return base.Channel.GetLicenseAgreedEx(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> GetLicenseAgreedExAsync(int userId, System.Guid applicationId) {
            return base.Channel.GetLicenseAgreedExAsync(userId, applicationId);
        }
        
        public string CreatePasswordHistoryEx(int UserId, string Password, int CreatedBy) {
            return base.Channel.CreatePasswordHistoryEx(UserId, Password, CreatedBy);
        }
        
        public System.Threading.Tasks.Task<string> CreatePasswordHistoryExAsync(int UserId, string Password, int CreatedBy) {
            return base.Channel.CreatePasswordHistoryExAsync(UserId, Password, CreatedBy);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Currency> GetClientCurrencyEx(int clientId) {
            return base.Channel.GetClientCurrencyEx(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetClientCurrencyExAsync(int clientId) {
            return base.Channel.GetClientCurrencyExAsync(clientId);
        }
        
        public bool DeleteExchangeRateEx(int clientId, string code) {
            return base.Channel.DeleteExchangeRateEx(clientId, code);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExchangeRateExAsync(int clientId, string code) {
            return base.Channel.DeleteExchangeRateExAsync(clientId, code);
        }
        
        public bool SaveClientCurrencyEx(System.Collections.Generic.List<string> currencyIds, int clientId, int userId) {
            return base.Channel.SaveClientCurrencyEx(currencyIds, clientId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveClientCurrencyExAsync(System.Collections.Generic.List<string> currencyIds, int clientId, int userId) {
            return base.Channel.SaveClientCurrencyExAsync(currencyIds, clientId, userId);
        }
        
        public Integration.BDSService.Currency GetCurrencyExchangeRateEx(int clientId, int UserId) {
            return base.Channel.GetCurrencyExchangeRateEx(clientId, UserId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Currency> GetCurrencyExchangeRateExAsync(int clientId, int UserId) {
            return base.Channel.GetCurrencyExchangeRateExAsync(clientId, UserId);
        }
        
        public System.Guid CopyRoleWithoutPermission(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRoleWithoutPermission(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CopyRoleWithoutPermissionAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRoleWithoutPermissionAsync(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Guid GetRoleIdFromUser(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetRoleIdFromUser(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetRoleIdFromUserAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetRoleIdFromUserAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchy(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchy(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyAsync(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchyAsync(clientId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetManagerList(System.Guid clientId, System.Guid applicationId, System.Guid userId) {
            return base.Channel.GetManagerList(clientId, applicationId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId) {
            return base.Channel.GetManagerListAsync(clientId, applicationId, userId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsers(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsers(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersAsync(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsersAsync(clientId, applicationId);
        }
        
        public int AssignUser(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.AssignUser(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AssignUserAsync(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.AssignUserAsync(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictions(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictions(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsAsync(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictionsAsync(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberName(string userIdList) {
            return base.Channel.GetMultipleTeamMemberName(userIdList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameAsync(string userIdList) {
            return base.Channel.GetMultipleTeamMemberNameAsync(userIdList);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberNameByApplicationId(string userIdList, System.Guid applicationid) {
            return base.Channel.GetMultipleTeamMemberNameByApplicationId(userIdList, applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameByApplicationIdAsync(string userIdList, System.Guid applicationid) {
            return base.Channel.GetMultipleTeamMemberNameByApplicationIdAsync(userIdList, applicationid);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetClientApplicationactivitylist(System.Guid applicationid) {
            return base.Channel.GetClientApplicationactivitylist(applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetClientApplicationactivitylistAsync(System.Guid applicationid) {
            return base.Channel.GetClientApplicationactivitylistAsync(applicationid);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ClientDatabase> GetDatabaseList(System.Guid userid) {
            return base.Channel.GetDatabaseList(userid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ClientDatabase>> GetDatabaseListAsync(System.Guid userid) {
            return base.Channel.GetDatabaseListAsync(userid);
        }
        
        public int SetDefaultRightsForDababase(System.Guid userId, System.Guid clientId) {
            return base.Channel.SetDefaultRightsForDababase(userId, clientId);
        }
        
        public System.Threading.Tasks.Task<int> SetDefaultRightsForDababaseAsync(System.Guid userId, System.Guid clientId) {
            return base.Channel.SetDefaultRightsForDababaseAsync(userId, clientId);
        }
        
        public int UpdateLicenseAgreed(System.Guid userId, System.Guid applicationId, bool IsAgreed) {
            return base.Channel.UpdateLicenseAgreed(userId, applicationId, IsAgreed);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLicenseAgreedAsync(System.Guid userId, System.Guid applicationId, bool IsAgreed) {
            return base.Channel.UpdateLicenseAgreedAsync(userId, applicationId, IsAgreed);
        }
        
        public int GetLicenseAgreed(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetLicenseAgreed(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> GetLicenseAgreedAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetLicenseAgreedAsync(userId, applicationId);
        }
        
        public string CreatePasswordHistory(System.Guid UserId, string Password, System.Guid CreatedBy) {
            return base.Channel.CreatePasswordHistory(UserId, Password, CreatedBy);
        }
        
        public System.Threading.Tasks.Task<string> CreatePasswordHistoryAsync(System.Guid UserId, string Password, System.Guid CreatedBy) {
            return base.Channel.CreatePasswordHistoryAsync(UserId, Password, CreatedBy);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Currency> GetAllCurrency() {
            return base.Channel.GetAllCurrency();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetAllCurrencyAsync() {
            return base.Channel.GetAllCurrencyAsync();
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Currency> GetClientCurrency(System.Guid clientId) {
            return base.Channel.GetClientCurrency(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Currency>> GetClientCurrencyAsync(System.Guid clientId) {
            return base.Channel.GetClientCurrencyAsync(clientId);
        }
        
        public bool DeleteExchangeRate(System.Guid clientId, string code) {
            return base.Channel.DeleteExchangeRate(clientId, code);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExchangeRateAsync(System.Guid clientId, string code) {
            return base.Channel.DeleteExchangeRateAsync(clientId, code);
        }
        
        public bool SaveClientCurrency(System.Collections.Generic.List<string> currencyIds, System.Guid clientId, System.Guid userId) {
            return base.Channel.SaveClientCurrency(currencyIds, clientId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveClientCurrencyAsync(System.Collections.Generic.List<string> currencyIds, System.Guid clientId, System.Guid userId) {
            return base.Channel.SaveClientCurrencyAsync(currencyIds, clientId, userId);
        }
        
        public bool SaveExchangeRate(Integration.BDSService.ExchangeRate_Log objExchnageRate) {
            return base.Channel.SaveExchangeRate(objExchnageRate);
        }
        
        public System.Threading.Tasks.Task<bool> SaveExchangeRateAsync(Integration.BDSService.ExchangeRate_Log objExchnageRate) {
            return base.Channel.SaveExchangeRateAsync(objExchnageRate);
        }
        
        public bool SaveExchangeRateList(System.Collections.Generic.List<Integration.BDSService.ExchangeRate_Log> lstExchnageRate) {
            return base.Channel.SaveExchangeRateList(lstExchnageRate);
        }
        
        public System.Threading.Tasks.Task<bool> SaveExchangeRateListAsync(System.Collections.Generic.List<Integration.BDSService.ExchangeRate_Log> lstExchnageRate) {
            return base.Channel.SaveExchangeRateListAsync(lstExchnageRate);
        }
        
        public Integration.BDSService.Currency GetCurrencyExchangeRate(System.Guid clientId, System.Guid UserId) {
            return base.Channel.GetCurrencyExchangeRate(clientId, UserId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Currency> GetCurrencyExchangeRateAsync(System.Guid clientId, System.Guid UserId) {
            return base.Channel.GetCurrencyExchangeRateAsync(clientId, UserId);
        }
        
        public Integration.BDSService.User ValidateUser(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.ValidateUser(applicationId, userEmail, userPassword);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserAsync(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.ValidateUserAsync(applicationId, userEmail, userPassword);
        }
        
        public Integration.BDSService.User Validate_User(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.Validate_User(applicationId, userEmail, userPassword);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> Validate_UserAsync(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.Validate_UserAsync(applicationId, userEmail, userPassword);
        }
        
        public Integration.BDSService.User Validate_UserOverAll(string userEmail, string userPassword) {
            return base.Channel.Validate_UserOverAll(userEmail, userPassword);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> Validate_UserOverAllAsync(string userEmail, string userPassword) {
            return base.Channel.Validate_UserOverAllAsync(userEmail, userPassword);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.AppConfiguration> ValidateAppConfiguration(System.Guid applicationId, string userEmail) {
            return base.Channel.ValidateAppConfiguration(applicationId, userEmail);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.AppConfiguration>> ValidateAppConfigurationAsync(System.Guid applicationId, string userEmail) {
            return base.Channel.ValidateAppConfigurationAsync(applicationId, userEmail);
        }
        
        public int LockUser(System.Guid applicationId, string userEmail) {
            return base.Channel.LockUser(applicationId, userEmail);
        }
        
        public System.Threading.Tasks.Task<int> LockUserAsync(System.Guid applicationId, string userEmail) {
            return base.Channel.LockUserAsync(applicationId, userEmail);
        }
        
        public Integration.BDSService.User ValidateUserByClient(System.Guid applicationId, string userEmail, string userPassword, System.Guid clientId) {
            return base.Channel.ValidateUserByClient(applicationId, userEmail, userPassword, clientId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserByClientAsync(System.Guid applicationId, string userEmail, string userPassword, System.Guid clientId) {
            return base.Channel.ValidateUserByClientAsync(applicationId, userEmail, userPassword, clientId);
        }
        
        public Integration.BDSService.User GetTeamMemberDetails(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetails(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetailsAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberList(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberList(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberListAsync(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Client> GetClientList() {
            return base.Channel.GetClientList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Client>> GetClientListAsync() {
            return base.Channel.GetClientListAsync();
        }
        
        public Integration.BDSService.Client GetClientById(System.Guid clientId) {
            return base.Channel.GetClientById(clientId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdAsync(System.Guid clientId) {
            return base.Channel.GetClientByIdAsync(clientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetails(string userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetails(userIdList, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsAsync(string userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetailsAsync(userIdList, applicationId);
        }
        
        public int ChangePassword(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel.ChangePassword(userId, newPassword, currPassword);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel.ChangePasswordAsync(userId, newPassword, currPassword);
        }
        
        public string _ChangePassword(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel._ChangePassword(userId, newPassword, currPassword);
        }
        
        public System.Threading.Tasks.Task<string> _ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel._ChangePasswordAsync(userId, newPassword, currPassword);
        }
        
        public bool CheckCurrentPassword(System.Guid userId, string currentPassword) {
            return base.Channel.CheckCurrentPassword(userId, currentPassword);
        }
        
        public System.Threading.Tasks.Task<bool> CheckCurrentPasswordAsync(System.Guid userId, string currentPassword) {
            return base.Channel.CheckCurrentPasswordAsync(userId, currentPassword);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Menu> GetMenu(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetMenu(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMenuAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetMenuAsync(ApplicationId, RoleId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Menu> GetAllMenu(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetAllMenu(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetAllMenuAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetAllMenuAsync(ApplicationId, RoleId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Menu> GetMeasureMenuforPlan(System.Guid ApplicationId) {
            return base.Channel.GetMeasureMenuforPlan(ApplicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMeasureMenuforPlanAsync(System.Guid ApplicationId) {
            return base.Channel.GetMeasureMenuforPlanAsync(ApplicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Permission> GetPermission(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetPermission(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Permission>> GetPermissionAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetPermissionAsync(ApplicationId, RoleId);
        }
        
        public bool CheckEmail(string email) {
            return base.Channel.CheckEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailAsync(string email) {
            return base.Channel.CheckEmailAsync(email);
        }
        
        public int DeleteUser(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUser(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserAsync(userId, applicationId);
        }
        
        public Integration.BDSService.User GetUserDetails(string userEmail) {
            return base.Channel.GetUserDetails(userEmail);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsAsync(string userEmail) {
            return base.Channel.GetUserDetailsAsync(userEmail);
        }
        
        public Integration.BDSService.User GetUserDetailsById(System.Guid userId) {
            return base.Channel.GetUserDetailsById(userId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsByIdAsync(System.Guid userId) {
            return base.Channel.GetUserDetailsByIdAsync(userId);
        }
        
        public int CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUser(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUserAsync(user, applicationId, createdBy);
        }
        
        public int _CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel._CreateUser(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> _CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel._CreateUserAsync(user, applicationId, createdBy);
        }
        
        public int CreateUserBasic(Integration.BDSService.User user, System.Guid createdBy) {
            return base.Channel.CreateUserBasic(user, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserBasicAsync(Integration.BDSService.User user, System.Guid createdBy) {
            return base.Channel.CreateUserBasicAsync(user, createdBy);
        }
        
        public int CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUserWithPermission(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUserWithPermissionAsync(user, applicationId, createdBy);
        }
        
        public string _CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel._CreateUserWithPermission(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<string> _CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel._CreateUserWithPermissionAsync(user, applicationId, createdBy);
        }
        
        public int UpdateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy) {
            return base.Channel.UpdateUser(user, applicationId, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy) {
            return base.Channel.UpdateUserAsync(user, applicationId, modifiedBy);
        }
        
        public int UpdateUserData(Integration.BDSService.User user, System.Guid modifiedBy) {
            return base.Channel.UpdateUserData(user, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserDataAsync(Integration.BDSService.User user, System.Guid modifiedBy) {
            return base.Channel.UpdateUserDataAsync(user, modifiedBy);
        }
        
        public int UpdateClientData(Integration.BDSService.Client client, System.Guid modifiedBy) {
            return base.Channel.UpdateClientData(client, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateClientDataAsync(Integration.BDSService.Client client, System.Guid modifiedBy) {
            return base.Channel.UpdateClientDataAsync(client, modifiedBy);
        }
        
        public string GetUserRole(System.Guid id, System.Guid applicationId, System.Guid ClientId) {
            return base.Channel.GetUserRole(id, applicationId, ClientId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserRoleAsync(System.Guid id, System.Guid applicationId, System.Guid ClientId) {
            return base.Channel.GetUserRoleAsync(id, applicationId, ClientId);
        }
        
        public string GetApplicationName(System.Guid applicationId) {
            return base.Channel.GetApplicationName(applicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationNameAsync(System.Guid applicationId) {
            return base.Channel.GetApplicationNameAsync(applicationId);
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> GetApplicationDictionary() {
            return base.Channel.GetApplicationDictionary();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.Guid, string>> GetApplicationDictionaryAsync() {
            return base.Channel.GetApplicationDictionaryAsync();
        }
        
        public string GetClientName(System.Guid userId) {
            return base.Channel.GetClientName(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid userId) {
            return base.Channel.GetClientNameAsync(userId);
        }
        
        public System.Collections.Generic.List<int> AllowedMenusForUser(System.Guid roleId) {
            return base.Channel.AllowedMenusForUser(roleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> AllowedMenusForUserAsync(System.Guid roleId) {
            return base.Channel.AllowedMenusForUserAsync(roleId);
        }
        
        public string GetMenuName(int menuId) {
            return base.Channel.GetMenuName(menuId);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuNameAsync(int menuId) {
            return base.Channel.GetMenuNameAsync(menuId);
        }
        
        public int ResetPassword(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPassword(userId, SingleHash_NewPassword);
        }
        
        public System.Threading.Tasks.Task<int> ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPasswordAsync(userId, SingleHash_NewPassword);
        }
        
        public string _ResetPassword(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel._ResetPassword(userId, SingleHash_NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> _ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel._ResetPasswordAsync(userId, SingleHash_NewPassword);
        }
        
        public Integration.BDSService.Role GetRoleDetails(System.Guid roleId) {
            return base.Channel.GetRoleDetails(roleId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Role> GetRoleDetailsAsync(System.Guid roleId) {
            return base.Channel.GetRoleDetailsAsync(roleId);
        }
        
        public int UpdateLastLoginDate(System.Guid userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDate(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLastLoginDateAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDateAsync(userId, applicationId);
        }
        
        public string CreatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.CreatePasswordResetRequest(objPasswordResetRequest);
        }
        
        public System.Threading.Tasks.Task<string> CreatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.CreatePasswordResetRequestAsync(objPasswordResetRequest);
        }
        
        public Integration.BDSService.PasswordResetRequest GetPasswordResetRequest(System.Guid PasswordResetRequestId) {
            return base.Channel.GetPasswordResetRequest(PasswordResetRequestId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.PasswordResetRequest> GetPasswordResetRequestAsync(System.Guid PasswordResetRequestId) {
            return base.Channel.GetPasswordResetRequestAsync(PasswordResetRequestId);
        }
        
        public int UpdatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.UpdatePasswordResetRequest(objPasswordResetRequest);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.UpdatePasswordResetRequestAsync(objPasswordResetRequest);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.SecurityQuestion> GetSecurityQuestion() {
            return base.Channel.GetSecurityQuestion();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.SecurityQuestion>> GetSecurityQuestionAsync() {
            return base.Channel.GetSecurityQuestionAsync();
        }
        
        public int UpdateUserSecurityQuestion(Integration.BDSService.User user) {
            return base.Channel.UpdateUserSecurityQuestion(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserSecurityQuestionAsync(Integration.BDSService.User user) {
            return base.Channel.UpdateUserSecurityQuestionAsync(user);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientId(System.Guid clientId) {
            return base.Channel.GetUserListByClientId(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdAsync(System.Guid clientId) {
            return base.Channel.GetUserListByClientIdAsync(clientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListComplete() {
            return base.Channel.GetUserListComplete();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListCompleteAsync() {
            return base.Channel.GetUserListCompleteAsync();
        }
        
        public string GetApplicationReleaseVersion(System.Guid applicationId) {
            return base.Channel.GetApplicationReleaseVersion(applicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationReleaseVersionAsync(System.Guid applicationId) {
            return base.Channel.GetApplicationReleaseVersionAsync(applicationId);
        }
        
        public System.Collections.Generic.List<string> GetUserActivityPermission(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermission(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermissionAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleList(System.Guid applicationid, System.Guid ClientId) {
            return base.Channel.GetAllRoleList(applicationid, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListAsync(System.Guid applicationid, System.Guid ClientId) {
            return base.Channel.GetAllRoleListAsync(applicationid, ClientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetUserApplicationactivitylist(System.Guid applicationid) {
            return base.Channel.GetUserApplicationactivitylist(applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetUserApplicationactivitylistAsync(System.Guid applicationid) {
            return base.Channel.GetUserApplicationactivitylistAsync(applicationid);
        }
        
        public int DuplicateRoleCheck(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID) {
            return base.Channel.DuplicateRoleCheck(role, applicationid, ClientID);
        }
        
        public System.Threading.Tasks.Task<int> DuplicateRoleCheckAsync(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID) {
            return base.Channel.DuplicateRoleCheckAsync(role, applicationid, ClientID);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetRoleMemberList(System.Guid applicationId, System.Guid roleid) {
            return base.Channel.GetRoleMemberList(applicationId, roleid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetRoleMemberListAsync(System.Guid applicationId, System.Guid roleid) {
            return base.Channel.GetRoleMemberListAsync(applicationId, roleid);
        }
        
        public int DeleteRoleAndReassign(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId) {
            return base.Channel.DeleteRoleAndReassign(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRoleAndReassignAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId) {
            return base.Channel.DeleteRoleAndReassignAsync(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public int CreateRole(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRole(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CreateRoleAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRoleAsync(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Guid CreateRoleWithoutPermission(string roledesc, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRoleWithoutPermission(roledesc, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateRoleWithoutPermissionAsync(string roledesc, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRoleWithoutPermissionAsync(roledesc, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public int CopyRole(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRole(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CopyRoleAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRoleAsync(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetRoleactivitypermissions(System.Guid roleid) {
            return base.Channel.GetRoleactivitypermissions(roleid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetRoleactivitypermissionsAsync(System.Guid roleid) {
            return base.Channel.GetRoleactivitypermissionsAsync(roleid);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivity(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivity(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionList(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionList(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionListAsync(userId, applicationId);
        }
        
        public int AddUserActivityPermissions(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissions(userId, CreatorId, permissions, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> AddUserActivityPermissionsAsync(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissionsAsync(userId, CreatorId, permissions, applicationId);
        }
        
        public int DeleteUserActivityPermission(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermission(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermissionAsync(userId, applicationId);
        }
        
        public int DeleteUserCustomrestriction(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestriction(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestrictionAsync(userId, applicationId);
        }
        
        public int resetToRoleDefault(System.Guid userId, System.Guid CretorId, System.Guid applicationId) {
            return base.Channel.resetToRoleDefault(userId, CretorId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> resetToRoleDefaultAsync(System.Guid userId, System.Guid CretorId, System.Guid applicationId) {
            return base.Channel.resetToRoleDefaultAsync(userId, CretorId, applicationId);
        }
    }
}
