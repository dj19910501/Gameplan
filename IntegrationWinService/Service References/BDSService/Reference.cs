//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationWinService.BDSService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BDSService.IBDSService")]
    public interface IBDSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUser", ReplyAction="http://tempuri.org/IBDSService/ValidateUserResponse")]
        Integration.BDSService.User ValidateUser(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ValidateUser", ReplyAction="http://tempuri.org/IBDSService/ValidateUserResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserAsync(System.Guid applicationId, string userEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberDetailsResponse")]
        Integration.BDSService.User GetTeamMemberDetails(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberList", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberList(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetTeamMemberList", ReplyAction="http://tempuri.org/IBDSService/GetTeamMemberListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientList", ReplyAction="http://tempuri.org/IBDSService/GetClientListResponse")]
        System.Collections.Generic.List<Integration.BDSService.Client> GetClientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientList", ReplyAction="http://tempuri.org/IBDSService/GetClientListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Client>> GetClientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientById", ReplyAction="http://tempuri.org/IBDSService/GetClientByIdResponse")]
        Integration.BDSService.Client GetClientById(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientById", ReplyAction="http://tempuri.org/IBDSService/GetClientByIdResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetailsResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetails(string userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetails", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberDetailsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsAsync(string userIdList, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ChangePassword", ReplyAction="http://tempuri.org/IBDSService/ChangePasswordResponse")]
        int ChangePassword(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ChangePassword", ReplyAction="http://tempuri.org/IBDSService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<int> ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckCurrentPassword", ReplyAction="http://tempuri.org/IBDSService/CheckCurrentPasswordResponse")]
        bool CheckCurrentPassword(System.Guid userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckCurrentPassword", ReplyAction="http://tempuri.org/IBDSService/CheckCurrentPasswordResponse")]
        System.Threading.Tasks.Task<bool> CheckCurrentPasswordAsync(System.Guid userId, string currentPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenu", ReplyAction="http://tempuri.org/IBDSService/GetMenuResponse")]
        System.Collections.Generic.List<Integration.BDSService.Menu> GetMenu(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenu", ReplyAction="http://tempuri.org/IBDSService/GetMenuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMenuAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllMenu", ReplyAction="http://tempuri.org/IBDSService/GetAllMenuResponse")]
        System.Collections.Generic.List<Integration.BDSService.Menu> GetAllMenu(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllMenu", ReplyAction="http://tempuri.org/IBDSService/GetAllMenuResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetAllMenuAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPermission", ReplyAction="http://tempuri.org/IBDSService/GetPermissionResponse")]
        System.Collections.Generic.List<Integration.BDSService.Permission> GetPermission(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPermission", ReplyAction="http://tempuri.org/IBDSService/GetPermissionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Permission>> GetPermissionAsync(System.Guid ApplicationId, System.Guid RoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckEmail", ReplyAction="http://tempuri.org/IBDSService/CheckEmailResponse")]
        bool CheckEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CheckEmail", ReplyAction="http://tempuri.org/IBDSService/CheckEmailResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUser", ReplyAction="http://tempuri.org/IBDSService/DeleteUserResponse")]
        int DeleteUser(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUser", ReplyAction="http://tempuri.org/IBDSService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetails", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsResponse")]
        Integration.BDSService.User GetUserDetails(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserDetails", ReplyAction="http://tempuri.org/IBDSService/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsAsync(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUser", ReplyAction="http://tempuri.org/IBDSService/CreateUserResponse")]
        int CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUser", ReplyAction="http://tempuri.org/IBDSService/CreateUserResponse")]
        System.Threading.Tasks.Task<int> CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/CreateUserWithPermissionResponse")]
        int CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy, string VerticalIds, string GeographyIds, string BusinessUnitIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateUserWithPermission", ReplyAction="http://tempuri.org/IBDSService/CreateUserWithPermissionResponse")]
        System.Threading.Tasks.Task<int> CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy, string VerticalIds, string GeographyIds, string BusinessUnitIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUser", ReplyAction="http://tempuri.org/IBDSService/UpdateUserResponse")]
        int UpdateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUser", ReplyAction="http://tempuri.org/IBDSService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserRole", ReplyAction="http://tempuri.org/IBDSService/GetUserRoleResponse")]
        string GetUserRole(System.Guid id, System.Guid applicationId, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserRole", ReplyAction="http://tempuri.org/IBDSService/GetUserRoleResponse")]
        System.Threading.Tasks.Task<string> GetUserRoleAsync(System.Guid id, System.Guid applicationId, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationName", ReplyAction="http://tempuri.org/IBDSService/GetApplicationNameResponse")]
        string GetApplicationName(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationName", ReplyAction="http://tempuri.org/IBDSService/GetApplicationNameResponse")]
        System.Threading.Tasks.Task<string> GetApplicationNameAsync(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientName", ReplyAction="http://tempuri.org/IBDSService/GetClientNameResponse")]
        string GetClientName(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientName", ReplyAction="http://tempuri.org/IBDSService/GetClientNameResponse")]
        System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AllowedMenusForUser", ReplyAction="http://tempuri.org/IBDSService/AllowedMenusForUserResponse")]
        System.Collections.Generic.List<int> AllowedMenusForUser(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AllowedMenusForUser", ReplyAction="http://tempuri.org/IBDSService/AllowedMenusForUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> AllowedMenusForUserAsync(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenuName", ReplyAction="http://tempuri.org/IBDSService/GetMenuNameResponse")]
        string GetMenuName(int menuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMenuName", ReplyAction="http://tempuri.org/IBDSService/GetMenuNameResponse")]
        System.Threading.Tasks.Task<string> GetMenuNameAsync(int menuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ResetPassword", ReplyAction="http://tempuri.org/IBDSService/ResetPasswordResponse")]
        int ResetPassword(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/ResetPassword", ReplyAction="http://tempuri.org/IBDSService/ResetPasswordResponse")]
        System.Threading.Tasks.Task<int> ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleDetails", ReplyAction="http://tempuri.org/IBDSService/GetRoleDetailsResponse")]
        Integration.BDSService.Role GetRoleDetails(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleDetails", ReplyAction="http://tempuri.org/IBDSService/GetRoleDetailsResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.Role> GetRoleDetailsAsync(System.Guid roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLastLoginDate", ReplyAction="http://tempuri.org/IBDSService/UpdateLastLoginDateResponse")]
        int UpdateLastLoginDate(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateLastLoginDate", ReplyAction="http://tempuri.org/IBDSService/UpdateLastLoginDateResponse")]
        System.Threading.Tasks.Task<int> UpdateLastLoginDateAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordResetRequestResponse")]
        string CreatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/CreatePasswordResetRequestResponse")]
        System.Threading.Tasks.Task<string> CreatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/GetPasswordResetRequestResponse")]
        Integration.BDSService.PasswordResetRequest GetPasswordResetRequest(System.Guid PasswordResetRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetPasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/GetPasswordResetRequestResponse")]
        System.Threading.Tasks.Task<Integration.BDSService.PasswordResetRequest> GetPasswordResetRequestAsync(System.Guid PasswordResetRequestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/UpdatePasswordResetRequestResponse")]
        int UpdatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdatePasswordResetRequest", ReplyAction="http://tempuri.org/IBDSService/UpdatePasswordResetRequestResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/GetSecurityQuestionResponse")]
        System.Collections.Generic.List<Integration.BDSService.SecurityQuestion> GetSecurityQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/GetSecurityQuestionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.SecurityQuestion>> GetSecurityQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/UpdateUserSecurityQuestionResponse")]
        int UpdateUserSecurityQuestion(Integration.BDSService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/UpdateUserSecurityQuestion", ReplyAction="http://tempuri.org/IBDSService/UpdateUserSecurityQuestionResponse")]
        System.Threading.Tasks.Task<int> UpdateUserSecurityQuestionAsync(Integration.BDSService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListByClientId", ReplyAction="http://tempuri.org/IBDSService/GetUserListByClientIdResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientId(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListByClientId", ReplyAction="http://tempuri.org/IBDSService/GetUserListByClientIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationReleaseVersion", ReplyAction="http://tempuri.org/IBDSService/GetApplicationReleaseVersionResponse")]
        string GetApplicationReleaseVersion(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetApplicationReleaseVersion", ReplyAction="http://tempuri.org/IBDSService/GetApplicationReleaseVersionResponse")]
        System.Threading.Tasks.Task<string> GetApplicationReleaseVersionAsync(System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityPermissionResponse")]
        System.Collections.Generic.List<string> GetUserActivityPermission(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityPermissionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllRoleList", ReplyAction="http://tempuri.org/IBDSService/GetAllRoleListResponse")]
        System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleList(System.Guid applicationid, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetAllRoleList", ReplyAction="http://tempuri.org/IBDSService/GetAllRoleListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListAsync(System.Guid applicationid, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetUserApplicationactivitylistResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetUserApplicationactivitylist(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetUserApplicationactivitylistResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetUserApplicationactivitylistAsync(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DuplicateRoleCheck", ReplyAction="http://tempuri.org/IBDSService/DuplicateRoleCheckResponse")]
        int DuplicateRoleCheck(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DuplicateRoleCheck", ReplyAction="http://tempuri.org/IBDSService/DuplicateRoleCheckResponse")]
        System.Threading.Tasks.Task<int> DuplicateRoleCheckAsync(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleMemberList", ReplyAction="http://tempuri.org/IBDSService/GetRoleMemberListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetRoleMemberList(System.Guid applicationId, System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleMemberList", ReplyAction="http://tempuri.org/IBDSService/GetRoleMemberListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetRoleMemberListAsync(System.Guid applicationId, System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteRoleAndReassign", ReplyAction="http://tempuri.org/IBDSService/DeleteRoleAndReassignResponse")]
        int DeleteRoleAndReassign(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteRoleAndReassign", ReplyAction="http://tempuri.org/IBDSService/DeleteRoleAndReassignResponse")]
        System.Threading.Tasks.Task<int> DeleteRoleAndReassignAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRole", ReplyAction="http://tempuri.org/IBDSService/CreateRoleResponse")]
        int CreateRole(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CreateRole", ReplyAction="http://tempuri.org/IBDSService/CreateRoleResponse")]
        System.Threading.Tasks.Task<int> CreateRoleAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRole", ReplyAction="http://tempuri.org/IBDSService/CopyRoleResponse")]
        int CopyRole(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/CopyRole", ReplyAction="http://tempuri.org/IBDSService/CopyRoleResponse")]
        System.Threading.Tasks.Task<int> CopyRoleAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleactivitypermissions", ReplyAction="http://tempuri.org/IBDSService/GetRoleactivitypermissionsResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetRoleactivitypermissions(System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetRoleactivitypermissions", ReplyAction="http://tempuri.org/IBDSService/GetRoleactivitypermissionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetRoleactivitypermissionsAsync(System.Guid roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivity", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivity(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserActivity", ReplyAction="http://tempuri.org/IBDSService/GetUserActivityResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserCustomRestrictionList", ReplyAction="http://tempuri.org/IBDSService/GetUserCustomRestrictionListResponse")]
        System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionList(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserCustomRestrictionList", ReplyAction="http://tempuri.org/IBDSService/GetUserCustomRestrictionListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AddUserActivityPermissions", ReplyAction="http://tempuri.org/IBDSService/AddUserActivityPermissionsResponse")]
        int AddUserActivityPermissions(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AddUserActivityPermissions", ReplyAction="http://tempuri.org/IBDSService/AddUserActivityPermissionsResponse")]
        System.Threading.Tasks.Task<int> AddUserActivityPermissionsAsync(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/DeleteUserActivityPermissionResponse")]
        int DeleteUserActivityPermission(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserActivityPermission", ReplyAction="http://tempuri.org/IBDSService/DeleteUserActivityPermissionResponse")]
        System.Threading.Tasks.Task<int> DeleteUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserCustomrestriction", ReplyAction="http://tempuri.org/IBDSService/DeleteUserCustomrestrictionResponse")]
        int DeleteUserCustomrestriction(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/DeleteUserCustomrestriction", ReplyAction="http://tempuri.org/IBDSService/DeleteUserCustomrestrictionResponse")]
        System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionAsync(System.Guid userId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/resetToRoleDefault", ReplyAction="http://tempuri.org/IBDSService/resetToRoleDefaultResponse")]
        int resetToRoleDefault(System.Guid userId, System.Guid CretorId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/resetToRoleDefault", ReplyAction="http://tempuri.org/IBDSService/resetToRoleDefaultResponse")]
        System.Threading.Tasks.Task<int> resetToRoleDefaultAsync(System.Guid userId, System.Guid CretorId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserHierarchy", ReplyAction="http://tempuri.org/IBDSService/GetUserHierarchyResponse")]
        System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchy(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserHierarchy", ReplyAction="http://tempuri.org/IBDSService/GetUserHierarchyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyAsync(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetManagerList", ReplyAction="http://tempuri.org/IBDSService/GetManagerListResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetManagerList(System.Guid clientId, System.Guid applicationId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetManagerList", ReplyAction="http://tempuri.org/IBDSService/GetManagerListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetOtherApplicationUsers", ReplyAction="http://tempuri.org/IBDSService/GetOtherApplicationUsersResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsers(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetOtherApplicationUsers", ReplyAction="http://tempuri.org/IBDSService/GetOtherApplicationUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersAsync(System.Guid clientId, System.Guid applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AssignUser", ReplyAction="http://tempuri.org/IBDSService/AssignUserResponse")]
        int AssignUser(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/AssignUser", ReplyAction="http://tempuri.org/IBDSService/AssignUserResponse")]
        System.Threading.Tasks.Task<int> AssignUserAsync(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictions", ReplyAction="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictionsResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictions(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictions", ReplyAction="http://tempuri.org/IBDSService/GetUserListWithCustomRestrictionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsAsync(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberName", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameResponse")]
        System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberName(string userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetMultipleTeamMemberName", ReplyAction="http://tempuri.org/IBDSService/GetMultipleTeamMemberNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameAsync(string userIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetClientApplicationactivitylistResponse")]
        System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetClientApplicationactivitylist(System.Guid applicationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBDSService/GetClientApplicationactivitylist", ReplyAction="http://tempuri.org/IBDSService/GetClientApplicationactivitylistResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetClientApplicationactivitylistAsync(System.Guid applicationid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBDSServiceChannel : IntegrationWinService.BDSService.IBDSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BDSServiceClient : System.ServiceModel.ClientBase<IntegrationWinService.BDSService.IBDSService>, IntegrationWinService.BDSService.IBDSService {
        
        public BDSServiceClient() {
        }
        
        public BDSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BDSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BDSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BDSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Integration.BDSService.User ValidateUser(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.ValidateUser(applicationId, userEmail, userPassword);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> ValidateUserAsync(System.Guid applicationId, string userEmail, string userPassword) {
            return base.Channel.ValidateUserAsync(applicationId, userEmail, userPassword);
        }
        
        public Integration.BDSService.User GetTeamMemberDetails(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetails(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetTeamMemberDetailsAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetTeamMemberDetailsAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetTeamMemberList(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberList(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetTeamMemberListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId, bool isSystemAdmin) {
            return base.Channel.GetTeamMemberListAsync(clientId, applicationId, userId, isSystemAdmin);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Client> GetClientList() {
            return base.Channel.GetClientList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Client>> GetClientListAsync() {
            return base.Channel.GetClientListAsync();
        }
        
        public Integration.BDSService.Client GetClientById(System.Guid clientId) {
            return base.Channel.GetClientById(clientId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Client> GetClientByIdAsync(System.Guid clientId) {
            return base.Channel.GetClientByIdAsync(clientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberDetails(string userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetails(userIdList, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberDetailsAsync(string userIdList, System.Guid applicationId) {
            return base.Channel.GetMultipleTeamMemberDetailsAsync(userIdList, applicationId);
        }
        
        public int ChangePassword(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel.ChangePassword(userId, newPassword, currPassword);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordAsync(System.Guid userId, string newPassword, string currPassword) {
            return base.Channel.ChangePasswordAsync(userId, newPassword, currPassword);
        }
        
        public bool CheckCurrentPassword(System.Guid userId, string currentPassword) {
            return base.Channel.CheckCurrentPassword(userId, currentPassword);
        }
        
        public System.Threading.Tasks.Task<bool> CheckCurrentPasswordAsync(System.Guid userId, string currentPassword) {
            return base.Channel.CheckCurrentPasswordAsync(userId, currentPassword);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Menu> GetMenu(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetMenu(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetMenuAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetMenuAsync(ApplicationId, RoleId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Menu> GetAllMenu(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetAllMenu(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Menu>> GetAllMenuAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetAllMenuAsync(ApplicationId, RoleId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Permission> GetPermission(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetPermission(ApplicationId, RoleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Permission>> GetPermissionAsync(System.Guid ApplicationId, System.Guid RoleId) {
            return base.Channel.GetPermissionAsync(ApplicationId, RoleId);
        }
        
        public bool CheckEmail(string email) {
            return base.Channel.CheckEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailAsync(string email) {
            return base.Channel.CheckEmailAsync(email);
        }
        
        public int DeleteUser(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUser(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserAsync(userId, applicationId);
        }
        
        public Integration.BDSService.User GetUserDetails(string userEmail) {
            return base.Channel.GetUserDetails(userEmail);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.User> GetUserDetailsAsync(string userEmail) {
            return base.Channel.GetUserDetailsAsync(userEmail);
        }
        
        public int CreateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUser(user, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.CreateUserAsync(user, applicationId, createdBy);
        }
        
        public int CreateUserWithPermission(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy, string VerticalIds, string GeographyIds, string BusinessUnitIds) {
            return base.Channel.CreateUserWithPermission(user, applicationId, createdBy, VerticalIds, GeographyIds, BusinessUnitIds);
        }
        
        public System.Threading.Tasks.Task<int> CreateUserWithPermissionAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid createdBy, string VerticalIds, string GeographyIds, string BusinessUnitIds) {
            return base.Channel.CreateUserWithPermissionAsync(user, applicationId, createdBy, VerticalIds, GeographyIds, BusinessUnitIds);
        }
        
        public int UpdateUser(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy) {
            return base.Channel.UpdateUser(user, applicationId, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(Integration.BDSService.User user, System.Guid applicationId, System.Guid modifiedBy) {
            return base.Channel.UpdateUserAsync(user, applicationId, modifiedBy);
        }
        
        public string GetUserRole(System.Guid id, System.Guid applicationId, System.Guid ClientId) {
            return base.Channel.GetUserRole(id, applicationId, ClientId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserRoleAsync(System.Guid id, System.Guid applicationId, System.Guid ClientId) {
            return base.Channel.GetUserRoleAsync(id, applicationId, ClientId);
        }
        
        public string GetApplicationName(System.Guid applicationId) {
            return base.Channel.GetApplicationName(applicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationNameAsync(System.Guid applicationId) {
            return base.Channel.GetApplicationNameAsync(applicationId);
        }
        
        public string GetClientName(System.Guid userId) {
            return base.Channel.GetClientName(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetClientNameAsync(System.Guid userId) {
            return base.Channel.GetClientNameAsync(userId);
        }
        
        public System.Collections.Generic.List<int> AllowedMenusForUser(System.Guid roleId) {
            return base.Channel.AllowedMenusForUser(roleId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> AllowedMenusForUserAsync(System.Guid roleId) {
            return base.Channel.AllowedMenusForUserAsync(roleId);
        }
        
        public string GetMenuName(int menuId) {
            return base.Channel.GetMenuName(menuId);
        }
        
        public System.Threading.Tasks.Task<string> GetMenuNameAsync(int menuId) {
            return base.Channel.GetMenuNameAsync(menuId);
        }
        
        public int ResetPassword(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPassword(userId, SingleHash_NewPassword);
        }
        
        public System.Threading.Tasks.Task<int> ResetPasswordAsync(System.Guid userId, string SingleHash_NewPassword) {
            return base.Channel.ResetPasswordAsync(userId, SingleHash_NewPassword);
        }
        
        public Integration.BDSService.Role GetRoleDetails(System.Guid roleId) {
            return base.Channel.GetRoleDetails(roleId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.Role> GetRoleDetailsAsync(System.Guid roleId) {
            return base.Channel.GetRoleDetailsAsync(roleId);
        }
        
        public int UpdateLastLoginDate(System.Guid userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDate(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLastLoginDateAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.UpdateLastLoginDateAsync(userId, applicationId);
        }
        
        public string CreatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.CreatePasswordResetRequest(objPasswordResetRequest);
        }
        
        public System.Threading.Tasks.Task<string> CreatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.CreatePasswordResetRequestAsync(objPasswordResetRequest);
        }
        
        public Integration.BDSService.PasswordResetRequest GetPasswordResetRequest(System.Guid PasswordResetRequestId) {
            return base.Channel.GetPasswordResetRequest(PasswordResetRequestId);
        }
        
        public System.Threading.Tasks.Task<Integration.BDSService.PasswordResetRequest> GetPasswordResetRequestAsync(System.Guid PasswordResetRequestId) {
            return base.Channel.GetPasswordResetRequestAsync(PasswordResetRequestId);
        }
        
        public int UpdatePasswordResetRequest(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.UpdatePasswordResetRequest(objPasswordResetRequest);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordResetRequestAsync(Integration.BDSService.PasswordResetRequest objPasswordResetRequest) {
            return base.Channel.UpdatePasswordResetRequestAsync(objPasswordResetRequest);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.SecurityQuestion> GetSecurityQuestion() {
            return base.Channel.GetSecurityQuestion();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.SecurityQuestion>> GetSecurityQuestionAsync() {
            return base.Channel.GetSecurityQuestionAsync();
        }
        
        public int UpdateUserSecurityQuestion(Integration.BDSService.User user) {
            return base.Channel.UpdateUserSecurityQuestion(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserSecurityQuestionAsync(Integration.BDSService.User user) {
            return base.Channel.UpdateUserSecurityQuestionAsync(user);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListByClientId(System.Guid clientId) {
            return base.Channel.GetUserListByClientId(clientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListByClientIdAsync(System.Guid clientId) {
            return base.Channel.GetUserListByClientIdAsync(clientId);
        }
        
        public string GetApplicationReleaseVersion(System.Guid applicationId) {
            return base.Channel.GetApplicationReleaseVersion(applicationId);
        }
        
        public System.Threading.Tasks.Task<string> GetApplicationReleaseVersionAsync(System.Guid applicationId) {
            return base.Channel.GetApplicationReleaseVersionAsync(applicationId);
        }
        
        public System.Collections.Generic.List<string> GetUserActivityPermission(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermission(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityPermissionAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.Role> GetAllRoleList(System.Guid applicationid, System.Guid ClientId) {
            return base.Channel.GetAllRoleList(applicationid, ClientId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.Role>> GetAllRoleListAsync(System.Guid applicationid, System.Guid ClientId) {
            return base.Channel.GetAllRoleListAsync(applicationid, ClientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetUserApplicationactivitylist(System.Guid applicationid) {
            return base.Channel.GetUserApplicationactivitylist(applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetUserApplicationactivitylistAsync(System.Guid applicationid) {
            return base.Channel.GetUserApplicationactivitylistAsync(applicationid);
        }
        
        public int DuplicateRoleCheck(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID) {
            return base.Channel.DuplicateRoleCheck(role, applicationid, ClientID);
        }
        
        public System.Threading.Tasks.Task<int> DuplicateRoleCheckAsync(Integration.BDSService.Role role, System.Guid applicationid, System.Guid ClientID) {
            return base.Channel.DuplicateRoleCheckAsync(role, applicationid, ClientID);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetRoleMemberList(System.Guid applicationId, System.Guid roleid) {
            return base.Channel.GetRoleMemberList(applicationId, roleid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetRoleMemberListAsync(System.Guid applicationId, System.Guid roleid) {
            return base.Channel.GetRoleMemberListAsync(applicationId, roleid);
        }
        
        public int DeleteRoleAndReassign(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId) {
            return base.Channel.DeleteRoleAndReassign(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRoleAndReassignAsync(System.Guid delroleid, System.Nullable<System.Guid> reassignroleid, System.Guid applicationid, System.Guid modifiedBy, System.Guid ClientId) {
            return base.Channel.DeleteRoleAndReassignAsync(delroleid, reassignroleid, applicationid, modifiedBy, ClientId);
        }
        
        public int CreateRole(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRole(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CreateRoleAsync(string roledesc, string permissionID, string colorcode, System.Guid applicationid, System.Guid createdby, System.Guid roleid, string delpermission, System.Guid ClientId) {
            return base.Channel.CreateRoleAsync(roledesc, permissionID, colorcode, applicationid, createdby, roleid, delpermission, ClientId);
        }
        
        public int CopyRole(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRole(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Threading.Tasks.Task<int> CopyRoleAsync(string copyroledesc, System.Guid originalid, System.Guid applicationid, System.Guid createdby, System.Guid ClientId) {
            return base.Channel.CopyRoleAsync(copyroledesc, originalid, applicationid, createdby, ClientId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetRoleactivitypermissions(System.Guid roleid) {
            return base.Channel.GetRoleactivitypermissions(roleid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetRoleactivitypermissionsAsync(System.Guid roleid) {
            return base.Channel.GetRoleactivitypermissionsAsync(roleid);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission> GetUserActivity(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivity(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserApplicationPermission>> GetUserActivityAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserActivityAsync(userId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.CustomRestriction> GetUserCustomRestrictionList(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionList(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.CustomRestriction>> GetUserCustomRestrictionListAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.GetUserCustomRestrictionListAsync(userId, applicationId);
        }
        
        public int AddUserActivityPermissions(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissions(userId, CreatorId, permissions, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> AddUserActivityPermissionsAsync(System.Guid userId, System.Guid CreatorId, System.Collections.Generic.List<string> permissions, System.Guid applicationId) {
            return base.Channel.AddUserActivityPermissionsAsync(userId, CreatorId, permissions, applicationId);
        }
        
        public int DeleteUserActivityPermission(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermission(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserActivityPermissionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserActivityPermissionAsync(userId, applicationId);
        }
        
        public int DeleteUserCustomrestriction(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestriction(userId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserCustomrestrictionAsync(System.Guid userId, System.Guid applicationId) {
            return base.Channel.DeleteUserCustomrestrictionAsync(userId, applicationId);
        }
        
        public int resetToRoleDefault(System.Guid userId, System.Guid CretorId, System.Guid applicationId) {
            return base.Channel.resetToRoleDefault(userId, CretorId, applicationId);
        }
        
        public System.Threading.Tasks.Task<int> resetToRoleDefaultAsync(System.Guid userId, System.Guid CretorId, System.Guid applicationId) {
            return base.Channel.resetToRoleDefaultAsync(userId, CretorId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.UserHierarchy> GetUserHierarchy(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchy(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.UserHierarchy>> GetUserHierarchyAsync(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetUserHierarchyAsync(clientId, applicationId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetManagerList(System.Guid clientId, System.Guid applicationId, System.Guid userId) {
            return base.Channel.GetManagerList(clientId, applicationId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetManagerListAsync(System.Guid clientId, System.Guid applicationId, System.Guid userId) {
            return base.Channel.GetManagerListAsync(clientId, applicationId, userId);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetOtherApplicationUsers(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsers(clientId, applicationId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetOtherApplicationUsersAsync(System.Guid clientId, System.Guid applicationId) {
            return base.Channel.GetOtherApplicationUsersAsync(clientId, applicationId);
        }
        
        public int AssignUser(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.AssignUser(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AssignUserAsync(System.Guid UserId, System.Guid RoleId, System.Guid applicationId, System.Guid createdBy) {
            return base.Channel.AssignUserAsync(UserId, RoleId, applicationId, createdBy);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetUserListWithCustomRestrictions(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictions(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetUserListWithCustomRestrictionsAsync(System.Guid userId, System.Guid clientId, System.Guid applicationId, System.Collections.Generic.Dictionary<string, string> customRestrictionFieldIds) {
            return base.Channel.GetUserListWithCustomRestrictionsAsync(userId, clientId, applicationId, customRestrictionFieldIds);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.User> GetMultipleTeamMemberName(string userIdList) {
            return base.Channel.GetMultipleTeamMemberName(userIdList);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.User>> GetMultipleTeamMemberNameAsync(string userIdList) {
            return base.Channel.GetMultipleTeamMemberNameAsync(userIdList);
        }
        
        public System.Collections.Generic.List<Integration.BDSService.ApplicationActivity> GetClientApplicationactivitylist(System.Guid applicationid) {
            return base.Channel.GetClientApplicationactivitylist(applicationid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Integration.BDSService.ApplicationActivity>> GetClientApplicationactivitylistAsync(System.Guid applicationid) {
            return base.Channel.GetClientApplicationactivitylistAsync(applicationid);
        }
    }
}
